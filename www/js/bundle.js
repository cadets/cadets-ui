/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};

	var phosphide = __webpack_require__(1)
	var tree = __webpack_require__(66).procTreeExtension
	var graph = __webpack_require__(69).provGraphExtension
	var menu = __webpack_require__(180).headerExtension

	var components = [tree, graph, menu]


	var app = new phosphide.Application({extensions: components});



	var ui = {
	  dp : __webpack_require__(30),
	  w  : __webpack_require__(20),
	  sp : __webpack_require__(32),
	  bp : __webpack_require__(4),
	  m : __webpack_require__(181),
	  sd : __webpack_require__(188)
	};

	function defineCommands() {
	  commands.addCommand('file:about', {
	    label: 'About',
	    mnemonic: 1,
	    icon: 'fa fa-about',
	    execute: function () {
	      console.log('About');
	    }
	  });
	}

	var logHandler = function(item) {
	  console.log(item.text);
	}

	function createFileMenu() {
	  var root = new ui.m.Menu([
	      new ui.m.MenuItem({
	        text: 'About',
	        shortcut: 'Ctrl+A',
	        icon: 'fa fa-info-circle',
	        handler: logHandler,
	      }),
	      new ui.m.MenuItem({
	        type: ui.m.MenuItem.Separator
	      }),
	      new ui.m.MenuItem({
	        text: 'Exit',
	        shortcut: 'Ctrl+X',
	        handler: logHandler,
	      }),
	  ]);
	  return root;
	}

	function main() {
	/*
	 *  var f_menu = createFileMenu();
	 *
	 *  var bar = new ui.m.MenuBar([
	 *    new ui.m.MenuItem({
	 *      text: 'File',
	 *      submenu: f_menu
	 *    })
	 *  ]);
	 *  bar.attach(document.getElementById('menubar-host'));
	 */

	  app.run().then(function() {
	  });

	}

	window.onload = main;


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2016, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	var applicationshell_1 = __webpack_require__(2);
	var extensionregistry_1 = __webpack_require__(50);
	var serviceregistry_1 = __webpack_require__(51);
	var commandregistry_1 = __webpack_require__(52);
	var paletteregistry_1 = __webpack_require__(53);
	var shortcutregistry_1 = __webpack_require__(61);
	/**
	 * A class which provides the main Phosphide application logic.
	 *
	 * A phosphide application manages the registration of services and
	 * extensions, and provides the top-level application shell widget.
	 */
	var Application = (function () {
	    /**
	     * Construct a new application.
	     *
	     * @param options - The options for initializing the application.
	     */
	    function Application(options) {
	        this._started = false;
	        this._promise = null;
	        this._shell = null;
	        this._commands = null;
	        this._palette = null;
	        this._shortcuts = null;
	        this._services = new serviceregistry_1.ServiceRegistry();
	        this._extensions = new extensionregistry_1.ExtensionRegistry();
	        if (options)
	            Private.initFrom(this, options);
	    }
	    Object.defineProperty(Application.prototype, "shell", {
	        /**
	         * Get the application shell widget.
	         *
	         * #### Notes
	         * The shell widget is not a service, and can only be accessed as a
	         * property of the application. Since the application object is not
	         * passed to service providers, services do not have access to the
	         * shell. This is by design. The intent is to encourage authors to
	         * maintain a distinct separation between generic services and the
	         * application extensions which manipulates the UI.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._shell;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Application.prototype, "commands", {
	        /**
	         * Get the application command registry.
	         *
	         * #### Notes
	         * The command registry is a service, and is provided as a property
	         * for the convenience of application extension authors. A service
	         * provider may require the command registry as needed.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._commands;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Application.prototype, "palette", {
	        /**
	         * Get the application palette registry.
	         *
	         * #### Notes
	         * The palette registry is a service, and is provided as a property
	         * for the convenience of application extension authors. A service
	         * provider may require the palette registry as needed.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._palette;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Application.prototype, "shortcuts", {
	        /**
	         * Get the application shortcut registry.
	         *
	         * #### Notes
	         * The shortcut registry is a service, and is provided as a property
	         * for the convenience of application extension authors. A service
	         * provider may require the shortcut registry as needed.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._shortcuts;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Register a service provider with the application.
	     *
	     * @param provider - The service provider to register.
	     *
	     * #### Notes
	     * An error will be thrown if a provider with the same id is already
	     * registered, if a provider which provides the identical service is
	     * already registered, or if the provider has a circular dependency.
	     */
	    Application.prototype.registerProvider = function (provider) {
	        this._services.registerProvider(provider);
	    };
	    /**
	     * List the IDs of all service providers in the application.
	     *
	     * @returns A new array of all provider IDs in the application.
	     */
	    Application.prototype.listProviders = function () {
	        return this._services.listProviders();
	    };
	    /**
	     * Test whether the application has a registered service provider.
	     *
	     * @param id - The id of the provider of interest.
	     *
	     * @returns `true` if a service provider with the specified id is
	     *   registered, `false` otherwise.
	     */
	    Application.prototype.hasProvider = function (id) {
	        return this._services.hasProvider(id);
	    };
	    /**
	     * Test whether the application has a provider for a service type.
	     *
	     * @param kind - The type of the service of interest.
	     *
	     * @returns `true` if a service provider is registered for the
	     *   given service type, `false` otherwise.
	     */
	    Application.prototype.hasProviderFor = function (kind) {
	        return this._services.hasProviderFor(kind);
	    };
	    /**
	     * Resolve a service implementation for the given type.
	     *
	     * @param kind - The type of service object to resolve.
	     *
	     * @returns A promise which resolves the specified service type,
	     *   or rejects with an error if it cannot be satisfied.
	     *
	     * #### Notes
	     * Services are singletons. The same service instance will be
	     * returned each time a given service type is resolved.
	     *
	     * User code will not normally call this method directly. Instead
	     * the required services for the user's providers and extensions
	     * will be resolved automatically as needed.
	     */
	    Application.prototype.resolveService = function (kind) {
	        return this._services.resolveService(kind);
	    };
	    /**
	     * Register an extension with the application.
	     *
	     * @param extension - The application extension to register.
	     *
	     * #### Notes
	     * An error will be thrown if the extension id is already registered.
	     */
	    Application.prototype.registerExtension = function (extension) {
	        this._extensions.registerExtension(extension);
	    };
	    /**
	     * List the IDs of all extensions in the application.
	     *
	     * @returns A new array of all extension IDs in the application.
	     */
	    Application.prototype.listExtensions = function () {
	        return this._extensions.listExtensions();
	    };
	    /**
	     * Test whether the application has a registered extension.
	     *
	     * @param id - The id of the extension of interest.
	     *
	     * @returns `true` if an application extension with the specified
	     *   id is registered, `false` otherwise.
	     */
	    Application.prototype.hasExtension = function (id) {
	        return this._extensions.hasExtension(id);
	    };
	    /**
	     * Activate the application extension with the given id.
	     *
	     * @param id - The ID of the extension of interest.
	     *
	     * @returns A promise which resolves when the extension is fully
	     *   activated or rejects with an error if it cannot be activated.
	     */
	    Application.prototype.activateExtension = function (id) {
	        return this._extensions.activateExtension(id, this, this._services);
	    };
	    /**
	     * Run the bootstrapping process for the application.
	     *
	     * @param options - The options for bootstrapping the application.
	     *
	     * @returns A promise which resolves when all bootstrapping work
	     *   is complete and the shell is mounted to the DOM, or rejects
	     *   with an error if the bootstrapping process fails.
	     *
	     * #### Notes
	     * This should be called once by the application creator after all
	     * initial providers and extensions have been registered.
	     *
	     * Bootstrapping the application consists of the following steps:
	     * 1. Create the application shell
	     * 2. Register the default providers
	     * 3. Register the default extensions
	     * 4. Resolve the application services
	     * 5. Activate the initial extensions
	     * 6. Attach the shell widget to the DOM
	     * 7. Add the application event listeners
	     */
	    Application.prototype.run = function (options) {
	        var _this = this;
	        if (options === void 0) { options = {}; }
	        // Resolve immediately if the application is already started.
	        if (this._started) {
	            return Promise.resolve();
	        }
	        // Return the pending bootstrapping promise if it exists.
	        if (this._promise) {
	            return this._promise;
	        }
	        // Create the application shell.
	        this._shell = this.createApplicationShell();
	        // Register the default providers.
	        this.registerDefaultProviders();
	        // Register the default extensions.
	        this.registerDefaultExtensions();
	        // Resolve the application services.
	        var promises = [
	            this.resolveService(commandregistry_1.ABCCommandRegistry),
	            this.resolveService(paletteregistry_1.ABCPaletteRegistry),
	            this.resolveService(shortcutregistry_1.ABCShortcutRegistry)
	        ];
	        // Setup the promise for the rest of the bootstrapping.
	        this._promise = Promise.all(promises).then(function (results) {
	            // Store the resolved default services.
	            _this._commands = results[0];
	            _this._palette = results[1];
	            _this._shortcuts = results[2];
	            // Compute the extension ids to activate.
	            var extIDs;
	            var optVal = options.activateExtensions;
	            if (optVal === true) {
	                extIDs = _this.listExtensions();
	            }
	            else if (optVal === false) {
	                extIDs = [];
	            }
	            else if (optVal) {
	                extIDs = optVal;
	            }
	            else {
	                extIDs = _this.listExtensions();
	            }
	            // Activate the initial extensions.
	            return Promise.all(extIDs.map(function (id) { return _this.activateExtension(id); }));
	        }).then(function () {
	            // Mark the application as started and clear the stored promise.
	            _this._promise = null;
	            _this._started = true;
	            // Compute the id of the shell host node.
	            var shellHostID = options.shellHostID || '';
	            // Attach the application shell to the host node.
	            _this.attachApplicationShell(shellHostID);
	            // Add the application event listeners.
	            _this.addEventsListeners();
	        }).catch(function (error) {
	            // Clear the stored promise.
	            _this._promise = null;
	            // Rethrow the error to reject the promise.
	            throw error;
	        });
	        // Return the pending bootstrapping promise.
	        return this._promise;
	    };
	    /**
	     * Handle the DOM events for the application.
	     *
	     * @param event - The DOM event sent to the application.
	     *
	     * #### Notes
	     * This method implements the DOM `EventListener` interface and is
	     * called in response to events registered for the application. It
	     * should not be called directly by user code.
	     */
	    Application.prototype.handleEvent = function (event) {
	        switch (event.type) {
	            case 'resize':
	                this.evtResize(event);
	                break;
	            case 'keydown':
	                this.evtKeydown(event);
	                break;
	        }
	    };
	    /**
	     * Create the shell widget for the application.
	     *
	     * @returns An instance of an application shell.
	     *
	     * #### Notes
	     * A subclass may reimplement this this method for a custom shell.
	     */
	    Application.prototype.createApplicationShell = function () {
	        return new applicationshell_1.ApplicationShell();
	    };
	    /**
	     * Register the default service providers for the application.
	     *
	     * #### Notes
	     * The default implementation of this method registers default
	     * providers for the `ABCCommandRegistry`, `ABCPaletteRegistry`,
	     * and `ABCShortcutRegistry` services, unless providers for these
	     * services have already been registered.
	     *
	     * A subclass may reimplement this this method to register custom
	     * default providers, but it should ensure that providers for the
	     * default services are also registered.
	     */
	    Application.prototype.registerDefaultProviders = function () {
	        if (!this.hasProviderFor(commandregistry_1.ABCCommandRegistry)) {
	            this.registerProvider(commandregistry_1.commandRegistryProvider);
	        }
	        if (!this.hasProviderFor(shortcutregistry_1.ABCShortcutRegistry)) {
	            this.registerProvider(shortcutregistry_1.shortcutRegistryProvider);
	        }
	        if (!this.hasProviderFor(paletteregistry_1.ABCPaletteRegistry)) {
	            this.registerProvider(paletteregistry_1.paletteRegistryProvider);
	        }
	    };
	    /**
	     * Register the default extensions for the application.
	     *
	     * #### Notes
	     * The default implementation of this method is a no-op.
	     *
	     * A subclass may reimplement this method as needed.
	     */
	    Application.prototype.registerDefaultExtensions = function () { };
	    /**
	     * Attach the application shell to the DOM.
	     *
	     * @param id - The id of the host node for shell, or `''`.
	     *
	     * #### Notes
	     * If the id is not provided, the document body will be the host.
	     *
	     * A subclass may reimplement this method for custom attachment.
	     */
	    Application.prototype.attachApplicationShell = function (id) {
	        this._shell.attach(id ? document.getElementById(id) : document.body);
	    };
	    /**
	     * Add the application event listeners.
	     *
	     * #### Notes
	     * The default implementation of this method listens for `'resize'`
	     * and `'keydown'` events.
	     *
	     * A subclass may reimplement this method as needed.
	     */
	    Application.prototype.addEventsListeners = function () {
	        document.addEventListener('keydown', this);
	        window.addEventListener('resize', this);
	    };
	    /**
	     * A method invoked on a document `'resize'` event.
	     *
	     * #### Notes
	     * The default implementation of this method updates the shell.
	     *
	     * A subclass may reimplement this method as needed.
	     */
	    Application.prototype.evtResize = function (event) {
	        this._shell.update();
	    };
	    /**
	     * A method invoked on a document `'keydown'` event.
	     *
	     * #### Notes
	     * The default implementation of this method invokes the key-down
	     * processing method of the shortcut manager.
	     *
	     * A subclass may reimplement this method as needed.
	     */
	    Application.prototype.evtKeydown = function (event) {
	        this._shortcuts.processKeydownEvent(event);
	    };
	    return Application;
	}());
	exports.Application = Application;
	/**
	 * The namespace for the application private data.
	 */
	var Private;
	(function (Private) {
	    /**
	     * Initialize an application with the given options object.
	     */
	    function initFrom(app, options) {
	        var providers = options.providers || [];
	        var extensions = options.extensions || [];
	        providers.forEach(function (p) { app.registerProvider(p); });
	        extensions.forEach(function (e) { app.registerExtension(e); });
	    }
	    Private.initFrom = initFrom;
	})(Private || (Private = {}));


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2016, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	var arrays = __webpack_require__(3);
	var phosphor_boxpanel_1 = __webpack_require__(4);
	var phosphor_dockpanel_1 = __webpack_require__(30);
	var phosphor_panel_1 = __webpack_require__(18);
	var phosphor_splitpanel_1 = __webpack_require__(32);
	var phosphor_stackedpanel_1 = __webpack_require__(37);
	var phosphor_widget_1 = __webpack_require__(20);
	var sidebar_1 = __webpack_require__(47);
	/**
	 * The class name added to AppShell instances.
	 */
	var APPLICATION_SHELL_CLASS = 'p-ApplicationShell';
	/**
	 *
	 */
	var ApplicationShell = (function (_super) {
	    __extends(ApplicationShell, _super);
	    /**
	     * Construct a new application shell.
	     */
	    function ApplicationShell() {
	        _super.call(this);
	        this.addClass(APPLICATION_SHELL_CLASS);
	        var topPanel = new phosphor_panel_1.Panel();
	        var hboxPanel = new phosphor_boxpanel_1.BoxPanel();
	        var dockPanel = new phosphor_dockpanel_1.DockPanel();
	        var hsplitPanel = new phosphor_splitpanel_1.SplitPanel();
	        var leftHandler = new SideBarHandler('left');
	        var rightHandler = new SideBarHandler('right');
	        var rootLayout = new phosphor_boxpanel_1.BoxLayout();
	        this._topPanel = topPanel;
	        this._hboxPanel = hboxPanel;
	        this._dockPanel = dockPanel;
	        this._hsplitPanel = hsplitPanel;
	        this._leftHandler = leftHandler;
	        this._rightHandler = rightHandler;
	        // TODO fix these
	        topPanel.id = 'p-top-panel';
	        hsplitPanel.id = 'p-main-split-panel';
	        leftHandler.sideBar.addClass('p-mod-left');
	        rightHandler.sideBar.addClass('p-mod-right');
	        leftHandler.stackedPanel.id = 'p-left-stack';
	        rightHandler.stackedPanel.id = 'p-right-stack';
	        dockPanel.id = 'p-main-dock-panel';
	        dockPanel.spacing = 8; // TODO make this configurable?
	        hsplitPanel.orientation = phosphor_splitpanel_1.SplitPanel.Horizontal;
	        hsplitPanel.spacing = 1; // TODO make this configurable?
	        phosphor_splitpanel_1.SplitPanel.setStretch(leftHandler.stackedPanel, 0);
	        phosphor_splitpanel_1.SplitPanel.setStretch(dockPanel, 1);
	        phosphor_splitpanel_1.SplitPanel.setStretch(rightHandler.stackedPanel, 0);
	        hsplitPanel.addChild(leftHandler.stackedPanel);
	        hsplitPanel.addChild(dockPanel);
	        hsplitPanel.addChild(rightHandler.stackedPanel);
	        hboxPanel.direction = phosphor_boxpanel_1.BoxPanel.LeftToRight;
	        hboxPanel.spacing = 0; // TODO make this configurable?
	        phosphor_boxpanel_1.BoxPanel.setStretch(leftHandler.sideBar, 0);
	        phosphor_boxpanel_1.BoxPanel.setStretch(hsplitPanel, 1);
	        phosphor_boxpanel_1.BoxPanel.setStretch(rightHandler.sideBar, 0);
	        hboxPanel.addChild(leftHandler.sideBar);
	        hboxPanel.addChild(hsplitPanel);
	        hboxPanel.addChild(rightHandler.sideBar);
	        rootLayout.direction = phosphor_boxpanel_1.BoxLayout.TopToBottom;
	        rootLayout.spacing = 0; // TODO make this configurable?
	        phosphor_boxpanel_1.BoxLayout.setStretch(topPanel, 0);
	        phosphor_boxpanel_1.BoxLayout.setStretch(hboxPanel, 1);
	        rootLayout.addChild(topPanel);
	        rootLayout.addChild(hboxPanel);
	        this.layout = rootLayout;
	    }
	    /**
	     * Add a widget to the top content area.
	     */
	    ApplicationShell.prototype.addToTopArea = function (widget, options) {
	        if (options === void 0) { options = {}; }
	        if (!widget.id) {
	            console.error('widgets added to app shell must have unique id property');
	            return;
	        }
	        // Temporary: widgets are added to the panel in order of insertion.
	        this._topPanel.addChild(widget);
	    };
	    /**
	     * Add a widget to the left content area.
	     */
	    ApplicationShell.prototype.addToLeftArea = function (widget, options) {
	        if (options === void 0) { options = {}; }
	        if (!widget.id) {
	            console.error('widgets added to app shell must have unique id property');
	            return;
	        }
	        var rank = 'rank' in options ? options.rank : 100;
	        this._leftHandler.addWidget(widget, rank);
	    };
	    /**
	     * Add a widget to the right content area.
	     */
	    ApplicationShell.prototype.addToRightArea = function (widget, options) {
	        if (options === void 0) { options = {}; }
	        if (!widget.id) {
	            console.error('widgets added to app shell must have unique id property');
	            return;
	        }
	        var rank = 'rank' in options ? options.rank : 100;
	        this._rightHandler.addWidget(widget, rank);
	    };
	    /**
	     * Add a widget to the main content area.
	     */
	    ApplicationShell.prototype.addToMainArea = function (widget, options) {
	        if (options === void 0) { options = {}; }
	        // TODO
	        if (!widget.id) {
	            console.error('widgets added to app shell must have unique id property');
	            return;
	        }
	        this._dockPanel.insertTabAfter(widget);
	    };
	    /**
	     *
	     */
	    ApplicationShell.prototype.activateLeft = function (id) {
	        this._leftHandler.activate(id);
	    };
	    /**
	     *
	     */
	    ApplicationShell.prototype.activateRight = function (id) {
	        this._rightHandler.activate(id);
	    };
	    /**
	     *
	     */
	    ApplicationShell.prototype.activateMain = function (id) {
	        // TODO
	    };
	    /**
	     *
	     */
	    ApplicationShell.prototype.collapseLeft = function () {
	        this._leftHandler.collapse();
	    };
	    /**
	     *
	     */
	    ApplicationShell.prototype.collapseRight = function () {
	        this._rightHandler.collapse();
	    };
	    return ApplicationShell;
	}(phosphor_widget_1.Widget));
	exports.ApplicationShell = ApplicationShell;
	/**
	 * A class which manages a side bar and related stacked panel.
	 */
	var SideBarHandler = (function () {
	    /**
	     * Construct a new side bar handler.
	     */
	    function SideBarHandler(side) {
	        this._items = [];
	        this._side = side;
	        this._sideBar = new sidebar_1.SideBar();
	        this._stackedPanel = new phosphor_stackedpanel_1.StackedPanel();
	        this._sideBar.hide();
	        this._stackedPanel.hide();
	        this._sideBar.currentChanged.connect(this._onCurrentChanged, this);
	        this._stackedPanel.widgetRemoved.connect(this._onWidgetRemoved, this);
	    }
	    /**
	     * A less-than comparison function for side bar rank items.
	     */
	    SideBarHandler.itemCmp = function (first, second) {
	        return first.rank < second.rank;
	    };
	    Object.defineProperty(SideBarHandler.prototype, "sideBar", {
	        /**
	         * Get the side bar managed by the handler.
	         */
	        get: function () {
	            return this._sideBar;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SideBarHandler.prototype, "stackedPanel", {
	        /**
	         * Get the stacked panel managed by the handler
	         */
	        get: function () {
	            return this._stackedPanel;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Activate a widget residing in the side bar by ID.
	     *
	     * @param id - The widget's unique ID.
	     */
	    SideBarHandler.prototype.activate = function (id) {
	        var widget = this._findWidgetByID(id);
	        if (widget)
	            this._sideBar.currentTitle = widget.title;
	    };
	    /**
	     * Collapse the sidebar so no items are expanded.
	     */
	    SideBarHandler.prototype.collapse = function () {
	        this._sideBar.currentTitle = null;
	    };
	    /**
	     * Add a widget and its title to the stacked panel and side bar.
	     *
	     * If the widget is already added, it will be moved.
	     */
	    SideBarHandler.prototype.addWidget = function (widget, rank) {
	        widget.parent = null;
	        widget.hide();
	        var item = { widget: widget, rank: rank };
	        var index = this._findInsertIndex(item);
	        arrays.insert(this._items, index, item);
	        this._stackedPanel.insertChild(index, widget);
	        this._sideBar.insertTitle(index, widget.title);
	        this._refreshVisibility();
	    };
	    /**
	     * Find the insertion index for a rank item.
	     */
	    SideBarHandler.prototype._findInsertIndex = function (item) {
	        return arrays.upperBound(this._items, item, SideBarHandler.itemCmp);
	    };
	    /**
	     * Find the index of the item with the given widget, or `-1`.
	     */
	    SideBarHandler.prototype._findWidgetIndex = function (widget) {
	        return arrays.findIndex(this._items, function (item) { return item.widget === widget; });
	    };
	    /**
	     * Find the widget which owns the given title, or `null`.
	     */
	    SideBarHandler.prototype._findWidgetByTitle = function (title) {
	        var item = arrays.find(this._items, function (item) { return item.widget.title === title; });
	        return item ? item.widget : null;
	    };
	    /**
	     * Find the widget with the given id, or `null`.
	     */
	    SideBarHandler.prototype._findWidgetByID = function (id) {
	        var item = arrays.find(this._items, function (item) { return item.widget.id === id; });
	        return item ? item.widget : null;
	    };
	    /**
	     * Refresh the visibility of the side bar and stacked panel.
	     */
	    SideBarHandler.prototype._refreshVisibility = function () {
	        this._sideBar.setHidden(this._sideBar.titleCount() === 0);
	        this._stackedPanel.setHidden(this._sideBar.currentTitle === null);
	    };
	    /**
	     * Handle the `currentChanged` signal from the sidebar.
	     */
	    SideBarHandler.prototype._onCurrentChanged = function (sender, args) {
	        var oldWidget = this._findWidgetByTitle(args.oldValue);
	        var newWidget = this._findWidgetByTitle(args.newValue);
	        if (oldWidget)
	            oldWidget.hide();
	        if (newWidget)
	            newWidget.show();
	        if (newWidget) {
	            document.body.dataset[(this._side + "Area")] = newWidget.id;
	        }
	        else {
	            delete document.body.dataset[(this._side + "Area")];
	        }
	        this._refreshVisibility();
	    };
	    /*
	     * Handle the `widgetRemoved` signal from the stacked panel.
	     */
	    SideBarHandler.prototype._onWidgetRemoved = function (sender, widget) {
	        arrays.removeAt(this._items, this._findWidgetIndex(widget));
	        this._sideBar.removeTitle(widget.title);
	        this._refreshVisibility();
	    };
	    return SideBarHandler;
	}());


/***/ },
/* 3 */
/***/ function(module, exports) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	/**
	 * Execute a callback for each element in an array.
	 *
	 * @param array - The array of values to iterate.
	 *
	 * @param callback - The callback to invoke for the array elements.
	 *
	 * @param fromIndex - The starting index for iteration.
	 *
	 * @param wrap - Whether iteration wraps around at the end of the array.
	 *
	 * @returns The first value returned by `callback` which is not
	 *   equal to `undefined`, or `undefined` if the callback does
	 *   not return a value or if the start index is out of range.
	 *
	 * #### Notes
	 * It is not safe to modify the size of the array while iterating.
	 *
	 * #### Example
	 * ```typescript
	 * import * as arrays from 'phosphor-arrays';
	 *
	 * function logger(value: number): void {
	 *   console.log(value);
	 * }
	 *
	 * let data = [1, 2, 3, 4];
	 * arrays.forEach(data, logger);           // logs 1, 2, 3, 4
	 * arrays.forEach(data, logger, 2);        // logs 3, 4
	 * arrays.forEach(data, logger, 2, true);  // logs 3, 4, 1, 2
	 * arrays.forEach(data, (v, i) => {        // 2
	 *   if (v === 3) return i;
	 * });
	 * ```
	 *
	 * **See also** [[rforEach]]
	 */
	function forEach(array, callback, fromIndex, wrap) {
	    if (fromIndex === void 0) { fromIndex = 0; }
	    if (wrap === void 0) { wrap = false; }
	    var start = fromIndex | 0;
	    if (start < 0 || start >= array.length) {
	        return void 0;
	    }
	    if (wrap) {
	        for (var i = 0, n = array.length; i < n; ++i) {
	            var j = (start + i) % n;
	            var result = callback(array[j], j);
	            if (result !== void 0)
	                return result;
	        }
	    }
	    else {
	        for (var i = start, n = array.length; i < n; ++i) {
	            var result = callback(array[i], i);
	            if (result !== void 0)
	                return result;
	        }
	    }
	    return void 0;
	}
	exports.forEach = forEach;
	/**
	 * Execute a callback for each element in an array, in reverse.
	 *
	 * @param array - The array of values to iterate.
	 *
	 * @param callback - The callback to invoke for the array elements.
	 *
	 * @param fromIndex - The starting index for iteration.
	 *
	 * @param wrap - Whether iteration wraps around at the end of the array.
	 *
	 * @returns The first value returned by `callback` which is not
	 *   equal to `undefined`, or `undefined` if the callback does
	 *   not return a value or if the start index is out of range.
	 *
	 * #### Notes
	 * It is not safe to modify the size of the array while iterating.
	 *
	 * #### Example
	 * ```typescript
	 * import * as arrays from 'phosphor-arrays';
	 *
	 * function logger(value: number): void {
	 *   console.log(value);
	 * }
	 *
	 * let data = [1, 2, 3, 4];
	 * arrays.rforEach(data, logger);           // logs 4, 3, 2, 1
	 * arrays.rforEach(data, logger, 2);        // logs 3, 2, 1
	 * arrays.rforEach(data, logger, 2, true);  // logs 3, 2, 1, 4
	 * arrays.rforEach(data, (v, i) => {        // 2
	 *   if (v === 3) return i;
	 * });
	 * ```
	 * **See also** [[forEach]]
	 */
	function rforEach(array, callback, fromIndex, wrap) {
	    if (fromIndex === void 0) { fromIndex = array.length - 1; }
	    if (wrap === void 0) { wrap = false; }
	    var start = fromIndex | 0;
	    if (start < 0 || start >= array.length) {
	        return void 0;
	    }
	    if (wrap) {
	        for (var i = 0, n = array.length; i < n; ++i) {
	            var j = (start - i + n) % n;
	            var result = callback(array[j], j);
	            if (result !== void 0)
	                return result;
	        }
	    }
	    else {
	        for (var i = start; i >= 0; --i) {
	            var result = callback(array[i], i);
	            if (result !== void 0)
	                return result;
	        }
	    }
	    return void 0;
	}
	exports.rforEach = rforEach;
	/**
	 * Find the index of the first value which matches a predicate.
	 *
	 * @param array - The array of values to be searched.
	 *
	 * @param pred - The predicate function to apply to the values.
	 *
	 * @param fromIndex - The starting index of the search.
	 *
	 * @param wrap - Whether the search wraps around at the end of the array.
	 *
	 * @returns The index of the first matching value, or `-1` if no value
	 *   matches the predicate or if the start index is out of range.
	 *
	 * #### Notes
	 * It is not safe to modify the size of the array while iterating.
	 *
	 * #### Example
	 * ```typescript
	 * import * as arrays from 'phosphor-arrays';
	 *
	 * function isEven(value: number): boolean {
	 *   return value % 2 === 0;
	 * }
	 *
	 * let data = [1, 2, 3, 4, 3, 2, 1];
	 * arrays.findIndex(data, isEven);           // 1
	 * arrays.findIndex(data, isEven, 4);        // 5
	 * arrays.findIndex(data, isEven, 6);        // -1
	 * arrays.findIndex(data, isEven, 6, true);  // 1
	 * ```
	 *
	 * **See also** [[rfindIndex]].
	 */
	function findIndex(array, pred, fromIndex, wrap) {
	    if (fromIndex === void 0) { fromIndex = 0; }
	    if (wrap === void 0) { wrap = false; }
	    var start = fromIndex | 0;
	    if (start < 0 || start >= array.length) {
	        return -1;
	    }
	    if (wrap) {
	        for (var i = 0, n = array.length; i < n; ++i) {
	            var j = (start + i) % n;
	            if (pred(array[j], j))
	                return j;
	        }
	    }
	    else {
	        for (var i = start, n = array.length; i < n; ++i) {
	            if (pred(array[i], i))
	                return i;
	        }
	    }
	    return -1;
	}
	exports.findIndex = findIndex;
	/**
	 * Find the index of the last value which matches a predicate.
	 *
	 * @param array - The array of values to be searched.
	 *
	 * @param pred - The predicate function to apply to the values.
	 *
	 * @param fromIndex - The starting index of the search.
	 *
	 * @param wrap - Whether the search wraps around at the front of the array.
	 *
	 * @returns The index of the last matching value, or `-1` if no value
	 *   matches the predicate or if the start index is out of range.
	 *
	 * #### Notes
	 * It is not safe to modify the size of the array while iterating.
	 *
	 * #### Example
	 * ```typescript
	 * import * as arrays from 'phosphor-arrays';
	 *
	 * function isEven(value: number): boolean {
	 *   return value % 2 === 0;
	 * }
	 *
	 * let data = [1, 2, 3, 4, 3, 2, 1];
	 * arrays.rfindIndex(data, isEven);           // 5
	 * arrays.rfindIndex(data, isEven, 4);        // 3
	 * arrays.rfindIndex(data, isEven, 0);        // -1
	 * arrays.rfindIndex(data, isEven, 0, true);  // 5
	 * ```
	 *
	 * **See also** [[findIndex]].
	 */
	function rfindIndex(array, pred, fromIndex, wrap) {
	    if (fromIndex === void 0) { fromIndex = array.length - 1; }
	    if (wrap === void 0) { wrap = false; }
	    var start = fromIndex | 0;
	    if (start < 0 || start >= array.length) {
	        return -1;
	    }
	    if (wrap) {
	        for (var i = 0, n = array.length; i < n; ++i) {
	            var j = (start - i + n) % n;
	            if (pred(array[j], j))
	                return j;
	        }
	    }
	    else {
	        for (var i = start; i >= 0; --i) {
	            if (pred(array[i], i))
	                return i;
	        }
	    }
	    return -1;
	}
	exports.rfindIndex = rfindIndex;
	/**
	 * Find the first value which matches a predicate.
	 *
	 * @param array - The array of values to be searched.
	 *
	 * @param pred - The predicate function to apply to the values.
	 *
	 * @param fromIndex - The starting index of the search.
	 *
	 * @param wrap - Whether the search wraps around at the end of the array.
	 *
	 * @returns The first matching value, or `undefined` if no value matches
	 *   the predicate or if the start index is out of range.
	 *
	 * #### Notes
	 * It is not safe to modify the size of the array while iterating.
	 *
	 * #### Example
	 * ```typescript
	 * import * as arrays from 'phosphor-arrays';
	 *
	 * function isEven(value: number): boolean {
	 *   return value % 2 === 0;
	 * }
	 *
	 * let data = [1, 2, 3, 4, 3, 2, 1];
	 * arrays.find(data, isEven);           // 2
	 * arrays.find(data, isEven, 4);        // 2
	 * arrays.find(data, isEven, 6);        // undefined
	 * arrays.find(data, isEven, 6, true);  // 2
	 * ```
	 *
	 * **See also** [[rfind]].
	 */
	function find(array, pred, fromIndex, wrap) {
	    var i = findIndex(array, pred, fromIndex, wrap);
	    return i !== -1 ? array[i] : void 0;
	}
	exports.find = find;
	/**
	 * Find the last value which matches a predicate.
	 *
	 * @param array - The array of values to be searched.
	 *
	 * @param pred - The predicate function to apply to the values.
	 *
	 * @param fromIndex - The starting index of the search.
	 *
	 * @param wrap - Whether the search wraps around at the front of the array.
	 *
	 * @returns The last matching value, or `undefined` if no value matches
	 *   the predicate or if the start index is out of range.
	 *
	 * #### Notes
	 * The range of visited indices is set before the first invocation of
	 * `pred`. It is not safe for `pred` to change the length of `array`.
	 *
	 * #### Example
	 * ```typescript
	 * import * as arrays from 'phosphor-arrays';
	 *
	 * function isEven(value: number): boolean {
	 *   return value % 2 === 0;
	 * }
	 *
	 * let data = [1, 2, 3, 4, 3, 2, 1];
	 * arrays.rfind(data, isEven);           // 2
	 * arrays.rfind(data, isEven, 4);        // 4
	 * arrays.rfind(data, isEven, 0);        // undefined
	 * arrays.rfind(data, isEven, 0, true);  // 2
	 * ```
	 *
	 * **See also** [[find]].
	 */
	function rfind(array, pred, fromIndex, wrap) {
	    var i = rfindIndex(array, pred, fromIndex, wrap);
	    return i !== -1 ? array[i] : void 0;
	}
	exports.rfind = rfind;
	/**
	 * Insert an element into an array at a specified index.
	 *
	 * @param array - The array of values to modify.
	 *
	 * @param index - The index at which to insert the value. This value
	 *   is clamped to the bounds of the array.
	 *
	 * @param value - The value to insert into the array.
	 *
	 * @returns The index at which the value was inserted.
	 *
	 * #### Example
	 * ```typescript
	 * import * as arrays from 'phosphor-arrays';
	 *
	 * let data = [0, 1, 2, 3, 4];
	 * arrays.insert(data, 0, 12);  // 0
	 * arrays.insert(data, 3, 42);  // 3
	 * arrays.insert(data, -9, 9);  // 0
	 * arrays.insert(data, 12, 8);  // 8
	 * console.log(data);           // [9, 12, 0, 1, 42, 2, 3, 4, 8]
	 * ```
	 *
	 * **See also** [[removeAt]] and [[remove]]
	 */
	function insert(array, index, value) {
	    var j = Math.max(0, Math.min(index | 0, array.length));
	    for (var i = array.length; i > j; --i) {
	        array[i] = array[i - 1];
	    }
	    array[j] = value;
	    return j;
	}
	exports.insert = insert;
	/**
	 * Move an element in an array from one index to another.
	 *
	 * @param array - The array of values to modify.
	 *
	 * @param fromIndex - The index of the element to move.
	 *
	 * @param toIndex - The target index of the element.
	 *
	 * @returns `true` if the element was moved, or `false` if either
	 *   index is out of range.
	 *
	 * #### Example
	 * ```typescript
	 * import * as arrays from 'phosphor-arrays';
	 *
	 * let data = [0, 1, 2, 3, 4];
	 * arrays.move(data, 1, 2);   // true
	 * arrays.move(data, -1, 0);  // false
	 * arrays.move(data, 4, 2);   // true
	 * arrays.move(data, 10, 0);  // false
	 * console.log(data);         // [0, 2, 4, 1, 3]
	 * ```
	 */
	function move(array, fromIndex, toIndex) {
	    var j = fromIndex | 0;
	    if (j < 0 || j >= array.length) {
	        return false;
	    }
	    var k = toIndex | 0;
	    if (k < 0 || k >= array.length) {
	        return false;
	    }
	    var value = array[j];
	    if (j > k) {
	        for (var i = j; i > k; --i) {
	            array[i] = array[i - 1];
	        }
	    }
	    else if (j < k) {
	        for (var i = j; i < k; ++i) {
	            array[i] = array[i + 1];
	        }
	    }
	    array[k] = value;
	    return true;
	}
	exports.move = move;
	/**
	 * Remove an element from an array at a specified index.
	 *
	 * @param array - The array of values to modify.
	 *
	 * @param index - The index of the element to remove.
	 *
	 * @returns The removed value, or `undefined` if the index is out
	 *   of range.
	 *
	 * #### Example
	 * ```typescript
	 * import * as arrays from 'phosphor-arrays';
	 *
	 * let data = [0, 1, 2, 3, 4];
	 * arrays.removeAt(data, 1);   // 1
	 * arrays.removeAt(data, 3);   // 4
	 * arrays.removeAt(data, 10);  // undefined
	 * console.log(data);          // [0, 2, 3]
	 * ```
	 *
	 * **See also** [[remove]] and [[insert]]
	 */
	function removeAt(array, index) {
	    var j = index | 0;
	    if (j < 0 || j >= array.length) {
	        return void 0;
	    }
	    var value = array[j];
	    for (var i = j + 1, n = array.length; i < n; ++i) {
	        array[i - 1] = array[i];
	    }
	    array.length -= 1;
	    return value;
	}
	exports.removeAt = removeAt;
	/**
	 * Remove the first occurrence of a value from an array.
	 *
	 * @param array - The array of values to modify.
	 *
	 * @param value - The value to remove from the array.
	 *
	 * @returns The index where the value was located, or `-1` if the
	 *   value is not the array.
	 *
	 * #### Example
	 * ```typescript
	 * import * as arrays from 'phosphor-arrays';
	 *
	 * let data = [0, 1, 2, 3, 4];
	 * arrays.remove(data, 1);  // 1
	 * arrays.remove(data, 3);  // 2
	 * arrays.remove(data, 7);  // -1
	 * console.log(data);       // [0, 2, 4]
	 * ```
	 *
	 * **See also** [[removeAt]] and [[insert]]
	 */
	function remove(array, value) {
	    var j = -1;
	    for (var i = 0, n = array.length; i < n; ++i) {
	        if (array[i] === value) {
	            j = i;
	            break;
	        }
	    }
	    if (j === -1) {
	        return -1;
	    }
	    for (var i = j + 1, n = array.length; i < n; ++i) {
	        array[i - 1] = array[i];
	    }
	    array.length -= 1;
	    return j;
	}
	exports.remove = remove;
	/**
	 * Reverse an array in-place subject to an optional range.
	 *
	 * @param array - The array to reverse.
	 *
	 * @param fromIndex - The index of the first element of the range.
	 *   This value will be clamped to the array bounds.
	 *
	 * @param toIndex - The index of the last element of the range.
	 *   This value will be clamped to the array bounds.
	 *
	 * @returns A reference to the original array.
	 *
	 * #### Example
	 * ```typescript
	 * import * as arrays from 'phosphor-arrays';
	 *
	 * let data = [0, 1, 2, 3, 4];
	 * arrays.reverse(data, 1, 3);    // [0, 3, 2, 1, 4]
	 * arrays.reverse(data, 3);       // [0, 3, 2, 4, 1]
	 * arrays.reverse(data);          // [1, 4, 2, 3, 0]
	 * ```
	 *
	 * **See also** [[rotate]]
	 */
	function reverse(array, fromIndex, toIndex) {
	    if (fromIndex === void 0) { fromIndex = 0; }
	    if (toIndex === void 0) { toIndex = array.length; }
	    var i = Math.max(0, Math.min(fromIndex | 0, array.length - 1));
	    var j = Math.max(0, Math.min(toIndex | 0, array.length - 1));
	    if (j < i)
	        i = j + (j = i, 0);
	    while (i < j) {
	        var tmpval = array[i];
	        array[i++] = array[j];
	        array[j--] = tmpval;
	    }
	    return array;
	}
	exports.reverse = reverse;
	/**
	 * Rotate the elements of an array by a positive or negative delta.
	 *
	 * @param array - The array to rotate.
	 *
	 * @param delta - The amount of rotation to apply to the elements. A
	 *   positive delta will shift the elements to the left. A negative
	 *   delta will shift the elements to the right.
	 *
	 * @returns A reference to the original array.
	 *
	 * #### Notes
	 * This executes in `O(n)` time and `O(1)` space.
	 *
	 * #### Example
	 * ```typescript
	 * import * as arrays from 'phosphor-arrays';
	 *
	 * let data = [0, 1, 2, 3, 4];
	 * arrays.rotate(data, 2);    // [2, 3, 4, 0, 1]
	 * arrays.rotate(data, -2);   // [0, 1, 2, 3, 4]
	 * arrays.rotate(data, 10);   // [0, 1, 2, 3, 4]
	 * arrays.rotate(data, 9);    // [4, 0, 1, 2, 3]
	 * ```
	 *
	 * **See also** [[reverse]]
	 */
	function rotate(array, delta) {
	    var n = array.length;
	    if (n <= 1) {
	        return array;
	    }
	    var d = delta | 0;
	    if (d > 0) {
	        d = d % n;
	    }
	    else if (d < 0) {
	        d = ((d % n) + n) % n;
	    }
	    if (d === 0) {
	        return array;
	    }
	    reverse(array, 0, d - 1);
	    reverse(array, d, n - 1);
	    reverse(array, 0, n - 1);
	    return array;
	}
	exports.rotate = rotate;
	/**
	 * Using a binary search, find the index of the first element in an
	 * array which compares `>=` to a value.
	 *
	 * @param array - The array of values to be searched. It must be sorted
	 *   in ascending order.
	 *
	 * @param value - The value to locate in the array.
	 *
	 * @param cmp - The comparison function which returns `true` if an
	 *   array element is less than the given value.
	 *
	 * @returns The index of the first element in `array` which compares
	 *   `>=` to `value`, or `array.length` if there is no such element.
	 *
	 * #### Notes
	 * It is not safe for the comparison function to modify the array.
	 *
	 * #### Example
	 * ```typescript
	 * import * as arrays from 'phosphor-arrays';
	 *
	 * function numberCmp(a: number, b: number): boolean {
	 *   return a < b;
	 * }
	 *
	 * let data = [0, 3, 4, 7, 7, 9];
	 * arrays.lowerBound(data, 0, numberCmp);   // 0
	 * arrays.lowerBound(data, 6, numberCmp);   // 3
	 * arrays.lowerBound(data, 7, numberCmp);   // 3
	 * arrays.lowerBound(data, -1, numberCmp);  // 0
	 * arrays.lowerBound(data, 10, numberCmp);  // 6
	 * ```
	 *
	 * **See also** [[upperBound]]
	 */
	function lowerBound(array, value, cmp) {
	    var begin = 0;
	    var half;
	    var middle;
	    var n = array.length;
	    while (n > 0) {
	        half = n >> 1;
	        middle = begin + half;
	        if (cmp(array[middle], value)) {
	            begin = middle + 1;
	            n -= half + 1;
	        }
	        else {
	            n = half;
	        }
	    }
	    return begin;
	}
	exports.lowerBound = lowerBound;
	/**
	 * Using a binary search, find the index of the first element in an
	 * array which compares `>` than a value.
	 *
	 * @param array - The array of values to be searched. It must be sorted
	 *   in ascending order.
	 *
	 * @param value - The value to locate in the array.
	 *
	 * @param cmp - The comparison function which returns `true` if the
	 *   the given value is less than an array element.
	 *
	 * @returns The index of the first element in `array` which compares
	 *   `>` than `value`, or `array.length` if there is no such element.
	 *
	 * #### Notes
	 * It is not safe for the comparison function to modify the array.
	 *
	 * #### Example
	 * ```typescript
	 * import * as arrays from 'phosphor-arrays';
	 *
	 * function numberCmp(a: number, b: number): number {
	 *   return a < b;
	 * }
	 *
	 * let data = [0, 3, 4, 7, 7, 9];
	 * arrays.upperBound(data, 0, numberCmp);   // 1
	 * arrays.upperBound(data, 6, numberCmp);   // 3
	 * arrays.upperBound(data, 7, numberCmp);   // 5
	 * arrays.upperBound(data, -1, numberCmp);  // 0
	 * arrays.upperBound(data, 10, numberCmp);  // 6
	 * ```
	 *
	 * **See also** [[lowerBound]]
	 */
	function upperBound(array, value, cmp) {
	    var begin = 0;
	    var half;
	    var middle;
	    var n = array.length;
	    while (n > 0) {
	        half = n >> 1;
	        middle = begin + half;
	        if (cmp(value, array[middle])) {
	            n = half;
	        }
	        else {
	            begin = middle + 1;
	            n -= half + 1;
	        }
	    }
	    return begin;
	}
	exports.upperBound = upperBound;
	//# sourceMappingURL=index.js.map

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(5));
	__export(__webpack_require__(29));


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var arrays = __webpack_require__(3);
	var phosphor_boxengine_1 = __webpack_require__(6);
	var phosphor_domutil_1 = __webpack_require__(7);
	var phosphor_messaging_1 = __webpack_require__(13);
	var phosphor_properties_1 = __webpack_require__(17);
	var phosphor_panel_1 = __webpack_require__(18);
	var phosphor_widget_1 = __webpack_require__(20);
	/**
	 * The class name added to left-to-right box layout parents.
	 */
	var LEFT_TO_RIGHT_CLASS = 'p-mod-left-to-right';
	/**
	 * The class name added to right-to-left box layout parents.
	 */
	var RIGHT_TO_LEFT_CLASS = 'p-mod-right-to-left';
	/**
	 * The class name added to top-to-bottom box layout parents.
	 */
	var TOP_TO_BOTTOM_CLASS = 'p-mod-top-to-bottom';
	/**
	 * The class name added to bottom-to-top box layout parents.
	 */
	var BOTTOM_TO_TOP_CLASS = 'p-mod-bottom-to-top';
	/**
	 * The layout direction of a box layout.
	 */
	(function (Direction) {
	    /**
	     * Left to right direction.
	     */
	    Direction[Direction["LeftToRight"] = 0] = "LeftToRight";
	    /**
	     * Right to left direction.
	     */
	    Direction[Direction["RightToLeft"] = 1] = "RightToLeft";
	    /**
	     * Top to bottom direction.
	     */
	    Direction[Direction["TopToBottom"] = 2] = "TopToBottom";
	    /**
	     * Bottom to top direction.
	     */
	    Direction[Direction["BottomToTop"] = 3] = "BottomToTop";
	})(exports.Direction || (exports.Direction = {}));
	var Direction = exports.Direction;
	/**
	 * A layout which arranges its children in a single row or column.
	 */
	var BoxLayout = (function (_super) {
	    __extends(BoxLayout, _super);
	    function BoxLayout() {
	        _super.apply(this, arguments);
	        this._fixed = 0;
	        this._spacing = 8;
	        this._box = null;
	        this._sizers = [];
	        this._direction = Direction.TopToBottom;
	    }
	    Object.defineProperty(BoxLayout.prototype, "direction", {
	        /**
	         * Get the layout direction for the box layout.
	         */
	        get: function () {
	            return this._direction;
	        },
	        /**
	         * Set the layout direction for the box layout.
	         */
	        set: function (value) {
	            if (this._direction === value) {
	                return;
	            }
	            this._direction = value;
	            if (!this.parent) {
	                return;
	            }
	            BoxLayoutPrivate.toggleDirection(this.parent, value);
	            this.parent.fit();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BoxLayout.prototype, "spacing", {
	        /**
	         * Get the inter-element spacing for the box layout.
	         */
	        get: function () {
	            return this._spacing;
	        },
	        /**
	         * Set the inter-element spacing for the box layout.
	         */
	        set: function (value) {
	            value = Math.max(0, value | 0);
	            if (this._spacing === value) {
	                return;
	            }
	            this._spacing = value;
	            if (!this.parent) {
	                return;
	            }
	            this.parent.fit();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Initialize the children of the layout.
	     *
	     * #### Notes
	     * This method is called automatically when the layout is installed
	     * on its parent widget.
	     */
	    BoxLayout.prototype.initialize = function () {
	        BoxLayoutPrivate.toggleDirection(this.parent, this.direction);
	        _super.prototype.initialize.call(this);
	    };
	    /**
	     * Attach a child widget to the parent's DOM node.
	     *
	     * @param index - The current index of the child in the layout.
	     *
	     * @param child - The child widget to attach to the parent.
	     *
	     * #### Notes
	     * This is a reimplementation of the superclass method.
	     */
	    BoxLayout.prototype.attachChild = function (index, child) {
	        arrays.insert(this._sizers, index, new phosphor_boxengine_1.BoxSizer());
	        BoxLayoutPrivate.prepareGeometry(child);
	        this.parent.node.appendChild(child.node);
	        if (this.parent.isAttached)
	            phosphor_messaging_1.sendMessage(child, phosphor_widget_1.Widget.MsgAfterAttach);
	        this.parent.fit();
	    };
	    /**
	     * Move a child widget in the parent's DOM node.
	     *
	     * @param fromIndex - The previous index of the child in the layout.
	     *
	     * @param toIndex - The current index of the child in the layout.
	     *
	     * @param child - The child widget to move in the parent.
	     *
	     * #### Notes
	     * This is a reimplementation of the superclass method.
	     */
	    BoxLayout.prototype.moveChild = function (fromIndex, toIndex, child) {
	        arrays.move(this._sizers, fromIndex, toIndex);
	        this.parent.update();
	    };
	    /**
	     * Detach a child widget from the parent's DOM node.
	     *
	     * @param index - The previous index of the child in the layout.
	     *
	     * @param child - The child widget to detach from the parent.
	     *
	     * #### Notes
	     * This is a reimplementation of the superclass method.
	     */
	    BoxLayout.prototype.detachChild = function (index, child) {
	        arrays.removeAt(this._sizers, index);
	        if (this.parent.isAttached)
	            phosphor_messaging_1.sendMessage(child, phosphor_widget_1.Widget.MsgBeforeDetach);
	        this.parent.node.removeChild(child.node);
	        BoxLayoutPrivate.resetGeometry(child);
	        this.parent.fit();
	    };
	    /**
	     * A message handler invoked on an `'after-show'` message.
	     */
	    BoxLayout.prototype.onAfterShow = function (msg) {
	        _super.prototype.onAfterShow.call(this, msg);
	        this.parent.update();
	    };
	    /**
	     * A message handler invoked on an `'after-attach'` message.
	     */
	    BoxLayout.prototype.onAfterAttach = function (msg) {
	        _super.prototype.onAfterAttach.call(this, msg);
	        this.parent.fit();
	    };
	    /**
	     * A message handler invoked on a `'child-shown'` message.
	     */
	    BoxLayout.prototype.onChildShown = function (msg) {
	        if (BoxLayoutPrivate.IsIE) {
	            phosphor_messaging_1.sendMessage(this.parent, phosphor_widget_1.Widget.MsgFitRequest);
	        }
	        else {
	            this.parent.fit();
	        }
	    };
	    /**
	     * A message handler invoked on a `'child-hidden'` message.
	     */
	    BoxLayout.prototype.onChildHidden = function (msg) {
	        if (BoxLayoutPrivate.IsIE) {
	            phosphor_messaging_1.sendMessage(this.parent, phosphor_widget_1.Widget.MsgFitRequest);
	        }
	        else {
	            this.parent.fit();
	        }
	    };
	    /**
	     * A message handler invoked on a `'resize'` message.
	     */
	    BoxLayout.prototype.onResize = function (msg) {
	        if (this.parent.isVisible) {
	            this._update(msg.width, msg.height);
	        }
	    };
	    /**
	     * A message handler invoked on an `'update-request'` message.
	     */
	    BoxLayout.prototype.onUpdateRequest = function (msg) {
	        if (this.parent.isVisible) {
	            this._update(-1, -1);
	        }
	    };
	    /**
	     * A message handler invoked on a `'fit-request'` message.
	     */
	    BoxLayout.prototype.onFitRequest = function (msg) {
	        if (this.parent.isAttached) {
	            this._fit();
	        }
	    };
	    /**
	     * Fit the layout to the total size required by the child widgets.
	     */
	    BoxLayout.prototype._fit = function () {
	        // Compute the visible item count.
	        var nVisible = 0;
	        for (var i = 0, n = this.childCount(); i < n; ++i) {
	            if (!this.childAt(i).isHidden)
	                nVisible++;
	        }
	        // Update the fixed space for the visible items.
	        this._fixed = this._spacing * Math.max(0, nVisible - 1);
	        // Setup the initial size limits.
	        var minW = 0;
	        var minH = 0;
	        var maxW = Infinity;
	        var maxH = Infinity;
	        var horz = BoxLayoutPrivate.isHorizontal(this._direction);
	        if (horz) {
	            minW = this._fixed;
	            maxW = nVisible > 0 ? minW : maxW;
	        }
	        else {
	            minH = this._fixed;
	            maxH = nVisible > 0 ? minH : maxH;
	        }
	        // Update the sizers and computed size limits.
	        for (var i = 0, n = this.childCount(); i < n; ++i) {
	            var child = this.childAt(i);
	            var sizer = this._sizers[i];
	            if (child.isHidden) {
	                sizer.minSize = 0;
	                sizer.maxSize = 0;
	                continue;
	            }
	            var limits = phosphor_domutil_1.sizeLimits(child.node);
	            sizer.sizeHint = BoxLayout.getSizeBasis(child);
	            sizer.stretch = BoxLayout.getStretch(child);
	            if (horz) {
	                sizer.minSize = limits.minWidth;
	                sizer.maxSize = limits.maxWidth;
	                minW += limits.minWidth;
	                maxW += limits.maxWidth;
	                minH = Math.max(minH, limits.minHeight);
	                maxH = Math.min(maxH, limits.maxHeight);
	            }
	            else {
	                sizer.minSize = limits.minHeight;
	                sizer.maxSize = limits.maxHeight;
	                minH += limits.minHeight;
	                maxH += limits.maxHeight;
	                minW = Math.max(minW, limits.minWidth);
	                maxW = Math.min(maxW, limits.maxWidth);
	            }
	        }
	        // Update the box sizing and add it to the size constraints.
	        var box = this._box = phosphor_domutil_1.boxSizing(this.parent.node);
	        minW += box.horizontalSum;
	        minH += box.verticalSum;
	        maxW += box.horizontalSum;
	        maxH += box.verticalSum;
	        // Update the parent's size constraints.
	        var style = this.parent.node.style;
	        style.minWidth = minW + "px";
	        style.minHeight = minH + "px";
	        style.maxWidth = maxW === Infinity ? 'none' : maxW + "px";
	        style.maxHeight = maxH === Infinity ? 'none' : maxH + "px";
	        // Notify the ancestor that it should fit immediately.
	        var ancestor = this.parent.parent;
	        if (ancestor)
	            phosphor_messaging_1.sendMessage(ancestor, phosphor_widget_1.Widget.MsgFitRequest);
	        // Notify the parent that it should update immediately.
	        phosphor_messaging_1.sendMessage(this.parent, phosphor_widget_1.Widget.MsgUpdateRequest);
	    };
	    /**
	     * Update the layout position and size of the child widgets.
	     *
	     * The parent offset dimensions should be `-1` if unknown.
	     */
	    BoxLayout.prototype._update = function (offsetWidth, offsetHeight) {
	        // Bail early if there are no children to layout.
	        if (this.childCount() === 0) {
	            return;
	        }
	        // Measure the parent if the offset dimensions are unknown.
	        if (offsetWidth < 0) {
	            offsetWidth = this.parent.node.offsetWidth;
	        }
	        if (offsetHeight < 0) {
	            offsetHeight = this.parent.node.offsetHeight;
	        }
	        // Ensure the parent box sizing data is computed.
	        var box = this._box || (this._box = phosphor_domutil_1.boxSizing(this.parent.node));
	        // Compute the layout area adjusted for border and padding.
	        var top = box.paddingTop;
	        var left = box.paddingLeft;
	        var width = offsetWidth - box.horizontalSum;
	        var height = offsetHeight - box.verticalSum;
	        // Distribute the layout space and adjust the start position.
	        switch (this._direction) {
	            case Direction.LeftToRight:
	                phosphor_boxengine_1.boxCalc(this._sizers, Math.max(0, width - this._fixed));
	                break;
	            case Direction.TopToBottom:
	                phosphor_boxengine_1.boxCalc(this._sizers, Math.max(0, height - this._fixed));
	                break;
	            case Direction.RightToLeft:
	                phosphor_boxengine_1.boxCalc(this._sizers, Math.max(0, width - this._fixed));
	                left += width;
	                break;
	            case Direction.BottomToTop:
	                phosphor_boxengine_1.boxCalc(this._sizers, Math.max(0, height - this._fixed));
	                top += height;
	                break;
	        }
	        // Layout the children using the computed box sizes.
	        for (var i = 0, n = this.childCount(); i < n; ++i) {
	            var child = this.childAt(i);
	            if (child.isHidden) {
	                continue;
	            }
	            var size = this._sizers[i].size;
	            switch (this._direction) {
	                case Direction.LeftToRight:
	                    BoxLayoutPrivate.setGeometry(child, left, top, size, height);
	                    left += size + this._spacing;
	                    break;
	                case Direction.TopToBottom:
	                    BoxLayoutPrivate.setGeometry(child, left, top, width, size);
	                    top += size + this._spacing;
	                    break;
	                case Direction.RightToLeft:
	                    BoxLayoutPrivate.setGeometry(child, left - size, top, size, height);
	                    left -= size + this._spacing;
	                    break;
	                case Direction.BottomToTop:
	                    BoxLayoutPrivate.setGeometry(child, left, top - size, width, size);
	                    top -= size + this._spacing;
	                    break;
	            }
	        }
	    };
	    return BoxLayout;
	})(phosphor_panel_1.PanelLayout);
	exports.BoxLayout = BoxLayout;
	/**
	 * The namespace for the `BoxLayout` class statics.
	 */
	var BoxLayout;
	(function (BoxLayout) {
	    /**
	     * A convenience alias of the `LeftToRight` [[Direction]].
	     */
	    BoxLayout.LeftToRight = Direction.LeftToRight;
	    /**
	     * A convenience alias of the `RightToLeft` [[Direction]].
	     */
	    BoxLayout.RightToLeft = Direction.RightToLeft;
	    /**
	     * A convenience alias of the `TopToBottom` [[Direction]].
	     */
	    BoxLayout.TopToBottom = Direction.TopToBottom;
	    /**
	     * A convenience alias of the `BottomToTop` [[Direction]].
	     */
	    BoxLayout.BottomToTop = Direction.BottomToTop;
	    /**
	     * Get the box layout stretch factor for the given widget.
	     *
	     * @param widget - The widget of interest.
	     *
	     * @returns The box layout stretch factor for the widget.
	     */
	    function getStretch(widget) {
	        return BoxLayoutPrivate.stretchProperty.get(widget);
	    }
	    BoxLayout.getStretch = getStretch;
	    /**
	     * Set the box layout stretch factor for the given widget.
	     *
	     * @param widget - The widget of interest.
	     *
	     * @param value - The value for the stretch factor.
	     */
	    function setStretch(widget, value) {
	        BoxLayoutPrivate.stretchProperty.set(widget, value);
	    }
	    BoxLayout.setStretch = setStretch;
	    /**
	     * Get the box layout size basis for the given widget.
	     *
	     * @param widget - The widget of interest.
	     *
	     * @returns The box layout size basis for the widget.
	     */
	    function getSizeBasis(widget) {
	        return BoxLayoutPrivate.sizeBasisProperty.get(widget);
	    }
	    BoxLayout.getSizeBasis = getSizeBasis;
	    /**
	     * Set the box layout size basis for the given widget.
	     *
	     * @param widget - The widget of interest.
	     *
	     * @param value - The value for the size basis.
	     */
	    function setSizeBasis(widget, value) {
	        BoxLayoutPrivate.sizeBasisProperty.set(widget, value);
	    }
	    BoxLayout.setSizeBasis = setSizeBasis;
	})(BoxLayout = exports.BoxLayout || (exports.BoxLayout = {}));
	/**
	 * The namespace for the `BoxLayout` class private data.
	 */
	var BoxLayoutPrivate;
	(function (BoxLayoutPrivate) {
	    /**
	     * A flag indicating whether the browser is IE.
	     */
	    BoxLayoutPrivate.IsIE = /Trident/.test(navigator.userAgent);
	    /**
	     * The property descriptor for a widget stretch factor.
	     */
	    BoxLayoutPrivate.stretchProperty = new phosphor_properties_1.Property({
	        name: 'stretch',
	        value: 0,
	        coerce: function (owner, value) { return Math.max(0, value | 0); },
	        changed: onChildPropertyChanged,
	    });
	    /**
	     * The property descriptor for a widget size basis.
	     */
	    BoxLayoutPrivate.sizeBasisProperty = new phosphor_properties_1.Property({
	        name: 'sizeBasis',
	        value: 0,
	        coerce: function (owner, value) { return Math.max(0, value | 0); },
	        changed: onChildPropertyChanged,
	    });
	    /**
	     * Test whether a direction has horizontal orientation.
	     */
	    function isHorizontal(dir) {
	        return dir === Direction.LeftToRight || dir === Direction.RightToLeft;
	    }
	    BoxLayoutPrivate.isHorizontal = isHorizontal;
	    /**
	     * Toggle the CSS direction class for the given widget.
	     */
	    function toggleDirection(widget, dir) {
	        widget.toggleClass(LEFT_TO_RIGHT_CLASS, dir === Direction.LeftToRight);
	        widget.toggleClass(RIGHT_TO_LEFT_CLASS, dir === Direction.RightToLeft);
	        widget.toggleClass(TOP_TO_BOTTOM_CLASS, dir === Direction.TopToBottom);
	        widget.toggleClass(BOTTOM_TO_TOP_CLASS, dir === Direction.BottomToTop);
	    }
	    BoxLayoutPrivate.toggleDirection = toggleDirection;
	    /**
	     * Prepare a child widget for absolute layout geometry.
	     */
	    function prepareGeometry(widget) {
	        widget.node.style.position = 'absolute';
	    }
	    BoxLayoutPrivate.prepareGeometry = prepareGeometry;
	    /**
	     * Reset the layout geometry of a child widget.
	     */
	    function resetGeometry(widget) {
	        var rect = rectProperty.get(widget);
	        var style = widget.node.style;
	        rect.top = NaN;
	        rect.left = NaN;
	        rect.width = NaN;
	        rect.height = NaN;
	        style.position = '';
	        style.top = '';
	        style.left = '';
	        style.width = '';
	        style.height = '';
	    }
	    BoxLayoutPrivate.resetGeometry = resetGeometry;
	    /**
	     * Set the layout geometry of a child widget.
	     */
	    function setGeometry(widget, left, top, width, height) {
	        var resized = false;
	        var style = widget.node.style;
	        var rect = rectProperty.get(widget);
	        if (rect.top !== top) {
	            rect.top = top;
	            style.top = top + "px";
	        }
	        if (rect.left !== left) {
	            rect.left = left;
	            style.left = left + "px";
	        }
	        if (rect.width !== width) {
	            resized = true;
	            rect.width = width;
	            style.width = width + "px";
	        }
	        if (rect.height !== height) {
	            resized = true;
	            rect.height = height;
	            style.height = height + "px";
	        }
	        if (resized) {
	            phosphor_messaging_1.sendMessage(widget, new phosphor_widget_1.ResizeMessage(width, height));
	        }
	    }
	    BoxLayoutPrivate.setGeometry = setGeometry;
	    /**
	     * A property descriptor for a widget offset rect.
	     */
	    var rectProperty = new phosphor_properties_1.Property({
	        name: 'rect',
	        create: function () { return ({ top: NaN, left: NaN, width: NaN, height: NaN }); },
	    });
	    /**
	     * The change handler for the attached child properties.
	     */
	    function onChildPropertyChanged(child) {
	        var parent = child.parent;
	        var layout = parent && parent.layout;
	        if (layout instanceof BoxLayout)
	            parent.fit();
	    }
	})(BoxLayoutPrivate || (BoxLayoutPrivate = {}));


/***/ },
/* 6 */
/***/ function(module, exports) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	/**
	 * The sizer object for the [[boxCalc]] function.
	 *
	 * A box sizer holds the geometry information for an object along the
	 * layout orientation. An array of box sizers representing a line of
	 * objects is passed to [[boxCalc]] along with the amount of space
	 * available for layout. The algorithm will update the [[size]] of
	 * each box sizer with its computed size.
	 *
	 * #### Notes
	 * For best performance, this class should be treated as a raw data
	 * struct. It should not typically be subclassed.
	 */
	var BoxSizer = (function () {
	    function BoxSizer() {
	        /**
	         * The preferred size for the sizer.
	         *
	         * The sizer will be given this initial size subject to its size
	         * bounds. The sizer will not deviate from this size unless such
	         * deviation is required to fit into the available layout space.
	         *
	         * #### Notes
	         * There is no limit to this value, but it will be clamped to the
	         * bounds defined by [[minSize]] and [[maxSize]].
	         *
	         * The default value is `0`.
	         */
	        this.sizeHint = 0;
	        /**
	         * The minimum size of the sizer.
	         *
	         * The sizer will never be sized less than this value, even if
	         * it means the sizer will overflow the available layout space.
	         *
	         * #### Notes
	         * It is assumed that this value lies in the range `[0, Infinity)`
	         * and that it is `<=` to [[maxSize]]. Failure to adhere to this
	         * constraint will yield undefined results.
	         *
	         * The default value is `0`.
	         */
	        this.minSize = 0;
	        /**
	         * The maximum size of the sizer.
	         *
	         * The sizer will never be sized greater than this value, even if
	         * it means the sizer will underflow the available layout space.
	         *
	         * #### Notes
	         * It is assumed that this value lies in the range `[0, Infinity]`
	         * and that it is `>=` to [[minSize]]. Failure to adhere to this
	         * constraint will yield undefined results.
	         *
	         * The default value is `Infinity`.
	         */
	        this.maxSize = Infinity;
	        /**
	         * The stretch factor for the sizer.
	         *
	         * This controls how much the sizer stretches relative to its sibling
	         * sizers when layout space is distributed. A stretch factor of zero
	         * is special and will cause the sizer to only be resized after all
	         * other sizers with a stretch factor greater than zero have been
	         * resized to their limits.
	         *
	         * #### Notes
	         * It is assumed that this value is an integer that lies in the range
	         * `[0, Infinity)`. Failure to adhere to this constraint will yield
	         * undefined results.
	         *
	         * The default value is `1`.
	         */
	        this.stretch = 1;
	        /**
	         * The computed size of the sizer.
	         *
	         * This value is the output of a call to [[boxCalc]]. It represents
	         * the computed size for the object along the layout orientation,
	         * and will always lie in the range `[minSize, maxSize]`.
	         *
	         * #### Notes
	         * This value is output only. Changing the value will have no effect.
	         */
	        this.size = 0;
	        /**
	         * An internal storage property for the layout algorithm.
	         *
	         * #### Notes
	         * This value is used as temporary storage by the layout algorithm.
	         * Changing the value will have no effect.
	         */
	        this.done = false;
	    }
	    return BoxSizer;
	})();
	exports.BoxSizer = BoxSizer;
	/**
	 * Compute the optimal layout sizes for an array of box sizers.
	 *
	 * This distributes the available layout space among the box sizers
	 * according to the following algorithm:
	 *
	 * 1. Initialize the sizers's size to its size hint and compute the
	 *    sums for each of size hint, min size, and max size.
	 *
	 * 2. If the total size hint equals the available space, return.
	 *
	 * 3. If the available space is less than the total min size, set all
	 *    sizers to their min size and return.
	 *
	 * 4. If the available space is greater than the total max size, set
	 *    all sizers to their max size and return.
	 *
	 * 5. If the layout space is less than the total size hint, distribute
	 *    the negative delta as follows:
	 *
	 *    a. Shrink each sizer with a stretch factor greater than zero by
	 *       an amount proportional to the negative space and the sum of
	 *       stretch factors. If the sizer reaches its min size, remove
	 *       it and its stretch factor from the computation.
	 *
	 *    b. If after adjusting all stretch sizers there remains negative
	 *       space, distribute the space equally among the sizers with a
	 *       stretch factor of zero. If a sizer reaches its min size,
	 *       remove it from the computation.
	 *
	 * 6. If the layout space is greater than the total size hint,
	 *    distribute the positive delta as follows:
	 *
	 *    a. Expand each sizer with a stretch factor greater than zero by
	 *       an amount proportional to the postive space and the sum of
	 *       stretch factors. If the sizer reaches its max size, remove
	 *       it and its stretch factor from the computation.
	 *
	 *    b. If after adjusting all stretch sizers there remains positive
	 *       space, distribute the space equally among the sizers with a
	 *       stretch factor of zero. If a sizer reaches its max size,
	 *       remove it from the computation.
	 *
	 * 7. return
	 *
	 * @param sizers - The sizers for a particular layout line.
	 *
	 * @param space - The available layout space for the sizers.
	 *
	 * #### Notes
	 * This function can be called at any time to recompute the layout
	 * sizing for an existing array of sizers. The previously computed
	 * results will have no effect on the new output. It is therefore
	 * not necessary to create new sizers on each resize event.
	 */
	function boxCalc(sizers, space) {
	    // Bail early if there is nothing to do.
	    var count = sizers.length;
	    if (count === 0) {
	        return;
	    }
	    // Setup the size and stretch counters.
	    var totalMin = 0;
	    var totalMax = 0;
	    var totalSize = 0;
	    var totalStretch = 0;
	    var stretchCount = 0;
	    // Setup the sizers and compute the totals.
	    for (var i = 0; i < count; ++i) {
	        var sizer = sizers[i];
	        initSizer(sizer);
	        totalSize += sizer.size;
	        totalMin += sizer.minSize;
	        totalMax += sizer.maxSize;
	        if (sizer.stretch > 0) {
	            totalStretch += sizer.stretch;
	            stretchCount++;
	        }
	    }
	    // If the space is equal to the total size, return.
	    if (space === totalSize) {
	        return;
	    }
	    // If the space is less than the total min, minimize each sizer.
	    if (space <= totalMin) {
	        for (var i = 0; i < count; ++i) {
	            var sizer = sizers[i];
	            sizer.size = sizer.minSize;
	        }
	        return;
	    }
	    // If the space is greater than the total max, maximize each sizer.
	    if (space >= totalMax) {
	        for (var i = 0; i < count; ++i) {
	            var sizer = sizers[i];
	            sizer.size = sizer.maxSize;
	        }
	        return;
	    }
	    // The loops below perform sub-pixel precision sizing. A near zero
	    // value is used for compares instead of zero to ensure that the
	    // loop terminates when the subdivided space is reasonably small.
	    var nearZero = 0.01;
	    // A counter which is decremented each time a sizer is resized to
	    // its limit. This ensures the loops terminate even if there is
	    // space remaining to distribute.
	    var notDoneCount = count;
	    // Distribute negative delta space.
	    if (space < totalSize) {
	        // Shrink each stretchable sizer by an amount proportional to its
	        // stretch factor. If a sizer reaches its min size it's marked as
	        // done. The loop progresses in phases where each sizer is given
	        // a chance to consume its fair share for the pass, regardless of
	        // whether a sizer before it reached its limit. This continues
	        // until the stretchable sizers or the free space is exhausted.
	        var freeSpace = totalSize - space;
	        while (stretchCount > 0 && freeSpace > nearZero) {
	            var distSpace = freeSpace;
	            var distStretch = totalStretch;
	            for (var i = 0; i < count; ++i) {
	                var sizer = sizers[i];
	                if (sizer.done || sizer.stretch === 0) {
	                    continue;
	                }
	                var amt = sizer.stretch * distSpace / distStretch;
	                if (sizer.size - amt <= sizer.minSize) {
	                    freeSpace -= sizer.size - sizer.minSize;
	                    totalStretch -= sizer.stretch;
	                    sizer.size = sizer.minSize;
	                    sizer.done = true;
	                    notDoneCount--;
	                    stretchCount--;
	                }
	                else {
	                    freeSpace -= amt;
	                    sizer.size -= amt;
	                }
	            }
	        }
	        // Distribute any remaining space evenly among the non-stretchable
	        // sizers. This progresses in phases in the same manner as above.
	        while (notDoneCount > 0 && freeSpace > nearZero) {
	            var amt = freeSpace / notDoneCount;
	            for (var i = 0; i < count; ++i) {
	                var sizer = sizers[i];
	                if (sizer.done) {
	                    continue;
	                }
	                if (sizer.size - amt <= sizer.minSize) {
	                    freeSpace -= sizer.size - sizer.minSize;
	                    sizer.size = sizer.minSize;
	                    sizer.done = true;
	                    notDoneCount--;
	                }
	                else {
	                    freeSpace -= amt;
	                    sizer.size -= amt;
	                }
	            }
	        }
	    }
	    else {
	        // Expand each stretchable sizer by an amount proportional to its
	        // stretch factor. If a sizer reaches its max size it's marked as
	        // done. The loop progresses in phases where each sizer is given
	        // a chance to consume its fair share for the pass, regardless of
	        // whether a sizer before it reached its limit. This continues
	        // until the stretchable sizers or the free space is exhausted.
	        var freeSpace = space - totalSize;
	        while (stretchCount > 0 && freeSpace > nearZero) {
	            var distSpace = freeSpace;
	            var distStretch = totalStretch;
	            for (var i = 0; i < count; ++i) {
	                var sizer = sizers[i];
	                if (sizer.done || sizer.stretch === 0) {
	                    continue;
	                }
	                var amt = sizer.stretch * distSpace / distStretch;
	                if (sizer.size + amt >= sizer.maxSize) {
	                    freeSpace -= sizer.maxSize - sizer.size;
	                    totalStretch -= sizer.stretch;
	                    sizer.size = sizer.maxSize;
	                    sizer.done = true;
	                    notDoneCount--;
	                    stretchCount--;
	                }
	                else {
	                    freeSpace -= amt;
	                    sizer.size += amt;
	                }
	            }
	        }
	        // Distribute any remaining space evenly among the non-stretchable
	        // sizers. This progresses in phases in the same manner as above.
	        while (notDoneCount > 0 && freeSpace > nearZero) {
	            var amt = freeSpace / notDoneCount;
	            for (var i = 0; i < count; ++i) {
	                var sizer = sizers[i];
	                if (sizer.done) {
	                    continue;
	                }
	                if (sizer.size + amt >= sizer.maxSize) {
	                    freeSpace -= sizer.maxSize - sizer.size;
	                    sizer.size = sizer.maxSize;
	                    sizer.done = true;
	                    notDoneCount--;
	                }
	                else {
	                    freeSpace -= amt;
	                    sizer.size += amt;
	                }
	            }
	        }
	    }
	}
	exports.boxCalc = boxCalc;
	/**
	 * (Re)initialize a box sizer's data for a layout pass.
	 */
	function initSizer(sizer) {
	    sizer.size = Math.max(sizer.minSize, Math.min(sizer.sizeHint, sizer.maxSize));
	    sizer.done = false;
	}
	//# sourceMappingURL=index.js.map

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var phosphor_disposable_1 = __webpack_require__(8);
	__webpack_require__(9);
	/**
	 * The class name added to the document body during cursor override.
	 */
	var OVERRIDE_CURSOR_CLASS = 'p-mod-override-cursor';
	/**
	 * The id for the active cursor override.
	 */
	var overrideID = 0;
	/**
	 * Override the cursor for the entire document.
	 *
	 * @param cursor - The string representing the cursor style.
	 *
	 * @returns A disposable which will clear the override when disposed.
	 *
	 * #### Notes
	 * The most recent call to `overrideCursor` takes precedence. Disposing
	 * an old override is a no-op and will not effect the current override.
	 *
	 * #### Example
	 * ```typescript
	 * import { overrideCursor } from 'phosphor-domutil';
	 *
	 * // force the cursor to be 'wait' for the entire document
	 * let override = overrideCursor('wait');
	 *
	 * // clear the override by disposing the return value
	 * override.dispose();
	 * ```
	 */
	function overrideCursor(cursor) {
	    var id = ++overrideID;
	    var body = document.body;
	    body.style.cursor = cursor;
	    body.classList.add(OVERRIDE_CURSOR_CLASS);
	    return new phosphor_disposable_1.DisposableDelegate(function () {
	        if (id === overrideID) {
	            body.style.cursor = '';
	            body.classList.remove(OVERRIDE_CURSOR_CLASS);
	        }
	    });
	}
	exports.overrideCursor = overrideCursor;
	/**
	 * Test whether a client position lies within a node.
	 *
	 * @param node - The DOM node of interest.
	 *
	 * @param clientX - The client X coordinate of interest.
	 *
	 * @param clientY - The client Y coordinate of interest.
	 *
	 * @returns `true` if the node covers the position, `false` otherwise.
	 *
	 * #### Example
	 * ```typescript
	 * import { hitTest } from 'phosphor-domutil';
	 *
	 * let div = document.createElement('div');
	 * div.style.position = 'absolute';
	 * div.style.left = '0px';
	 * div.style.top = '0px';
	 * div.style.width = '100px';
	 * div.style.height = '100px';
	 * document.body.appendChild(div);
	 *
	 * hitTest(div, 50, 50);   // true
	 * hitTest(div, 150, 150); // false
	 * ```
	 */
	function hitTest(node, clientX, clientY) {
	    var rect = node.getBoundingClientRect();
	    return (clientX >= rect.left &&
	        clientX < rect.right &&
	        clientY >= rect.top &&
	        clientY < rect.bottom);
	}
	exports.hitTest = hitTest;
	/**
	 * Compute the box sizing for a DOM node.
	 *
	 * @param node - The DOM node for which to compute the box sizing.
	 *
	 * @returns The box sizing data for the specified DOM node.
	 *
	 * #### Example
	 * ```typescript
	 * import { boxSizing } from 'phosphor-domutil';
	 *
	 * let div = document.createElement('div');
	 * div.style.borderTop = 'solid 10px black';
	 * document.body.appendChild(div);
	 *
	 * let sizing = boxSizing(div);
	 * sizing.borderTop;    // 10
	 * sizing.paddingLeft;  // 0
	 * // etc...
	 * ```
	 */
	function boxSizing(node) {
	    var cstyle = window.getComputedStyle(node);
	    var bt = parseInt(cstyle.borderTopWidth, 10) || 0;
	    var bl = parseInt(cstyle.borderLeftWidth, 10) || 0;
	    var br = parseInt(cstyle.borderRightWidth, 10) || 0;
	    var bb = parseInt(cstyle.borderBottomWidth, 10) || 0;
	    var pt = parseInt(cstyle.paddingTop, 10) || 0;
	    var pl = parseInt(cstyle.paddingLeft, 10) || 0;
	    var pr = parseInt(cstyle.paddingRight, 10) || 0;
	    var pb = parseInt(cstyle.paddingBottom, 10) || 0;
	    var hs = bl + pl + pr + br;
	    var vs = bt + pt + pb + bb;
	    return {
	        borderTop: bt,
	        borderLeft: bl,
	        borderRight: br,
	        borderBottom: bb,
	        paddingTop: pt,
	        paddingLeft: pl,
	        paddingRight: pr,
	        paddingBottom: pb,
	        horizontalSum: hs,
	        verticalSum: vs,
	    };
	}
	exports.boxSizing = boxSizing;
	/**
	 * Compute the size limits for a DOM node.
	 *
	 * @param node - The node for which to compute the size limits.
	 *
	 * @returns The size limit data for the specified DOM node.
	 *
	 * #### Example
	 * ```typescript
	 * import { sizeLimits } from 'phosphor-domutil';
	 *
	 * let div = document.createElement('div');
	 * div.style.minWidth = '90px';
	 * document.body.appendChild(div);
	 *
	 * let limits = sizeLimits(div);
	 * limits.minWidth;   // 90
	 * limits.maxHeight;  // Infinity
	 * // etc...
	 * ```
	 */
	function sizeLimits(node) {
	    var cstyle = window.getComputedStyle(node);
	    return {
	        minWidth: parseInt(cstyle.minWidth, 10) || 0,
	        minHeight: parseInt(cstyle.minHeight, 10) || 0,
	        maxWidth: parseInt(cstyle.maxWidth, 10) || Infinity,
	        maxHeight: parseInt(cstyle.maxHeight, 10) || Infinity,
	    };
	}
	exports.sizeLimits = sizeLimits;
	//# sourceMappingURL=index.js.map

/***/ },
/* 8 */
/***/ function(module, exports) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	/**
	 * A disposable object which delegates to a callback.
	 */
	var DisposableDelegate = (function () {
	    /**
	     * Construct a new disposable delegate.
	     *
	     * @param callback - The function to invoke when the delegate is
	     *   disposed.
	     */
	    function DisposableDelegate(callback) {
	        this._callback = callback || null;
	    }
	    Object.defineProperty(DisposableDelegate.prototype, "isDisposed", {
	        /**
	         * Test whether the delegate has been disposed.
	         *
	         * #### Notes
	         * This is a read-only property which is always safe to access.
	         */
	        get: function () {
	            return this._callback === null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Dispose of the delegate and invoke its callback.
	     *
	     * #### Notes
	     * If this method is called more than once, all calls made after the
	     * first will be a no-op.
	     */
	    DisposableDelegate.prototype.dispose = function () {
	        if (this._callback === null) {
	            return;
	        }
	        var callback = this._callback;
	        this._callback = null;
	        callback();
	    };
	    return DisposableDelegate;
	})();
	exports.DisposableDelegate = DisposableDelegate;
	/**
	 * An object which manages a collection of disposable items.
	 */
	var DisposableSet = (function () {
	    /**
	     * Construct a new disposable set.
	     *
	     * @param items - The initial disposable items for the set.
	     */
	    function DisposableSet(items) {
	        var _this = this;
	        this._set = new Set();
	        if (items)
	            items.forEach(function (item) { _this._set.add(item); });
	    }
	    Object.defineProperty(DisposableSet.prototype, "isDisposed", {
	        /**
	         * Test whether the set has been disposed.
	         *
	         * #### Notes
	         * This is a read-only property which is always safe to access.
	         */
	        get: function () {
	            return this._set === null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Dispose of the set and dispose the items it contains.
	     *
	     * #### Notes
	     * Items are disposed in the order they are added to the set.
	     *
	     * It is unsafe to use the set after it has been disposed.
	     *
	     * If this method is called more than once, all calls made after the
	     * first will be a no-op.
	     */
	    DisposableSet.prototype.dispose = function () {
	        if (this._set === null) {
	            return;
	        }
	        var set = this._set;
	        this._set = null;
	        set.forEach(function (item) { item.dispose(); });
	    };
	    /**
	     * Add a disposable item to the set.
	     *
	     * @param item - The disposable item to add to the set. If the item
	     *   is already contained in the set, this is a no-op.
	     *
	     * @throws Will throw an error if the set has been disposed.
	     */
	    DisposableSet.prototype.add = function (item) {
	        if (this._set === null) {
	            throw new Error('object is disposed');
	        }
	        this._set.add(item);
	    };
	    /**
	     * Remove a disposable item from the set.
	     *
	     * @param item - The disposable item to remove from the set. If the
	     *   item does not exist in the set, this is a no-op.
	     *
	     * @throws Will throw an error if the set has been disposed.
	     */
	    DisposableSet.prototype.remove = function (item) {
	        if (this._set === null) {
	            throw new Error('object is disposed');
	        }
	        this._set.delete(item);
	    };
	    /**
	     * Clear all disposable items from the set.
	     *
	     * @throws Will throw an error if the set has been disposed.
	     */
	    DisposableSet.prototype.clear = function () {
	        if (this._set === null) {
	            throw new Error('object is disposed');
	        }
	        this._set.clear();
	    };
	    return DisposableSet;
	})();
	exports.DisposableSet = DisposableSet;
	//# sourceMappingURL=index.js.map

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(10);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(12)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js!./index.css", function() {
				var newContent = require("!!./../../css-loader/index.js!./index.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(11)();
	// imports


	// module
	exports.push([module.id, "/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2015, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nbody.p-mod-override-cursor * {\r\n  cursor: inherit !important;\r\n}\r\n", ""]);

	// exports


/***/ },
/* 11 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var phosphor_queue_1 = __webpack_require__(16);
	/**
	 * A message which can be sent or posted to a message handler.
	 *
	 * #### Notes
	 * This class may be subclassed to create complex message types.
	 *
	 * **See Also** [[postMessage]] and [[sendMessage]].
	 */
	var Message = (function () {
	    /**
	     * Construct a new message.
	     *
	     * @param type - The type of the message. Consumers of a message will
	     *   use this value to cast the message to the appropriately derived
	     *   message type.
	     */
	    function Message(type) {
	        this._type = type;
	    }
	    Object.defineProperty(Message.prototype, "type", {
	        /**
	         * Get the type of the message.
	         */
	        get: function () {
	            return this._type;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return Message;
	})();
	exports.Message = Message;
	/**
	 * Send a message to the message handler to process immediately.
	 *
	 * @param handler - The handler which should process the message.
	 *
	 * @param msg - The message to send to the handler.
	 *
	 * #### Notes
	 * Unlike [[postMessage]], [[sendMessage]] delivers the message to
	 * the handler immediately. The handler will not have the opportunity
	 * to compress the message, however the message will still be sent
	 * through any installed message filters.
	 *
	 * **See Also** [[postMessage]].
	 */
	function sendMessage(handler, msg) {
	    getDispatcher(handler).sendMessage(handler, msg);
	}
	exports.sendMessage = sendMessage;
	/**
	 * Post a message to the message handler to process in the future.
	 *
	 * @param handler - The handler which should process the message.
	 *
	 * @param msg - The message to post to the handler.
	 *
	 * #### Notes
	 * Unlike [[sendMessage]], [[postMessage]] will schedule the deliver of
	 * the message for the next cycle of the event loop. The handler will
	 * have the opportunity to compress the message in order to optimize
	 * its handling of similar messages. The message will be sent through
	 * any installed message filters before being delivered to the handler.
	 *
	 * **See Also** [[sendMessage]].
	 */
	function postMessage(handler, msg) {
	    getDispatcher(handler).postMessage(handler, msg);
	}
	exports.postMessage = postMessage;
	/**
	 * Test whether a message handler has posted messages pending delivery.
	 *
	 * @param handler - The message handler of interest.
	 *
	 * @returns `true` if the handler has pending posted messages, `false`
	 *   otherwise.
	 *
	 * **See Also** [[sendPendingMessage]].
	 */
	function hasPendingMessages(handler) {
	    return getDispatcher(handler).hasPendingMessages();
	}
	exports.hasPendingMessages = hasPendingMessages;
	/**
	 * Send the first pending posted message to the message handler.
	 *
	 * @param handler - The message handler of interest.
	 *
	 * #### Notes
	 * If the handler has no pending messages, this is a no-op.
	 *
	 * **See Also** [[hasPendingMessages]].
	 */
	function sendPendingMessage(handler) {
	    getDispatcher(handler).sendPendingMessage(handler);
	}
	exports.sendPendingMessage = sendPendingMessage;
	/**
	 * Install a message filter for a message handler.
	 *
	 * A message filter is invoked before the message handler processes a
	 * message. If the filter returns `true` from its [[filterMessage]] method,
	 * no other filters will be invoked, and the message will not be delivered.
	 *
	 * The most recently installed message filter is executed first.
	 *
	 * @param handler - The handler whose messages should be filtered.
	 *
	 * @param filter - The filter to install for the handler.
	 *
	 * #### Notes
	 * It is possible to install the same filter multiple times. If the
	 * filter should be unique, call [[removeMessageFilter]] first.
	 *
	 * **See Also** [[removeMessageFilter]].
	 */
	function installMessageFilter(handler, filter) {
	    getDispatcher(handler).installMessageFilter(filter);
	}
	exports.installMessageFilter = installMessageFilter;
	/**
	 * Remove a previously installed message filter for a message handler.
	 *
	 * @param handler - The handler for which the filter is installed.
	 *
	 * @param filter - The filter to remove.
	 *
	 * #### Notes
	 * This will remove **all** occurrences of the filter. If the filter is
	 * not installed, this is a no-op.
	 *
	 * It is safe to call this function while the filter is executing.
	 *
	 * **See Also** [[installMessageFilter]].
	 */
	function removeMessageFilter(handler, filter) {
	    getDispatcher(handler).removeMessageFilter(filter);
	}
	exports.removeMessageFilter = removeMessageFilter;
	/**
	 * Clear all message data associated with the message handler.
	 *
	 * @param handler - The message handler for which to clear the data.
	 *
	 * #### Notes
	 * This will remove all pending messages and filters for the handler.
	 */
	function clearMessageData(handler) {
	    var dispatcher = dispatcherMap.get(handler);
	    if (dispatcher)
	        dispatcher.clear();
	    dispatchQueue.removeAll(handler);
	}
	exports.clearMessageData = clearMessageData;
	/**
	 * The internal mapping of message handler to message dispatcher
	 */
	var dispatcherMap = new WeakMap();
	/**
	 * The internal queue of pending message handlers.
	 */
	var dispatchQueue = new phosphor_queue_1.Queue();
	/**
	 * The internal animation frame id for the message loop wake up call.
	 */
	var frameId = void 0;
	/**
	 * A local reference to an event loop hook.
	 */
	var raf;
	if (typeof requestAnimationFrame === 'function') {
	    raf = requestAnimationFrame;
	}
	else {
	    raf = setImmediate;
	}
	/**
	 * Get or create the message dispatcher for a message handler.
	 */
	function getDispatcher(handler) {
	    var dispatcher = dispatcherMap.get(handler);
	    if (dispatcher)
	        return dispatcher;
	    dispatcher = new MessageDispatcher();
	    dispatcherMap.set(handler, dispatcher);
	    return dispatcher;
	}
	/**
	 * Wake up the message loop to process any pending dispatchers.
	 *
	 * This is a no-op if a wake up is not needed or is already pending.
	 */
	function wakeUpMessageLoop() {
	    if (frameId === void 0 && !dispatchQueue.empty) {
	        frameId = raf(runMessageLoop);
	    }
	}
	/**
	 * Run an iteration of the message loop.
	 *
	 * This will process all pending dispatchers in the queue. Dispatchers
	 * which are added to the queue while the message loop is running will
	 * be processed on the next message loop cycle.
	 */
	function runMessageLoop() {
	    // Clear the frame id so the next wake up call can be scheduled.
	    frameId = void 0;
	    // If the queue is empty, there is nothing else to do.
	    if (dispatchQueue.empty) {
	        return;
	    }
	    // Add a null sentinel value to the end of the queue. The queue
	    // will only be processed up to the first null value. This means
	    // that messages posted during this cycle will execute on the next
	    // cycle of the loop.
	    dispatchQueue.push(null);
	    // The message dispatch loop. If the dispatcher is the null sentinel,
	    // the processing of the current block of messages is complete and
	    // another loop is scheduled. Otherwise, the pending message is
	    // dispatched to the message handler.
	    while (!dispatchQueue.empty) {
	        var handler = dispatchQueue.pop();
	        if (handler === null) {
	            wakeUpMessageLoop();
	            return;
	        }
	        getDispatcher(handler).sendPendingMessage(handler);
	    }
	}
	/**
	 * Safely process a message for a message handler.
	 *
	 * If the handler throws an exception, it will be caught and logged.
	 */
	function safeProcess(handler, msg) {
	    try {
	        handler.processMessage(msg);
	    }
	    catch (err) {
	        console.error(err);
	    }
	}
	/**
	 * Safely compress a message for a message handler.
	 *
	 * If the handler throws an exception, it will be caught and logged.
	 */
	function safeCompress(handler, msg, queue) {
	    var result = false;
	    try {
	        result = handler.compressMessage(msg, queue);
	    }
	    catch (err) {
	        console.error(err);
	    }
	    return result;
	}
	/**
	 * Safely filter a message for a message handler.
	 *
	 * If the filter throws an exception, it will be caught and logged.
	 */
	function safeFilter(filter, handler, msg) {
	    var result = false;
	    try {
	        result = filter.filterMessage(handler, msg);
	    }
	    catch (err) {
	        console.error(err);
	    }
	    return result;
	}
	/**
	 * An internal class which manages message dispatching for a handler.
	 */
	var MessageDispatcher = (function () {
	    function MessageDispatcher() {
	        this._filters = null;
	        this._messages = null;
	    }
	    /**
	     * Send a message to the handler immediately.
	     *
	     * The message will first be sent through installed filters.
	     */
	    MessageDispatcher.prototype.sendMessage = function (handler, msg) {
	        if (!this._filterMessage(handler, msg)) {
	            safeProcess(handler, msg);
	        }
	    };
	    /**
	     * Post a message for delivery in the future.
	     *
	     * The message will first be compressed if possible.
	     */
	    MessageDispatcher.prototype.postMessage = function (handler, msg) {
	        if (!this._compressMessage(handler, msg)) {
	            this._enqueueMessage(handler, msg);
	        }
	    };
	    /**
	     * Test whether the dispatcher has messages pending delivery.
	     */
	    MessageDispatcher.prototype.hasPendingMessages = function () {
	        return !!(this._messages && !this._messages.empty);
	    };
	    /**
	     * Send the first pending message to the message handler.
	     */
	    MessageDispatcher.prototype.sendPendingMessage = function (handler) {
	        if (this._messages && !this._messages.empty) {
	            this.sendMessage(handler, this._messages.pop());
	        }
	    };
	    /**
	     * Install a message filter for the dispatcher.
	     */
	    MessageDispatcher.prototype.installMessageFilter = function (filter) {
	        this._filters = { next: this._filters, filter: filter };
	    };
	    /**
	     * Remove all occurrences of a message filter from the dispatcher.
	     */
	    MessageDispatcher.prototype.removeMessageFilter = function (filter) {
	        var link = this._filters;
	        var prev = null;
	        while (link !== null) {
	            if (link.filter === filter) {
	                link.filter = null;
	            }
	            else if (prev === null) {
	                this._filters = link;
	                prev = link;
	            }
	            else {
	                prev.next = link;
	                prev = link;
	            }
	            link = link.next;
	        }
	        if (!prev) {
	            this._filters = null;
	        }
	        else {
	            prev.next = null;
	        }
	    };
	    /**
	     * Clear all messages and filters from the dispatcher.
	     */
	    MessageDispatcher.prototype.clear = function () {
	        if (this._messages) {
	            this._messages.clear();
	        }
	        for (var link = this._filters; link !== null; link = link.next) {
	            link.filter = null;
	        }
	        this._filters = null;
	    };
	    /**
	     * Run the installed message filters for the handler.
	     *
	     * Returns `true` if the message was filtered, `false` otherwise.
	     */
	    MessageDispatcher.prototype._filterMessage = function (handler, msg) {
	        for (var link = this._filters; link !== null; link = link.next) {
	            if (link.filter && safeFilter(link.filter, handler, msg)) {
	                return true;
	            }
	        }
	        return false;
	    };
	    /**
	     * Compress the mssage for the given handler.
	     *
	     * Returns `true` if the message was compressed, `false` otherwise.
	     */
	    MessageDispatcher.prototype._compressMessage = function (handler, msg) {
	        if (!handler.compressMessage) {
	            return false;
	        }
	        if (!this._messages || this._messages.empty) {
	            return false;
	        }
	        return safeCompress(handler, msg, this._messages);
	    };
	    /**
	     * Enqueue the message for future delivery to the handler.
	     */
	    MessageDispatcher.prototype._enqueueMessage = function (handler, msg) {
	        this._ensureMessages().push(msg);
	        dispatchQueue.push(handler);
	        wakeUpMessageLoop();
	    };
	    /**
	     * Get the internal message queue, creating it if needed.
	     */
	    MessageDispatcher.prototype._ensureMessages = function () {
	        return this._messages || (this._messages = new phosphor_queue_1.Queue());
	    };
	    return MessageDispatcher;
	})();
	//# sourceMappingURL=index.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14).setImmediate))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(15).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14).setImmediate, __webpack_require__(14).clearImmediate))

/***/ },
/* 15 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	(function () {
	  try {
	    cachedSetTimeout = setTimeout;
	  } catch (e) {
	    cachedSetTimeout = function () {
	      throw new Error('setTimeout is not defined');
	    }
	  }
	  try {
	    cachedClearTimeout = clearTimeout;
	  } catch (e) {
	    cachedClearTimeout = function () {
	      throw new Error('clearTimeout is not defined');
	    }
	  }
	} ())
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = cachedSetTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    cachedClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        cachedSetTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 16 */
/***/ function(module, exports) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	/**
	 * A generic FIFO queue data structure.
	 *
	 * #### Notes
	 * This queue is implemented internally using a singly linked list and
	 * can grow to arbitrary size.
	 *
	 * #### Example
	 * ```typescript
	 * let q = new Queue<number>([0, 1, 2]);
	 * q.size;      // 3
	 * q.empty;     // false
	 * q.pop();     // 0
	 * q.pop();     // 1
	 * q.push(42);  // undefined
	 * q.size;      // 2
	 * q.pop();     // 2
	 * q.pop();     // 42
	 * q.pop();     // undefined
	 * q.size;      // 0
	 * q.empty;     // true
	 * ```
	 */
	var Queue = (function () {
	    /**
	     * Construct a new queue.
	     *
	     * @param items - The initial items for the queue.
	     */
	    function Queue(items) {
	        var _this = this;
	        this._size = 0;
	        this._front = null;
	        this._back = null;
	        if (items)
	            items.forEach(function (item) { return _this.push(item); });
	    }
	    Object.defineProperty(Queue.prototype, "size", {
	        /**
	         * Get the number of elements in the queue.
	         *
	         * #### Notes
	         * This has `O(1)` complexity.
	         */
	        get: function () {
	            return this._size;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Queue.prototype, "empty", {
	        /**
	         * Test whether the queue is empty.
	         *
	         * #### Notes
	         * This has `O(1)` complexity.
	         */
	        get: function () {
	            return this._size === 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Queue.prototype, "front", {
	        /**
	         * Get the value at the front of the queue.
	         *
	         * #### Notes
	         * This has `O(1)` complexity.
	         *
	         * If the queue is empty, this value will be `undefined`.
	         */
	        get: function () {
	            return this._front !== null ? this._front.value : void 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Queue.prototype, "back", {
	        /**
	         * Get the value at the back of the queue.
	         *
	         * #### Notes
	         * This has `O(1)` complexity.
	         *
	         * If the queue is empty, this value will be `undefined`.
	         */
	        get: function () {
	            return this._back !== null ? this._back.value : void 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Push a value onto the back of the queue.
	     *
	     * @param value - The value to add to the queue.
	     *
	     * #### Notes
	     * This has `O(1)` complexity.
	     */
	    Queue.prototype.push = function (value) {
	        var link = { next: null, value: value };
	        if (this._back === null) {
	            this._front = link;
	            this._back = link;
	        }
	        else {
	            this._back.next = link;
	            this._back = link;
	        }
	        this._size++;
	    };
	    /**
	     * Pop and return the value at the front of the queue.
	     *
	     * @returns The value at the front of the queue.
	     *
	     * #### Notes
	     * This has `O(1)` complexity.
	     *
	     * If the queue is empty, the return value will be `undefined`.
	     */
	    Queue.prototype.pop = function () {
	        var link = this._front;
	        if (link === null) {
	            return void 0;
	        }
	        if (link.next === null) {
	            this._front = null;
	            this._back = null;
	        }
	        else {
	            this._front = link.next;
	        }
	        this._size--;
	        return link.value;
	    };
	    /**
	     * Remove the first occurrence of a value from the queue.
	     *
	     * @param value - The value to remove from the queue.
	     *
	     * @returns `true` on success, `false` otherwise.
	     *
	     * #### Notes
	     * This has `O(N)` complexity.
	     */
	    Queue.prototype.remove = function (value) {
	        var link = this._front;
	        var prev = null;
	        while (link !== null) {
	            if (link.value === value) {
	                if (prev === null) {
	                    this._front = link.next;
	                }
	                else {
	                    prev.next = link.next;
	                }
	                if (link.next === null) {
	                    this._back = prev;
	                }
	                this._size--;
	                return true;
	            }
	            prev = link;
	            link = link.next;
	        }
	        return false;
	    };
	    /**
	     * Remove all occurrences of a value from the queue.
	     *
	     * @param value - The value to remove from the queue.
	     *
	     * @returns The number of occurrences removed.
	     *
	     * #### Notes
	     * This has `O(N)` complexity.
	     */
	    Queue.prototype.removeAll = function (value) {
	        var count = 0;
	        var link = this._front;
	        var prev = null;
	        while (link !== null) {
	            if (link.value === value) {
	                count++;
	                this._size--;
	            }
	            else if (prev === null) {
	                this._front = link;
	                prev = link;
	            }
	            else {
	                prev.next = link;
	                prev = link;
	            }
	            link = link.next;
	        }
	        if (!prev) {
	            this._front = null;
	            this._back = null;
	        }
	        else {
	            prev.next = null;
	            this._back = prev;
	        }
	        return count;
	    };
	    /**
	     * Remove all values from the queue.
	     *
	     * #### Notes
	     * This has `O(1)` complexity.
	     */
	    Queue.prototype.clear = function () {
	        this._size = 0;
	        this._front = null;
	        this._back = null;
	    };
	    /**
	     * Create an array from the values in the queue.
	     *
	     * @returns An array of all values in the queue.
	     *
	     * #### Notes
	     * This has `O(N)` complexity.
	     */
	    Queue.prototype.toArray = function () {
	        var result = new Array(this._size);
	        for (var i = 0, link = this._front; link !== null; link = link.next, ++i) {
	            result[i] = link.value;
	        }
	        return result;
	    };
	    /**
	     * Test whether any value in the queue passes a predicate function.
	     *
	     * @param pred - The predicate to apply to the values.
	     *
	     * @returns `true` if any value in the queue passes the predicate,
	     *   or `false` otherwise.
	     *
	     * #### Notes
	     * This has `O(N)` complexity.
	     *
	     * It is **not** safe for the predicate to modify the queue while
	     * iterating.
	     */
	    Queue.prototype.some = function (pred) {
	        for (var i = 0, link = this._front; link !== null; link = link.next, ++i) {
	            if (pred(link.value, i))
	                return true;
	        }
	        return false;
	    };
	    /**
	     * Test whether all values in the queue pass a predicate function.
	     *
	     * @param pred - The predicate to apply to the values.
	     *
	     * @returns `true` if all values in the queue pass the predicate,
	     *   or `false` otherwise.
	     *
	     * #### Notes
	     * This has `O(N)` complexity.
	     *
	     * It is **not** safe for the predicate to modify the queue while
	     * iterating.
	     */
	    Queue.prototype.every = function (pred) {
	        for (var i = 0, link = this._front; link !== null; link = link.next, ++i) {
	            if (!pred(link.value, i))
	                return false;
	        }
	        return true;
	    };
	    /**
	     * Create an array of the values which pass a predicate function.
	     *
	     * @param pred - The predicate to apply to the values.
	     *
	     * @returns The array of values which pass the predicate.
	     *
	     * #### Notes
	     * This has `O(N)` complexity.
	     *
	     * It is **not** safe for the predicate to modify the queue while
	     * iterating.
	     */
	    Queue.prototype.filter = function (pred) {
	        var result = [];
	        for (var i = 0, link = this._front; link !== null; link = link.next, ++i) {
	            if (pred(link.value, i))
	                result.push(link.value);
	        }
	        return result;
	    };
	    /**
	     * Create an array of mapped values for the values in the queue.
	     *
	     * @param callback - The map function to apply to the values.
	     *
	     * @returns The array of values returned by the map function.
	     *
	     * #### Notes
	     * This has `O(N)` complexity.
	     *
	     * It is **not** safe for the callback to modify the queue while
	     * iterating.
	     */
	    Queue.prototype.map = function (callback) {
	        var result = new Array(this._size);
	        for (var i = 0, link = this._front; link !== null; link = link.next, ++i) {
	            result[i] = callback(link.value, i);
	        }
	        return result;
	    };
	    /**
	     * Execute a callback for each value in the queue.
	     *
	     * @param callback - The function to apply to the values.
	     *
	     * @returns The first value returned by the callback which is not
	     *   `undefined`.
	     *
	     * #### Notes
	     * This has `O(N)` complexity.
	     *
	     * Iteration will terminate immediately if the callback returns any
	     * value other than `undefined`.
	     *
	     * It is **not** safe for the callback to modify the queue while
	     * iterating.
	     */
	    Queue.prototype.forEach = function (callback) {
	        for (var i = 0, link = this._front; link !== null; link = link.next, ++i) {
	            var result = callback(link.value, i);
	            if (result !== void 0)
	                return result;
	        }
	        return void 0;
	    };
	    return Queue;
	})();
	exports.Queue = Queue;
	//# sourceMappingURL=index.js.map

/***/ },
/* 17 */
/***/ function(module, exports) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	/**
	 * A property descriptor for a datum belonging to an object.
	 *
	 * Property descriptors can be used to expose a rich interface for an
	 * object which encapsulates value creation, coercion, and notification.
	 * They can also be used to extend the state of an object with semantic
	 * data from an unrelated class.
	 */
	var Property = (function () {
	    /**
	     * Construct a new property descriptor.
	     *
	     * @param options - The options for initializing the property.
	     */
	    function Property(options) {
	        this._pid = nextPID();
	        this._name = options.name;
	        this._value = options.value;
	        this._create = options.create;
	        this._coerce = options.coerce;
	        this._compare = options.compare;
	        this._changed = options.changed;
	        this._notify = options.notify;
	    }
	    Object.defineProperty(Property.prototype, "name", {
	        /**
	         * Get the human readable name for the property.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Property.prototype, "notify", {
	        /**
	         * Get the notify signal for the property.
	         *
	         * #### Notes
	         * This will be `undefined` if no notify signal was provided.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._notify;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Get the current value of the property for a given owner.
	     *
	     * @param owner - The property owner of interest.
	     *
	     * @returns The current value of the property.
	     *
	     * #### Notes
	     * If the value has not yet been set, the default value will be
	     * computed and assigned as the current value of the property.
	     */
	    Property.prototype.get = function (owner) {
	        var value;
	        var hash = lookupHash(owner);
	        if (this._pid in hash) {
	            value = hash[this._pid];
	        }
	        else {
	            value = hash[this._pid] = this._createValue(owner);
	        }
	        return value;
	    };
	    /**
	     * Set the current value of the property for a given owner.
	     *
	     * @param owner - The property owner of interest.
	     *
	     * @param value - The value for the property.
	     *
	     * #### Notes
	     * If the value has not yet been set, the default value will be
	     * computed and used as the previous value for the comparison.
	     */
	    Property.prototype.set = function (owner, value) {
	        var oldValue;
	        var hash = lookupHash(owner);
	        if (this._pid in hash) {
	            oldValue = hash[this._pid];
	        }
	        else {
	            oldValue = hash[this._pid] = this._createValue(owner);
	        }
	        var newValue = this._coerceValue(owner, value);
	        this._maybeNotify(owner, oldValue, hash[this._pid] = newValue);
	    };
	    /**
	     * Explicitly coerce the current property value for a given owner.
	     *
	     * @param owner - The property owner of interest.
	     *
	     * #### Notes
	     * If the value has not yet been set, the default value will be
	     * computed and used as the previous value for the comparison.
	     */
	    Property.prototype.coerce = function (owner) {
	        var oldValue;
	        var hash = lookupHash(owner);
	        if (this._pid in hash) {
	            oldValue = hash[this._pid];
	        }
	        else {
	            oldValue = hash[this._pid] = this._createValue(owner);
	        }
	        var newValue = this._coerceValue(owner, oldValue);
	        this._maybeNotify(owner, oldValue, hash[this._pid] = newValue);
	    };
	    /**
	     * Get or create the default value for the given owner.
	     */
	    Property.prototype._createValue = function (owner) {
	        var create = this._create;
	        return create ? create(owner) : this._value;
	    };
	    /**
	     * Coerce the value for the given owner.
	     */
	    Property.prototype._coerceValue = function (owner, value) {
	        var coerce = this._coerce;
	        return coerce ? coerce(owner, value) : value;
	    };
	    /**
	     * Compare the old value and new value for equality.
	     */
	    Property.prototype._compareValue = function (oldValue, newValue) {
	        var compare = this._compare;
	        return compare ? compare(oldValue, newValue) : oldValue === newValue;
	    };
	    /**
	     * Run the change notification if the given values are different.
	     */
	    Property.prototype._maybeNotify = function (owner, oldValue, newValue) {
	        var changed = this._changed;
	        var notify = this._notify;
	        if (!changed && !notify) {
	            return;
	        }
	        if (this._compareValue(oldValue, newValue)) {
	            return;
	        }
	        if (changed) {
	            changed(owner, oldValue, newValue);
	        }
	        if (notify) {
	            notify.bind(owner).emit({ name: this._name, oldValue: oldValue, newValue: newValue });
	        }
	    };
	    return Property;
	})();
	exports.Property = Property;
	/**
	 * Clear the stored property data for the given property owner.
	 *
	 * @param owner - The property owner of interest.
	 *
	 * #### Notes
	 * This will clear all property values for the owner, but it will
	 * **not** run the change notification for any of the properties.
	 */
	function clearPropertyData(owner) {
	    ownerData.delete(owner);
	}
	exports.clearPropertyData = clearPropertyData;
	/**
	 * A weak mapping of property owner to property hash.
	 */
	var ownerData = new WeakMap();
	/**
	 * A function which computes successive unique property ids.
	 */
	var nextPID = (function () { var id = 0; return function () { return 'pid-' + id++; }; })();
	/**
	 * Lookup the data hash for the property owner.
	 *
	 * This will create the hash if one does not already exist.
	 */
	function lookupHash(owner) {
	    var hash = ownerData.get(owner);
	    if (hash !== void 0)
	        return hash;
	    hash = Object.create(null);
	    ownerData.set(owner, hash);
	    return hash;
	}
	//# sourceMappingURL=index.js.map

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(19));
	__export(__webpack_require__(28));


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var arrays = __webpack_require__(3);
	var phosphor_messaging_1 = __webpack_require__(13);
	var phosphor_widget_1 = __webpack_require__(20);
	/**
	 * A concrete layout implementation suitable for many use cases.
	 *
	 * #### Notes
	 * This class is suitable as a base class for implementing a variety of
	 * layouts, but can also be used directly with standard CSS to layout a
	 * collection of widgets.
	 */
	var PanelLayout = (function (_super) {
	    __extends(PanelLayout, _super);
	    function PanelLayout() {
	        _super.apply(this, arguments);
	        this._children = [];
	    }
	    /**
	     * Dispose of the resources held by the layout.
	     *
	     * #### Notes
	     * This will dispose all current child widgets of the layout.
	     */
	    PanelLayout.prototype.dispose = function () {
	        while (this._children.length > 0) {
	            this._children.pop().dispose();
	        }
	        _super.prototype.dispose.call(this);
	    };
	    /**
	     * Get the number of child widgets in the layout.
	     *
	     * @returns The number of child widgets in the layout.
	     */
	    PanelLayout.prototype.childCount = function () {
	        return this._children.length;
	    };
	    /**
	     * Get the child widget at the specified index.
	     *
	     * @param index - The index of the child widget of interest.
	     *
	     * @returns The child at the specified index, or `undefined`.
	     */
	    PanelLayout.prototype.childAt = function (index) {
	        return this._children[index];
	    };
	    /**
	     * Add a child widget to the end of the layout.
	     *
	     * @param child - The child widget to add to the layout.
	     *
	     * #### Notes
	     * If the child is already contained in the layout, it will be moved.
	     */
	    PanelLayout.prototype.addChild = function (child) {
	        this.insertChild(this.childCount(), child);
	    };
	    /**
	     * Insert a child widget into the layout at the specified index.
	     *
	     * @param index - The index at which to insert the child widget.
	     *
	     * @param child - The child widget to insert into the layout.
	     *
	     * #### Notes
	     * If the child is already contained in the layout, it will be moved.
	     */
	    PanelLayout.prototype.insertChild = function (index, child) {
	        child.parent = this.parent;
	        var n = this._children.length;
	        var i = this._children.indexOf(child);
	        var j = Math.max(0, Math.min(index | 0, n));
	        if (i !== -1) {
	            if (j === n)
	                j--;
	            if (i === j)
	                return;
	            arrays.move(this._children, i, j);
	            if (this.parent)
	                this.moveChild(i, j, child);
	        }
	        else {
	            arrays.insert(this._children, j, child);
	            if (this.parent)
	                this.attachChild(j, child);
	        }
	    };
	    /**
	     * Remove a child widget from the layout.
	     *
	     * @param child - The child widget to remove from the layout.
	     *
	     * #### Notes
	     * A child widget will be removed from the layout automatically when
	     * its `parent` is set to `null`. This method should only be invoked
	     * directly when removing a widget from a layout which has yet to be
	     * installed on a parent widget.
	     *
	     * This method does *not* modify the widget's `parent`.
	     *
	     * If the child is not contained in the layout, this is a no-op.
	     */
	    PanelLayout.prototype.removeChild = function (child) {
	        var i = arrays.remove(this._children, child);
	        if (i !== -1 && this.parent)
	            this.detachChild(i, child);
	    };
	    /**
	     * Initialize the children of the layout.
	     *
	     * #### Notes
	     * This method is called automatically when the layout is installed
	     * on its parent widget.
	     *
	     * This may be reimplemented by subclasses as needed.
	     */
	    PanelLayout.prototype.initialize = function () {
	        for (var i = 0; i < this.childCount(); ++i) {
	            var child = this.childAt(i);
	            child.parent = this.parent;
	            this.attachChild(i, child);
	        }
	    };
	    /**
	     * Attach a child widget to the parent's DOM node.
	     *
	     * @param index - The current index of the child in the layout.
	     *
	     * @param child - The child widget to attach to the parent.
	     *
	     * #### Notes
	     * This method is called automatically by the panel layout at the
	     * appropriate time. It should not be called directly by user code.
	     *
	     * The default implementation adds the child's node to the parent's
	     * node at the proper location, and sends an `'after-attach'` message
	     * to the child if the parent is attached to the DOM.
	     *
	     * Subclasses may reimplement this method to control how the child's
	     * node is added to the parent's node, but the reimplementation must
	     * send an `'after-attach'` message to the child if the parent is
	     * attached to the DOM.
	     */
	    PanelLayout.prototype.attachChild = function (index, child) {
	        var ref = this.parent.node.children[index];
	        this.parent.node.insertBefore(child.node, ref);
	        if (this.parent.isAttached)
	            phosphor_messaging_1.sendMessage(child, phosphor_widget_1.Widget.MsgAfterAttach);
	    };
	    /**
	     * Move a child widget in the parent's DOM node.
	     *
	     * @param fromIndex - The previous index of the child in the layout.
	     *
	     * @param toIndex - The current index of the child in the layout.
	     *
	     * @param child - The child widget to move in the parent.
	     *
	     * #### Notes
	     * This method is called automatically by the panel layout at the
	     * appropriate time. It should not be called directly by user code.
	     *
	     * The default implementation moves the child's node to the proper
	     * location in the parent's node and sends both a `'before-detach'`
	     * and an `'after-attach'` message to the child if the parent is
	     * attached to the DOM.
	     *
	     * Subclasses may reimplement this method to control how the child's
	     * node is moved in the parent's node, but the reimplementation must
	     * send both a `'before-detach'` and an `'after-attach'` message to
	     * the child if the parent is attached to the DOM.
	     */
	    PanelLayout.prototype.moveChild = function (fromIndex, toIndex, child) {
	        if (this.parent.isAttached)
	            phosphor_messaging_1.sendMessage(child, phosphor_widget_1.Widget.MsgBeforeDetach);
	        this.parent.node.removeChild(child.node);
	        var ref = this.parent.node.children[toIndex];
	        this.parent.node.insertBefore(child.node, ref);
	        if (this.parent.isAttached)
	            phosphor_messaging_1.sendMessage(child, phosphor_widget_1.Widget.MsgAfterAttach);
	    };
	    /**
	     * Detach a child widget from the parent's DOM node.
	     *
	     * @param index - The previous index of the child in the layout.
	     *
	     * @param child - The child widget to detach from the parent.
	     *
	     * #### Notes
	     * This method is called automatically by the panel layout at the
	     * appropriate time. It should not be called directly by user code.
	     *
	     * The default implementation removes the child's node from the
	     * parent's node, and sends a `'before-detach'` message to the child
	     * if the parent is attached to the DOM.
	     *
	     * Subclasses may reimplement this method to control how the child's
	     * node is removed from the parent's node, but the reimplementation
	     * must send a `'before-detach'` message to the child if the parent
	     * is attached to the DOM.
	     */
	    PanelLayout.prototype.detachChild = function (index, child) {
	        if (this.parent.isAttached)
	            phosphor_messaging_1.sendMessage(child, phosphor_widget_1.Widget.MsgBeforeDetach);
	        this.parent.node.removeChild(child.node);
	    };
	    /**
	     * A message handler invoked on a `'child-removed'` message.
	     *
	     * #### Notes
	     * This will remove the child from the layout.
	     *
	     * Subclasses should **not** typically reimplement this method.
	     */
	    PanelLayout.prototype.onChildRemoved = function (msg) {
	        this.removeChild(msg.child);
	    };
	    return PanelLayout;
	})(phosphor_widget_1.AbstractLayout);
	exports.PanelLayout = PanelLayout;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(21));
	__export(__webpack_require__(25));
	__export(__webpack_require__(23));
	__webpack_require__(26);


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var phosphor_messaging_1 = __webpack_require__(13);
	var phosphor_properties_1 = __webpack_require__(17);
	var phosphor_signaling_1 = __webpack_require__(22);
	var widget_1 = __webpack_require__(23);
	/**
	 * The abstract base class of all Phosphor layouts.
	 *
	 * #### Notes
	 * A layout is used to add child widgets to a parent and to arrange
	 * those children within the parent's node.
	 *
	 * This class must be subclassed to make a fully functioning layout.
	 */
	var Layout = (function () {
	    function Layout() {
	        this._disposed = false;
	        this._parent = null;
	    }
	    /**
	     * Dispose of the resources held by the layout.
	     *
	     * #### Notes
	     * This method should be reimplemented by subclasses to dispose their
	     * children. All reimplementations should call the superclass method.
	     */
	    Layout.prototype.dispose = function () {
	        this._disposed = true;
	        this._parent = null;
	        phosphor_signaling_1.clearSignalData(this);
	        phosphor_properties_1.clearPropertyData(this);
	    };
	    Object.defineProperty(Layout.prototype, "isDisposed", {
	        /**
	         * Test whether the layout is disposed.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._disposed;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Layout.prototype, "parent", {
	        /**
	         * Get the parent widget of the layout.
	         */
	        get: function () {
	            return this._parent;
	        },
	        /**
	         * Set the parent widget of the layout.
	         *
	         * #### Notes
	         * This is set automatically when installing the layout on the parent
	         * widget. The layout parent should not be set directly by user code.
	         */
	        set: function (value) {
	            if (!value) {
	                throw new Error('Cannot set layout parent to null.');
	            }
	            if (this._parent === value) {
	                return;
	            }
	            if (this._parent) {
	                throw new Error('Cannot change layout parent.');
	            }
	            if (value.layout !== this) {
	                throw new Error('Invalid layout parent.');
	            }
	            this._parent = value;
	            this.initialize();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Process a message sent to the parent widget.
	     *
	     * @param msg - The message sent to the parent widget.
	     *
	     * #### Notes
	     * This method is called by the parent to process a message.
	     *
	     * Subclasses may reimplement this method as needed.
	     */
	    Layout.prototype.processParentMessage = function (msg) {
	        switch (msg.type) {
	            case 'resize':
	                this.onResize(msg);
	                break;
	            case 'update-request':
	                this.onUpdateRequest(msg);
	                break;
	            case 'fit-request':
	                this.onFitRequest(msg);
	                break;
	            case 'after-attach':
	                this.onAfterAttach(msg);
	                break;
	            case 'before-detach':
	                this.onBeforeDetach(msg);
	                break;
	            case 'after-show':
	                this.onAfterShow(msg);
	                break;
	            case 'before-hide':
	                this.onBeforeHide(msg);
	                break;
	            case 'child-removed':
	                this.onChildRemoved(msg);
	                break;
	            case 'child-shown':
	                this.onChildShown(msg);
	                break;
	            case 'child-hidden':
	                this.onChildHidden(msg);
	                break;
	        }
	    };
	    /**
	     * A message handler invoked on a `'fit-request'` message.
	     *
	     * The default implementation of this handler is a no-op.
	     */
	    Layout.prototype.onFitRequest = function (msg) { };
	    /**
	     * A message handler invoked on a `'child-shown'` message.
	     *
	     * The default implementation of this handler is a no-op.
	     */
	    Layout.prototype.onChildShown = function (msg) { };
	    /**
	     * A message handler invoked on a `'child-hidden'` message.
	     *
	     * The default implementation of this handler is a no-op.
	     */
	    Layout.prototype.onChildHidden = function (msg) { };
	    return Layout;
	})();
	exports.Layout = Layout;
	/**
	 * An abstract base class for creating index-based layouts.
	 *
	 * #### Notes
	 * This class implements core functionality which is required by nearly
	 * all layouts. It is a good starting point for creating custom layouts
	 * which control the types of children that may be added to the layout.
	 *
	 * This class must be subclassed to make a fully functioning layout.
	 */
	var AbstractLayout = (function (_super) {
	    __extends(AbstractLayout, _super);
	    function AbstractLayout() {
	        _super.apply(this, arguments);
	    }
	    /**
	     * Get the index of the specified child widget.
	     *
	     * @param child - The child widget of interest.
	     *
	     * @returns The index of the specified child, or `-1`.
	     */
	    AbstractLayout.prototype.childIndex = function (child) {
	        for (var i = 0; i < this.childCount(); ++i) {
	            if (this.childAt(i) === child)
	                return i;
	        }
	        return -1;
	    };
	    /**
	     * A message handler invoked on a `'resize'` message.
	     *
	     * #### Notes
	     * The default implementation of this method sends an `UnknownSize`
	     * resize message to all children.
	     *
	     * This may be reimplemented by subclasses as needed.
	     */
	    AbstractLayout.prototype.onResize = function (msg) {
	        for (var i = 0; i < this.childCount(); ++i) {
	            phosphor_messaging_1.sendMessage(this.childAt(i), widget_1.ResizeMessage.UnknownSize);
	        }
	    };
	    /**
	     * A message handler invoked on an `'update-request'` message.
	     *
	     * #### Notes
	     * The default implementation of this method sends an `UnknownSize`
	     * resize message to all children.
	     *
	     * This may be reimplemented by subclasses as needed.
	     */
	    AbstractLayout.prototype.onUpdateRequest = function (msg) {
	        for (var i = 0; i < this.childCount(); ++i) {
	            phosphor_messaging_1.sendMessage(this.childAt(i), widget_1.ResizeMessage.UnknownSize);
	        }
	    };
	    /**
	     * A message handler invoked on an `'after-attach'` message.
	     *
	     * #### Notes
	     * The default implementation of this method forwards the message
	     * to all children.
	     *
	     * This may be reimplemented by subclasses as needed.
	     */
	    AbstractLayout.prototype.onAfterAttach = function (msg) {
	        for (var i = 0; i < this.childCount(); ++i) {
	            phosphor_messaging_1.sendMessage(this.childAt(i), msg);
	        }
	    };
	    /**
	     * A message handler invoked on a `'before-detach'` message.
	     *
	     * #### Notes
	     * The default implementation of this method forwards the message
	     * to all children.
	     *
	     * This may be reimplemented by subclasses as needed.
	     */
	    AbstractLayout.prototype.onBeforeDetach = function (msg) {
	        for (var i = 0; i < this.childCount(); ++i) {
	            phosphor_messaging_1.sendMessage(this.childAt(i), msg);
	        }
	    };
	    /**
	     * A message handler invoked on an `'after-show'` message.
	     *
	     * #### Notes
	     * The default implementation of this method forwards the message
	     * to all non-hidden children.
	     *
	     * This may be reimplemented by subclasses as needed.
	     */
	    AbstractLayout.prototype.onAfterShow = function (msg) {
	        for (var i = 0; i < this.childCount(); ++i) {
	            var child = this.childAt(i);
	            if (!child.isHidden)
	                phosphor_messaging_1.sendMessage(child, msg);
	        }
	    };
	    /**
	     * A message handler invoked on a `'before-hide'` message.
	     *
	     * #### Notes
	     * The default implementation of this method forwards the message
	     * to all non-hidden children.
	     *
	     * This may be reimplemented by subclasses as needed.
	     */
	    AbstractLayout.prototype.onBeforeHide = function (msg) {
	        for (var i = 0; i < this.childCount(); ++i) {
	            var child = this.childAt(i);
	            if (!child.isHidden)
	                phosphor_messaging_1.sendMessage(child, msg);
	        }
	    };
	    return AbstractLayout;
	})(Layout);
	exports.AbstractLayout = AbstractLayout;


/***/ },
/* 22 */
/***/ function(module, exports) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	/**
	 * An object used for type-safe inter-object communication.
	 *
	 * #### Notes
	 * Signals provide a type-safe implementation of the publish-subscribe
	 * pattern. An object (publisher) declares which signals it will emit,
	 * and consumers connect callbacks (subscribers) to those signals. The
	 * subscribers are invoked whenever the publisher emits the signal.
	 *
	 * A `Signal` object must be bound to a sender in order to be useful.
	 * A common pattern is to declare a `Signal` object as a static class
	 * member, along with a convenience getter which binds the signal to
	 * the `this` instance on-demand.
	 *
	 * #### Example
	 * ```typescript
	 * import { ISignal, Signal } from 'phosphor-signaling';
	 *
	 * class MyClass {
	 *
	 *   static valueChangedSignal = new Signal<MyClass, number>();
	 *
	 *   constructor(name: string) {
	 *     this._name = name;
	 *   }
	 *
	 *   get valueChanged(): ISignal<MyClass, number> {
	 *     return MyClass.valueChangedSignal.bind(this);
	 *   }
	 *
	 *   get name(): string {
	 *     return this._name;
	 *   }
	 *
	 *   get value(): number {
	 *     return this._value;
	 *   }
	 *
	 *   set value(value: number) {
	 *     if (value !== this._value) {
	 *       this._value = value;
	 *       this.valueChanged.emit(value);
	 *     }
	 *   }
	 *
	 *   private _name: string;
	 *   private _value = 0;
	 * }
	 *
	 * function logger(sender: MyClass, value: number): void {
	 *   console.log(sender.name, value);
	 * }
	 *
	 * let m1 = new MyClass('foo');
	 * let m2 = new MyClass('bar');
	 *
	 * m1.valueChanged.connect(logger);
	 * m2.valueChanged.connect(logger);
	 *
	 * m1.value = 42;  // logs: foo 42
	 * m2.value = 17;  // logs: bar 17
	 * ```
	 */
	var Signal = (function () {
	    function Signal() {
	    }
	    /**
	     * Bind the signal to a specific sender.
	     *
	     * @param sender - The sender object to bind to the signal.
	     *
	     * @returns The bound signal object which can be used for connecting,
	     *   disconnecting, and emitting the signal.
	     */
	    Signal.prototype.bind = function (sender) {
	        return new BoundSignal(this, sender);
	    };
	    return Signal;
	})();
	exports.Signal = Signal;
	/**
	 * Remove all connections where the given object is the sender.
	 *
	 * @param sender - The sender object of interest.
	 *
	 * #### Example
	 * ```typescript
	 * disconnectSender(someObject);
	 * ```
	 */
	function disconnectSender(sender) {
	    var list = senderMap.get(sender);
	    if (!list) {
	        return;
	    }
	    var conn = list.first;
	    while (conn !== null) {
	        removeFromSendersList(conn);
	        conn.callback = null;
	        conn.thisArg = null;
	        conn = conn.nextReceiver;
	    }
	    senderMap.delete(sender);
	}
	exports.disconnectSender = disconnectSender;
	/**
	 * Remove all connections where the given object is the receiver.
	 *
	 * @param receiver - The receiver object of interest.
	 *
	 * #### Notes
	 * If a `thisArg` is provided when connecting a signal, that object
	 * is considered the receiver. Otherwise, the `callback` is used as
	 * the receiver.
	 *
	 * #### Example
	 * ```typescript
	 * // disconnect a regular object receiver
	 * disconnectReceiver(myObject);
	 *
	 * // disconnect a plain callback receiver
	 * disconnectReceiver(myCallback);
	 * ```
	 */
	function disconnectReceiver(receiver) {
	    var conn = receiverMap.get(receiver);
	    if (!conn) {
	        return;
	    }
	    while (conn !== null) {
	        var next = conn.nextSender;
	        conn.callback = null;
	        conn.thisArg = null;
	        conn.prevSender = null;
	        conn.nextSender = null;
	        conn = next;
	    }
	    receiverMap.delete(receiver);
	}
	exports.disconnectReceiver = disconnectReceiver;
	/**
	 * Clear all signal data associated with the given object.
	 *
	 * @param obj - The object for which the signal data should be cleared.
	 *
	 * #### Notes
	 * This removes all signal connections where the object is used as
	 * either the sender or the receiver.
	 *
	 * #### Example
	 * ```typescript
	 * clearSignalData(someObject);
	 * ```
	 */
	function clearSignalData(obj) {
	    disconnectSender(obj);
	    disconnectReceiver(obj);
	}
	exports.clearSignalData = clearSignalData;
	/**
	 * A concrete implementation of ISignal.
	 */
	var BoundSignal = (function () {
	    /**
	     * Construct a new bound signal.
	     */
	    function BoundSignal(signal, sender) {
	        this._signal = signal;
	        this._sender = sender;
	    }
	    /**
	     * Connect a callback to the signal.
	     */
	    BoundSignal.prototype.connect = function (callback, thisArg) {
	        return connect(this._sender, this._signal, callback, thisArg);
	    };
	    /**
	     * Disconnect a callback from the signal.
	     */
	    BoundSignal.prototype.disconnect = function (callback, thisArg) {
	        return disconnect(this._sender, this._signal, callback, thisArg);
	    };
	    /**
	     * Emit the signal and invoke the connected callbacks.
	     */
	    BoundSignal.prototype.emit = function (args) {
	        emit(this._sender, this._signal, args);
	    };
	    return BoundSignal;
	})();
	/**
	 * A struct which holds connection data.
	 */
	var Connection = (function () {
	    function Connection() {
	        /**
	         * The signal for the connection.
	         */
	        this.signal = null;
	        /**
	         * The callback connected to the signal.
	         */
	        this.callback = null;
	        /**
	         * The `this` context for the callback.
	         */
	        this.thisArg = null;
	        /**
	         * The next connection in the singly linked receivers list.
	         */
	        this.nextReceiver = null;
	        /**
	         * The next connection in the doubly linked senders list.
	         */
	        this.nextSender = null;
	        /**
	         * The previous connection in the doubly linked senders list.
	         */
	        this.prevSender = null;
	    }
	    return Connection;
	})();
	/**
	 * The list of receiver connections for a specific sender.
	 */
	var ConnectionList = (function () {
	    function ConnectionList() {
	        /**
	         * The ref count for the list.
	         */
	        this.refs = 0;
	        /**
	         * The first connection in the list.
	         */
	        this.first = null;
	        /**
	         * The last connection in the list.
	         */
	        this.last = null;
	    }
	    return ConnectionList;
	})();
	/**
	 * A mapping of sender object to its receiver connection list.
	 */
	var senderMap = new WeakMap();
	/**
	 * A mapping of receiver object to its sender connection list.
	 */
	var receiverMap = new WeakMap();
	/**
	 * Create a connection between a sender, signal, and callback.
	 */
	function connect(sender, signal, callback, thisArg) {
	    // Coerce a `null` thisArg to `undefined`.
	    thisArg = thisArg || void 0;
	    // Search for an equivalent connection and bail if one exists.
	    var list = senderMap.get(sender);
	    if (list && findConnection(list, signal, callback, thisArg)) {
	        return false;
	    }
	    // Create a new connection.
	    var conn = new Connection();
	    conn.signal = signal;
	    conn.callback = callback;
	    conn.thisArg = thisArg;
	    // Add the connection to the receivers list.
	    if (!list) {
	        list = new ConnectionList();
	        list.first = conn;
	        list.last = conn;
	        senderMap.set(sender, list);
	    }
	    else if (list.last === null) {
	        list.first = conn;
	        list.last = conn;
	    }
	    else {
	        list.last.nextReceiver = conn;
	        list.last = conn;
	    }
	    // Add the connection to the senders list.
	    var receiver = thisArg || callback;
	    var head = receiverMap.get(receiver);
	    if (head) {
	        head.prevSender = conn;
	        conn.nextSender = head;
	    }
	    receiverMap.set(receiver, conn);
	    return true;
	}
	/**
	 * Break the connection between a sender, signal, and callback.
	 */
	function disconnect(sender, signal, callback, thisArg) {
	    // Coerce a `null` thisArg to `undefined`.
	    thisArg = thisArg || void 0;
	    // Search for an equivalent connection and bail if none exists.
	    var list = senderMap.get(sender);
	    if (!list) {
	        return false;
	    }
	    var conn = findConnection(list, signal, callback, thisArg);
	    if (!conn) {
	        return false;
	    }
	    // Remove the connection from the senders list. It will be removed
	    // from the receivers list the next time the signal is emitted.
	    removeFromSendersList(conn);
	    // Clear the connection data so it becomes a dead connection.
	    conn.callback = null;
	    conn.thisArg = null;
	    return true;
	}
	/**
	 * Emit a signal and invoke the connected callbacks.
	 */
	function emit(sender, signal, args) {
	    // If there is no connection list, there is nothing to do.
	    var list = senderMap.get(sender);
	    if (!list) {
	        return;
	    }
	    // Prepare to dispatch the callbacks. Increment the reference count
	    // on the list so that the list is cleaned only when the emit stack
	    // is fully unwound.
	    list.refs++;
	    var dirty = false;
	    var last = list.last;
	    var conn = list.first;
	    // Dispatch the callbacks. If a connection has a null callback, it
	    // indicates the list is dirty. Connections which match the signal
	    // are safely dispatched where all exceptions are logged. Dispatch
	    // is stopped at the last connection for the current stack frame.
	    while (conn !== null) {
	        if (!conn.callback) {
	            dirty = true;
	        }
	        else if (conn.signal === signal) {
	            safeInvoke(conn, sender, args);
	        }
	        if (conn === last) {
	            break;
	        }
	        conn = conn.nextReceiver;
	    }
	    // Decrement the reference count on the list.
	    list.refs--;
	    // Clean the list if it's dirty and the emit stack is fully unwound.
	    if (dirty && list.refs === 0) {
	        cleanList(list);
	    }
	}
	/**
	 * Safely invoke the callback for the given connection.
	 *
	 * Exceptions thrown by the callback will be caught and logged.
	 */
	function safeInvoke(conn, sender, args) {
	    try {
	        conn.callback.call(conn.thisArg, sender, args);
	    }
	    catch (err) {
	        console.error('Exception in signal handler:', err);
	    }
	}
	/**
	 * Find a matching connection in the given connection list.
	 *
	 * Returns `null` if no matching connection is found.
	 */
	function findConnection(list, signal, callback, thisArg) {
	    var conn = list.first;
	    while (conn !== null) {
	        if (conn.signal === signal &&
	            conn.callback === callback &&
	            conn.thisArg === thisArg) {
	            return conn;
	        }
	        conn = conn.nextReceiver;
	    }
	    return null;
	}
	/**
	 * Remove the dead connections from the given connection list.
	 */
	function cleanList(list) {
	    var prev;
	    var conn = list.first;
	    while (conn !== null) {
	        var next = conn.nextReceiver;
	        if (!conn.callback) {
	            conn.nextReceiver = null;
	        }
	        else if (!prev) {
	            list.first = conn;
	            prev = conn;
	        }
	        else {
	            prev.nextReceiver = conn;
	            prev = conn;
	        }
	        conn = next;
	    }
	    if (!prev) {
	        list.first = null;
	        list.last = null;
	    }
	    else {
	        prev.nextReceiver = null;
	        list.last = prev;
	    }
	}
	/**
	 * Remove a connection from the doubly linked list of senders.
	 */
	function removeFromSendersList(conn) {
	    var receiver = conn.thisArg || conn.callback;
	    if (!receiver) {
	        return;
	    }
	    var prev = conn.prevSender;
	    var next = conn.nextSender;
	    if (prev === null && next === null) {
	        receiverMap.delete(receiver);
	    }
	    else if (prev === null) {
	        receiverMap.set(receiver, next);
	        next.prevSender = null;
	    }
	    else if (next === null) {
	        prev.nextSender = null;
	    }
	    else {
	        prev.nextSender = next;
	        next.prevSender = prev;
	    }
	    conn.prevSender = null;
	    conn.nextSender = null;
	}
	//# sourceMappingURL=index.js.map

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var phosphor_messaging_1 = __webpack_require__(13);
	var phosphor_nodewrapper_1 = __webpack_require__(24);
	var phosphor_properties_1 = __webpack_require__(17);
	var phosphor_signaling_1 = __webpack_require__(22);
	var title_1 = __webpack_require__(25);
	/**
	 * The class name added to Widget instances.
	 */
	var WIDGET_CLASS = 'p-Widget';
	/**
	 * The class name added to hidden widgets.
	 */
	var HIDDEN_CLASS = 'p-mod-hidden';
	/**
	 * The base class of the Phosphor widget hierarchy.
	 *
	 * #### Notes
	 * This class will typically be subclassed in order to create a useful
	 * widget. However, it can be used directly to host externally created
	 * content. Simply instantiate an empty widget and add the DOM content
	 * directly to the widget's `.node`.
	 */
	var Widget = (function (_super) {
	    __extends(Widget, _super);
	    /**
	     * Construct a new widget.
	     */
	    function Widget() {
	        _super.call(this);
	        this._flags = 0;
	        this._layout = null;
	        this._parent = null;
	        this.addClass(WIDGET_CLASS);
	    }
	    /**
	     * Dispose of the widget and its descendants.
	     *
	     * #### Notes
	     * It is generally unsafe to use the widget after it is disposed.
	     *
	     * All calls made to this method after the first are a no-op.
	     */
	    Widget.prototype.dispose = function () {
	        // Do nothing if the widget is already disposed.
	        if (this.isDisposed) {
	            return;
	        }
	        // Set the disposed flag and emit the disposed signal.
	        this.setFlag(WidgetFlag.IsDisposed);
	        this.disposed.emit(void 0);
	        // Remove or detach the widget if necessary.
	        if (this.parent) {
	            this.parent = null;
	        }
	        else if (this.isAttached) {
	            this.detach();
	        }
	        // Dispose of the widget layout.
	        if (this._layout) {
	            this._layout.dispose();
	            this._layout = null;
	        }
	        // Clear the attached data associated with the widget.
	        phosphor_signaling_1.clearSignalData(this);
	        phosphor_messaging_1.clearMessageData(this);
	        phosphor_properties_1.clearPropertyData(this);
	    };
	    Object.defineProperty(Widget.prototype, "disposed", {
	        /**
	         * A signal emitted when the widget is disposed.
	         *
	         * **See also:** [[dispose]], [[disposed]]
	         */
	        get: function () {
	            return WidgetPrivate.disposedSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "isDisposed", {
	        /**
	         * Test whether the widget has been disposed.
	         *
	         * #### Notes
	         * This is a read-only property.
	         *
	         * **See also:** [[dispose]], [[disposed]]
	         */
	        get: function () {
	            return this.testFlag(WidgetFlag.IsDisposed);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "isAttached", {
	        /**
	         * Test whether the widget's node is attached to the DOM.
	         *
	         * #### Notes
	         * This is a read-only property.
	         *
	         * **See also:** [[attach]], [[detach]]
	         */
	        get: function () {
	            return this.testFlag(WidgetFlag.IsAttached);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "isHidden", {
	        /**
	         * Test whether the widget is explicitly hidden.
	         *
	         * #### Notes
	         * This is a read-only property.
	         *
	         * **See also:** [[isVisible]], [[hide]], [[show]]
	         */
	        get: function () {
	            return this.testFlag(WidgetFlag.IsHidden);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "isVisible", {
	        /**
	         * Test whether the widget is visible.
	         *
	         * #### Notes
	         * A widget is visible when it is attached to the DOM, is not
	         * explicitly hidden, and has no explicitly hidden ancestors.
	         *
	         * This is a read-only property.
	         *
	         * **See also:** [[isHidden]], [[hide]], [[show]]
	         */
	        get: function () {
	            return this.testFlag(WidgetFlag.IsVisible);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "title", {
	        /**
	         * Get the title data object for the widget.
	         *
	         * #### Notes
	         * The title data is used by some container widgets when displaying
	         * the widget along with a title, such as a tab panel or dock panel.
	         *
	         * Not all widgets will make use of the title data, so it is created
	         * on-demand the first time it is accessed.
	         */
	        get: function () {
	            return WidgetPrivate.titleProperty.get(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "parent", {
	        /**
	         * Get the parent of the widget.
	         *
	         * #### Notes
	         * This will be `null` if the widget does not have a parent.
	         */
	        get: function () {
	            return this._parent;
	        },
	        /**
	         * Set the parent of the widget.
	         *
	         * #### Notes
	         * The widget will be automatically removed from its current parent.
	         *
	         * This is a no-op if there is no effective parent change.
	         */
	        set: function (value) {
	            value = value || null;
	            if (this._parent === value) {
	                return;
	            }
	            if (value && this.contains(value)) {
	                throw new Error('Invalid parent widget.');
	            }
	            if (this._parent && !this._parent.isDisposed) {
	                phosphor_messaging_1.sendMessage(this._parent, new ChildMessage('child-removed', this));
	            }
	            this._parent = value;
	            if (this._parent && !this._parent.isDisposed) {
	                phosphor_messaging_1.sendMessage(this._parent, new ChildMessage('child-added', this));
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "layout", {
	        /**
	         * Get the layout for the widget.
	         *
	         * #### Notes
	         * This will be `null` if the widget does not have a layout.
	         */
	        get: function () {
	            return this._layout;
	        },
	        /**
	         * Set the layout for the widget.
	         *
	         * #### Notes
	         * The layout is single-use only. It cannot be set to `null` and it
	         * cannot be changed after the first assignment.
	         *
	         * The layout is disposed automatically when the widget is disposed.
	         */
	        set: function (value) {
	            if (!value) {
	                throw new Error('Cannot set widget layout to null.');
	            }
	            if (this._layout === value) {
	                return;
	            }
	            if (this._layout) {
	                throw new Error('Cannot change widget layout.');
	            }
	            if (value.parent) {
	                throw new Error('Cannot change layout parent.');
	            }
	            this._layout = value;
	            value.parent = this;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Test whether a widget is a descendant of this widget.
	     *
	     * @param widget - The widget of interest.
	     *
	     * @returns `true` if the widget is a descendant, `false` otherwise.
	     */
	    Widget.prototype.contains = function (widget) {
	        while (widget) {
	            if (widget === this) {
	                return true;
	            }
	            widget = widget._parent;
	        }
	        return false;
	    };
	    /**
	     * Post an `'update-request'` message to the widget.
	     *
	     * **See also:** [[MsgUpdateRequest]]
	     */
	    Widget.prototype.update = function () {
	        phosphor_messaging_1.postMessage(this, Widget.MsgUpdateRequest);
	    };
	    /**
	     * Post a `'fit-request'` message to the widget.
	     *
	     * **See also:** [[MsgFitRequest]]
	     */
	    Widget.prototype.fit = function () {
	        phosphor_messaging_1.postMessage(this, Widget.MsgFitRequest);
	    };
	    /**
	     * Send a `'close-request'` message to the widget.
	     *
	     * **See also:** [[MsgCloseRequest]]
	     */
	    Widget.prototype.close = function () {
	        phosphor_messaging_1.sendMessage(this, Widget.MsgCloseRequest);
	    };
	    /**
	     * Show the widget and make it visible to its parent widget.
	     *
	     * #### Notes
	     * This causes the [[isHidden]] property to be `false`.
	     */
	    Widget.prototype.show = function () {
	        if (!this.testFlag(WidgetFlag.IsHidden)) {
	            return;
	        }
	        this.clearFlag(WidgetFlag.IsHidden);
	        this.removeClass(HIDDEN_CLASS);
	        if (this.isAttached && (!this.parent || this.parent.isVisible)) {
	            phosphor_messaging_1.sendMessage(this, Widget.MsgAfterShow);
	        }
	        if (this.parent) {
	            phosphor_messaging_1.sendMessage(this.parent, new ChildMessage('child-shown', this));
	        }
	    };
	    /**
	     * Hide the widget and make it hidden to its parent widget.
	     *
	     * #### Notes
	     * This causes the [[isHidden]] property to be `true`.
	     */
	    Widget.prototype.hide = function () {
	        if (this.testFlag(WidgetFlag.IsHidden)) {
	            return;
	        }
	        this.setFlag(WidgetFlag.IsHidden);
	        if (this.isAttached && (!this.parent || this.parent.isVisible)) {
	            phosphor_messaging_1.sendMessage(this, Widget.MsgBeforeHide);
	        }
	        this.addClass(HIDDEN_CLASS);
	        if (this.parent) {
	            phosphor_messaging_1.sendMessage(this.parent, new ChildMessage('child-hidden', this));
	        }
	    };
	    /**
	     * Set whether the widget is hidden.
	     *
	     * @param hidden - `true` to hide the widget, or `false` to show it.
	     *
	     * #### Notes
	     * `widget.setHidden(true)` is equivalent to `widget.hide()`, and
	     * `widget.setHidden(false)` is equivalent to `widget.show()`.
	     */
	    Widget.prototype.setHidden = function (hidden) {
	        if (hidden) {
	            this.hide();
	        }
	        else {
	            this.show();
	        }
	    };
	    /**
	     * Attach the widget to a host DOM node.
	     *
	     * @param host - The DOM node to use as the widget's host.
	     *
	     * @throws An error if the widget is not a root widget, if the widget
	     *   is already attached, or if the host is not attached to the DOM.
	     */
	    Widget.prototype.attach = function (host) {
	        if (this.parent) {
	            throw new Error('Cannot attach child widget.');
	        }
	        if (this.isAttached || document.body.contains(this.node)) {
	            throw new Error('Widget already attached.');
	        }
	        if (!document.body.contains(host)) {
	            throw new Error('Host not attached.');
	        }
	        host.appendChild(this.node);
	        phosphor_messaging_1.sendMessage(this, Widget.MsgAfterAttach);
	    };
	    /**
	     * Detach the widget from its host DOM node.
	     *
	     * @throws An error if the widget is not a root widget, or if the
	     *   widget is not attached.
	     */
	    Widget.prototype.detach = function () {
	        if (this.parent) {
	            throw new Error('Cannot detach child widget.');
	        }
	        if (!this.isAttached || !document.body.contains(this.node)) {
	            throw new Error('Widget not attached.');
	        }
	        phosphor_messaging_1.sendMessage(this, Widget.MsgBeforeDetach);
	        this.node.parentNode.removeChild(this.node);
	    };
	    /**
	     * Test whether the given widget flag is set.
	     *
	     * #### Notes
	     * This will not typically be consumed directly by user code.
	     */
	    Widget.prototype.testFlag = function (flag) {
	        return (this._flags & flag) !== 0;
	    };
	    /**
	     * Set the given widget flag.
	     *
	     * #### Notes
	     * This will not typically be consumed directly by user code.
	     */
	    Widget.prototype.setFlag = function (flag) {
	        this._flags |= flag;
	    };
	    /**
	     * Clear the given widget flag.
	     *
	     * #### Notes
	     * This will not typically be consumed directly by user code.
	     */
	    Widget.prototype.clearFlag = function (flag) {
	        this._flags &= ~flag;
	    };
	    /**
	     * Compress a message posted to the widget.
	     *
	     * @param msg - The message posted to the widget.
	     *
	     * @param pending - The queue of pending messages for the widget.
	     *
	     * @returns `true` if the message should be ignored, or `false` if
	     *   the message should be enqueued for delivery as normal.
	     *
	     * #### Notes
	     * Subclasses may reimplement this method as needed.
	     */
	    Widget.prototype.compressMessage = function (msg, pending) {
	        if (msg.type === 'update-request') {
	            return pending.some(function (other) { return other.type === 'update-request'; });
	        }
	        if (msg.type === 'fit-request') {
	            return pending.some(function (other) { return other.type === 'fit-request'; });
	        }
	        return false;
	    };
	    /**
	     * Process a message sent to the widget.
	     *
	     * @param msg - The message sent to the widget.
	     *
	     * #### Notes
	     * Subclasses may reimplement this method as needed.
	     */
	    Widget.prototype.processMessage = function (msg) {
	        switch (msg.type) {
	            case 'resize':
	                this.notifyLayout(msg);
	                this.onResize(msg);
	                break;
	            case 'update-request':
	                this.notifyLayout(msg);
	                this.onUpdateRequest(msg);
	                break;
	            case 'after-show':
	                this.setFlag(WidgetFlag.IsVisible);
	                this.notifyLayout(msg);
	                this.onAfterShow(msg);
	                break;
	            case 'before-hide':
	                this.notifyLayout(msg);
	                this.onBeforeHide(msg);
	                this.clearFlag(WidgetFlag.IsVisible);
	                break;
	            case 'after-attach':
	                var visible = !this.isHidden && (!this.parent || this.parent.isVisible);
	                if (visible)
	                    this.setFlag(WidgetFlag.IsVisible);
	                this.setFlag(WidgetFlag.IsAttached);
	                this.notifyLayout(msg);
	                this.onAfterAttach(msg);
	                break;
	            case 'before-detach':
	                this.notifyLayout(msg);
	                this.onBeforeDetach(msg);
	                this.clearFlag(WidgetFlag.IsVisible);
	                this.clearFlag(WidgetFlag.IsAttached);
	                break;
	            case 'close-request':
	                this.notifyLayout(msg);
	                this.onCloseRequest(msg);
	                break;
	            case 'child-added':
	                this.notifyLayout(msg);
	                this.onChildAdded(msg);
	                break;
	            case 'child-removed':
	                this.notifyLayout(msg);
	                this.onChildRemoved(msg);
	                break;
	            default:
	                this.notifyLayout(msg);
	                break;
	        }
	    };
	    /**
	     * Invoke the message processing routine of the widget's layout.
	     *
	     * @param msg - The message to dispatch to the layout.
	     *
	     * #### Notes
	     * This is a no-op if the widget does not have a layout.
	     */
	    Widget.prototype.notifyLayout = function (msg) {
	        if (this.layout)
	            this.layout.processParentMessage(msg);
	    };
	    /**
	     * A message handler invoked on a `'close-request'` message.
	     *
	     * #### Notes
	     * The default implementation of this handler detaches the widget.
	     *
	     * **See also:** [[close]], [[MsgCloseRequest]]
	     */
	    Widget.prototype.onCloseRequest = function (msg) {
	        if (this.parent) {
	            this.parent = null;
	        }
	        else if (this.isAttached) {
	            this.detach();
	        }
	    };
	    /**
	     * A message handler invoked on a `'resize'` message.
	     *
	     * The default implementation of this handler is a no-op.
	     *
	     * **See also:** [[ResizeMessage]]
	     */
	    Widget.prototype.onResize = function (msg) { };
	    /**
	     * A message handler invoked on an `'update-request'` message.
	     *
	     * The default implementation of this handler is a no-op.
	     *
	     * **See also:** [[update]], [[MsgUpdateRequest]]
	     */
	    Widget.prototype.onUpdateRequest = function (msg) { };
	    /**
	     * A message handler invoked on an `'after-show'` message.
	     *
	     * The default implementation of this handler is a no-op.
	     *
	     * **See also:** [[MsgAfterShow]]
	     */
	    Widget.prototype.onAfterShow = function (msg) { };
	    /**
	     * A message handler invoked on a `'before-hide'` message.
	     *
	     * The default implementation of this handler is a no-op.
	     *
	     * **See also:** [[MsgBeforeHide]]
	     */
	    Widget.prototype.onBeforeHide = function (msg) { };
	    /**
	     * A message handler invoked on an `'after-attach'` message.
	     *
	     * The default implementation of this handler is a no-op.
	     *
	     * **See also:** [[MsgAfterAttach]]
	     */
	    Widget.prototype.onAfterAttach = function (msg) { };
	    /**
	     * A message handler invoked on a `'before-detach'` message.
	     *
	     * The default implementation of this handler is a no-op.
	     *
	     * **See also:** [[MsgBeforeDetach]]
	     */
	    Widget.prototype.onBeforeDetach = function (msg) { };
	    /**
	     * A message handler invoked on a `'child-added'` message.
	     *
	     * The default implementation of this handler is a no-op.
	     *
	     * **See also:** [[ChildMessage]]
	     */
	    Widget.prototype.onChildAdded = function (msg) { };
	    /**
	     * A message handler invoked on a `'child-removed'` message.
	     *
	     * The default implementation of this handler is a no-op.
	     *
	     * **See also:** [[ChildMessage]]
	     */
	    Widget.prototype.onChildRemoved = function (msg) { };
	    return Widget;
	})(phosphor_nodewrapper_1.NodeWrapper);
	exports.Widget = Widget;
	/**
	 * The namespace for the `Widget` class statics.
	 */
	var Widget;
	(function (Widget) {
	    /**
	     * A singleton `'update-request'` message.
	     *
	     * #### Notes
	     * This message can be dispatched to supporting widgets in order to
	     * update their content based on the current widget state. Not all
	     * widgets will respond to messages of this type.
	     *
	     * For widgets with a layout, this message will inform the layout to
	     * update the position and size of its child widgets.
	     *
	     * Messages of this type are compressed by default.
	     *
	     * **See also:** [[update]], [[onUpdateRequest]]
	     */
	    Widget.MsgUpdateRequest = new phosphor_messaging_1.Message('update-request');
	    /**
	     * A singleton `'fit-request'` message.
	     *
	     * #### Notes
	     * For widgets with a layout, this message will inform the layout to
	     * recalculate its size constraints to fit the space requirements of
	     * its child widgets, and to update their position and size. Not all
	     * layouts will respond to messages of this type.
	     *
	     * Messages of this type are compressed by default.
	     *
	     * **See also:** [[fit]]
	     */
	    Widget.MsgFitRequest = new phosphor_messaging_1.Message('fit-request');
	    /**
	     * A singleton `'close-request'` message.
	     *
	     * #### Notes
	     * This message should be dispatched to a widget when it should close
	     * and remove itself from the widget hierarchy.
	     *
	     * Messages of this type are compressed by default.
	     *
	     * **See also:** [[close]], [[onCloseRequest]]
	     */
	    Widget.MsgCloseRequest = new phosphor_messaging_1.Message('close-request');
	    /**
	     * A singleton `'after-show'` message.
	     *
	     * #### Notes
	     * This message is sent to a widget after it becomes visible.
	     *
	     * This message is **not** sent when the widget is being attached.
	     *
	     * **See also:** [[isVisible]], [[onAfterShow]]
	     */
	    Widget.MsgAfterShow = new phosphor_messaging_1.Message('after-show');
	    /**
	     * A singleton `'before-hide'` message.
	     *
	     * #### Notes
	     * This message is sent to a widget before it becomes not-visible.
	     *
	     * This message is **not** sent when the widget is being detached.
	     *
	     * **See also:** [[isVisible]], [[onBeforeHide]]
	     */
	    Widget.MsgBeforeHide = new phosphor_messaging_1.Message('before-hide');
	    /**
	     * A singleton `'after-attach'` message.
	     *
	     * #### Notes
	     * This message is sent to a widget after it is attached.
	     *
	     * **See also:** [[isAttached]], [[onAfterAttach]]
	     */
	    Widget.MsgAfterAttach = new phosphor_messaging_1.Message('after-attach');
	    /**
	     * A singleton `'before-detach'` message.
	     *
	     * #### Notes
	     * This message is sent to a widget before it is detached.
	     *
	     * **See also:** [[isAttached]], [[onBeforeDetach]]
	     */
	    Widget.MsgBeforeDetach = new phosphor_messaging_1.Message('before-detach');
	})(Widget = exports.Widget || (exports.Widget = {}));
	/**
	 * An enum of widget bit flags.
	 */
	(function (WidgetFlag) {
	    /**
	     * The widget has been disposed.
	     */
	    WidgetFlag[WidgetFlag["IsDisposed"] = 1] = "IsDisposed";
	    /**
	     * The widget is attached to the DOM.
	     */
	    WidgetFlag[WidgetFlag["IsAttached"] = 2] = "IsAttached";
	    /**
	     * The widget is hidden.
	     */
	    WidgetFlag[WidgetFlag["IsHidden"] = 4] = "IsHidden";
	    /**
	     * The widget is visible.
	     */
	    WidgetFlag[WidgetFlag["IsVisible"] = 8] = "IsVisible";
	})(exports.WidgetFlag || (exports.WidgetFlag = {}));
	var WidgetFlag = exports.WidgetFlag;
	/**
	 * A message class for child related messages.
	 */
	var ChildMessage = (function (_super) {
	    __extends(ChildMessage, _super);
	    /**
	     * Construct a new child message.
	     *
	     * @param type - The message type.
	     *
	     * @param child - The child widget for the message.
	     */
	    function ChildMessage(type, child) {
	        _super.call(this, type);
	        this._child = child;
	    }
	    Object.defineProperty(ChildMessage.prototype, "child", {
	        /**
	         * The child widget for the message.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._child;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ChildMessage;
	})(phosphor_messaging_1.Message);
	exports.ChildMessage = ChildMessage;
	/**
	 * A message class for `'resize'` messages.
	 */
	var ResizeMessage = (function (_super) {
	    __extends(ResizeMessage, _super);
	    /**
	     * Construct a new resize message.
	     *
	     * @param width - The **offset width** of the widget, or `-1` if
	     *   the width is not known.
	     *
	     * @param height - The **offset height** of the widget, or `-1` if
	     *   the height is not known.
	     */
	    function ResizeMessage(width, height) {
	        _super.call(this, 'resize');
	        this._width = width;
	        this._height = height;
	    }
	    Object.defineProperty(ResizeMessage.prototype, "width", {
	        /**
	         * The offset width of the widget.
	         *
	         * #### Notes
	         * This will be `-1` if the width is unknown.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._width;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ResizeMessage.prototype, "height", {
	        /**
	         * The offset height of the widget.
	         *
	         * #### Notes
	         * This will be `-1` if the height is unknown.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._height;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ResizeMessage;
	})(phosphor_messaging_1.Message);
	exports.ResizeMessage = ResizeMessage;
	/**
	 * The namespace for the `ResizeMessage` class statics.
	 */
	var ResizeMessage;
	(function (ResizeMessage) {
	    /**
	     * A singleton `'resize'` message with an unknown size.
	     */
	    ResizeMessage.UnknownSize = new ResizeMessage(-1, -1);
	})(ResizeMessage = exports.ResizeMessage || (exports.ResizeMessage = {}));
	/**
	 * The namespace for the widget private data.
	 */
	var WidgetPrivate;
	(function (WidgetPrivate) {
	    /**
	     * A signal emitted when the widget is disposed.
	     */
	    WidgetPrivate.disposedSignal = new phosphor_signaling_1.Signal();
	    /**
	     * A property for the title data for a widget.
	     */
	    WidgetPrivate.titleProperty = new phosphor_properties_1.Property({
	        name: 'title',
	        create: function () { return new title_1.Title(); },
	    });
	})(WidgetPrivate || (WidgetPrivate = {}));


/***/ },
/* 24 */
/***/ function(module, exports) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	/**
	 * A base class for creating objects which wrap a DOM node.
	 */
	var NodeWrapper = (function () {
	    /**
	     * Construct a new node wrapper.
	     */
	    function NodeWrapper() {
	        this._node = this.constructor.createNode();
	    }
	    /**
	     * Create the DOM node for a new node wrapper instance.
	     *
	     * @returns The DOM node to use with the node wrapper instance.
	     *
	     * #### Notes
	     * The default implementation creates an empty `<div>`.
	     *
	     * This may be reimplemented by a subclass to create a custom node.
	     */
	    NodeWrapper.createNode = function () {
	        return document.createElement('div');
	    };
	    Object.defineProperty(NodeWrapper.prototype, "node", {
	        /**
	         * Get the DOM node managed by the wrapper.
	         *
	         * #### Notes
	         * This property is read-only.
	         */
	        get: function () {
	            return this._node;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NodeWrapper.prototype, "id", {
	        /**
	         * Get the id of the wrapper's DOM node.
	         */
	        get: function () {
	            return this._node.id;
	        },
	        /**
	         * Set the id of the wrapper's DOM node.
	         */
	        set: function (value) {
	            this._node.id = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Test whether the wrapper's DOM node has the given class name.
	     *
	     * @param name - The class name of interest.
	     *
	     * @returns `true` if the node has the class, `false` otherwise.
	     */
	    NodeWrapper.prototype.hasClass = function (name) {
	        return this._node.classList.contains(name);
	    };
	    /**
	     * Add a class name to the wrapper's DOM node.
	     *
	     * @param name - The class name to add to the node.
	     *
	     * #### Notes
	     * If the class name is already added to the node, this is a no-op.
	     */
	    NodeWrapper.prototype.addClass = function (name) {
	        this._node.classList.add(name);
	    };
	    /**
	     * Remove a class name from the wrapper's DOM node.
	     *
	     * @param name - The class name to remove from the node.
	     *
	     * #### Notes
	     * If the class name is not yet added to the node, this is a no-op.
	     */
	    NodeWrapper.prototype.removeClass = function (name) {
	        this._node.classList.remove(name);
	    };
	    /**
	     * Toggle a class name on the wrapper's DOM node.
	     *
	     * @param name - The class name to toggle on the node.
	     *
	     * @param force - Whether to force add the class (`true`) or force
	     *   remove the class (`false`). If not provided, the presence of
	     *   the class will be toggled from its current state.
	     *
	     * @returns `true` if the class is now present, `false` otherwise.
	     */
	    NodeWrapper.prototype.toggleClass = function (name, force) {
	        var present;
	        if (force === true) {
	            this.addClass(name);
	            present = true;
	        }
	        else if (force === false) {
	            this.removeClass(name);
	            present = false;
	        }
	        else if (this.hasClass(name)) {
	            this.removeClass(name);
	            present = false;
	        }
	        else {
	            this.addClass(name);
	            present = true;
	        }
	        return present;
	    };
	    return NodeWrapper;
	})();
	exports.NodeWrapper = NodeWrapper;


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var phosphor_properties_1 = __webpack_require__(17);
	var phosphor_signaling_1 = __webpack_require__(22);
	/**
	 * An object which holds data related to a widget title.
	 *
	 * #### Notes
	 * A title object is intended to hold the data necessary to display a
	 * header for a particular widget. A common example is the `TabPanel`,
	 * which uses the widget title to populate the tab for a child widget.
	 */
	var Title = (function () {
	    /**
	     * Construct a new title.
	     *
	     * @param options - The options for initializing a title.
	     */
	    function Title(options) {
	        if (options)
	            TitlePrivate.initFrom(this, options);
	    }
	    Object.defineProperty(Title.prototype, "changed", {
	        /**
	         * A signal emitted when the title state changes.
	         */
	        get: function () {
	            return TitlePrivate.changedSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Title.prototype, "text", {
	        /**
	         * Get the text for the title.
	         *
	         * #### Notes
	         * The default value is an empty string.
	         */
	        get: function () {
	            return TitlePrivate.textProperty.get(this);
	        },
	        /**
	         * Set the text for the title.
	         */
	        set: function (value) {
	            TitlePrivate.textProperty.set(this, value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Title.prototype, "icon", {
	        /**
	         * Get the icon class name for the title.
	         *
	         * #### Notes
	         * The default value is an empty string.
	         */
	        get: function () {
	            return TitlePrivate.iconProperty.get(this);
	        },
	        /**
	         * Set the icon class name for the title.
	         *
	         * #### Notes
	         * Multiple class names can be separated with whitespace.
	         */
	        set: function (value) {
	            TitlePrivate.iconProperty.set(this, value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Title.prototype, "closable", {
	        /**
	         * Get the closable state for the title.
	         *
	         * #### Notes
	         * The default value is `false`.
	         */
	        get: function () {
	            return TitlePrivate.closableProperty.get(this);
	        },
	        /**
	         * Set the closable state for the title.
	         *
	         * #### Notes
	         * This controls the presence of a close icon when applicable.
	         */
	        set: function (value) {
	            TitlePrivate.closableProperty.set(this, value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Title.prototype, "className", {
	        /**
	         * Get the extra class name for the title.
	         *
	         * #### Notes
	         * The default value is an empty string.
	         */
	        get: function () {
	            return TitlePrivate.classNameProperty.get(this);
	        },
	        /**
	         * Set the extra class name for the title.
	         *
	         * #### Notes
	         * Multiple class names can be separated with whitespace.
	         */
	        set: function (value) {
	            TitlePrivate.classNameProperty.set(this, value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return Title;
	})();
	exports.Title = Title;
	/**
	 * The namespace for the title private data.
	 */
	var TitlePrivate;
	(function (TitlePrivate) {
	    /**
	     * A signal emitted when the title state changes.
	     */
	    TitlePrivate.changedSignal = new phosphor_signaling_1.Signal();
	    /**
	     * The property descriptor for the title text.
	     */
	    TitlePrivate.textProperty = new phosphor_properties_1.Property({
	        name: 'text',
	        value: '',
	        notify: TitlePrivate.changedSignal,
	    });
	    /**
	     * The property descriptor for the title icon class.
	     */
	    TitlePrivate.iconProperty = new phosphor_properties_1.Property({
	        name: 'icon',
	        value: '',
	        notify: TitlePrivate.changedSignal,
	    });
	    /**
	     * The property descriptor for the title closable state.
	     */
	    TitlePrivate.closableProperty = new phosphor_properties_1.Property({
	        name: 'closable',
	        value: false,
	        notify: TitlePrivate.changedSignal,
	    });
	    /**
	     * The property descriptor for the title extra class name.
	     */
	    TitlePrivate.classNameProperty = new phosphor_properties_1.Property({
	        name: 'className',
	        value: '',
	        notify: TitlePrivate.changedSignal,
	    });
	    /**
	     * Initialize a title from an options object.
	     */
	    function initFrom(title, options) {
	        if (options.text !== void 0) {
	            title.text = options.text;
	        }
	        if (options.icon !== void 0) {
	            title.icon = options.icon;
	        }
	        if (options.closable !== void 0) {
	            title.closable = options.closable;
	        }
	        if (options.className !== void 0) {
	            title.className = options.className;
	        }
	    }
	    TitlePrivate.initFrom = initFrom;
	})(TitlePrivate || (TitlePrivate = {}));


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(27);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(12)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js!./index.css", function() {
				var newContent = require("!!./../../css-loader/index.js!./index.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(11)();
	// imports


	// module
	exports.push([module.id, "/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2015, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\n.p-Widget {\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  overflow: hidden;\r\n  cursor: default;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n}\r\n\r\n\r\n.p-Widget.p-mod-hidden {\r\n  display: none;\r\n}\r\n", ""]);

	// exports


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var phosphor_widget_1 = __webpack_require__(20);
	var layout_1 = __webpack_require__(19);
	/**
	 * The class name added to Panel instances.
	 */
	var PANEL_CLASS = 'p-Panel';
	/**
	 * A simple and convenient panel widget class.
	 *
	 * #### Notes
	 * This class is suitable as a base class for implementing a variety of
	 * convenience panels, but can also be used directly along with CSS to
	 * arrange a collection of widgets.
	 *
	 * This class provides a convenience wrapper around a [[PanelLayout]].
	 */
	var Panel = (function (_super) {
	    __extends(Panel, _super);
	    /**
	     * Construct a new panel.
	     */
	    function Panel() {
	        _super.call(this);
	        this.addClass(PANEL_CLASS);
	        this.layout = this.constructor.createLayout();
	    }
	    /**
	     * Create a panel layout to use with a panel.
	     *
	     * @returns A new panel layout to use with a panel.
	     *
	     * #### Notes
	     * This may be reimplemented by a subclass to create custom layouts.
	     */
	    Panel.createLayout = function () {
	        return new layout_1.PanelLayout();
	    };
	    /**
	     * Get the number of child widgets in the panel.
	     *
	     * @returns The number of child widgets in the panel.
	     */
	    Panel.prototype.childCount = function () {
	        return this.layout.childCount();
	    };
	    /**
	     * Get the child widget at the specified index.
	     *
	     * @param index - The index of the child widget of interest.
	     *
	     * @returns The child at the specified index, or `undefined`.
	     */
	    Panel.prototype.childAt = function (index) {
	        return this.layout.childAt(index);
	    };
	    /**
	     * Get the index of the specified child widget.
	     *
	     * @param child - The child widget of interest.
	     *
	     * @returns The index of the specified child, or `-1`.
	     */
	    Panel.prototype.childIndex = function (child) {
	        return this.layout.childIndex(child);
	    };
	    /**
	     * Add a child widget to the end of the panel.
	     *
	     * @param child - The child widget to add to the panel.
	     *
	     * #### Notes
	     * If the child is already contained in the panel, it will be moved.
	     */
	    Panel.prototype.addChild = function (child) {
	        this.layout.addChild(child);
	    };
	    /**
	     * Insert a child widget at the specified index.
	     *
	     * @param index - The index at which to insert the child.
	     *
	     * @param child - The child widget to insert into to the panel.
	     *
	     * #### Notes
	     * If the child is already contained in the panel, it will be moved.
	     */
	    Panel.prototype.insertChild = function (index, child) {
	        this.layout.insertChild(index, child);
	    };
	    return Panel;
	})(phosphor_widget_1.Widget);
	exports.Panel = Panel;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var phosphor_panel_1 = __webpack_require__(18);
	var layout_1 = __webpack_require__(5);
	/**
	 * The class name added to BoxPanel instances.
	 */
	var BOX_PANEL_CLASS = 'p-BoxPanel';
	/**
	 * The class name added to a BoxPanel child.
	 */
	var CHILD_CLASS = 'p-BoxPanel-child';
	/**
	 * A panel which arranges its children in a single row or column.
	 *
	 * #### Notes
	 * This class provides a convenience wrapper around a [[BoxLayout]].
	 */
	var BoxPanel = (function (_super) {
	    __extends(BoxPanel, _super);
	    /**
	     * Construct a new box panel.
	     */
	    function BoxPanel() {
	        _super.call(this);
	        this.addClass(BOX_PANEL_CLASS);
	    }
	    /**
	     * Create a box layout for a box panel.
	     */
	    BoxPanel.createLayout = function () {
	        return new layout_1.BoxLayout();
	    };
	    Object.defineProperty(BoxPanel.prototype, "direction", {
	        /**
	         * Get the layout direction for the box panel.
	         */
	        get: function () {
	            return this.layout.direction;
	        },
	        /**
	         * Set the layout direction for the box panel.
	         */
	        set: function (value) {
	            this.layout.direction = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BoxPanel.prototype, "spacing", {
	        /**
	         * Get the inter-element spacing for the box panel.
	         */
	        get: function () {
	            return this.layout.spacing;
	        },
	        /**
	         * Set the inter-element spacing for the box panel.
	         */
	        set: function (value) {
	            this.layout.spacing = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * A message handler invoked on a `'child-added'` message.
	     */
	    BoxPanel.prototype.onChildAdded = function (msg) {
	        msg.child.addClass(CHILD_CLASS);
	    };
	    /**
	     * A message handler invoked on a `'child-removed'` message.
	     */
	    BoxPanel.prototype.onChildRemoved = function (msg) {
	        msg.child.removeClass(CHILD_CLASS);
	    };
	    return BoxPanel;
	})(phosphor_panel_1.Panel);
	exports.BoxPanel = BoxPanel;
	/**
	 * The namespace for the `BoxPanel` class statics.
	 */
	var BoxPanel;
	(function (BoxPanel) {
	    /**
	     * A convenience alias of the `LeftToRight` [[Direction]].
	     */
	    BoxPanel.LeftToRight = layout_1.Direction.LeftToRight;
	    /**
	     * A convenience alias of the `RightToLeft` [[Direction]].
	     */
	    BoxPanel.RightToLeft = layout_1.Direction.RightToLeft;
	    /**
	     * A convenience alias of the `TopToBottom` [[Direction]].
	     */
	    BoxPanel.TopToBottom = layout_1.Direction.TopToBottom;
	    /**
	     * A convenience alias of the `BottomToTop` [[Direction]].
	     */
	    BoxPanel.BottomToTop = layout_1.Direction.BottomToTop;
	    /**
	     * Get the box panel stretch factor for the given widget.
	     *
	     * @param widget - The widget of interest.
	     *
	     * @returns The box panel stretch factor for the widget.
	     */
	    function getStretch(widget) {
	        return layout_1.BoxLayout.getStretch(widget);
	    }
	    BoxPanel.getStretch = getStretch;
	    /**
	     * Set the box panel stretch factor for the given widget.
	     *
	     * @param widget - The widget of interest.
	     *
	     * @param value - The value for the stretch factor.
	     */
	    function setStretch(widget, value) {
	        layout_1.BoxLayout.setStretch(widget, value);
	    }
	    BoxPanel.setStretch = setStretch;
	    /**
	     * Get the box panel size basis for the given widget.
	     *
	     * @param widget - The widget of interest.
	     *
	     * @returns The box panel size basis for the widget.
	     */
	    function getSizeBasis(widget) {
	        return layout_1.BoxLayout.getSizeBasis(widget);
	    }
	    BoxPanel.getSizeBasis = getSizeBasis;
	    /**
	     * Set the box panel size basis for the given widget.
	     *
	     * @param widget - The widget of interest.
	     *
	     * @param value - The value for the size basis.
	     */
	    function setSizeBasis(widget, value) {
	        layout_1.BoxLayout.setSizeBasis(widget, value);
	    }
	    BoxPanel.setSizeBasis = setSizeBasis;
	})(BoxPanel = exports.BoxPanel || (exports.BoxPanel = {}));


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var arrays = __webpack_require__(3);
	var phosphor_domutil_1 = __webpack_require__(7);
	var phosphor_dragdrop_1 = __webpack_require__(31);
	var phosphor_nodewrapper_1 = __webpack_require__(24);
	var phosphor_properties_1 = __webpack_require__(17);
	var phosphor_splitpanel_1 = __webpack_require__(32);
	var phosphor_stackedpanel_1 = __webpack_require__(37);
	var phosphor_tabs_1 = __webpack_require__(40);
	var phosphor_widget_1 = __webpack_require__(20);
	__webpack_require__(45);
	// TODO - need better solution for storing these class names
	/**
	 * The class name added to DockPanel instances.
	 */
	var DOCK_PANEL_CLASS = 'p-DockPanel';
	/**
	 * The class name added to dock tab panels.
	 */
	var TAB_PANEL_CLASS = 'p-DockTabPanel';
	/**
	 * The class name added to dock split panels.
	 */
	var SPLIT_PANEL_CLASS = 'p-DockSplitPanel';
	/**
	 * The class name added to dock panel overlays.
	 */
	var OVERLAY_CLASS = 'p-DockPanel-overlay';
	/**
	 * The class name added to hidden overlays and tabs.
	 */
	var HIDDEN_CLASS = 'p-mod-hidden';
	/**
	 * The class name added to top root dock overlays.
	 */
	var ROOT_TOP_CLASS = 'p-mod-root-top';
	/**
	 * The class name added to left root dock overlays.
	 */
	var ROOT_LEFT_CLASS = 'p-mod-root-left';
	/**
	 * The class name added to right root dock overlays.
	 */
	var ROOT_RIGHT_CLASS = 'p-mod-root-right';
	/**
	 * The class name added to bottom root dock overlays.
	 */
	var ROOT_BOTTOM_CLASS = 'p-mod-root-bottom';
	/**
	 * The class name added to center root dock overlays.
	 */
	var ROOT_CENTER_CLASS = 'p-mod-root-center';
	/**
	 * The class name added to top panel dock overlays.
	 */
	var PANEL_TOP_CLASS = 'p-mod-panel-top';
	/**
	 * The class name added to left panel dock overlays.
	 */
	var PANEL_LEFT_CLASS = 'p-mod-panel-left';
	/**
	 * The class name added to right panel dock overlays.
	 */
	var PANEL_RIGHT_CLASS = 'p-mod-panel-right';
	/**
	 * The class name added to bottom panel dock overlays.
	 */
	var PANEL_BOTTOM_CLASS = 'p-mod-panel-bottom';
	/**
	 * The class named added to center panel dock overlays.
	 */
	var PANEL_CENTER_CLASS = 'p-mod-panel-center';
	/**
	 * The factory MIME type supported by the dock panel.
	 */
	var FACTORY_MIME = 'application/x-phosphor-widget-factory';
	/**
	 * The size of the edge dock zone for the root panel.
	 */
	var EDGE_SIZE = 30;
	/**
	 * A widget which provides a flexible docking area for content widgets.
	 */
	var DockPanel = (function (_super) {
	    __extends(DockPanel, _super);
	    /**
	     * Construct a new dock panel.
	     */
	    function DockPanel() {
	        _super.call(this);
	        this.addClass(DOCK_PANEL_CLASS);
	        this.layout = new phosphor_stackedpanel_1.StackedLayout();
	    }
	    Object.defineProperty(DockPanel.prototype, "spacing", {
	        /**
	         * Get the spacing between the tab panels.
	         */
	        get: function () {
	            return DockPanelPrivate.spacingProperty.get(this);
	        },
	        /**
	         * Set the spacing between the tab panels.
	         */
	        set: function (value) {
	            DockPanelPrivate.spacingProperty.set(this, value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Insert a widget as a new panel above a reference widget.
	     *
	     * @param widget - The widget to insert into the dock panel.
	     *
	     * @param ref - The reference widget. If this is not provided, the
	     *   widget will be inserted at the top edge of the dock panel.
	     *
	     * @throws An error if either `widget` or `ref` is invalid.
	     */
	    DockPanel.prototype.insertTop = function (widget, ref) {
	        DockPanelPrivate.insertSplit(this, widget, ref, phosphor_splitpanel_1.Orientation.Vertical, false);
	    };
	    /**
	     * Insert a widget as a new panel to the left of a reference widget.
	     *
	     * @param widget - The widget to insert into the dock panel.
	     *
	     * @param ref - The reference widget. If this is not provided, the
	     *   widget will be inserted at the left edge of the dock panel.
	     *
	     * @throws An error if either `widget` or `ref` is invalid.
	     */
	    DockPanel.prototype.insertLeft = function (widget, ref) {
	        DockPanelPrivate.insertSplit(this, widget, ref, phosphor_splitpanel_1.Orientation.Horizontal, false);
	    };
	    /**
	     * Insert a widget as a new panel to the right of a reference widget.
	     *
	     * @param widget - The widget to insert into the dock panel.
	     *
	     * @param ref - The reference widget. If this is not provided, the
	     *   widget will be inserted at the right edge of the dock panel.
	     *
	     * @throws An error if either `widget` or `ref` is invalid.
	     */
	    DockPanel.prototype.insertRight = function (widget, ref) {
	        DockPanelPrivate.insertSplit(this, widget, ref, phosphor_splitpanel_1.Orientation.Horizontal, true);
	    };
	    /**
	     * Insert a widget as a new panel below a reference widget.
	     *
	     * @param widget - The widget to insert into the dock panel.
	     *
	     * @param ref - The reference widget. If this is not provided, the
	     *   widget will be inserted at the bottom edge of the dock panel.
	     *
	     * @throws An error if either `widget` or `ref` is invalid.
	     */
	    DockPanel.prototype.insertBottom = function (widget, ref) {
	        DockPanelPrivate.insertSplit(this, widget, ref, phosphor_splitpanel_1.Orientation.Vertical, true);
	    };
	    /**
	     * Insert a widget as a sibling tab before a reference widget.
	     *
	     * @param widget - The widget to insert into the dock panel.
	     *
	     * @param ref - The reference widget. If this is not provided, the
	     *   widget will be inserted as the first tab in the top-left panel.
	     *
	     * @throws An error if either `widget` or `ref` is invalid.
	     */
	    DockPanel.prototype.insertTabBefore = function (widget, ref) {
	        DockPanelPrivate.insertTab(this, widget, ref, false);
	    };
	    /**
	     * Insert a widget as a sibling tab after a reference widget.
	     *
	     * @param widget - The widget to insert into the dock panel.
	     *
	     * @param ref - The reference widget. If this is not provided, the
	     *   widget will be inserted as the last tab in the top-left panel.
	     *
	     * @throws An error if either `widget` or `ref` is invalid.
	     */
	    DockPanel.prototype.insertTabAfter = function (widget, ref) {
	        DockPanelPrivate.insertTab(this, widget, ref, true);
	    };
	    /**
	     * Ensure the tab for the specified content widget is selected.
	     *
	     * @param widget - The content widget of interest.
	     *
	     * #### Notes
	     * If the widget is not contained in the dock panel, or is already
	     * the selected tab in its respective tab panel, this is a no-op.
	     */
	    DockPanel.prototype.selectWidget = function (widget) {
	        DockPanelPrivate.selectWidget(this, widget);
	    };
	    /**
	     * Handle the DOM events for the dock panel.
	     *
	     * @param event - The DOM event sent to the dock panel.
	     *
	     * #### Notes
	     * This method implements the DOM `EventListener` interface and is
	     * called in response to events on the dock panel's node. It should
	     * not be called directly by user code.
	     */
	    DockPanel.prototype.handleEvent = function (event) {
	        switch (event.type) {
	            case 'p-dragenter':
	                this._evtDragEnter(event);
	                break;
	            case 'p-dragleave':
	                this._evtDragLeave(event);
	                break;
	            case 'p-dragover':
	                this._evtDragOver(event);
	                break;
	            case 'p-drop':
	                this._evtDrop(event);
	                break;
	        }
	    };
	    /**
	     * A message handler invoked on an `'after-attach'` message.
	     */
	    DockPanel.prototype.onAfterAttach = function (msg) {
	        var node = this.node;
	        node.addEventListener('p-dragenter', this);
	        node.addEventListener('p-dragleave', this);
	        node.addEventListener('p-dragover', this);
	        node.addEventListener('p-drop', this);
	    };
	    /**
	     * A message handler invoked on a `'before-detach'` message.
	     */
	    DockPanel.prototype.onBeforeDetach = function (msg) {
	        var node = this.node;
	        node.removeEventListener('p-dragenter', this);
	        node.removeEventListener('p-dragleave', this);
	        node.removeEventListener('p-dragover', this);
	        node.removeEventListener('p-drop', this);
	    };
	    /**
	     * Handle the `'p-dragenter'` event for the dock panel.
	     */
	    DockPanel.prototype._evtDragEnter = function (event) {
	        if (event.mimeData.hasData(FACTORY_MIME)) {
	            event.preventDefault();
	            event.stopPropagation();
	        }
	    };
	    /**
	     * Handle the `'p-dragleave'` event for the dock panel.
	     */
	    DockPanel.prototype._evtDragLeave = function (event) {
	        event.preventDefault();
	        event.stopPropagation();
	        var related = event.relatedTarget;
	        if (!related || !this.node.contains(related)) {
	            DockPanelPrivate.hideOverlay(this);
	        }
	    };
	    /**
	     * Handle the `'p-dragover'` event for the dock panel.
	     */
	    DockPanel.prototype._evtDragOver = function (event) {
	        event.preventDefault();
	        event.stopPropagation();
	        var x = event.clientX;
	        var y = event.clientY;
	        var zone = DockPanelPrivate.showOverlay(this, x, y);
	        if (zone === 10 /* Invalid */) {
	            event.dropAction = phosphor_dragdrop_1.DropAction.None;
	        }
	        else {
	            event.dropAction = event.proposedAction;
	        }
	    };
	    /**
	     * Handle the `'p-drop'` event for the dock panel.
	     */
	    DockPanel.prototype._evtDrop = function (event) {
	        event.preventDefault();
	        event.stopPropagation();
	        DockPanelPrivate.hideOverlay(this);
	        if (event.proposedAction === phosphor_dragdrop_1.DropAction.None) {
	            event.dropAction = phosphor_dragdrop_1.DropAction.None;
	            return;
	        }
	        var x = event.clientX;
	        var y = event.clientY;
	        var target = DockPanelPrivate.findDockTarget(this, x, y);
	        if (target.zone === 10 /* Invalid */) {
	            event.dropAction = phosphor_dragdrop_1.DropAction.None;
	            return;
	        }
	        var factory = event.mimeData.getData(FACTORY_MIME);
	        if (typeof factory !== 'function') {
	            event.dropAction = phosphor_dragdrop_1.DropAction.None;
	            return;
	        }
	        var widget = factory();
	        if (!(widget instanceof phosphor_widget_1.Widget)) {
	            event.dropAction = phosphor_dragdrop_1.DropAction.None;
	            return;
	        }
	        DockPanelPrivate.handleDrop(this, widget, target);
	        event.dropAction = event.proposedAction;
	    };
	    return DockPanel;
	})(phosphor_widget_1.Widget);
	exports.DockPanel = DockPanel;
	/**
	 * A custom tab panel used by a DockPanel.
	 */
	var DockTabPanel = (function (_super) {
	    __extends(DockTabPanel, _super);
	    /**
	     * Construct a new dock tab panel.
	     */
	    function DockTabPanel() {
	        _super.call(this);
	        this.addClass(TAB_PANEL_CLASS);
	        this.tabBar.tabsMovable = true;
	    }
	    return DockTabPanel;
	})(phosphor_tabs_1.TabPanel);
	/**
	 * A custom split panel used by a DockPanel.
	 */
	var DockSplitPanel = (function (_super) {
	    __extends(DockSplitPanel, _super);
	    /**
	     * Construct a new dock split panel.
	     */
	    function DockSplitPanel(orientation, spacing) {
	        _super.call(this);
	        this.addClass(SPLIT_PANEL_CLASS);
	        this.orientation = orientation;
	        this.spacing = spacing;
	    }
	    return DockSplitPanel;
	})(phosphor_splitpanel_1.SplitPanel);
	/**
	 * A node wrapper used as an overlay dock indicator for a dock panel.
	 */
	var DockPanelOverlay = (function (_super) {
	    __extends(DockPanelOverlay, _super);
	    /**
	     * Construct a new dock panel overlay.
	     */
	    function DockPanelOverlay() {
	        _super.call(this);
	        this._zone = 10 /* Invalid */;
	        this.addClass(OVERLAY_CLASS);
	        this.addClass(HIDDEN_CLASS);
	    }
	    /**
	     * Show the overlay with the given zone and geometry
	     */
	    DockPanelOverlay.prototype.show = function (zone, left, top, width, height) {
	        var style = this.node.style;
	        style.top = top + 'px';
	        style.left = left + 'px';
	        style.width = width + 'px';
	        style.height = height + 'px';
	        this.removeClass(HIDDEN_CLASS);
	        this._setZone(zone);
	    };
	    /**
	     * Hide the overlay and reset its zone.
	     */
	    DockPanelOverlay.prototype.hide = function () {
	        this.addClass(HIDDEN_CLASS);
	        this._setZone(10 /* Invalid */);
	    };
	    /**
	     * Set the dock zone for the overlay.
	     */
	    DockPanelOverlay.prototype._setZone = function (zone) {
	        if (zone === this._zone) {
	            return;
	        }
	        var oldClass = DockPanelOverlay.zoneMap[this._zone];
	        var newClass = DockPanelOverlay.zoneMap[zone];
	        if (oldClass)
	            this.removeClass(oldClass);
	        if (newClass)
	            this.addClass(newClass);
	        this._zone = zone;
	    };
	    /**
	     * A mapping of dock zone enum value to modifier class.
	     */
	    DockPanelOverlay.zoneMap = [
	        ROOT_TOP_CLASS,
	        ROOT_LEFT_CLASS,
	        ROOT_RIGHT_CLASS,
	        ROOT_BOTTOM_CLASS,
	        ROOT_CENTER_CLASS,
	        PANEL_TOP_CLASS,
	        PANEL_LEFT_CLASS,
	        PANEL_RIGHT_CLASS,
	        PANEL_BOTTOM_CLASS,
	        PANEL_CENTER_CLASS
	    ];
	    return DockPanelOverlay;
	})(phosphor_nodewrapper_1.NodeWrapper);
	/**
	 * The namespace for the `DockPanel` class private data.
	 */
	var DockPanelPrivate;
	(function (DockPanelPrivate) {
	    /**
	     * The property descriptor for the spacing between panels.
	     */
	    DockPanelPrivate.spacingProperty = new phosphor_properties_1.Property({
	        name: 'spacing',
	        value: 3,
	        coerce: function (owner, value) { return Math.max(0, value | 0); },
	        changed: onSpacingChanged,
	    });
	    /**
	     * Insert a widget as a new split panel in a dock panel.
	     */
	    function insertSplit(owner, widget, ref, orientation, after) {
	        // Ensure the insert args are valid.
	        validateInsertArgs(owner, widget, ref);
	        // If the widget is the same as the ref, there's nothing to do.
	        if (widget === ref) {
	            return;
	        }
	        // Unparent the widget before performing the insert. This ensures
	        // that structural changes to the dock panel occur before searching
	        // for the insert location.
	        widget.parent = null;
	        // Setup the new tab panel to host the widget.
	        var tabPanel = createTabPanel();
	        tabPanel.addChild(widget);
	        // If there is no root, add the new tab panel as the root.
	        if (!getRoot(owner)) {
	            setRoot(owner, tabPanel);
	            return;
	        }
	        // If the ref widget is null, split the root panel.
	        if (!ref) {
	            var root = ensureSplitRoot(owner, orientation);
	            var sizes_1 = root.sizes();
	            var count = sizes_1.length;
	            arrays.insert(sizes_1, after ? count : 0, 0.5);
	            root.insertChild(after ? count : 0, tabPanel);
	            root.setSizes(sizes_1);
	            return;
	        }
	        // Lookup the tab panel for the ref widget.
	        var refTabPanel = findTabPanel(ref);
	        // If the ref tab panel parent is the dock panel, split the root.
	        if (refTabPanel.parent === owner) {
	            var root = ensureSplitRoot(owner, orientation);
	            root.insertChild(after ? 1 : 0, tabPanel);
	            root.setSizes([1, 1]);
	            return;
	        }
	        // Assert the parent of the ref tab panel is a dock split panel.
	        if (!(refTabPanel.parent instanceof DockSplitPanel)) {
	            internalError();
	        }
	        // Cast the ref tab panel parent to a dock split panel.
	        var splitPanel = refTabPanel.parent;
	        // If the split panel is the correct orientation, the widget
	        // can be inserted directly and sized to 1/2 the ref space.
	        if (splitPanel.orientation === orientation) {
	            var i_1 = splitPanel.childIndex(refTabPanel);
	            var sizes_2 = splitPanel.sizes();
	            var size = sizes_2[i_1] = sizes_2[i_1] / 2;
	            arrays.insert(sizes_2, after ? i_1 + 1 : i_1, size);
	            splitPanel.insertChild(after ? i_1 + 1 : i_1, tabPanel);
	            splitPanel.setSizes(sizes_2);
	            return;
	        }
	        // If the split panel only has a single child, its orientation
	        // can be changed directly and its sizes set to a 1:1 ratio.
	        if (splitPanel.childCount() === 1) {
	            splitPanel.orientation = orientation;
	            splitPanel.insertChild(after ? 1 : 0, tabPanel);
	            splitPanel.setSizes([1, 1]);
	            return;
	        }
	        // Assert the split panel has more than one child.
	        if (splitPanel.childCount() === 0) {
	            internalError();
	        }
	        // Otherwise, a new split panel with the correct orientation needs
	        // to be created to hold the ref panel and tab panel, and inserted
	        // in the previous location of the ref panel.
	        var sizes = splitPanel.sizes();
	        var i = splitPanel.childIndex(refTabPanel);
	        var childSplit = new DockSplitPanel(orientation, owner.spacing);
	        childSplit.addChild(refTabPanel);
	        childSplit.insertChild(after ? 1 : 0, tabPanel);
	        splitPanel.insertChild(i, childSplit);
	        splitPanel.setSizes(sizes);
	        childSplit.setSizes([1, 1]);
	    }
	    DockPanelPrivate.insertSplit = insertSplit;
	    /**
	     * Insert a widget as a sibling tab in a dock panel.
	     */
	    function insertTab(owner, widget, ref, after) {
	        // Ensure the insert args are valid.
	        validateInsertArgs(owner, widget, ref);
	        // If the widget is the same as the ref, there's nothing to do.
	        if (widget === ref) {
	            return;
	        }
	        // Unparent the widget before performing the insert. This ensures
	        // that structural changes to the dock panel occur before searching
	        // for the insert location.
	        widget.parent = null;
	        // Find the index and tab panel for the insert operation.
	        var index;
	        var tabPanel;
	        if (ref) {
	            tabPanel = findTabPanel(ref);
	            index = tabPanel.childIndex(ref) + (after ? 1 : 0);
	        }
	        else {
	            tabPanel = ensureFirstTabPanel(owner);
	            index = after ? tabPanel.childCount() : 0;
	        }
	        // Insert the widget into the tab panel at the proper location.
	        tabPanel.insertChild(index, widget);
	    }
	    DockPanelPrivate.insertTab = insertTab;
	    /**
	     * Ensure the given widget is the current widget in its tab panel.
	     *
	     * This is a no-op if the widget is not contained in the dock panel.
	     */
	    function selectWidget(owner, widget) {
	        if (!dockPanelContains(owner, widget))
	            return;
	        widget.parent.parent.currentWidget = widget;
	    }
	    DockPanelPrivate.selectWidget = selectWidget;
	    /**
	     * Hide the dock panel overlay for the given dock panel.
	     */
	    function hideOverlay(owner) {
	        getOverlay(owner).hide();
	    }
	    DockPanelPrivate.hideOverlay = hideOverlay;
	    /**
	     * Show the dock panel overlay indicator at the given client position.
	     *
	     * If the position is not over a dock zone, the overlay is hidden.
	     *
	     * This returns the dock zone used to display the overlay.
	     */
	    function showOverlay(owner, clientX, clientY) {
	        // Find the dock target for the given client position.
	        var target = findDockTarget(owner, clientX, clientY);
	        // If the dock zone is invalid, hide the overlay and bail.
	        if (target.zone === 10 /* Invalid */) {
	            hideOverlay(owner);
	            return target.zone;
	        }
	        // Setup the variables needed to compute the overlay geometry.
	        var top;
	        var left;
	        var width;
	        var height;
	        var pcr;
	        var box = phosphor_domutil_1.boxSizing(owner.node); // TODO cache this?
	        var rect = owner.node.getBoundingClientRect();
	        // Compute the overlay geometry based on the dock zone.
	        switch (target.zone) {
	            case 0 /* RootTop */:
	                top = box.paddingTop;
	                left = box.paddingLeft;
	                width = rect.width - box.horizontalSum;
	                height = (rect.height - box.verticalSum) / 3;
	                break;
	            case 1 /* RootLeft */:
	                top = box.paddingTop;
	                left = box.paddingLeft;
	                width = (rect.width - box.horizontalSum) / 3;
	                height = rect.height - box.verticalSum;
	                break;
	            case 2 /* RootRight */:
	                top = box.paddingTop;
	                width = (rect.width - box.horizontalSum) / 3;
	                left = box.paddingLeft + 2 * width;
	                height = rect.height - box.verticalSum;
	                break;
	            case 3 /* RootBottom */:
	                height = (rect.height - box.verticalSum) / 3;
	                top = box.paddingTop + 2 * height;
	                left = box.paddingLeft;
	                width = rect.width - box.horizontalSum;
	                break;
	            case 4 /* RootCenter */:
	                top = box.paddingTop;
	                left = box.paddingLeft;
	                width = rect.width - box.horizontalSum;
	                height = rect.height - box.verticalSum;
	                break;
	            case 5 /* PanelTop */:
	                pcr = target.panel.node.getBoundingClientRect();
	                top = pcr.top - rect.top - box.borderTop;
	                left = pcr.left - rect.left - box.borderLeft;
	                width = pcr.width;
	                height = pcr.height / 2;
	                break;
	            case 6 /* PanelLeft */:
	                pcr = target.panel.node.getBoundingClientRect();
	                top = pcr.top - rect.top - box.borderTop;
	                left = pcr.left - rect.left - box.borderLeft;
	                width = pcr.width / 2;
	                height = pcr.height;
	                break;
	            case 7 /* PanelRight */:
	                pcr = target.panel.node.getBoundingClientRect();
	                top = pcr.top - rect.top - box.borderTop;
	                left = pcr.left - rect.left - box.borderLeft + pcr.width / 2;
	                width = pcr.width / 2;
	                height = pcr.height;
	                break;
	            case 8 /* PanelBottom */:
	                pcr = target.panel.node.getBoundingClientRect();
	                top = pcr.top - rect.top - box.borderTop + pcr.height / 2;
	                left = pcr.left - rect.left - box.borderLeft;
	                width = pcr.width;
	                height = pcr.height / 2;
	                break;
	            case 9 /* PanelCenter */:
	                pcr = target.panel.node.getBoundingClientRect();
	                top = pcr.top - rect.top - box.borderTop;
	                left = pcr.left - rect.left - box.borderLeft;
	                width = pcr.width;
	                height = pcr.height;
	                break;
	        }
	        // Show the overlay and return the dock zone.
	        getOverlay(owner).show(target.zone, left, top, width, height);
	        return target.zone;
	    }
	    DockPanelPrivate.showOverlay = showOverlay;
	    /**
	     * Find the dock target for the given client position.
	     */
	    function findDockTarget(owner, clientX, clientY) {
	        var root = getRoot(owner);
	        if (!root) {
	            return { zone: 4 /* RootCenter */, panel: null };
	        }
	        if (!phosphor_domutil_1.hitTest(root.node, clientX, clientY)) {
	            return { zone: 10 /* Invalid */, panel: null };
	        }
	        var edgeZone = getEdgeZone(root.node, clientX, clientY);
	        if (edgeZone !== 10 /* Invalid */) {
	            return { zone: edgeZone, panel: null };
	        }
	        var hitPanel = iterTabPanels(root, function (tabs) {
	            return phosphor_domutil_1.hitTest(tabs.node, clientX, clientY) ? tabs : void 0;
	        });
	        if (!hitPanel) {
	            return { zone: 10 /* Invalid */, panel: null };
	        }
	        var panelZone = getPanelZone(hitPanel.node, clientX, clientY);
	        return { zone: panelZone, panel: hitPanel };
	    }
	    DockPanelPrivate.findDockTarget = findDockTarget;
	    /**
	     * Drop a widget onto a dock panel using the given dock target.
	     */
	    function handleDrop(owner, widget, target) {
	        // Do nothing if the dock zone is invalid.
	        if (target.zone === 10 /* Invalid */) {
	            return;
	        }
	        // Handle the simple case of root drops first.
	        switch (target.zone) {
	            case 0 /* RootTop */:
	                owner.insertTop(widget);
	                return;
	            case 1 /* RootLeft */:
	                owner.insertLeft(widget);
	                return;
	            case 2 /* RootRight */:
	                owner.insertRight(widget);
	                return;
	            case 3 /* RootBottom */:
	                owner.insertBottom(widget);
	                return;
	            case 4 /* RootCenter */:
	                owner.insertLeft(widget);
	                return;
	        }
	        // Otherwise, it's a panel drop, and that requires more checks.
	        // Do nothing if the widget is dropped as a tab on its own panel.
	        if (target.zone === 9 /* PanelCenter */) {
	            if (target.panel.childIndex(widget) !== -1) {
	                return;
	            }
	        }
	        // Do nothing if the panel only contains the drop widget.
	        if (target.panel.childCount() === 1) {
	            if (target.panel.childAt(0) === widget) {
	                return;
	            }
	        }
	        // Find a suitable reference widget for the drop.
	        var n = target.panel.childCount();
	        var ref = target.panel.childAt(n - 1);
	        if (ref === widget) {
	            ref = target.panel.childAt(n - 2);
	        }
	        // Insert the widget based on the panel zone.
	        switch (target.zone) {
	            case 5 /* PanelTop */:
	                owner.insertTop(widget, ref);
	                return;
	            case 6 /* PanelLeft */:
	                owner.insertLeft(widget, ref);
	                return;
	            case 7 /* PanelRight */:
	                owner.insertRight(widget, ref);
	                return;
	            case 8 /* PanelBottom */:
	                owner.insertBottom(widget, ref);
	                return;
	            case 9 /* PanelCenter */:
	                owner.insertTabAfter(widget, ref);
	                selectWidget(owner, widget);
	                return;
	        }
	    }
	    DockPanelPrivate.handleDrop = handleDrop;
	    /**
	     * A private attached property for the dock panel root.
	     */
	    var rootProperty = new phosphor_properties_1.Property({
	        name: 'root',
	        value: null,
	        changed: onRootChanged,
	    });
	    /**
	     * A private attached property for the dock panel overlay.
	     */
	    var overlayProperty = new phosphor_properties_1.Property({
	        name: 'overlay',
	        create: createOverlay,
	    });
	    /**
	     * Get the root panel for a dock panel.
	     */
	    function getRoot(owner) {
	        return rootProperty.get(owner);
	    }
	    /**
	     * Set the root panel for a dock panel.
	     */
	    function setRoot(owner, root) {
	        rootProperty.set(owner, root);
	    }
	    /**
	     * Get the overlay for a dock panel.
	     */
	    function getOverlay(owner) {
	        return overlayProperty.get(owner);
	    }
	    /**
	     * The change handler for the dock panel `rootProperty`.
	     *
	     * This will re-parent the new root and set it as the current widget.
	     *
	     * The old root is not modified.
	     */
	    function onRootChanged(owner, old, root) {
	        if (!root)
	            return;
	        var layout = owner.layout;
	        layout.addChild(root);
	        root.show();
	    }
	    /**
	     * The creation handler for the dock panel `overlayProperty`.
	     *
	     * This will create and install the overlay for the panel.
	     */
	    function createOverlay(owner) {
	        var overlay = new DockPanelOverlay();
	        owner.node.appendChild(overlay.node);
	        return overlay;
	    }
	    /**
	     * The change handler for the `spacing` property of a dock panel.
	     */
	    function onSpacingChanged(owner, old, spacing) {
	        var root = getRoot(owner);
	        if (root instanceof DockSplitPanel) {
	            updateSpacing(root, spacing);
	        }
	    }
	    /**
	     * Recursively update the spacing of a dock split panel.
	     */
	    function updateSpacing(panel, spacing) {
	        for (var i = 0, n = panel.childCount(); i < n; ++i) {
	            var child = panel.childAt(i);
	            if (child instanceof DockSplitPanel) {
	                updateSpacing(child, spacing);
	            }
	        }
	        panel.spacing = spacing;
	    }
	    /**
	     * Throw an internal dock panel error.
	     */
	    function internalError() {
	        throw new Error('Internal DockPanel Error.');
	    }
	    /**
	     * Test whether a dock panel contains the given widget.
	     *
	     * For this condition to be `true`, the widget must be a logical child
	     * of a `DockTabPanel`, which itself must be a proper descendant of the
	     * given dock panel.
	     */
	    function dockPanelContains(owner, widget) {
	        var stack = widget.parent;
	        if (!stack) {
	            return false;
	        }
	        var tabs = stack.parent;
	        if (!(tabs instanceof DockTabPanel)) {
	            return false;
	        }
	        var parent = tabs.parent;
	        while (parent) {
	            if (parent === owner) {
	                return true;
	            }
	            if (!(parent instanceof DockSplitPanel)) {
	                return false;
	            }
	            parent = parent.parent;
	        }
	        return false;
	    }
	    /**
	     * Find the ancestor dock tab panel for the given widget.
	     *
	     * This assumes the widget already belongs to a dock panel, and will
	     * throw an error if that assumption does not hold.
	     */
	    function findTabPanel(widget) {
	        var stack = widget.parent;
	        if (!stack) {
	            internalError();
	        }
	        var tabs = stack.parent;
	        if (!(tabs instanceof DockTabPanel)) {
	            internalError();
	        }
	        return tabs;
	    }
	    /**
	     * Find the first dock tab panel for the given dock panel.
	     *
	     * This returns `null` if the dock panel has no content. It will throw
	     * an error if the structure of the dock panel is found to be invalid.
	     */
	    function findFirstTabPanel(owner) {
	        var root = getRoot(owner);
	        while (root) {
	            if (root instanceof DockTabPanel) {
	                return root;
	            }
	            if (!(root instanceof DockSplitPanel) || root.childCount() === 0) {
	                internalError();
	            }
	            root = root.childAt(0);
	        }
	        return null;
	    }
	    /**
	     * Get or create the first dock tab panel for the given dock panel.
	     *
	     * If dock panel has no root, a new tab panel will be created and
	     * added as the root. An error will be thrown if the structure of
	     * the dock panel is found to be invalid.
	     */
	    function ensureFirstTabPanel(owner) {
	        var tabs = findFirstTabPanel(owner);
	        if (!tabs) {
	            tabs = createTabPanel();
	            setRoot(owner, tabs);
	        }
	        return tabs;
	    }
	    /**
	     * Ensure the root panel is a splitter with the given orientation.
	     *
	     * This will throw an error if the panel does not have a current root,
	     * since that would violate the invariants of the dock panel structure.
	     */
	    function ensureSplitRoot(owner, orientation) {
	        var oldRoot = getRoot(owner);
	        if (!oldRoot) {
	            internalError();
	        }
	        if (oldRoot instanceof DockSplitPanel) {
	            if (oldRoot.orientation === orientation) {
	                return oldRoot;
	            }
	            if (oldRoot.childCount() <= 1) {
	                oldRoot.orientation = orientation;
	                return oldRoot;
	            }
	        }
	        var newRoot = new DockSplitPanel(orientation, owner.spacing);
	        newRoot.addChild(oldRoot);
	        setRoot(owner, newRoot);
	        return newRoot;
	    }
	    /**
	     * Validate the insert arguments for a dock panel.
	     *
	     * This will throw an error if the target widget is null, or if the
	     * reference widget is not null and not contained by the dock panel.
	     */
	    function validateInsertArgs(owner, widget, ref) {
	        if (!widget) {
	            throw new Error('Target widget is null.');
	        }
	        if (ref && !dockPanelContains(owner, ref)) {
	            throw new Error('Reference widget not contained by the dock panel.');
	        }
	    }
	    /**
	     * Recursively iterate over the dock tab panels of a root panel.
	     *
	     * Iteration stops if the callback returns anything but `undefined`.
	     */
	    function iterTabPanels(root, callback) {
	        if (root instanceof DockTabPanel) {
	            return callback(root);
	        }
	        if (!(root instanceof DockSplitPanel)) {
	            internalError();
	        }
	        for (var i = 0; i < root.childCount(); ++i) {
	            var child = root.childAt(i);
	            var result = iterTabPanels(child, callback);
	            if (result !== void 0)
	                return result;
	        }
	        return void 0;
	    }
	    /**
	     * Get the root edge zone for the given node and client position.
	     *
	     * This assumes the position lies within the node's client rect.
	     *
	     * Returns the `Invalid` zone if the position is not within an edge.
	     */
	    function getEdgeZone(node, x, y) {
	        var zone;
	        var rect = node.getBoundingClientRect();
	        if (x < rect.left + EDGE_SIZE) {
	            if (y - rect.top < x - rect.left) {
	                zone = 0 /* RootTop */;
	            }
	            else if (rect.bottom - y < x - rect.left) {
	                zone = 3 /* RootBottom */;
	            }
	            else {
	                zone = 1 /* RootLeft */;
	            }
	        }
	        else if (x >= rect.right - EDGE_SIZE) {
	            if (y - rect.top < rect.right - x) {
	                zone = 0 /* RootTop */;
	            }
	            else if (rect.bottom - y < rect.right - x) {
	                zone = 3 /* RootBottom */;
	            }
	            else {
	                zone = 2 /* RootRight */;
	            }
	        }
	        else if (y < rect.top + EDGE_SIZE) {
	            zone = 0 /* RootTop */;
	        }
	        else if (y >= rect.bottom - EDGE_SIZE) {
	            zone = 3 /* RootBottom */;
	        }
	        else {
	            zone = 10 /* Invalid */;
	        }
	        return zone;
	    }
	    /**
	     * Get the panel zone for the given node and position.
	     *
	     * This assumes the position lies within the node's client rect.
	     *
	     * This always returns a valid zone.
	     */
	    function getPanelZone(node, x, y) {
	        var zone;
	        var rect = node.getBoundingClientRect();
	        var fracX = (x - rect.left) / rect.width;
	        var fracY = (y - rect.top) / rect.height;
	        if (fracX < 1 / 3) {
	            if (fracY < fracX) {
	                zone = 5 /* PanelTop */;
	            }
	            else if (1 - fracY < fracX) {
	                zone = 8 /* PanelBottom */;
	            }
	            else {
	                zone = 6 /* PanelLeft */;
	            }
	        }
	        else if (fracX < 2 / 3) {
	            if (fracY < 1 / 3) {
	                zone = 5 /* PanelTop */;
	            }
	            else if (fracY < 2 / 3) {
	                zone = 9 /* PanelCenter */;
	            }
	            else {
	                zone = 8 /* PanelBottom */;
	            }
	        }
	        else {
	            if (fracY < 1 - fracX) {
	                zone = 5 /* PanelTop */;
	            }
	            else if (fracY > fracX) {
	                zone = 8 /* PanelBottom */;
	            }
	            else {
	                zone = 7 /* PanelRight */;
	            }
	        }
	        return zone;
	    }
	    /**
	     * The current tab drag object.
	     */
	    var currentDrag = null;
	    /**
	     * Create a new tab panel for a dock panel.
	     */
	    function createTabPanel() {
	        var panel = new DockTabPanel();
	        panel.tabBar.tabDetachRequested.connect(onTabDetachRequested);
	        panel.stackedPanel.widgetRemoved.connect(onWidgetRemoved);
	        return panel;
	    }
	    /**
	     * Remove an empty dock tab panel from the hierarchy.
	     *
	     * This ensures that the hierarchy is kept consistent by merging an
	     * ancestor split panel when it contains only a single child widget.
	     */
	    function removeTabPanel(tabPanel) {
	        // Assert the tab panel is empty.
	        if (tabPanel.childCount() !== 0) {
	            internalError();
	        }
	        // If the parent of the tab panel is a dock panel, just remove it.
	        if (tabPanel.parent instanceof DockPanel) {
	            setRoot(tabPanel.parent, null);
	            tabPanel.dispose();
	            return;
	        }
	        // Assert the tab panel parent is a dock split panel.
	        if (!(tabPanel.parent instanceof DockSplitPanel)) {
	            internalError();
	        }
	        // Cast the tab panel parent to a dock split panel.
	        var splitPanel = tabPanel.parent;
	        // Assert the split panel has at least two children.
	        if (splitPanel.childCount() < 2) {
	            internalError();
	        }
	        // Dispose the tab panel to ensure its resources are released.
	        tabPanel.dispose();
	        // If the split panel still has multiple children, there is
	        // nothing more to do.
	        if (splitPanel.childCount() > 1) {
	            return;
	        }
	        // Extract the remaining child from the split panel.
	        var child = splitPanel.childAt(0);
	        // Assert the remaining child is a proper panel type.
	        if (!(child instanceof DockTabPanel) && !(child instanceof DockSplitPanel)) {
	            internalError();
	        }
	        // If the parent of the split panel is a dock panel, replace it.
	        if (splitPanel.parent instanceof DockPanel) {
	            setRoot(splitPanel.parent, child);
	            splitPanel.dispose();
	            return;
	        }
	        // Assert the split panel parent is a dock split panel.
	        if (!(splitPanel.parent instanceof DockSplitPanel)) {
	            internalError();
	        }
	        // Cast the split panel parent to a dock split panel.
	        var grandPanel = splitPanel.parent;
	        // If the child is a dock tab panel, replace the split panel.
	        if (child instanceof DockTabPanel) {
	            var sizes = grandPanel.sizes();
	            var index_1 = grandPanel.childIndex(splitPanel);
	            splitPanel.parent = null;
	            grandPanel.insertChild(index_1, child);
	            grandPanel.setSizes(sizes);
	            splitPanel.dispose();
	            return;
	        }
	        // Cast the child to a dock split panel.
	        var childSplit = child;
	        // Child splitters have an orthogonal orientation to their parent.
	        // Assert the orientation of the child matches the grand parent.
	        if (childSplit.orientation !== grandPanel.orientation) {
	            internalError();
	        }
	        // The grand children can now be merged with their grand parent.
	        // Start by fetching the relevant current sizes and insert index.
	        var index = grandPanel.childIndex(splitPanel);
	        var childSizes = childSplit.sizes();
	        var grandSizes = grandPanel.sizes();
	        // Remove the split panel and store its share of the size.
	        splitPanel.parent = null;
	        var sizeShare = arrays.removeAt(grandSizes, index);
	        // Merge the grand children and maintain their relative size.
	        for (var i = 0; childSplit.childCount() !== 0; ++i) {
	            grandPanel.insertChild(index + i, childSplit.childAt(0));
	            arrays.insert(grandSizes, index + i, sizeShare * childSizes[i]);
	        }
	        // Update the grand parent sizes and dispose the removed panel.
	        grandPanel.setSizes(grandSizes);
	        splitPanel.dispose();
	    }
	    /**
	     * Handle the `tabDetachRequested` signal from a dock tab bar.
	     */
	    function onTabDetachRequested(sender, args) {
	        // Do nothing if a drag is already in progress.
	        if (currentDrag) {
	            return;
	        }
	        // Release the tab bar's hold on the mouse.
	        sender.releaseMouse();
	        // Setup the mime data for the drag operation.
	        var mimeData = new phosphor_dragdrop_1.MimeData();
	        var widget = args.item;
	        mimeData.setData(FACTORY_MIME, function () { return widget; });
	        // Create the drag image for the drag operation.
	        var tab = sender.tabAt(args.index);
	        var dragImage = tab.cloneNode(true);
	        // Create the drag object to manage the drag-drop operation.
	        currentDrag = new phosphor_dragdrop_1.Drag({
	            mimeData: mimeData,
	            dragImage: dragImage,
	            proposedAction: phosphor_dragdrop_1.DropAction.Move,
	            supportedActions: phosphor_dragdrop_1.DropActions.Move,
	        });
	        // Start the drag operation and cleanup when done.
	        tab.classList.add(HIDDEN_CLASS);
	        currentDrag.start(args.clientX, args.clientY).then(function () {
	            currentDrag = null;
	            tab.classList.remove(HIDDEN_CLASS);
	        });
	    }
	    /**
	     * Handle the `widgetRemvoed` signal for a dock stacked panel.
	     */
	    function onWidgetRemoved(sender, widget) {
	        if (sender.childCount() === 0) {
	            removeTabPanel(sender.parent);
	        }
	    }
	})(DockPanelPrivate || (DockPanelPrivate = {}));


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var phosphor_domutil_1 = __webpack_require__(7);
	/**
	 * The class name added to drag image nodes.
	 */
	var DRAG_IMAGE_CLASS = 'p-mod-drag-image';
	/**
	 * An enum which defines the possible independent drop actions.
	 */
	(function (DropAction) {
	    /**
	     * No item may be dropped.
	     */
	    DropAction[DropAction["None"] = 0] = "None";
	    /**
	     * The item is copied into its new location.
	     */
	    DropAction[DropAction["Copy"] = 1] = "Copy";
	    /**
	     * The item is linked to its new location.
	     */
	    DropAction[DropAction["Link"] = 2] = "Link";
	    /**
	     * The item is moved to its new location.
	     */
	    DropAction[DropAction["Move"] = 4] = "Move";
	})(exports.DropAction || (exports.DropAction = {}));
	var DropAction = exports.DropAction;
	/**
	 * An enum which defines the combinations of possible drop actions.
	 */
	(function (DropActions) {
	    /**
	     * No drop action is supported.
	     */
	    DropActions[DropActions["None"] = 0] = "None";
	    /**
	     * The item may be copied to its new location.
	     */
	    DropActions[DropActions["Copy"] = 1] = "Copy";
	    /**
	     * The item may be linked to its new location.
	     */
	    DropActions[DropActions["Link"] = 2] = "Link";
	    /**
	     * The item may be moved to its new location.
	     */
	    DropActions[DropActions["Move"] = 4] = "Move";
	    /**
	     * The item may be copied or linked to its new location.
	     */
	    DropActions[DropActions["CopyLink"] = 3] = "CopyLink";
	    /**
	     * The item may be copied or moved to its new location.
	     */
	    DropActions[DropActions["CopyMove"] = 5] = "CopyMove";
	    /**
	     * The item may be linked or moved to its new location.
	     */
	    DropActions[DropActions["LinkMove"] = 6] = "LinkMove";
	    /**
	     * The item may be copied, linked, or moved to its new location.
	     */
	    DropActions[DropActions["All"] = 7] = "All";
	})(exports.DropActions || (exports.DropActions = {}));
	var DropActions = exports.DropActions;
	/**
	 * An object which stores MIME data for drag-drop operations.
	 *
	 * #### Notes
	 * This class does not attempt to enforce "correctness" of MIME types
	 * and their associated data. Since this drag-drop system is designed
	 * to transfer arbitrary data and objects within the same application,
	 * it assumes that the user provides correct and accurate data.
	 */
	var MimeData = (function () {
	    function MimeData() {
	        this._types = [];
	        this._values = [];
	    }
	    /**
	     * Get an array of the MIME types contains within the dataset.
	     *
	     * @returns A new array of the MIME types, in order of insertion.
	     */
	    MimeData.prototype.types = function () {
	        return this._types.slice();
	    };
	    /**
	     * Test whether the dataset has an entry for the given type.
	     *
	     * @param mime - The MIME type of interest.
	     *
	     * @returns `true` if the dataset contains a value for the given
	     *   MIME type, `false` otherwise.
	     */
	    MimeData.prototype.hasData = function (mime) {
	        return this._types.indexOf(mime) !== -1;
	    };
	    /**
	     * Get the data value for the given MIME type.
	     *
	     * @param mime - The MIME type of interest.
	     *
	     * @returns The value for the given MIME type, or `undefined` if
	     *   the dataset does not contain a value for the type.
	     */
	    MimeData.prototype.getData = function (mime) {
	        var i = this._types.indexOf(mime);
	        return i !== -1 ? this._values[i] : void 0;
	    };
	    /**
	     * Set the data value for the given MIME type.
	     *
	     * @param mime - The MIME type of interest.
	     *
	     * @param data - The data value for the given MIME type.
	     *
	     * #### Notes
	     * This will overwrite any previous entry for the MIME type.
	     */
	    MimeData.prototype.setData = function (mime, data) {
	        this.clearData(mime);
	        this._types.push(mime);
	        this._values.push(data);
	    };
	    /**
	     * Remove the data entry for the given MIME type.
	     *
	     * @param mime - The MIME type of interest.
	     *
	     * #### Notes
	     * This is a no-op if there is no entry for the given MIME type.
	     */
	    MimeData.prototype.clearData = function (mime) {
	        var i = this._types.indexOf(mime);
	        if (i === -1)
	            return;
	        this._types.splice(i, 1);
	        this._values.splice(i, 1);
	    };
	    /**
	     * Remove all data entries from the dataset.
	     */
	    MimeData.prototype.clear = function () {
	        this._types.length = 0;
	        this._values.length = 0;
	    };
	    return MimeData;
	}());
	exports.MimeData = MimeData;
	/**
	 * An object which manages a drag-drop operation.
	 *
	 * A drag object dispatches four different events to drop targets:
	 *
	 * - `'p-dragenter'` - Dispatched when the mouse enters the target
	 *   element. This event must be canceled in order to receive any
	 *   of the other events.
	 *
	 * - `'p-dragover'` - Dispatched when the mouse moves over the drop
	 *   target. It must cancel the event and set the `dropAction` to one
	 *   of the supported actions in order to receive drop events.
	 *
	 * - `'p-dragleave'` - Dispatched when the mouse leaves the target
	 *   element. This includes moving the mouse into child elements.
	 *
	 * - `'p-drop'`- Dispatched when the mouse is released over the target
	 *   element when the target indicates an appropriate drop action. If
	 *   the event is canceled, the indicated drop action is returned to
	 *   the initiator through the resolved promise.
	 *
	 * A drag operation can be canceled at any time by pressing `Escape`
	 * or by disposing the drag object.
	 *
	 * #### Notes
	 * This class is designed to be used when dragging and dropping custom
	 * data *within* a single application. It is *not* a replacement for
	 * the native drag-drop API. Instead, it provides an API which allows
	 * drag operations to be initiated programmatically and enables the
	 * transfer of arbitrary non-string objects; two features which are
	 * not possible with the native drag-drop APIs.
	 */
	var Drag = (function () {
	    /**
	     * Construct a new drag object.
	     *
	     * @param options - The options for initializing the drag.
	     */
	    function Drag(options) {
	        this._disposed = false;
	        this._source = null;
	        this._mimeData = null;
	        this._dragImage = null;
	        this._dropAction = DropAction.None;
	        this._proposedAction = DropAction.Copy;
	        this._supportedActions = DropActions.Copy;
	        this._override = null;
	        this._currentTarget = null;
	        this._currentElement = null;
	        this._promise = null;
	        this._resolve = null;
	        this._mimeData = options.mimeData;
	        if (options.dragImage !== void 0) {
	            this._dragImage = options.dragImage;
	        }
	        if (options.proposedAction !== void 0) {
	            this._proposedAction = options.proposedAction;
	        }
	        if (options.supportedActions !== void 0) {
	            this._supportedActions = options.supportedActions;
	        }
	        if (options.source !== void 0) {
	            this._source = options.source;
	        }
	    }
	    /**
	     * Dispose of the resources held by the drag object.
	     *
	     * #### Notes
	     * This will cancel the drag operation if it is active.
	     *
	     * All calls made after the first call to this method are a no-op.
	     */
	    Drag.prototype.dispose = function () {
	        // Do nothing if the drag object is already disposed.
	        if (this._disposed) {
	            return;
	        }
	        this._disposed = true;
	        // If there is a current target, dispatch a drag leave event.
	        if (this._currentTarget) {
	            var event_1 = createMouseEvent('mouseup', -1, -1);
	            dispatchDragLeave(this, this._currentTarget, null, event_1);
	        }
	        // Finalize the drag object with `None`.
	        this._finalize(DropAction.None);
	    };
	    Object.defineProperty(Drag.prototype, "isDisposed", {
	        /**
	         * Test whether the drag object is disposed.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._disposed;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Drag.prototype, "mimeData", {
	        /**
	         * Get the mime data for the drag object.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._mimeData;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Drag.prototype, "dragImage", {
	        /**
	         * Get the drag image element for the drag object.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._dragImage;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Drag.prototype, "proposedAction", {
	        /**
	         * Get the proposed drop action for the drag object.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._proposedAction;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Drag.prototype, "supportedActions", {
	        /**
	         * Get the supported drop actions for the drag object.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._supportedActions;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Drag.prototype, "source", {
	        /**
	         * Get the drag source for the drag object.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._source;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Start the drag operation at the specified client position.
	     *
	     * @param clientX - The client X position for the drag start.
	     *
	     * @param clientY - The client Y position for the drag start.
	     *
	     * @returns A promise which resolves to the result of the drag.
	     *
	     * #### Notes
	     * If the drag has already been started, the promise created by the
	     * first call to `start` is returned.
	     *
	     * If the drag operation has ended, or if the drag object has been
	     * disposed, the returned promise will resolve to `DropAction.None`.
	     *
	     * The drag object will be automatically disposed when drag operation
	     * completes. This makes `Drag` objects suitable for single use only.
	     *
	     * This method assumes the left mouse button is already held down.
	     */
	    Drag.prototype.start = function (clientX, clientY) {
	        var _this = this;
	        // If the drag object is already disposed, resolve to `None`.
	        if (this._disposed) {
	            return Promise.resolve(DropAction.None);
	        }
	        // If the drag has already been started, return the promise.
	        if (this._promise) {
	            return this._promise;
	        }
	        // Install the document listeners for the drag object.
	        this._addListeners();
	        // Attach the drag image at the specified client position.
	        this._attachDragImage(clientX, clientY);
	        // Create the promise which will be resolved on completion.
	        this._promise = new Promise(function (resolve, reject) {
	            _this._resolve = resolve;
	        });
	        // Trigger a fake move event to kick off the drag operation.
	        var event = createMouseEvent('mousemove', clientX, clientY);
	        document.dispatchEvent(event);
	        // Return the pending promise for the drag operation.
	        return this._promise;
	    };
	    /**
	     * Handle the DOM events for the drag operation.
	     *
	     * @param event - The DOM event sent to the drag object.
	     *
	     * #### Notes
	     * This method implements the DOM `EventListener` interface and is
	     * called in response to events on the document. It should not be
	     * called directly by user code.
	     */
	    Drag.prototype.handleEvent = function (event) {
	        switch (event.type) {
	            case 'mousemove':
	                this._evtMouseMove(event);
	                break;
	            case 'mouseup':
	                this._evtMouseUp(event);
	                break;
	            case 'keydown':
	                this._evtKeyDown(event);
	                break;
	            default:
	                // Stop all other events during drag-drop.
	                event.preventDefault();
	                event.stopPropagation();
	                break;
	        }
	    };
	    /**
	     * Handle the `'mousemove'` event for the drag object.
	     */
	    Drag.prototype._evtMouseMove = function (event) {
	        // Stop all input events during drag-drop.
	        event.preventDefault();
	        event.stopPropagation();
	        // Update the current target node and dispatch enter/leave events.
	        this._updateCurrentTarget(event);
	        // Move the drag image to the specified client position. This is
	        // performed *after* dispatching to prevent unnecessary reflows.
	        this._moveDragImage(event.clientX, event.clientY);
	    };
	    /**
	     * Handle the `'mouseup'` event for the drag object.
	     */
	    Drag.prototype._evtMouseUp = function (event) {
	        // Stop all input events during drag-drop.
	        event.preventDefault();
	        event.stopPropagation();
	        // Do nothing if the left button is not released.
	        if (event.button !== 0) {
	            return;
	        }
	        // Update the current target node and dispatch enter/leave events.
	        // This prevents a subtle issue where the DOM mutates under the
	        // cursor after the last move event but before the drop event.
	        this._updateCurrentTarget(event);
	        // If there is no current target, finalize with `None`.
	        if (!this._currentTarget) {
	            this._finalize(DropAction.None);
	            return;
	        }
	        // If the last drop action was `None`, dispatch a leave event
	        // to the current target and finalize the drag with `None`.
	        if (this._dropAction === DropAction.None) {
	            dispatchDragLeave(this, this._currentTarget, null, event);
	            this._finalize(DropAction.None);
	            return;
	        }
	        // Dispatch the drop event at the current target and finalize
	        // with the resulting drop action.
	        var action = dispatchDrop(this, this._currentTarget, event);
	        this._finalize(action);
	    };
	    /**
	     * Handle the `'keydown'` event for the drag object.
	     */
	    Drag.prototype._evtKeyDown = function (event) {
	        // Stop all input events during drag-drop.
	        event.preventDefault();
	        event.stopPropagation();
	        // Cancel the drag if `Escape` is pressed.
	        if (event.keyCode === 27)
	            this.dispose();
	    };
	    /**
	     * Add the document event listeners for the drag object.
	     */
	    Drag.prototype._addListeners = function () {
	        document.addEventListener('mousedown', this, true);
	        document.addEventListener('mousemove', this, true);
	        document.addEventListener('mouseup', this, true);
	        document.addEventListener('mouseenter', this, true);
	        document.addEventListener('mouseleave', this, true);
	        document.addEventListener('mouseover', this, true);
	        document.addEventListener('mouseout', this, true);
	        document.addEventListener('keydown', this, true);
	        document.addEventListener('keyup', this, true);
	        document.addEventListener('keypress', this, true);
	        document.addEventListener('contextmenu', this, true);
	    };
	    /**
	     * Remove the document event listeners for the drag object.
	     */
	    Drag.prototype._removeListeners = function () {
	        document.removeEventListener('mousedown', this, true);
	        document.removeEventListener('mousemove', this, true);
	        document.removeEventListener('mouseup', this, true);
	        document.removeEventListener('mouseenter', this, true);
	        document.removeEventListener('mouseleave', this, true);
	        document.removeEventListener('mouseover', this, true);
	        document.removeEventListener('mouseout', this, true);
	        document.removeEventListener('keydown', this, true);
	        document.removeEventListener('keyup', this, true);
	        document.removeEventListener('keypress', this, true);
	        document.removeEventListener('contextmenu', this, true);
	    };
	    /**
	     * Update the current target node using the given mouse event.
	     */
	    Drag.prototype._updateCurrentTarget = function (event) {
	        // Fetch common local state.
	        var prevTarget = this._currentTarget;
	        var currTarget = this._currentTarget;
	        var prevElem = this._currentElement;
	        // Find the current indicated element at the given position.
	        var currElem = document.elementFromPoint(event.clientX, event.clientY);
	        // Update the current element reference.
	        this._currentElement = currElem;
	        // Note: drag enter fires *before* drag leave according to spec.
	        // https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model
	        // If the indicated element changes from the previous iteration,
	        // and is different from the current target, dispatch the enter
	        // events and compute the new target element.
	        if (currElem !== prevElem && currElem !== currTarget) {
	            currTarget = dispatchDragEnter(this, currElem, currTarget, event);
	        }
	        // If the current target element has changed, update the current
	        // target reference and dispatch the leave event to the old target.
	        if (currTarget !== prevTarget) {
	            this._currentTarget = currTarget;
	            dispatchDragLeave(this, prevTarget, currTarget, event);
	        }
	        // Dispatch the drag over event and update the drop action.
	        var action = dispatchDragOver(this, currTarget, event);
	        this._setDropAction(action);
	    };
	    /**
	     * Attach the drag image element at the specified location.
	     *
	     * This is a no-op if there is no drag image element.
	     */
	    Drag.prototype._attachDragImage = function (clientX, clientY) {
	        if (!this._dragImage) {
	            return;
	        }
	        this._dragImage.classList.add(DRAG_IMAGE_CLASS);
	        var style = this._dragImage.style;
	        style.pointerEvents = 'none';
	        style.position = 'absolute';
	        style.top = clientY + "px";
	        style.left = clientX + "px";
	        document.body.appendChild(this._dragImage);
	    };
	    /**
	     * Move the drag image element to the specified location.
	     *
	     * This is a no-op if there is no drag image element.
	     */
	    Drag.prototype._moveDragImage = function (clientX, clientY) {
	        if (!this._dragImage) {
	            return;
	        }
	        var style = this._dragImage.style;
	        style.top = clientY + "px";
	        style.left = clientX + "px";
	    };
	    /**
	     * Detach the drag image element from the DOM.
	     *
	     * This is a no-op if there is no drag image element.
	     */
	    Drag.prototype._detachDragImage = function () {
	        if (!this._dragImage) {
	            return;
	        }
	        var parent = this._dragImage.parentNode;
	        if (!parent) {
	            return;
	        }
	        parent.removeChild(this._dragImage);
	    };
	    /**
	     * Set the internal drop action state and update the drag cursor.
	     */
	    Drag.prototype._setDropAction = function (action) {
	        if ((action & this._supportedActions) === 0) {
	            action = DropAction.None;
	        }
	        if (this._override && this._dropAction === action) {
	            return;
	        }
	        switch (action) {
	            case DropAction.None:
	                this._dropAction = action;
	                this._override = phosphor_domutil_1.overrideCursor('no-drop');
	                break;
	            case DropAction.Copy:
	                this._dropAction = action;
	                this._override = phosphor_domutil_1.overrideCursor('copy');
	                break;
	            case DropAction.Link:
	                this._dropAction = action;
	                this._override = phosphor_domutil_1.overrideCursor('alias');
	                break;
	            case DropAction.Move:
	                this._dropAction = action;
	                this._override = phosphor_domutil_1.overrideCursor('move');
	                break;
	        }
	    };
	    /**
	     * Finalize the drag operation and resolve the drag promise.
	     */
	    Drag.prototype._finalize = function (action) {
	        // Store the resolve function as a temp variable.
	        var resolve = this._resolve;
	        // Remove the document event listeners.
	        this._removeListeners();
	        // Detach the drag image.
	        this._detachDragImage();
	        // Dispose of the cursor override.
	        if (this._override)
	            this._override.dispose();
	        // Clear the mime data.
	        if (this._mimeData)
	            this._mimeData.clear();
	        // Clear the internal drag state.
	        this._disposed = true;
	        this._source = null;
	        this._mimeData = null;
	        this._dragImage = null;
	        this._dropAction = DropAction.None;
	        this._proposedAction = DropAction.None;
	        this._supportedActions = DropActions.None;
	        this._override = null;
	        this._currentTarget = null;
	        this._currentElement = null;
	        this._promise = null;
	        this._resolve = null;
	        // Resolve the promise to the given drop action, if possible.
	        if (resolve)
	            resolve(action);
	    };
	    return Drag;
	}());
	exports.Drag = Drag;
	/**
	 * Create a left mouse event at the given position.
	 *
	 * @param type - The event type for the mouse event.
	 *
	 * @param clientX - The client X position.
	 *
	 * @param clientY - The client Y position.
	 *
	 * @returns A newly created and initialized mouse event.
	 */
	function createMouseEvent(type, clientX, clientY) {
	    var event = document.createEvent('MouseEvent');
	    event.initMouseEvent(type, true, true, window, 0, 0, 0, clientX, clientY, false, false, false, false, 0, null);
	    return event;
	}
	/**
	 * Create a new initialized `IDragEvent` from the given data.
	 *
	 * @param type - The event type for the drag event.
	 *
	 * @param drag - The drag object to use for seeding the drag data.
	 *
	 * @param event - The mouse event to use for seeding the mouse data.
	 *
	 * @param related - The related target for the event, or `null`.
	 *
	 * @returns A new object which implements `IDragEvent`.
	 */
	function createDragEvent(type, drag, event, related) {
	    // Create a new mouse event and cast to a custom drag event.
	    var dragEvent = document.createEvent('MouseEvent');
	    // Initialize the mouse event data.
	    dragEvent.initMouseEvent(type, true, true, window, 0, event.screenX, event.screenY, event.clientX, event.clientY, event.ctrlKey, event.altKey, event.shiftKey, event.metaKey, event.button, related);
	    // Add the custom drag event data.
	    dragEvent.mimeData = drag.mimeData;
	    dragEvent.dropAction = DropAction.None;
	    dragEvent.proposedAction = drag.proposedAction;
	    dragEvent.supportedActions = drag.supportedActions;
	    dragEvent.source = drag.source;
	    // Return the fully initialized drag event.
	    return dragEvent;
	}
	/**
	 * Dispatch a drag enter event to the indicated element.
	 *
	 * @param drag - The drag object associated with the action.
	 *
	 * @param currElem - The currently indicated element, or `null`. This
	 *   is the "immediate user selection" from the whatwg spec.
	 *
	 * @param currTarget - The current drag target element, or `null`. This
	 *   is the "current target element" from the whatwg spec.
	 *
	 * @param event - The mouse event related to the action.
	 *
	 * @returns The element to use as the current drag target. This is the
	 *   "current target element" from the whatwg spec, and may be `null`.
	 *
	 * #### Notes
	 * This largely implements the drag enter portion of the whatwg spec:
	 * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model
	 */
	function dispatchDragEnter(drag, currElem, currTarget, event) {
	    // If the current element is null, return null as the new target.
	    if (!currElem) {
	        return null;
	    }
	    // Dispatch a drag enter event to the current element.
	    var dragEvent = createDragEvent('p-dragenter', drag, event, currTarget);
	    var canceled = !currElem.dispatchEvent(dragEvent);
	    // If the event was canceled, use the current element as the new target.
	    if (canceled) {
	        return currElem;
	    }
	    // If the current element is the document body, keep the original target.
	    if (currElem === document.body) {
	        return currTarget;
	    }
	    // Dispatch a drag enter event on the document body.
	    dragEvent = createDragEvent('p-dragenter', drag, event, currTarget);
	    document.body.dispatchEvent(dragEvent);
	    // Ignore the event cancellation, and use the body as the new target.
	    return document.body;
	}
	/**
	 * Dispatch a drag leave event to the indicated element.
	 *
	 * @param drag - The drag object associated with the action.
	 *
	 * @param prevTarget - The previous target element, or `null`. This
	 *   is the previous "current target element" from the whatwg spec.
	 *
	 * @param currTarget - The current drag target element, or `null`. This
	 *   is the "current target element" from the whatwg spec.
	 *
	 * @param event - The mouse event related to the action.
	 *
	 * #### Notes
	 * This largely implements the drag leave portion of the whatwg spec:
	 * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model
	 */
	function dispatchDragLeave(drag, prevTarget, currTarget, event) {
	    // If the previous target is null, do nothing.
	    if (!prevTarget) {
	        return;
	    }
	    // Dispatch the drag leave event to the previous target.
	    var dragEvent = createDragEvent('p-dragleave', drag, event, currTarget);
	    prevTarget.dispatchEvent(dragEvent);
	}
	/**
	 * Dispatch a drag over event to the indicated element.
	 *
	 * @param drag - The drag object associated with the action.
	 *
	 * @param currTarget - The current drag target element, or `null`. This
	 *   is the "current target element" from the whatwg spec.
	 *
	 * @param event - The mouse event related to the action.
	 *
	 * @returns The `DropAction` result of the drag over event.
	 *
	 * #### Notes
	 * This largely implements the drag over portion of the whatwg spec:
	 * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model
	 */
	function dispatchDragOver(drag, currTarget, event) {
	    // If there is no current target, the drop action is none.
	    if (!currTarget) {
	        return DropAction.None;
	    }
	    // Dispatch the drag over event to the current target.
	    var dragEvent = createDragEvent('p-dragover', drag, event, null);
	    var canceled = !currTarget.dispatchEvent(dragEvent);
	    // If the event was canceled, return the drop action result.
	    if (canceled) {
	        return dragEvent.dropAction;
	    }
	    // Otherwise, the effective drop action is none.
	    return DropAction.None;
	}
	/**
	 * Dispatch a drop event to the indicated element.
	 *
	 * @param drag - The drag object associated with the action.
	 *
	 * @param currTarget - The current drag target element, or `null`. This
	 *   is the "current target element" from the whatwg spec.
	 *
	 * @param event - The mouse event related to the action.
	 *
	 * @returns The `DropAction` result of the drop event.
	 *
	 * #### Notes
	 * This largely implements the drag over portion of the whatwg spec:
	 * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model
	 */
	function dispatchDrop(drag, currTarget, event) {
	    // If there is no current target, the drop action is none.
	    if (!currTarget) {
	        return DropAction.None;
	    }
	    // Dispatch the drop event to the current target.
	    var dragEvent = createDragEvent('p-drop', drag, event, null);
	    var canceled = !currTarget.dispatchEvent(dragEvent);
	    // If the event was canceled, return the drop action result.
	    if (canceled) {
	        return dragEvent.dropAction;
	    }
	    // Otherwise, the effective drop action is none.
	    return DropAction.None;
	}


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(33));
	__export(__webpack_require__(34));
	__webpack_require__(35);


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var arrays = __webpack_require__(3);
	var phosphor_boxengine_1 = __webpack_require__(6);
	var phosphor_domutil_1 = __webpack_require__(7);
	var phosphor_messaging_1 = __webpack_require__(13);
	var phosphor_panel_1 = __webpack_require__(18);
	var phosphor_properties_1 = __webpack_require__(17);
	var phosphor_widget_1 = __webpack_require__(20);
	/**
	 * The class name added to hidden split handles.
	 */
	var HIDDEN_CLASS = 'p-mod-hidden';
	/**
	 * The class name added to horizontal split panels.
	 */
	var HORIZONTAL_CLASS = 'p-mod-horizontal';
	/**
	 * The class name added to vertical split panels.
	 */
	var VERTICAL_CLASS = 'p-mod-vertical';
	/**
	 * The orientation of a split layout.
	 */
	(function (Orientation) {
	    /**
	     * Left-to-right horizontal orientation.
	     */
	    Orientation[Orientation["Horizontal"] = 0] = "Horizontal";
	    /**
	     * Top-to-bottom vertical orientation.
	     */
	    Orientation[Orientation["Vertical"] = 1] = "Vertical";
	})(exports.Orientation || (exports.Orientation = {}));
	var Orientation = exports.Orientation;
	/**
	 * A layout which arranges its children into resizable sections.
	 */
	var SplitLayout = (function (_super) {
	    __extends(SplitLayout, _super);
	    /**
	     * Construct a new split layout.
	     *
	     * @param factory - The handle factory for creating split handles.
	     */
	    function SplitLayout(factory) {
	        _super.call(this);
	        this._fixed = 0;
	        this._spacing = 3;
	        this._normed = false;
	        this._box = null;
	        this._sizers = [];
	        this._handles = [];
	        this._orientation = Orientation.Horizontal;
	        this._factory = factory;
	    }
	    Object.defineProperty(SplitLayout.prototype, "orientation", {
	        /**
	         * Get the layout orientation for the split layout.
	         */
	        get: function () {
	            return this._orientation;
	        },
	        /**
	         * Set the layout orientation for the split layout.
	         */
	        set: function (value) {
	            if (this._orientation === value) {
	                return;
	            }
	            this._orientation = value;
	            if (!this.parent) {
	                return;
	            }
	            SplitLayoutPrivate.toggleOrientation(this.parent, value);
	            this.parent.fit();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SplitLayout.prototype, "spacing", {
	        /**
	         * Get the inter-element spacing for the split layout.
	         */
	        get: function () {
	            return this._spacing;
	        },
	        /**
	         * Set the inter-element spacing for the split layout.
	         */
	        set: function (value) {
	            value = Math.max(0, value | 0);
	            if (this._spacing === value) {
	                return;
	            }
	            this._spacing = value;
	            if (!this.parent) {
	                return;
	            }
	            this.parent.fit();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Get the normalized sizes of the widgets in the layout.
	     *
	     * @returns The normalized sizes of the widgets in the layout.
	     */
	    SplitLayout.prototype.sizes = function () {
	        return SplitLayoutPrivate.normalize(this._sizers.map(function (s) { return s.size; }));
	    };
	    /**
	     * Set the relative sizes for the child widgets in the layout.
	     *
	     * @param sizes - The relative sizes for the children in the layout.
	     *   These values will be normalized to the available layout space.
	     *
	     * #### Notes
	     * Extra values are ignored, too few will yield an undefined layout.
	     */
	    SplitLayout.prototype.setSizes = function (sizes) {
	        var normed = SplitLayoutPrivate.normalize(sizes);
	        for (var i = 0, n = this._sizers.length; i < n; ++i) {
	            var hint = Math.max(0, normed[i] || 0);
	            var sizer = this._sizers[i];
	            sizer.sizeHint = hint;
	            sizer.size = hint;
	        }
	        this._normed = true;
	        if (this.parent)
	            this.parent.update();
	    };
	    /**
	     * Get the handle for the widget at the given index.
	     *
	     * @param index - The index of the handle of interest.
	     *
	     * @returns The handle for the given index, or `undefined`.
	     */
	    SplitLayout.prototype.handleAt = function (index) {
	        return this._handles[index];
	    };
	    /**
	     * Move a split handle to the specified offset position.
	     *
	     * @param index - The index of the handle of the interest.
	     *
	     * @param position - The desired offset position of the handle. This
	     *   is the absolute position relative to the origin of the parent.
	     *
	     * #### Notes
	     * This will move the handle as close as possible to the desired
	     * position. The sibling children will be adjusted as necessary.
	     */
	    SplitLayout.prototype.moveHandle = function (index, position) {
	        // Bail if the index is invalid or the handle is hidden.
	        var handle = this._handles[index];
	        if (!handle || handle.classList.contains(HIDDEN_CLASS)) {
	            return;
	        }
	        // Compute the delta movement for the handle.
	        var delta;
	        if (this._orientation === Orientation.Horizontal) {
	            delta = position - handle.offsetLeft;
	        }
	        else {
	            delta = position - handle.offsetTop;
	        }
	        // Bail if there is no handle movement.
	        if (delta === 0) {
	            return;
	        }
	        // Prevent item resizing unless needed.
	        for (var _i = 0, _a = this._sizers; _i < _a.length; _i++) {
	            var sizer = _a[_i];
	            if (sizer.size > 0)
	                sizer.sizeHint = sizer.size;
	        }
	        // Adjust the sizers to reflect the movement.
	        if (delta > 0) {
	            SplitLayoutPrivate.growSizer(this._sizers, index, delta);
	        }
	        else {
	            SplitLayoutPrivate.shrinkSizer(this._sizers, index, -delta);
	        }
	        // Update the layout of the child widgets.
	        if (this.parent)
	            this.parent.update();
	    };
	    /**
	     * Initialize the children of the layout.
	     *
	     * #### Notes
	     * This method is called automatically when the layout is installed
	     * on its parent widget.
	     */
	    SplitLayout.prototype.initialize = function () {
	        SplitLayoutPrivate.toggleOrientation(this.parent, this.orientation);
	        _super.prototype.initialize.call(this);
	    };
	    /**
	     * Attach a child widget to the parent's DOM node.
	     *
	     * @param index - The current index of the child in the layout.
	     *
	     * @param child - The child widget to attach to the parent.
	     *
	     * #### Notes
	     * This is a reimplementation of the superclass method.
	     */
	    SplitLayout.prototype.attachChild = function (index, child) {
	        var handle = SplitLayoutPrivate.createHandle(this._factory);
	        var average = SplitLayoutPrivate.averageSize(this._sizers);
	        var sizer = SplitLayoutPrivate.createSizer(average);
	        arrays.insert(this._sizers, index, sizer);
	        arrays.insert(this._handles, index, handle);
	        SplitLayoutPrivate.prepareGeometry(child);
	        this.parent.node.appendChild(child.node);
	        this.parent.node.appendChild(handle);
	        if (this.parent.isAttached)
	            phosphor_messaging_1.sendMessage(child, phosphor_widget_1.Widget.MsgAfterAttach);
	        this.parent.fit();
	    };
	    /**
	     * Move a child widget in the parent's DOM node.
	     *
	     * @param fromIndex - The previous index of the child in the layout.
	     *
	     * @param toIndex - The current index of the child in the layout.
	     *
	     * @param child - The child widget to move in the parent.
	     *
	     * #### Notes
	     * This is a reimplementation of the superclass method.
	     */
	    SplitLayout.prototype.moveChild = function (fromIndex, toIndex, child) {
	        arrays.move(this._sizers, fromIndex, toIndex);
	        arrays.move(this._handles, fromIndex, toIndex);
	        this.parent.fit(); // fit instead of update to show/hide handles
	    };
	    /**
	     * Detach a child widget from the parent's DOM node.
	     *
	     * @param index - The previous index of the child in the layout.
	     *
	     * @param child - The child widget to detach from the parent.
	     *
	     * #### Notes
	     * This is a reimplementation of the superclass method.
	     */
	    SplitLayout.prototype.detachChild = function (index, child) {
	        var sizer = arrays.removeAt(this._sizers, index);
	        var handle = arrays.removeAt(this._handles, index);
	        if (this.parent.isAttached)
	            phosphor_messaging_1.sendMessage(child, phosphor_widget_1.Widget.MsgBeforeDetach);
	        this.parent.node.removeChild(child.node);
	        this.parent.node.removeChild(handle);
	        SplitLayoutPrivate.resetGeometry(child);
	        this.parent.fit();
	    };
	    /**
	     * A message handler invoked on an `'after-show'` message.
	     */
	    SplitLayout.prototype.onAfterShow = function (msg) {
	        _super.prototype.onAfterShow.call(this, msg);
	        this.parent.update();
	    };
	    /**
	     * A message handler invoked on an `'after-attach'` message.
	     */
	    SplitLayout.prototype.onAfterAttach = function (msg) {
	        _super.prototype.onAfterAttach.call(this, msg);
	        this.parent.fit();
	    };
	    /**
	     * A message handler invoked on a `'child-shown'` message.
	     */
	    SplitLayout.prototype.onChildShown = function (msg) {
	        if (SplitLayoutPrivate.IsIE) {
	            phosphor_messaging_1.sendMessage(this.parent, phosphor_widget_1.Widget.MsgFitRequest);
	        }
	        else {
	            this.parent.fit();
	        }
	    };
	    /**
	     * A message handler invoked on a `'child-hidden'` message.
	     */
	    SplitLayout.prototype.onChildHidden = function (msg) {
	        if (SplitLayoutPrivate.IsIE) {
	            phosphor_messaging_1.sendMessage(this.parent, phosphor_widget_1.Widget.MsgFitRequest);
	        }
	        else {
	            this.parent.fit();
	        }
	    };
	    /**
	     * A message handler invoked on a `'resize'` message.
	     */
	    SplitLayout.prototype.onResize = function (msg) {
	        if (this.parent.isVisible) {
	            this._update(msg.width, msg.height);
	        }
	    };
	    /**
	     * A message handler invoked on an `'update-request'` message.
	     */
	    SplitLayout.prototype.onUpdateRequest = function (msg) {
	        if (this.parent.isVisible) {
	            this._update(-1, -1);
	        }
	    };
	    /**
	     * A message handler invoked on a `'fit-request'` message.
	     */
	    SplitLayout.prototype.onFitRequest = function (msg) {
	        if (this.parent.isAttached) {
	            this._fit();
	        }
	    };
	    /**
	     * Fit the layout to the total size required by the child widgets.
	     */
	    SplitLayout.prototype._fit = function () {
	        // Update the handles and track the visible widget count.
	        var nVisible = 0;
	        var lastHandle = null;
	        for (var i = 0, n = this.childCount(); i < n; ++i) {
	            var handle = this._handles[i];
	            if (this.childAt(i).isHidden) {
	                handle.classList.add(HIDDEN_CLASS);
	            }
	            else {
	                handle.classList.remove(HIDDEN_CLASS);
	                lastHandle = handle;
	                nVisible++;
	            }
	        }
	        // Hide the handle for the last visible child.
	        if (lastHandle)
	            lastHandle.classList.add(HIDDEN_CLASS);
	        // Update the fixed space for the visible items.
	        this._fixed = this._spacing * Math.max(0, nVisible - 1);
	        // Setup the initial size limits.
	        var minW = 0;
	        var minH = 0;
	        var maxW = Infinity;
	        var maxH = Infinity;
	        var horz = this._orientation === Orientation.Horizontal;
	        if (horz) {
	            minW = this._fixed;
	            maxW = nVisible > 0 ? minW : maxW;
	        }
	        else {
	            minH = this._fixed;
	            maxH = nVisible > 0 ? minH : maxH;
	        }
	        // Update the sizers and computed size limits.
	        for (var i = 0, n = this.childCount(); i < n; ++i) {
	            var child = this.childAt(i);
	            var sizer = this._sizers[i];
	            if (sizer.size > 0) {
	                sizer.sizeHint = sizer.size;
	            }
	            if (child.isHidden) {
	                sizer.minSize = 0;
	                sizer.maxSize = 0;
	                continue;
	            }
	            var limits = phosphor_domutil_1.sizeLimits(child.node);
	            sizer.stretch = SplitLayout.getStretch(child);
	            if (horz) {
	                sizer.minSize = limits.minWidth;
	                sizer.maxSize = limits.maxWidth;
	                minW += limits.minWidth;
	                maxW += limits.maxWidth;
	                minH = Math.max(minH, limits.minHeight);
	                maxH = Math.min(maxH, limits.maxHeight);
	            }
	            else {
	                sizer.minSize = limits.minHeight;
	                sizer.maxSize = limits.maxHeight;
	                minH += limits.minHeight;
	                maxH += limits.maxHeight;
	                minW = Math.max(minW, limits.minWidth);
	                maxW = Math.min(maxW, limits.maxWidth);
	            }
	        }
	        // Update the box sizing and add it to the size constraints.
	        var box = this._box = phosphor_domutil_1.boxSizing(this.parent.node);
	        minW += box.horizontalSum;
	        minH += box.verticalSum;
	        maxW += box.horizontalSum;
	        maxH += box.verticalSum;
	        // Update the parent's size constraints.
	        var style = this.parent.node.style;
	        style.minWidth = minW + "px";
	        style.minHeight = minH + "px";
	        style.maxWidth = maxW === Infinity ? 'none' : maxW + "px";
	        style.maxHeight = maxH === Infinity ? 'none' : maxH + "px";
	        // Notify the ancestor that it should fit immediately.
	        var ancestor = this.parent.parent;
	        if (ancestor)
	            phosphor_messaging_1.sendMessage(ancestor, phosphor_widget_1.Widget.MsgFitRequest);
	        // Notify the parent that it should update immediately.
	        phosphor_messaging_1.sendMessage(this.parent, phosphor_widget_1.Widget.MsgUpdateRequest);
	    };
	    /**
	     * Update the layout position and size of the child widgets.
	     *
	     * The parent offset dimensions should be `-1` if unknown.
	     */
	    SplitLayout.prototype._update = function (offsetWidth, offsetHeight) {
	        // Bail early if there are no children to layout.
	        if (this.childCount() === 0) {
	            return;
	        }
	        // Measure the parent if the offset dimensions are unknown.
	        if (offsetWidth < 0) {
	            offsetWidth = this.parent.node.offsetWidth;
	        }
	        if (offsetHeight < 0) {
	            offsetHeight = this.parent.node.offsetHeight;
	        }
	        // Ensure the parent box sizing data is computed.
	        var box = this._box || (this._box = phosphor_domutil_1.boxSizing(this.parent.node));
	        // Compute the actual layout bounds adjusted for border and padding.
	        var top = box.paddingTop;
	        var left = box.paddingLeft;
	        var width = offsetWidth - box.horizontalSum;
	        var height = offsetHeight - box.verticalSum;
	        // Compute the adjusted layout space.
	        var space;
	        var horz = this._orientation === Orientation.Horizontal;
	        if (horz) {
	            space = Math.max(0, width - this._fixed);
	        }
	        else {
	            space = Math.max(0, height - this._fixed);
	        }
	        // Scale the size hints if they are normalized.
	        if (this._normed) {
	            for (var _i = 0, _a = this._sizers; _i < _a.length; _i++) {
	                var sizer = _a[_i];
	                sizer.sizeHint *= space;
	            }
	            this._normed = false;
	        }
	        // Distribute the layout space to the box sizers.
	        phosphor_boxengine_1.boxCalc(this._sizers, space);
	        // Layout the children using the computed box sizes.
	        var spacing = this._spacing;
	        for (var i = 0, n = this.childCount(); i < n; ++i) {
	            var child = this.childAt(i);
	            if (child.isHidden) {
	                continue;
	            }
	            var handle = this._handles[i];
	            var size = this._sizers[i].size;
	            if (horz) {
	                SplitLayoutPrivate.setGeometry(child, left, top, size, height);
	                left += size;
	                SplitLayoutPrivate.setHandleGeo(handle, left, top, spacing, height);
	                left += spacing;
	            }
	            else {
	                SplitLayoutPrivate.setGeometry(child, left, top, width, size);
	                top += size;
	                SplitLayoutPrivate.setHandleGeo(handle, left, top, width, spacing);
	                top += spacing;
	            }
	        }
	    };
	    return SplitLayout;
	})(phosphor_panel_1.PanelLayout);
	exports.SplitLayout = SplitLayout;
	/**
	 * The namespace for the `SplitLayout` class statics.
	 */
	var SplitLayout;
	(function (SplitLayout) {
	    /**
	     * A convenience alias of the `Horizontal` [[Orientation]].
	     */
	    SplitLayout.Horizontal = Orientation.Horizontal;
	    /**
	     * A convenience alias of the `Vertical` [[Orientation]].
	     */
	    SplitLayout.Vertical = Orientation.Vertical;
	    /**
	     * Get the split layout stretch factor for the given widget.
	     *
	     * @param widget - The widget of interest.
	     *
	     * @returns The split layout stretch factor for the widget.
	     */
	    function getStretch(widget) {
	        return SplitLayoutPrivate.stretchProperty.get(widget);
	    }
	    SplitLayout.getStretch = getStretch;
	    /**
	     * Set the split layout stretch factor for the given widget.
	     *
	     * @param widget - The widget of interest.
	     *
	     * @param value - The value for the stretch factor.
	     */
	    function setStretch(widget, value) {
	        SplitLayoutPrivate.stretchProperty.set(widget, value);
	    }
	    SplitLayout.setStretch = setStretch;
	})(SplitLayout = exports.SplitLayout || (exports.SplitLayout = {}));
	/**
	 * The namespace for the `SplitLayout` class private data.
	 */
	var SplitLayoutPrivate;
	(function (SplitLayoutPrivate) {
	    /**
	     * A flag indicating whether the browser is IE.
	     */
	    SplitLayoutPrivate.IsIE = /Trident/.test(navigator.userAgent);
	    /**
	     * The property descriptor for a widget stretch factor.
	     */
	    SplitLayoutPrivate.stretchProperty = new phosphor_properties_1.Property({
	        name: 'stretch',
	        value: 0,
	        coerce: function (owner, value) { return Math.max(0, value | 0); },
	        changed: onChildPropertyChanged,
	    });
	    /**
	     * Create a new box sizer with the given size hint.
	     */
	    function createSizer(size) {
	        var sizer = new phosphor_boxengine_1.BoxSizer();
	        sizer.sizeHint = size | 0;
	        return sizer;
	    }
	    SplitLayoutPrivate.createSizer = createSizer;
	    /**
	     * Create a new split handle using the given factory.
	     */
	    function createHandle(factory) {
	        var handle = factory.createHandle();
	        handle.style.position = 'absolute';
	        return handle;
	    }
	    SplitLayoutPrivate.createHandle = createHandle;
	    /**
	     * Toggle the CSS orientation class for the given widget.
	     */
	    function toggleOrientation(widget, orient) {
	        widget.toggleClass(HORIZONTAL_CLASS, orient === Orientation.Horizontal);
	        widget.toggleClass(VERTICAL_CLASS, orient === Orientation.Vertical);
	    }
	    SplitLayoutPrivate.toggleOrientation = toggleOrientation;
	    /**
	     * Prepare the layout geometry for the given child widget.
	     */
	    function prepareGeometry(widget) {
	        widget.node.style.position = 'absolute';
	    }
	    SplitLayoutPrivate.prepareGeometry = prepareGeometry;
	    /**
	     * Reset the layout geometry for the given child widget.
	     */
	    function resetGeometry(widget) {
	        var rect = rectProperty.get(widget);
	        var style = widget.node.style;
	        rect.top = NaN;
	        rect.left = NaN;
	        rect.width = NaN;
	        rect.height = NaN;
	        style.position = '';
	        style.top = '';
	        style.left = '';
	        style.width = '';
	        style.height = '';
	    }
	    SplitLayoutPrivate.resetGeometry = resetGeometry;
	    /**
	     * Set the layout geometry of a child widget.
	     */
	    function setGeometry(widget, left, top, width, height) {
	        var resized = false;
	        var style = widget.node.style;
	        var rect = rectProperty.get(widget);
	        if (rect.top !== top) {
	            rect.top = top;
	            style.top = top + "px";
	        }
	        if (rect.left !== left) {
	            rect.left = left;
	            style.left = left + "px";
	        }
	        if (rect.width !== width) {
	            resized = true;
	            rect.width = width;
	            style.width = width + "px";
	        }
	        if (rect.height !== height) {
	            resized = true;
	            rect.height = height;
	            style.height = height + "px";
	        }
	        if (resized) {
	            phosphor_messaging_1.sendMessage(widget, new phosphor_widget_1.ResizeMessage(width, height));
	        }
	    }
	    SplitLayoutPrivate.setGeometry = setGeometry;
	    /**
	     * Set the layout geometry of a split handle.
	     */
	    function setHandleGeo(handle, left, top, width, height) {
	        var style = handle.style;
	        style.top = top + "px";
	        style.left = left + "px";
	        style.width = width + "px";
	        style.height = height + "px";
	    }
	    SplitLayoutPrivate.setHandleGeo = setHandleGeo;
	    /**
	     * Compute the average size of the given box sizers.
	     */
	    function averageSize(sizers) {
	        if (sizers.length === 0)
	            return 0;
	        return sizers.reduce(function (v, s) { return v + s.size; }, 0) / sizers.length;
	    }
	    SplitLayoutPrivate.averageSize = averageSize;
	    /**
	     * Normalize an array of positive values.
	     */
	    function normalize(values) {
	        var n = values.length;
	        if (n === 0) {
	            return [];
	        }
	        var sum = 0;
	        for (var i = 0; i < n; ++i) {
	            sum += values[i];
	        }
	        var result = new Array(n);
	        if (sum === 0) {
	            for (var i = 0; i < n; ++i) {
	                result[i] = 1 / n;
	            }
	        }
	        else {
	            for (var i = 0; i < n; ++i) {
	                result[i] = values[i] / sum;
	            }
	        }
	        return result;
	    }
	    SplitLayoutPrivate.normalize = normalize;
	    /**
	     * Grow a sizer to the right by a positive delta and adjust neighbors.
	     */
	    function growSizer(sizers, index, delta) {
	        var growLimit = 0;
	        for (var i = 0; i <= index; ++i) {
	            var sizer = sizers[i];
	            growLimit += sizer.maxSize - sizer.size;
	        }
	        var shrinkLimit = 0;
	        for (var i = index + 1, n = sizers.length; i < n; ++i) {
	            var sizer = sizers[i];
	            shrinkLimit += sizer.size - sizer.minSize;
	        }
	        delta = Math.min(delta, growLimit, shrinkLimit);
	        var grow = delta;
	        for (var i = index; i >= 0 && grow > 0; --i) {
	            var sizer = sizers[i];
	            var limit = sizer.maxSize - sizer.size;
	            if (limit >= grow) {
	                sizer.sizeHint = sizer.size + grow;
	                grow = 0;
	            }
	            else {
	                sizer.sizeHint = sizer.size + limit;
	                grow -= limit;
	            }
	        }
	        var shrink = delta;
	        for (var i = index + 1, n = sizers.length; i < n && shrink > 0; ++i) {
	            var sizer = sizers[i];
	            var limit = sizer.size - sizer.minSize;
	            if (limit >= shrink) {
	                sizer.sizeHint = sizer.size - shrink;
	                shrink = 0;
	            }
	            else {
	                sizer.sizeHint = sizer.size - limit;
	                shrink -= limit;
	            }
	        }
	    }
	    SplitLayoutPrivate.growSizer = growSizer;
	    /**
	     * Shrink a sizer to the left by a positive delta and adjust neighbors.
	     */
	    function shrinkSizer(sizers, index, delta) {
	        var growLimit = 0;
	        for (var i = index + 1, n = sizers.length; i < n; ++i) {
	            var sizer = sizers[i];
	            growLimit += sizer.maxSize - sizer.size;
	        }
	        var shrinkLimit = 0;
	        for (var i = 0; i <= index; ++i) {
	            var sizer = sizers[i];
	            shrinkLimit += sizer.size - sizer.minSize;
	        }
	        delta = Math.min(delta, growLimit, shrinkLimit);
	        var grow = delta;
	        for (var i = index + 1, n = sizers.length; i < n && grow > 0; ++i) {
	            var sizer = sizers[i];
	            var limit = sizer.maxSize - sizer.size;
	            if (limit >= grow) {
	                sizer.sizeHint = sizer.size + grow;
	                grow = 0;
	            }
	            else {
	                sizer.sizeHint = sizer.size + limit;
	                grow -= limit;
	            }
	        }
	        var shrink = delta;
	        for (var i = index; i >= 0 && shrink > 0; --i) {
	            var sizer = sizers[i];
	            var limit = sizer.size - sizer.minSize;
	            if (limit >= shrink) {
	                sizer.sizeHint = sizer.size - shrink;
	                shrink = 0;
	            }
	            else {
	                sizer.sizeHint = sizer.size - limit;
	                shrink -= limit;
	            }
	        }
	    }
	    SplitLayoutPrivate.shrinkSizer = shrinkSizer;
	    /**
	     * A property descriptor for a widget offset rect.
	     */
	    var rectProperty = new phosphor_properties_1.Property({
	        name: 'rect',
	        create: function () { return ({ top: NaN, left: NaN, width: NaN, height: NaN }); },
	    });
	    /**
	     * The change handler for the attached child properties.
	     */
	    function onChildPropertyChanged(child) {
	        var parent = child.parent;
	        var layout = parent && parent.layout;
	        if (layout instanceof SplitLayout)
	            parent.fit();
	    }
	})(SplitLayoutPrivate || (SplitLayoutPrivate = {}));


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var phosphor_domutil_1 = __webpack_require__(7);
	var phosphor_panel_1 = __webpack_require__(18);
	var layout_1 = __webpack_require__(33);
	/**
	 * The class name added to SplitPanel instances.
	 */
	var SPLIT_PANEL_CLASS = 'p-SplitPanel';
	/**
	 * The class name added to split panel children.
	 */
	var CHILD_CLASS = 'p-SplitPanel-child';
	/**
	 * The class name added to split panel handles.
	 */
	var HANDLE_CLASS = 'p-SplitPanel-handle';
	/**
	 * A panel which arranges its children into resizable sections.
	 *
	 * #### Notes
	 * This class provides a convenience wrapper around a [[SplitLayout]].
	 */
	var SplitPanel = (function (_super) {
	    __extends(SplitPanel, _super);
	    /**
	     * Construct a new split panel.
	     */
	    function SplitPanel() {
	        _super.call(this);
	        this._pressData = null;
	        this.addClass(SPLIT_PANEL_CLASS);
	    }
	    /**
	     * Create a split layout for a split panel.
	     */
	    SplitPanel.createLayout = function () {
	        return new layout_1.SplitLayout(this);
	    };
	    /**
	     * Create a split handle for use in a split panel.
	     *
	     * #### Notes
	     * This may be reimplemented to create custom split handles.
	     */
	    SplitPanel.createHandle = function () {
	        var handle = document.createElement('div');
	        handle.className = HANDLE_CLASS;
	        return handle;
	    };
	    /**
	     * Dispose of the resources held by the panel.
	     */
	    SplitPanel.prototype.dispose = function () {
	        this._releaseMouse();
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(SplitPanel.prototype, "orientation", {
	        /**
	         * Get the layout orientation for the split panel.
	         */
	        get: function () {
	            return this.layout.orientation;
	        },
	        /**
	         * Set the layout orientation for the split panel.
	         */
	        set: function (value) {
	            this.layout.orientation = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SplitPanel.prototype, "spacing", {
	        /**
	         * Get the inter-element spacing for the split panel.
	         */
	        get: function () {
	            return this.layout.spacing;
	        },
	        /**
	         * Set the inter-element spacing for the split panel.
	         */
	        set: function (value) {
	            this.layout.spacing = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Get the normalized sizes of the widgets in the panel.
	     *
	     * @returns The normalized sizes of the widgets in the panel.
	     */
	    SplitPanel.prototype.sizes = function () {
	        return this.layout.sizes();
	    };
	    /**
	     * Set the relative sizes for the child widgets in the panel.
	     *
	     * @param sizes - The relative sizes for the children in the panel.
	     *   These values will be normalized to the available layout space.
	     *
	     * #### Notes
	     * Extra values are ignored, too few will yield an undefined layout.
	     */
	    SplitPanel.prototype.setSizes = function (sizes) {
	        this.layout.setSizes(sizes);
	    };
	    /**
	     * Get the split handle for the widget at the given index.
	     *
	     * @param index - The index of the widget of interest.
	     *
	     * @returns The split handle for the widget, or `undefined`.
	     */
	    SplitPanel.prototype.handleAt = function (index) {
	        return this.layout.handleAt(index);
	    };
	    /**
	     * Handle the DOM events for the split panel.
	     *
	     * @param event - The DOM event sent to the panel.
	     *
	     * #### Notes
	     * This method implements the DOM `EventListener` interface and is
	     * called in response to events on the panel's DOM node. It should
	     * not be called directly by user code.
	     */
	    SplitPanel.prototype.handleEvent = function (event) {
	        switch (event.type) {
	            case 'mousedown':
	                this._evtMouseDown(event);
	                break;
	            case 'mousemove':
	                this._evtMouseMove(event);
	                break;
	            case 'mouseup':
	                this._evtMouseUp(event);
	                break;
	            case 'keydown':
	                this._evtKeyDown(event);
	                break;
	            case 'keyup':
	            case 'keypress':
	            case 'contextmenu':
	                // Stop all input events during drag.
	                event.preventDefault();
	                event.stopPropagation();
	                break;
	        }
	    };
	    /**
	     * A message handler invoked on an `'after-attach'` message.
	     */
	    SplitPanel.prototype.onAfterAttach = function (msg) {
	        this.node.addEventListener('mousedown', this);
	    };
	    /**
	     * A message handler invoked on a `'before-detach'` message.
	     */
	    SplitPanel.prototype.onBeforeDetach = function (msg) {
	        this.node.removeEventListener('mousedown', this);
	        this._releaseMouse();
	    };
	    /**
	     * A message handler invoked on a `'child-added'` message.
	     */
	    SplitPanel.prototype.onChildAdded = function (msg) {
	        msg.child.addClass(CHILD_CLASS);
	        this._releaseMouse();
	    };
	    /**
	     * A message handler invoked on a `'child-removed'` message.
	     */
	    SplitPanel.prototype.onChildRemoved = function (msg) {
	        msg.child.removeClass(CHILD_CLASS);
	        this._releaseMouse();
	    };
	    /**
	     * Handle the `'keydown'` event for the split panel.
	     */
	    SplitPanel.prototype._evtKeyDown = function (event) {
	        // Stop all input events during drag.
	        event.preventDefault();
	        event.stopPropagation();
	        // Release the mouse if `Escape` is pressed.
	        if (event.keyCode === 27)
	            this._releaseMouse();
	    };
	    /**
	     * Handle the `'mousedown'` event for the split panel.
	     */
	    SplitPanel.prototype._evtMouseDown = function (event) {
	        // Do nothing if the left mouse button is not pressed.
	        if (event.button !== 0) {
	            return;
	        }
	        // Find the handle which contains the target, if any.
	        var layout = this.layout;
	        var target = event.target;
	        var _a = SplitPanelPrivate.findHandle(layout, target), index = _a.index, handle = _a.handle;
	        if (index === -1) {
	            return;
	        }
	        // Stop the event when a split handle is pressed.
	        event.preventDefault();
	        event.stopPropagation();
	        // Add the extra document listeners.
	        document.addEventListener('mouseup', this, true);
	        document.addEventListener('mousemove', this, true);
	        document.addEventListener('keydown', this, true);
	        document.addEventListener('keyup', this, true);
	        document.addEventListener('keypress', this, true);
	        document.addEventListener('contextmenu', this, true);
	        // Compute the offset delta for the handle press.
	        var delta;
	        var rect = handle.getBoundingClientRect();
	        if (layout.orientation === layout_1.Orientation.Horizontal) {
	            delta = event.clientX - rect.left;
	        }
	        else {
	            delta = event.clientY - rect.top;
	        }
	        // Override the cursor and store the press data.
	        var style = window.getComputedStyle(handle);
	        var override = phosphor_domutil_1.overrideCursor(style.cursor);
	        this._pressData = { index: index, delta: delta, override: override };
	    };
	    /**
	     * Handle the `'mousemove'` event for the split panel.
	     */
	    SplitPanel.prototype._evtMouseMove = function (event) {
	        // Stop the event when dragging a split handle.
	        event.preventDefault();
	        event.stopPropagation();
	        // Compute the desired offset position for the handle.
	        var pos;
	        var layout = this.layout;
	        var rect = this.node.getBoundingClientRect();
	        if (layout.orientation === layout_1.Orientation.Horizontal) {
	            pos = event.clientX - rect.left - this._pressData.delta;
	        }
	        else {
	            pos = event.clientY - rect.top - this._pressData.delta;
	        }
	        // Move the handle as close to the desired position as possible.
	        layout.moveHandle(this._pressData.index, pos);
	    };
	    /**
	     * Handle the `'mouseup'` event for the split panel.
	     */
	    SplitPanel.prototype._evtMouseUp = function (event) {
	        // Do nothing if the left mouse button is not released.
	        if (event.button !== 0) {
	            return;
	        }
	        // Stop the event when releasing a handle.
	        event.preventDefault();
	        event.stopPropagation();
	        // Finalize the mouse release.
	        this._releaseMouse();
	    };
	    /**
	     * Release the mouse grab for the split panel.
	     */
	    SplitPanel.prototype._releaseMouse = function () {
	        // Bail early if no drag is in progress.
	        if (!this._pressData) {
	            return;
	        }
	        // Clear the override cursor.
	        this._pressData.override.dispose();
	        this._pressData = null;
	        // Remove the extra document listeners.
	        document.removeEventListener('mouseup', this, true);
	        document.removeEventListener('mousemove', this, true);
	        document.removeEventListener('keydown', this, true);
	        document.removeEventListener('keyup', this, true);
	        document.removeEventListener('keypress', this, true);
	        document.removeEventListener('contextmenu', this, true);
	    };
	    return SplitPanel;
	})(phosphor_panel_1.Panel);
	exports.SplitPanel = SplitPanel;
	/**
	 * The namespace for the `SplitPanel` class statics.
	 */
	var SplitPanel;
	(function (SplitPanel) {
	    /**
	     * A convenience alias of the `Horizontal` [[Orientation]].
	     */
	    SplitPanel.Horizontal = layout_1.Orientation.Horizontal;
	    /**
	     * A convenience alias of the `Vertical` [[Orientation]].
	     */
	    SplitPanel.Vertical = layout_1.Orientation.Vertical;
	    /**
	     * Get the split panel stretch factor for the given widget.
	     *
	     * @param widget - The widget of interest.
	     *
	     * @returns The split panel stretch factor for the widget.
	     */
	    function getStretch(widget) {
	        return layout_1.SplitLayout.getStretch(widget);
	    }
	    SplitPanel.getStretch = getStretch;
	    /**
	     * Set the split panel stretch factor for the given widget.
	     *
	     * @param widget - The widget of interest.
	     *
	     * @param value - The value for the stretch factor.
	     */
	    function setStretch(widget, value) {
	        layout_1.SplitLayout.setStretch(widget, value);
	    }
	    SplitPanel.setStretch = setStretch;
	})(SplitPanel = exports.SplitPanel || (exports.SplitPanel = {}));
	/**
	 * The namespace for the `SplitPanel` class private data.
	 */
	var SplitPanelPrivate;
	(function (SplitPanelPrivate) {
	    /**
	     * Find the split handle which contains the given target element.
	     */
	    function findHandle(layout, target) {
	        for (var i = 0, n = layout.childCount(); i < n; ++i) {
	            var handle = layout.handleAt(i);
	            if (handle.contains(target)) {
	                return { index: i, handle: handle };
	            }
	        }
	        return { index: -1, handle: null };
	    }
	    SplitPanelPrivate.findHandle = findHandle;
	})(SplitPanelPrivate || (SplitPanelPrivate = {}));


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(36);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(12)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js!./index.css", function() {
				var newContent = require("!!./../../css-loader/index.js!./index.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(11)();
	// imports


	// module
	exports.push([module.id, "/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2015, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n.p-SplitPanel {\n  z-index: 0;\n}\n\n\n.p-SplitPanel-child {\n  z-index: 0;\n}\n\n\n.p-SplitPanel-handle {\n  z-index: 1;\n}\n\n\n.p-SplitPanel-handle.p-mod-hidden {\n  display: none;\n}\n\n\n.p-SplitPanel-handle:after {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  content: '';\n}\n\n\n.p-SplitPanel.p-mod-horizontal > .p-SplitPanel-handle {\n  cursor: ew-resize;\n}\n\n\n.p-SplitPanel.p-mod-vertical > .p-SplitPanel-handle {\n  cursor: ns-resize;\n}\n\n\n.p-SplitPanel.p-mod-horizontal > .p-SplitPanel-handle:after {\n  left: 50%;\n  min-width: 7px;\n  transform: translateX(-50%);\n}\n\n\n.p-SplitPanel.p-mod-vertical > .p-SplitPanel-handle:after {\n  top: 50%;\n  min-height: 7px;\n  transform: translateY(-50%);\n}\n", ""]);

	// exports


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(38));
	__export(__webpack_require__(39));


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var phosphor_domutil_1 = __webpack_require__(7);
	var phosphor_messaging_1 = __webpack_require__(13);
	var phosphor_panel_1 = __webpack_require__(18);
	var phosphor_properties_1 = __webpack_require__(17);
	var phosphor_widget_1 = __webpack_require__(20);
	/**
	 * A layout where visible children are stacked atop one another.
	 *
	 * #### Notes
	 * The Z-order of the visible children follows their layout order.
	 */
	var StackedLayout = (function (_super) {
	    __extends(StackedLayout, _super);
	    function StackedLayout() {
	        _super.apply(this, arguments);
	        this._box = null;
	    }
	    /**
	     * Attach a child widget to the parent's DOM node.
	     *
	     * @param index - The current index of the child in the layout.
	     *
	     * @param child - The child widget to attach to the parent.
	     *
	     * #### Notes
	     * This is a reimplementation of the superclass method.
	     */
	    StackedLayout.prototype.attachChild = function (index, child) {
	        StackedLayoutPrivate.prepareGeometry(child);
	        this.parent.node.appendChild(child.node);
	        if (this.parent.isAttached)
	            phosphor_messaging_1.sendMessage(child, phosphor_widget_1.Widget.MsgAfterAttach);
	        this.parent.fit();
	    };
	    /**
	     * Move a child widget in the parent's DOM node.
	     *
	     * @param fromIndex - The previous index of the child in the layout.
	     *
	     * @param toIndex - The current index of the child in the layout.
	     *
	     * @param child - The child widget to move in the parent.
	     *
	     * #### Notes
	     * This is a reimplementation of the superclass method.
	     */
	    StackedLayout.prototype.moveChild = function (fromIndex, toIndex, child) {
	        this.parent.update();
	    };
	    /**
	     * Detach a child widget from the parent's DOM node.
	     *
	     * @param index - The previous index of the child in the layout.
	     *
	     * @param child - The child widget to detach from the parent.
	     *
	     * #### Notes
	     * This is a reimplementation of the superclass method.
	     */
	    StackedLayout.prototype.detachChild = function (index, child) {
	        if (this.parent.isAttached)
	            phosphor_messaging_1.sendMessage(child, phosphor_widget_1.Widget.MsgBeforeDetach);
	        this.parent.node.removeChild(child.node);
	        StackedLayoutPrivate.resetGeometry(child);
	        child.node.style.zIndex = '';
	        this.parent.fit();
	    };
	    /**
	     * A message handler invoked on an `'after-show'` message.
	     */
	    StackedLayout.prototype.onAfterShow = function (msg) {
	        _super.prototype.onAfterShow.call(this, msg);
	        this.parent.update();
	    };
	    /**
	     * A message handler invoked on an `'after-attach'` message.
	     */
	    StackedLayout.prototype.onAfterAttach = function (msg) {
	        _super.prototype.onAfterAttach.call(this, msg);
	        this.parent.fit();
	    };
	    /**
	     * A message handler invoked on a `'child-shown'` message.
	     */
	    StackedLayout.prototype.onChildShown = function (msg) {
	        if (StackedLayoutPrivate.IsIE) {
	            phosphor_messaging_1.sendMessage(this.parent, phosphor_widget_1.Widget.MsgFitRequest);
	        }
	        else {
	            this.parent.fit();
	        }
	    };
	    /**
	     * A message handler invoked on a `'child-hidden'` message.
	     */
	    StackedLayout.prototype.onChildHidden = function (msg) {
	        if (StackedLayoutPrivate.IsIE) {
	            phosphor_messaging_1.sendMessage(this.parent, phosphor_widget_1.Widget.MsgFitRequest);
	        }
	        else {
	            this.parent.fit();
	        }
	    };
	    /**
	     * A message handler invoked on a `'resize'` message.
	     */
	    StackedLayout.prototype.onResize = function (msg) {
	        if (this.parent.isVisible) {
	            this._update(msg.width, msg.height);
	        }
	    };
	    /**
	     * A message handler invoked on an `'update-request'` message.
	     */
	    StackedLayout.prototype.onUpdateRequest = function (msg) {
	        if (this.parent.isVisible) {
	            this._update(-1, -1);
	        }
	    };
	    /**
	     * A message handler invoked on a `'fit-request'` message.
	     */
	    StackedLayout.prototype.onFitRequest = function (msg) {
	        if (this.parent.isAttached) {
	            this._fit();
	        }
	    };
	    /**
	     * Fit the layout to the total size required by the child widgets.
	     */
	    StackedLayout.prototype._fit = function () {
	        // Setup the initial size limits.
	        var minW = 0;
	        var minH = 0;
	        var maxW = Infinity;
	        var maxH = Infinity;
	        // Update the computed size limits.
	        for (var i = 0, n = this.childCount(); i < n; ++i) {
	            var child = this.childAt(i);
	            if (child.isHidden) {
	                continue;
	            }
	            var limits = phosphor_domutil_1.sizeLimits(child.node);
	            minW = Math.max(minW, limits.minWidth);
	            minH = Math.max(minH, limits.minHeight);
	            maxW = Math.min(maxW, limits.maxWidth);
	            maxH = Math.min(maxH, limits.maxHeight);
	        }
	        // Ensure max limits >= min limits.
	        maxW = Math.max(minW, maxW);
	        maxH = Math.max(minH, maxH);
	        // Update the box sizing and add it to the size constraints.
	        var box = this._box = phosphor_domutil_1.boxSizing(this.parent.node);
	        minW += box.horizontalSum;
	        minH += box.verticalSum;
	        maxW += box.horizontalSum;
	        maxH += box.verticalSum;
	        // Update the parent's size constraints.
	        var style = this.parent.node.style;
	        style.minWidth = minW + "px";
	        style.minHeight = minH + "px";
	        style.maxWidth = maxW === Infinity ? 'none' : maxW + "px";
	        style.maxHeight = maxH === Infinity ? 'none' : maxH + "px";
	        // Notify the ancestor that it should fit immediately.
	        var ancestor = this.parent.parent;
	        if (ancestor)
	            phosphor_messaging_1.sendMessage(ancestor, phosphor_widget_1.Widget.MsgFitRequest);
	        // Notify the parent that it should update immediately.
	        phosphor_messaging_1.sendMessage(this.parent, phosphor_widget_1.Widget.MsgUpdateRequest);
	    };
	    /**
	     * Update the layout position and size of the child widgets.
	     *
	     * The parent offset dimensions should be `-1` if unknown.
	     */
	    StackedLayout.prototype._update = function (offsetWidth, offsetHeight) {
	        // Bail early if there are no children to layout.
	        if (this.childCount() === 0) {
	            return;
	        }
	        // Measure the parent if the offset dimensions are unknown.
	        if (offsetWidth < 0) {
	            offsetWidth = this.parent.node.offsetWidth;
	        }
	        if (offsetHeight < 0) {
	            offsetHeight = this.parent.node.offsetHeight;
	        }
	        // Ensure the parent box sizing data is computed.
	        var box = this._box || (this._box = phosphor_domutil_1.boxSizing(this.parent.node));
	        // Compute the actual layout bounds adjusted for border and padding.
	        var top = box.paddingTop;
	        var left = box.paddingLeft;
	        var width = offsetWidth - box.horizontalSum;
	        var height = offsetHeight - box.verticalSum;
	        // Update the child stacking order and layout geometry.
	        for (var i = 0, n = this.childCount(); i < n; ++i) {
	            var child = this.childAt(i);
	            if (child.isHidden) {
	                continue;
	            }
	            child.node.style.zIndex = "" + i;
	            StackedLayoutPrivate.setGeometry(child, left, top, width, height);
	        }
	    };
	    return StackedLayout;
	})(phosphor_panel_1.PanelLayout);
	exports.StackedLayout = StackedLayout;
	/**
	 * The namespace for the `StackedLayout` class private data.
	 */
	var StackedLayoutPrivate;
	(function (StackedLayoutPrivate) {
	    /**
	     * A flag indicating whether the browser is IE.
	     */
	    StackedLayoutPrivate.IsIE = /Trident/.test(navigator.userAgent);
	    /**
	     * Prepare a child widget for absolute layout geometry.
	     */
	    function prepareGeometry(widget) {
	        widget.node.style.position = 'absolute';
	    }
	    StackedLayoutPrivate.prepareGeometry = prepareGeometry;
	    /**
	     * Reset the layout geometry for the given child widget.
	     */
	    function resetGeometry(widget) {
	        var rect = rectProperty.get(widget);
	        var style = widget.node.style;
	        rect.top = NaN;
	        rect.left = NaN;
	        rect.width = NaN;
	        rect.height = NaN;
	        style.position = '';
	        style.top = '';
	        style.left = '';
	        style.width = '';
	        style.height = '';
	    }
	    StackedLayoutPrivate.resetGeometry = resetGeometry;
	    /**
	     * Set the layout geometry for the given child widget.
	     */
	    function setGeometry(widget, left, top, width, height) {
	        var resized = false;
	        var style = widget.node.style;
	        var rect = rectProperty.get(widget);
	        if (rect.top !== top) {
	            rect.top = top;
	            style.top = top + "px";
	        }
	        if (rect.left !== left) {
	            rect.left = left;
	            style.left = left + "px";
	        }
	        if (rect.width !== width) {
	            resized = true;
	            rect.width = width;
	            style.width = width + "px";
	        }
	        if (rect.height !== height) {
	            resized = true;
	            rect.height = height;
	            style.height = height + "px";
	        }
	        if (resized) {
	            phosphor_messaging_1.sendMessage(widget, new phosphor_widget_1.ResizeMessage(width, height));
	        }
	    }
	    StackedLayoutPrivate.setGeometry = setGeometry;
	    /**
	     * A property descriptor for a widget offset rect.
	     */
	    var rectProperty = new phosphor_properties_1.Property({
	        name: 'rect',
	        create: function () { return ({ top: NaN, left: NaN, width: NaN, height: NaN }); },
	    });
	})(StackedLayoutPrivate || (StackedLayoutPrivate = {}));


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var phosphor_panel_1 = __webpack_require__(18);
	var phosphor_signaling_1 = __webpack_require__(22);
	var layout_1 = __webpack_require__(38);
	/**
	 * The class name added to StackedPanel instances.
	 */
	var STACKED_PANEL_CLASS = 'p-StackedPanel';
	/**
	 * The class name added to a StackedPanel child.
	 */
	var CHILD_CLASS = 'p-StackedPanel-child';
	/**
	 * A panel where visible children are stacked atop one another.
	 *
	 * #### Notes
	 * This class provides a convenience wrapper around a [[StackedLayout]].
	 */
	var StackedPanel = (function (_super) {
	    __extends(StackedPanel, _super);
	    /**
	     * Construct a new stacked panel.
	     */
	    function StackedPanel() {
	        _super.call(this);
	        this.addClass(STACKED_PANEL_CLASS);
	    }
	    /**
	     * Create a stacked layout for a stacked panel.
	     */
	    StackedPanel.createLayout = function () {
	        return new layout_1.StackedLayout();
	    };
	    Object.defineProperty(StackedPanel.prototype, "widgetRemoved", {
	        /**
	         * A signal emitted when a widget is removed from the panel.
	         */
	        get: function () {
	            return StackedPanelPrivate.widgetRemovedSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * A message handler invoked on a `'child-added'` message.
	     */
	    StackedPanel.prototype.onChildAdded = function (msg) {
	        msg.child.addClass(CHILD_CLASS);
	    };
	    /**
	     * A message handler invoked on a `'child-removed'` message.
	     */
	    StackedPanel.prototype.onChildRemoved = function (msg) {
	        msg.child.removeClass(CHILD_CLASS);
	        this.widgetRemoved.emit(msg.child);
	    };
	    return StackedPanel;
	})(phosphor_panel_1.Panel);
	exports.StackedPanel = StackedPanel;
	/**
	 * The namespace for the `StackedPanel` class private data.
	 */
	var StackedPanelPrivate;
	(function (StackedPanelPrivate) {
	    /**
	     * A signal emitted when a widget is removed from the panel.
	     */
	    StackedPanelPrivate.widgetRemovedSignal = new phosphor_signaling_1.Signal();
	})(StackedPanelPrivate || (StackedPanelPrivate = {}));


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(41));
	__export(__webpack_require__(42));
	__webpack_require__(43);


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var arrays = __webpack_require__(3);
	var phosphor_domutil_1 = __webpack_require__(7);
	var phosphor_signaling_1 = __webpack_require__(22);
	var phosphor_widget_1 = __webpack_require__(20);
	/**
	 * The class name added to TabBar instances.
	 */
	var TAB_BAR_CLASS = 'p-TabBar';
	/**
	 * The class name added to a tab bar body node.
	 */
	var BODY_CLASS = 'p-TabBar-body';
	/**
	 * The class name added to a tab bar header node.
	 */
	var HEADER_CLASS = 'p-TabBar-header';
	/**
	 * The class name added to a tab bar content node.
	 */
	var CONTENT_CLASS = 'p-TabBar-content';
	/**
	 * The class name added to a tab bar footer node.
	 */
	var FOOTER_CLASS = 'p-TabBar-footer';
	/**
	 * The class name added to a tab bar tab.
	 */
	var TAB_CLASS = 'p-TabBar-tab';
	/**
	 * The class name added to a tab text node.
	 */
	var TEXT_CLASS = 'p-TabBar-tabText';
	/**
	 * The class name added to a tab icon node.
	 */
	var ICON_CLASS = 'p-TabBar-tabIcon';
	/**
	 * The class name added to a tab close icon node.
	 */
	var CLOSE_CLASS = 'p-TabBar-tabCloseIcon';
	/**
	 * The class name added to a tab bar and tab when dragging.
	 */
	var DRAGGING_CLASS = 'p-mod-dragging';
	/**
	 * The class name added to the current tab.
	 */
	var CURRENT_CLASS = 'p-mod-current';
	/**
	 * The class name added to a closable tab.
	 */
	var CLOSABLE_CLASS = 'p-mod-closable';
	/**
	 * The start drag distance threshold.
	 */
	var DRAG_THRESHOLD = 5;
	/**
	 * The detach distance threshold.
	 */
	var DETACH_THRESHOLD = 20;
	/**
	 * The tab transition duration.
	 */
	var TRANSITION_DURATION = 150; // Keep in sync with CSS.
	/**
	 * A widget which displays tab items as a row of tabs.
	 */
	var TabBar = (function (_super) {
	    __extends(TabBar, _super);
	    /**
	     * Construct a new tab bar.
	     */
	    function TabBar() {
	        _super.call(this);
	        this._tabsMovable = false;
	        this._items = [];
	        this._tabs = [];
	        this._dirtySet = new Set();
	        this._currentItem = null;
	        this._dragData = null;
	        this.addClass(TAB_BAR_CLASS);
	    }
	    /**
	     * Create the DOM node for a tab bar.
	     */
	    TabBar.createNode = function () {
	        var node = document.createElement('div');
	        var header = document.createElement('div');
	        var body = document.createElement('div');
	        var footer = document.createElement('div');
	        var content = document.createElement('ul');
	        header.className = HEADER_CLASS;
	        body.className = BODY_CLASS;
	        footer.className = FOOTER_CLASS;
	        content.className = CONTENT_CLASS;
	        body.appendChild(content);
	        node.appendChild(header);
	        node.appendChild(body);
	        node.appendChild(footer);
	        return node;
	    };
	    /**
	     * Create and initialize a tab node for a tab bar.
	     *
	     * @param title - The title to use for the initial tab state.
	     *
	     * @returns A new DOM node to use as a tab in a tab bar.
	     *
	     * #### Notes
	     * It is not necessary to subscribe to the `changed` signal of the
	     * title. The tab bar subscribes to that signal and will call the
	     * [[updateTab]] static method automatically as needed.
	     *
	     * This method may be reimplemented to create custom tabs.
	     */
	    TabBar.createTab = function (title) {
	        var node = document.createElement('li');
	        var icon = document.createElement('span');
	        var text = document.createElement('span');
	        var close = document.createElement('span');
	        node.className = TAB_CLASS;
	        icon.className = ICON_CLASS;
	        text.className = TEXT_CLASS;
	        close.className = CLOSE_CLASS;
	        node.appendChild(icon);
	        node.appendChild(text);
	        node.appendChild(close);
	        this.updateTab(node, title);
	        return node;
	    };
	    /**
	     * Update a tab node to reflect the current state of a title.
	     *
	     * @param tab - A tab node created by a call to [[createTab]].
	     *
	     * @param title - The title object to use for the tab state.
	     *
	     * #### Notes
	     * This is called automatically when the title state changes.
	     *
	     * If the [[createTab]] method is reimplemented, this method should
	     * also be reimplemented so that the tab state is properly updated.
	     */
	    TabBar.updateTab = function (tab, title) {
	        var tabInfix = title.className ? ' ' + title.className : '';
	        var tabSuffix = title.closable ? ' ' + CLOSABLE_CLASS : '';
	        var iconSuffix = title.icon ? ' ' + title.icon : '';
	        var icon = tab.firstChild;
	        var text = icon.nextSibling;
	        tab.className = TAB_CLASS + tabInfix + tabSuffix;
	        icon.className = ICON_CLASS + iconSuffix;
	        text.textContent = title.text;
	    };
	    /**
	     * Get the close icon node for a given tab node.
	     *
	     * @param tab - A tab node created by a call to [[createTab]].
	     *
	     * @returns The close icon node for the tab node.
	     *
	     * #### Notes
	     * The close icon node is used to correctly process click events.
	     *
	     * If the [[createTab]] method is reimplemented, this method should
	     * also be reimplemented so that the correct icon node is returned.
	     */
	    TabBar.tabCloseIcon = function (tab) {
	        return tab.lastChild;
	    };
	    /**
	     * Dispose of the resources held by the widget.
	     */
	    TabBar.prototype.dispose = function () {
	        this._releaseMouse();
	        this._tabs.length = 0;
	        this._items.length = 0;
	        this._dirtySet.clear();
	        this._currentItem = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(TabBar.prototype, "currentChanged", {
	        /**
	         * A signal emitted when the current tab is changed.
	         */
	        get: function () {
	            return TabBarPrivate.currentChangedSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabBar.prototype, "tabMoved", {
	        /**
	         * A signal emitted when a tab is moved by the user.
	         */
	        get: function () {
	            return TabBarPrivate.tabMovedSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabBar.prototype, "tabCloseRequested", {
	        /**
	         * A signal emitted when the user clicks a tab's close icon.
	         */
	        get: function () {
	            return TabBarPrivate.tabCloseRequestedSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabBar.prototype, "tabDetachRequested", {
	        /**
	         * A signal emitted when a tab is dragged beyond the detach threshold.
	         */
	        get: function () {
	            return TabBarPrivate.tabDetachRequestedSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabBar.prototype, "currentItem", {
	        /**
	         * Get the currently selected tab item.
	         */
	        get: function () {
	            return this._currentItem;
	        },
	        /**
	         * Set the currently selected tab item.
	         */
	        set: function (value) {
	            var item = value || null;
	            if (this._currentItem === item) {
	                return;
	            }
	            var index = item ? this._items.indexOf(item) : -1;
	            if (item && index === -1) {
	                console.warn('Tab item not contained in tab bar.');
	                return;
	            }
	            this._currentItem = item;
	            this.currentChanged.emit({ index: index, item: item });
	            this.update();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabBar.prototype, "tabsMovable", {
	        /**
	         * Get whether the tabs are movable by the user.
	         */
	        get: function () {
	            return this._tabsMovable;
	        },
	        /**
	         * Set whether the tabs are movable by the user.
	         */
	        set: function (value) {
	            this._tabsMovable = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabBar.prototype, "headerNode", {
	        /**
	         * Get the tab bar header node.
	         *
	         * #### Notes
	         * This node can be used to add extra content to the tab bar header.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this.node.getElementsByClassName(HEADER_CLASS)[0];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabBar.prototype, "bodyNode", {
	        /**
	         * Get the tab bar body node.
	         *
	         * #### Notes
	         * This node can be used to add extra content to the tab bar.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this.node.getElementsByClassName(BODY_CLASS)[0];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabBar.prototype, "footerNode", {
	        /**
	         * Get the tab bar footer node.
	         *
	         * #### Notes
	         * This node can be used to add extra content to the tab bar footer.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this.node.getElementsByClassName(FOOTER_CLASS)[0];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabBar.prototype, "contentNode", {
	        /**
	         * Get the tab bar content node.
	         *
	         * #### Notes
	         * This is the node which holds the tab nodes.
	         *
	         * Modifying this node directly can lead to undefined behavior.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this.node.getElementsByClassName(CONTENT_CLASS)[0];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Get the number of tab items in the tab bar.
	     *
	     * @returns The number of tab items in the tab bar.
	     */
	    TabBar.prototype.itemCount = function () {
	        return this._items.length;
	    };
	    /**
	     * Get the tab item at the specified index.
	     *
	     * @param index - The index of the tab item of interest.
	     *
	     * @returns The tab item at the specified index, or `undefined`.
	     */
	    TabBar.prototype.itemAt = function (index) {
	        return this._items[index];
	    };
	    /**
	     * Get the index of the specified tab item.
	     *
	     * @param item - The tab item of interest.
	     *
	     * @returns The index of the specified item, or `-1`.
	     */
	    TabBar.prototype.itemIndex = function (item) {
	        return this._items.indexOf(item);
	    };
	    /**
	     * Add a tab item to the end of the tab bar.
	     *
	     * @param item - The tab item to add to the tab bar.
	     *
	     * #### Notes
	     * If the item is already added to the tab bar, it will be moved.
	     */
	    TabBar.prototype.addItem = function (item) {
	        this.insertItem(this.itemCount(), item);
	    };
	    /**
	     * Insert a tab item at the specified index.
	     *
	     * @param index - The index at which to insert the item.
	     *
	     * @param item - The tab item to insert into the tab bar.
	     *
	     * #### Notes
	     * If the item is already added to the tab bar, it will be moved.
	     */
	    TabBar.prototype.insertItem = function (index, item) {
	        this._releaseMouse();
	        var n = this._items.length;
	        var i = this._items.indexOf(item);
	        var j = Math.max(0, Math.min(index | 0, n));
	        if (i !== -1) {
	            if (j === n)
	                j--;
	            if (i === j)
	                return;
	            arrays.move(this._tabs, i, j);
	            arrays.move(this._items, i, j);
	            this.contentNode.insertBefore(this._tabs[j], this._tabs[j + 1]);
	        }
	        else {
	            var tab = this.constructor.createTab(item.title);
	            arrays.insert(this._tabs, j, tab);
	            arrays.insert(this._items, j, item);
	            this.contentNode.insertBefore(tab, this._tabs[j + 1]);
	            item.title.changed.connect(this._onTitleChanged, this);
	            if (!this.currentItem)
	                this.currentItem = item;
	        }
	        this.update();
	    };
	    /**
	     * Remove a tab item from the tab bar.
	     *
	     * @param item - The tab item to remove from the tab bar.
	     *
	     * #### Notes
	     * If the item is not in the tab bar, this is a no-op.
	     */
	    TabBar.prototype.removeItem = function (item) {
	        this._releaseMouse();
	        var i = arrays.remove(this._items, item);
	        if (i === -1) {
	            return;
	        }
	        this._dirtySet.delete(item.title);
	        item.title.changed.disconnect(this._onTitleChanged, this);
	        this.contentNode.removeChild(arrays.removeAt(this._tabs, i));
	        if (this.currentItem === item) {
	            var next = this._items[i];
	            var prev = this._items[i - 1];
	            this.currentItem = next || prev;
	        }
	        this.update();
	    };
	    /**
	     * Get the tab node for the item at the given index.
	     *
	     * @param index - The index of the tab item of interest.
	     *
	     * @returns The tab node for the item, or `undefined`.
	     */
	    TabBar.prototype.tabAt = function (index) {
	        return this._tabs[index];
	    };
	    /**
	     * Release the mouse and restore the non-dragged tab positions.
	     *
	     * #### Notes
	     * This will cause the tab bar to stop handling mouse events and to
	     * restore the tabs to their non-dragged positions.
	     */
	    TabBar.prototype.releaseMouse = function () {
	        this._releaseMouse();
	    };
	    /**
	     * Handle the DOM events for the tab bar.
	     *
	     * @param event - The DOM event sent to the tab bar.
	     *
	     * #### Notes
	     * This method implements the DOM `EventListener` interface and is
	     * called in response to events on the tab bar's DOM node. It should
	     * not be called directly by user code.
	     */
	    TabBar.prototype.handleEvent = function (event) {
	        switch (event.type) {
	            case 'click':
	                this._evtClick(event);
	                break;
	            case 'mousedown':
	                this._evtMouseDown(event);
	                break;
	            case 'mousemove':
	                this._evtMouseMove(event);
	                break;
	            case 'mouseup':
	                this._evtMouseUp(event);
	                break;
	            case 'keydown':
	                this._evtKeyDown(event);
	                break;
	            case 'contextmenu':
	                event.preventDefault();
	                event.stopPropagation();
	                break;
	        }
	    };
	    /**
	     * A message handler invoked on an `'after-attach'` message.
	     */
	    TabBar.prototype.onAfterAttach = function (msg) {
	        this.node.addEventListener('click', this);
	        this.node.addEventListener('mousedown', this);
	    };
	    /**
	     * A message handler invoked on a `'before-detach'` message.
	     */
	    TabBar.prototype.onBeforeDetach = function (msg) {
	        this.node.removeEventListener('click', this);
	        this.node.removeEventListener('mousedown', this);
	        this._releaseMouse();
	    };
	    /**
	     * A message handler invoked on an `'update-request'` message.
	     */
	    TabBar.prototype.onUpdateRequest = function (msg) {
	        var tabs = this._tabs;
	        var items = this._items;
	        var dirty = this._dirtySet;
	        var current = this._currentItem;
	        var constructor = this.constructor;
	        for (var i = 0, n = tabs.length; i < n; ++i) {
	            var tab = tabs[i];
	            var item = items[i];
	            if (dirty.has(item.title)) {
	                constructor.updateTab(tab, item.title);
	            }
	            if (item === current) {
	                tab.classList.add(CURRENT_CLASS);
	                tab.style.zIndex = "" + n;
	            }
	            else {
	                tab.classList.remove(CURRENT_CLASS);
	                tab.style.zIndex = "" + (n - i - 1);
	            }
	        }
	        dirty.clear();
	    };
	    /**
	     * Handle the `'keydown'` event for the tab bar.
	     */
	    TabBar.prototype._evtKeyDown = function (event) {
	        // Stop all input events during drag.
	        event.preventDefault();
	        event.stopPropagation();
	        // Release the mouse if `Escape` is pressed.
	        if (event.keyCode === 27)
	            this._releaseMouse();
	    };
	    /**
	     * Handle the `'click'` event for the tab bar.
	     */
	    TabBar.prototype._evtClick = function (event) {
	        // Do nothing if it's not a left click.
	        if (event.button !== 0) {
	            return;
	        }
	        // Do nothing if a drag is in progress.
	        if (this._dragData) {
	            return;
	        }
	        // Do nothing if the click is not on a tab.
	        var x = event.clientX;
	        var y = event.clientY;
	        var i = arrays.findIndex(this._tabs, function (tab) { return phosphor_domutil_1.hitTest(tab, x, y); });
	        if (i < 0) {
	            return;
	        }
	        // Clicking on a tab stops the event propagation.
	        event.preventDefault();
	        event.stopPropagation();
	        // Ignore the click if the title is not closable.
	        var item = this._items[i];
	        if (!item.title.closable) {
	            return;
	        }
	        // Ignore the click if it was not on a close icon.
	        var constructor = this.constructor;
	        var icon = constructor.tabCloseIcon(this._tabs[i]);
	        if (!icon.contains(event.target)) {
	            return;
	        }
	        // Emit the tab close requested signal.
	        this.tabCloseRequested.emit({ index: i, item: item });
	    };
	    /**
	     * Handle the `'mousedown'` event for the tab bar.
	     */
	    TabBar.prototype._evtMouseDown = function (event) {
	        // Do nothing if it's not a left mouse press.
	        if (event.button !== 0) {
	            return;
	        }
	        // Do nothing if a drag is in progress.
	        if (this._dragData) {
	            return;
	        }
	        // Do nothing if the press is not on a tab.
	        var x = event.clientX;
	        var y = event.clientY;
	        var i = arrays.findIndex(this._tabs, function (tab) { return phosphor_domutil_1.hitTest(tab, x, y); });
	        if (i < 0) {
	            return;
	        }
	        // Pressing on a tab stops the event propagation.
	        event.preventDefault();
	        event.stopPropagation();
	        // Ignore the press if it was on a close icon.
	        var constructor = this.constructor;
	        var icon = constructor.tabCloseIcon(this._tabs[i]);
	        if (icon.contains(event.target)) {
	            return;
	        }
	        // Setup the drag data if the tabs are movable.
	        if (this._tabsMovable) {
	            this._dragData = new TabBarPrivate.DragData();
	            this._dragData.index = i;
	            this._dragData.tab = this._tabs[i];
	            this._dragData.pressX = event.clientX;
	            this._dragData.pressY = event.clientY;
	            document.addEventListener('mousemove', this, true);
	            document.addEventListener('mouseup', this, true);
	            document.addEventListener('keydown', this, true);
	            document.addEventListener('contextmenu', this, true);
	        }
	        // Update the current item to the pressed item.
	        this.currentItem = this._items[i];
	    };
	    /**
	     * Handle the `'mousemove'` event for the tab bar.
	     */
	    TabBar.prototype._evtMouseMove = function (event) {
	        // Do nothing if no drag is in progress.
	        if (!this._dragData) {
	            return;
	        }
	        // Suppress the event during a drag.
	        event.preventDefault();
	        event.stopPropagation();
	        // Ensure the drag threshold is exceeded before moving the tab.
	        var data = this._dragData;
	        if (!data.dragActive) {
	            var dx = Math.abs(event.clientX - data.pressX);
	            var dy = Math.abs(event.clientY - data.pressY);
	            if (dx < DRAG_THRESHOLD && dy < DRAG_THRESHOLD) {
	                return;
	            }
	            // Fill in the rest of the drag data measurements.
	            var tabRect = data.tab.getBoundingClientRect();
	            data.tabLeft = data.tab.offsetLeft;
	            data.tabWidth = tabRect.width;
	            data.tabPressX = data.pressX - tabRect.left;
	            data.tabLayout = TabBarPrivate.snapTabLayout(this._tabs);
	            data.contentRect = this.contentNode.getBoundingClientRect();
	            data.override = phosphor_domutil_1.overrideCursor('default');
	            // Add the dragging classes and mark the drag as active.
	            data.tab.classList.add(DRAGGING_CLASS);
	            this.addClass(DRAGGING_CLASS);
	            data.dragActive = true;
	        }
	        // Emit the detach request signal if the threshold is exceeded.
	        if (!data.detachRequested && TabBarPrivate.detachExceeded(data, event)) {
	            data.detachRequested = true;
	            var index = data.index;
	            var item = this._items[index];
	            var clientX = event.clientX;
	            var clientY = event.clientY;
	            this.tabDetachRequested.emit({ index: index, item: item, clientX: clientX, clientY: clientY });
	            if (data.dragAborted) {
	                return;
	            }
	        }
	        // Update the tab layout and computed target index.
	        TabBarPrivate.layoutTabs(this._tabs, data, event);
	    };
	    /**
	     * Handle the `'mouseup'` event for the tab bar.
	     */
	    TabBar.prototype._evtMouseUp = function (event) {
	        var _this = this;
	        // Do nothing if it's not a left mouse release.
	        if (event.button !== 0) {
	            return;
	        }
	        // Do nothing if no drag is in progress.
	        if (!this._dragData) {
	            return;
	        }
	        // Suppress the event during a drag operation.
	        event.preventDefault();
	        event.stopPropagation();
	        // Remove the extra mouse event listeners.
	        document.removeEventListener('mousemove', this, true);
	        document.removeEventListener('mouseup', this, true);
	        document.removeEventListener('keydown', this, true);
	        document.removeEventListener('contextmenu', this, true);
	        // Bail early if the drag is not active.
	        var data = this._dragData;
	        if (!data.dragActive) {
	            this._dragData = null;
	            return;
	        }
	        // Position the tab at its final resting position.
	        TabBarPrivate.finalizeTabPosition(data);
	        // Remove the dragging class from the tab so it can be transitioned.
	        data.tab.classList.remove(DRAGGING_CLASS);
	        // Complete the release on a timer to allow the tab to transition.
	        setTimeout(function () {
	            // Do nothing if the drag has been aborted.
	            if (data.dragAborted) {
	                return;
	            }
	            // Clear the drag data reference.
	            _this._dragData = null;
	            // Reset the positions of the tabs.
	            TabBarPrivate.resetTabPositions(_this._tabs);
	            // Clear the cursor grab and drag styles.
	            data.override.dispose();
	            _this.removeClass(DRAGGING_CLASS);
	            // If the tab was not moved, there is nothing else to do.
	            var i = data.index;
	            var j = data.targetIndex;
	            if (j === -1 || i === j) {
	                return;
	            }
	            // Move the tab and related tab item to the new location.
	            arrays.move(_this._tabs, i, j);
	            arrays.move(_this._items, i, j);
	            _this.contentNode.insertBefore(_this._tabs[j], _this._tabs[j + 1]);
	            // Emit the tab moved signal and schedule a render update.
	            _this.tabMoved.emit({ fromIndex: i, toIndex: j, item: _this._items[j] });
	            _this.update();
	        }, TRANSITION_DURATION);
	    };
	    /**
	     * Release the mouse and restore the non-dragged tab positions.
	     */
	    TabBar.prototype._releaseMouse = function () {
	        // Do nothing if no drag is in progress.
	        if (!this._dragData) {
	            return;
	        }
	        // Remove the extra mouse listeners.
	        document.removeEventListener('mousemove', this, true);
	        document.removeEventListener('mouseup', this, true);
	        document.removeEventListener('keydown', this, true);
	        document.removeEventListener('contextmenu', this, true);
	        // Clear the drag data reference.
	        var data = this._dragData;
	        this._dragData = null;
	        // Indicate the drag has been aborted. This allows the mouse
	        // event handlers to return early when the drag is canceled.
	        data.dragAborted = true;
	        // If the drag is not active, there's nothing more to do.
	        if (!data.dragActive) {
	            return;
	        }
	        // Reset the tabs to their non-dragged positions.
	        TabBarPrivate.resetTabPositions(this._tabs);
	        // Clear the cursor override and extra styling classes.
	        data.override.dispose();
	        data.tab.classList.remove(DRAGGING_CLASS);
	        this.removeClass(DRAGGING_CLASS);
	    };
	    /**
	     * Handle the `changed` signal of a title object.
	     */
	    TabBar.prototype._onTitleChanged = function (sender) {
	        this._dirtySet.add(sender);
	        this.update();
	    };
	    return TabBar;
	})(phosphor_widget_1.Widget);
	exports.TabBar = TabBar;
	/**
	 * The namespace for the `TabBar` class private data.
	 */
	var TabBarPrivate;
	(function (TabBarPrivate) {
	    /**
	     * A signal emitted when the current tab item is changed.
	     */
	    TabBarPrivate.currentChangedSignal = new phosphor_signaling_1.Signal();
	    /**
	     * A signal emitted when a tab is moved by the user.
	     */
	    TabBarPrivate.tabMovedSignal = new phosphor_signaling_1.Signal();
	    /**
	     * A signal emitted when the user clicks a tab's close icon.
	     */
	    TabBarPrivate.tabCloseRequestedSignal = new phosphor_signaling_1.Signal();
	    /**
	     * A signal emitted when a tab is dragged beyond the detach threshold.
	     */
	    TabBarPrivate.tabDetachRequestedSignal = new phosphor_signaling_1.Signal();
	    /**
	     * A struct which holds the drag data for a tab bar.
	     */
	    var DragData = (function () {
	        function DragData() {
	            /**
	             * The tab node being dragged.
	             */
	            this.tab = null;
	            /**
	             * The index of the tab being dragged.
	             */
	            this.index = -1;
	            /**
	             * The offset left of the tab being dragged.
	             */
	            this.tabLeft = -1;
	            /**
	             * The offset width of the tab being dragged.
	             */
	            this.tabWidth = -1;
	            /**
	             * The original mouse X position in tab coordinates.
	             */
	            this.tabPressX = -1;
	            /**
	             * The tab target index upon mouse release.
	             */
	            this.targetIndex = -1;
	            /**
	             * The array of tab layout objects snapped at drag start.
	             */
	            this.tabLayout = null;
	            /**
	             * The mouse press client X position.
	             */
	            this.pressX = -1;
	            /**
	             * The mouse press client Y position.
	             */
	            this.pressY = -1;
	            /**
	             * The bounding client rect of the tab bar content node.
	             */
	            this.contentRect = null;
	            /**
	             * The disposable to clean up the cursor override.
	             */
	            this.override = null;
	            /**
	             * Whether the drag is currently active.
	             */
	            this.dragActive = false;
	            /**
	             * Whether the drag has been aborted.
	             */
	            this.dragAborted = false;
	            /**
	             * Whether a detach request as been made.
	             */
	            this.detachRequested = false;
	        }
	        return DragData;
	    })();
	    TabBarPrivate.DragData = DragData;
	    /**
	     * Get a snapshot of the current tab layout values.
	     */
	    function snapTabLayout(tabs) {
	        var layout = new Array(tabs.length);
	        for (var i = 0, n = tabs.length; i < n; ++i) {
	            var node = tabs[i];
	            var left = node.offsetLeft;
	            var width = node.offsetWidth;
	            var cstyle = window.getComputedStyle(node);
	            var margin = parseInt(cstyle.marginLeft, 10) || 0;
	            layout[i] = { margin: margin, left: left, width: width };
	        }
	        return layout;
	    }
	    TabBarPrivate.snapTabLayout = snapTabLayout;
	    /**
	     * Test if the event exceeds the drag detach threshold.
	     */
	    function detachExceeded(data, event) {
	        var rect = data.contentRect;
	        return ((event.clientX < rect.left - DETACH_THRESHOLD) ||
	            (event.clientX >= rect.right + DETACH_THRESHOLD) ||
	            (event.clientY < rect.top - DETACH_THRESHOLD) ||
	            (event.clientY >= rect.bottom + DETACH_THRESHOLD));
	    }
	    TabBarPrivate.detachExceeded = detachExceeded;
	    /**
	     * Update the relative tab positions and computed target index.
	     */
	    function layoutTabs(tabs, data, event) {
	        var targetIndex = data.index;
	        var targetLeft = event.clientX - data.contentRect.left - data.tabPressX;
	        var targetRight = targetLeft + data.tabWidth;
	        for (var i = 0, n = tabs.length; i < n; ++i) {
	            var style = tabs[i].style;
	            var layout = data.tabLayout[i];
	            var threshold = layout.left + (layout.width >> 1);
	            if (i < data.index && targetLeft < threshold) {
	                style.left = data.tabWidth + data.tabLayout[i + 1].margin + 'px';
	                targetIndex = Math.min(targetIndex, i);
	            }
	            else if (i > data.index && targetRight > threshold) {
	                style.left = -data.tabWidth - layout.margin + 'px';
	                targetIndex = Math.max(targetIndex, i);
	            }
	            else if (i === data.index) {
	                var ideal = event.clientX - data.pressX;
	                var limit = data.contentRect.width - (data.tabLeft + data.tabWidth);
	                style.left = Math.max(-data.tabLeft, Math.min(ideal, limit)) + 'px';
	            }
	            else {
	                style.left = '';
	            }
	        }
	        data.targetIndex = targetIndex;
	    }
	    TabBarPrivate.layoutTabs = layoutTabs;
	    /**
	     * Position the drag tab at its final resting relative position.
	     */
	    function finalizeTabPosition(data) {
	        var ideal;
	        if (data.targetIndex === data.index) {
	            ideal = 0;
	        }
	        else if (data.targetIndex > data.index) {
	            var tgt = data.tabLayout[data.targetIndex];
	            ideal = tgt.left + tgt.width - data.tabWidth - data.tabLeft;
	        }
	        else {
	            var tgt = data.tabLayout[data.targetIndex];
	            ideal = tgt.left - data.tabLeft;
	        }
	        var style = data.tab.style;
	        var limit = data.contentRect.width - (data.tabLeft + data.tabWidth);
	        style.left = Math.max(-data.tabLeft, Math.min(ideal, limit)) + 'px';
	    }
	    TabBarPrivate.finalizeTabPosition = finalizeTabPosition;
	    /**
	     * Reset the relative positions of the given tabs.
	     */
	    function resetTabPositions(tabs) {
	        for (var i = 0, n = tabs.length; i < n; ++i) {
	            tabs[i].style.left = '';
	        }
	    }
	    TabBarPrivate.resetTabPositions = resetTabPositions;
	})(TabBarPrivate || (TabBarPrivate = {}));


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var phosphor_boxpanel_1 = __webpack_require__(4);
	var phosphor_stackedpanel_1 = __webpack_require__(37);
	var phosphor_widget_1 = __webpack_require__(20);
	var tabbar_1 = __webpack_require__(41);
	/**
	 * The class name added to TabPanel instances.
	 */
	var TAB_PANEL_CLASS = 'p-TabPanel';
	/**
	 * The class name added to a TabPanel's tab bar.
	 */
	var TAB_BAR_CLASS = 'p-TabPanel-tabBar';
	/**
	 * The class name added to a TabPanel's stacked panel.
	 */
	var STACKED_PANEL_CLASS = 'p-TabPanel-stackedPanel';
	/**
	 * A widget which combines a `TabBar` and a `StackedPanel`.
	 *
	 * #### Notes
	 * This is a simple panel which handles the common case of a tab bar
	 * placed above a content area. The selected tab controls the widget
	 * which is shown in the content area.
	 *
	 * For use cases which require more control than is provided by this
	 * panel, the `TabBar` widget may be used independently.
	 */
	var TabPanel = (function (_super) {
	    __extends(TabPanel, _super);
	    /**
	     * Construct a new tab panel.
	     */
	    function TabPanel() {
	        _super.call(this);
	        this._currentWidget = null;
	        this.addClass(TAB_PANEL_CLASS);
	        var constructor = this.constructor;
	        this._tabBar = constructor.createTabBar();
	        this._stackedPanel = constructor.createStackedPanel();
	        this._tabBar.tabMoved.connect(this._onTabMoved, this);
	        this._tabBar.currentChanged.connect(this._onCurrentChanged, this);
	        this._tabBar.tabCloseRequested.connect(this._onTabCloseRequested, this);
	        this._stackedPanel.widgetRemoved.connect(this._onWidgetRemoved, this);
	        var layout = new phosphor_boxpanel_1.BoxLayout();
	        layout.direction = phosphor_boxpanel_1.BoxLayout.TopToBottom;
	        layout.spacing = 0;
	        phosphor_boxpanel_1.BoxLayout.setStretch(this._tabBar, 0);
	        phosphor_boxpanel_1.BoxLayout.setStretch(this._stackedPanel, 1);
	        layout.addChild(this._tabBar);
	        layout.addChild(this._stackedPanel);
	        this.layout = layout;
	    }
	    /**
	     * Create a `TabBar` for a tab panel.
	     *
	     * @returns A new tab bar to use with a tab panel.
	     *
	     * #### Notes
	     * This may be reimplemented by subclasses for custom tab bars.
	     */
	    TabPanel.createTabBar = function () {
	        var tabBar = new tabbar_1.TabBar();
	        tabBar.addClass(TAB_BAR_CLASS);
	        return tabBar;
	    };
	    /**
	     * Create a `StackedPanel` for a tab panel.
	     *
	     * @returns A new stacked panel to use with a tab panel.
	     *
	     * #### Notes
	     * This may be reimplemented by subclasses for custom stacks.
	     */
	    TabPanel.createStackedPanel = function () {
	        var stackedPanel = new phosphor_stackedpanel_1.StackedPanel();
	        stackedPanel.addClass(STACKED_PANEL_CLASS);
	        return stackedPanel;
	    };
	    /**
	     * Dispose of the resources held by the widget.
	     */
	    TabPanel.prototype.dispose = function () {
	        this._tabBar = null;
	        this._stackedPanel = null;
	        this._currentWidget = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(TabPanel.prototype, "currentWidget", {
	        /**
	         * Get the currently selected widget.
	         */
	        get: function () {
	            return this._tabBar.currentItem;
	        },
	        /**
	         * Set the currently selected widget.
	         */
	        set: function (value) {
	            this._tabBar.currentItem = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabPanel.prototype, "tabsMovable", {
	        /**
	         * Get whether the tabs are movable by the user.
	         */
	        get: function () {
	            return this._tabBar.tabsMovable;
	        },
	        /**
	         * Set whether the tabs are movable by the user.
	         */
	        set: function (value) {
	            this._tabBar.tabsMovable = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabPanel.prototype, "tabBar", {
	        /**
	         * Get the tab bar associated with the tab panel.
	         *
	         * #### Notes
	         * Modifying the tab bar directly can lead to undefined behavior.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._tabBar;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabPanel.prototype, "stackedPanel", {
	        /**
	         * Get the stacked panel associated with the tab panel.
	         *
	         * #### Notes
	         * Modifying the stack directly can lead to undefined behavior.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._stackedPanel;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Get the number of child widgets in the tab panel.
	     *
	     * @returns The number of child widgets in the tab panel.
	     *
	     * #### Notes
	     * This delegates to the `childCount` method of the stacked panel.
	     */
	    TabPanel.prototype.childCount = function () {
	        return this._stackedPanel.childCount();
	    };
	    /**
	     * Get the child widget at the specified index.
	     *
	     * @param index - The index of the child widget of interest.
	     *
	     * @returns The child at the specified index, or `undefined`.
	     *
	     * #### Notes
	     * This delegates to the `childAt` method of the stacked panel.
	     */
	    TabPanel.prototype.childAt = function (index) {
	        return this._stackedPanel.childAt(index);
	    };
	    /**
	     * Get the index of the specified child widget.
	     *
	     * @param child - The child widget of interest.
	     *
	     * @returns The index of the specified child, or `-1`.
	     *
	     * #### Notes
	     * This delegates to the `childIndex` method of the stacked panel.
	     */
	    TabPanel.prototype.childIndex = function (child) {
	        return this._stackedPanel.childIndex(child);
	    };
	    /**
	     * Add a child widget to the end of the tab panel.
	     *
	     * @param child - The child widget to add to the tab panel.
	     *
	     * #### Notes
	     * If the child is already contained in the panel, it will be moved.
	     */
	    TabPanel.prototype.addChild = function (child) {
	        this.insertChild(this.childCount(), child);
	    };
	    /**
	     * Insert a child widget at the specified index.
	     *
	     * @param index - The index at which to insert the child.
	     *
	     * @param child - The child widget to insert into to the tab panel.
	     *
	     * #### Notes
	     * If the child is already contained in the panel, it will be moved.
	     */
	    TabPanel.prototype.insertChild = function (index, child) {
	        if (child !== this._currentWidget)
	            child.hide();
	        this._stackedPanel.insertChild(index, child);
	        this._tabBar.insertItem(index, child);
	    };
	    /**
	     * Handle the `currentChanged` signal from the tab bar.
	     */
	    TabPanel.prototype._onCurrentChanged = function (sender, args) {
	        var oldWidget = this._currentWidget;
	        var newWidget = args.item;
	        if (oldWidget === newWidget)
	            return;
	        this._currentWidget = newWidget;
	        if (oldWidget)
	            oldWidget.hide();
	        if (newWidget)
	            newWidget.show();
	    };
	    /**
	     * Handle the `tabCloseRequested` signal from the tab bar.
	     */
	    TabPanel.prototype._onTabCloseRequested = function (sender, args) {
	        args.item.close();
	    };
	    /**
	     * Handle the `tabMoved` signal from the tab bar.
	     */
	    TabPanel.prototype._onTabMoved = function (sender, args) {
	        this._stackedPanel.insertChild(args.toIndex, args.item);
	    };
	    /**
	     * Handle the `widgetRemoved` signal from the stacked panel.
	     */
	    TabPanel.prototype._onWidgetRemoved = function (sender, widget) {
	        if (this._currentWidget === widget)
	            this._currentWidget = null;
	        this._tabBar.removeItem(widget);
	    };
	    return TabPanel;
	})(phosphor_widget_1.Widget);
	exports.TabPanel = TabPanel;


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(44);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(12)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js!./index.css", function() {
				var newContent = require("!!./../../css-loader/index.js!./index.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(11)();
	// imports


	// module
	exports.push([module.id, "/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2015, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\n.p-TabBar {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n\r\n.p-TabBar-header,\r\n.p-TabBar-footer {\r\n  flex: 0 0 auto;\r\n}\r\n\r\n\r\n.p-TabBar-body {\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex: 1 1 auto;\r\n}\r\n\r\n\r\n.p-TabBar-content {\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex: 1 1 auto;\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style-type: none;\r\n}\r\n\r\n\r\n.p-TabBar-tab {\r\n  display: flex;\r\n  flex-direction: row;\r\n  box-sizing: border-box;\r\n  overflow: hidden;\r\n}\r\n\r\n\r\n.p-TabBar-tabIcon,\r\n.p-TabBar-tabCloseIcon {\r\n  flex: 0 0 auto;\r\n}\r\n\r\n\r\n.p-TabBar-tabText {\r\n  flex: 1 1 auto;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n}\r\n\r\n\r\n.p-TabBar.p-mod-dragging .p-TabBar-tab {\r\n  position: relative;\r\n  left: 0;\r\n  transition: left 150ms ease; /* keep in sync with JS */\r\n}\r\n\r\n\r\n.p-TabBar.p-mod-dragging .p-TabBar-tab.p-mod-dragging {\r\n  transition: none;\r\n}\r\n\r\n\r\n.p-TabPanel-tabBar {\r\n  z-index: 1;\r\n}\r\n\r\n\r\n.p-TabPanel-stackedPanel {\r\n  z-index: 0;\r\n}\r\n", ""]);

	// exports


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(46);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(12)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js!./index.css", function() {
				var newContent = require("!!./../../css-loader/index.js!./index.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(11)();
	// imports


	// module
	exports.push([module.id, "/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2015, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\n.p-DockPanel {\r\n  position: relative;\r\n  z-index: 0;\r\n}\r\n\r\n\r\n.p-DockPanel > .p-Widget {\r\n  position: absolute;\r\n  z-index: 0;\r\n}\r\n\r\n\r\n.p-DockPanel-overlay {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 0;\r\n  height: 0;\r\n  z-index: 1;\r\n  pointer-events: none;\r\n}\r\n\r\n\r\n.p-TabBar-tab.p-mod-hidden,\r\n.p-DockPanel-overlay.p-mod-hidden {\r\n  display: none;\r\n}\r\n", ""]);

	// exports


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2016, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	var arrays = __webpack_require__(3);
	var phosphor_domutil_1 = __webpack_require__(7);
	var phosphor_properties_1 = __webpack_require__(17);
	var phosphor_signaling_1 = __webpack_require__(22);
	var phosphor_widget_1 = __webpack_require__(20);
	__webpack_require__(48);
	/**
	 * The class name added to SideBar instances.
	 */
	var SIDE_BAR_CLASS = 'p-SideBar';
	/**
	 * The class name added to the side bar content node.
	 */
	var CONTENT_CLASS = 'p-SideBar-content';
	/**
	 * The class name added to side bar button nodes.
	 */
	var BUTTON_CLASS = 'p-SideBar-button';
	/**
	 * The class name added to a side bar button text node.
	 */
	var TEXT_CLASS = 'p-SideBar-button-text';
	/**
	 * The class name added to a side bar button icon node.
	 */
	var ICON_CLASS = 'p-SideBar-button-icon';
	/**
	 * The class name added to the current side bar button.
	 */
	var CURRENT_CLASS = 'p-mod-current';
	/**
	 * A widget which displays titles as a row of exclusive buttons.
	 */
	var SideBar = (function (_super) {
	    __extends(SideBar, _super);
	    /**
	     * Construct a new side bar.
	     */
	    function SideBar() {
	        _super.call(this);
	        this._dirty = false;
	        this._titles = [];
	        this.addClass(SIDE_BAR_CLASS);
	    }
	    /**
	     * Create the DOM node for a side bar.
	     */
	    SideBar.createNode = function () {
	        var node = document.createElement('div');
	        var content = document.createElement('ul');
	        content.className = CONTENT_CLASS;
	        node.appendChild(content);
	        return node;
	    };
	    /**
	     * Dispose of the resources held by the widget.
	     */
	    SideBar.prototype.dispose = function () {
	        this._titles.length = 0;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(SideBar.prototype, "currentChanged", {
	        /**
	         * A signal emitted when the current side bar title is changed.
	         */
	        get: function () {
	            return SideBarPrivate.currentChangedSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SideBar.prototype, "currentTitle", {
	        /**
	         * Get the currently selected side bar title.
	         */
	        get: function () {
	            return SideBarPrivate.currentTitleProperty.get(this);
	        },
	        /**
	         * Set the currently selected side bar title.
	         */
	        set: function (value) {
	            SideBarPrivate.currentTitleProperty.set(this, value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SideBar.prototype, "contentNode", {
	        /**
	         * Get the content node which holds the side bar buttons.
	         *
	         * #### Notes
	         * Modifying this node can lead to undefined behavior.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this.node.getElementsByClassName(CONTENT_CLASS)[0];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Get the number of title objects in the side bar.
	     *
	     * @returns The number of title objects in the side bar.
	     */
	    SideBar.prototype.titleCount = function () {
	        return this._titles.length;
	    };
	    /**
	     * Get the title object at the specified index.
	     *
	     * @param index - The index of the title object of interest.
	     *
	     * @returns The title at the specified index, or `undefined`.
	     */
	    SideBar.prototype.titleAt = function (index) {
	        return this._titles[index];
	    };
	    /**
	     * Get the index of the specified title object.
	     *
	     * @param title - The title object of interest.
	     *
	     * @returns The index of the specified title, or `-1`.
	     */
	    SideBar.prototype.titleIndex = function (title) {
	        return this._titles.indexOf(title);
	    };
	    /**
	     * Add a title object to the end of the side bar.
	     *
	     * @param title - The title object to add to the side bar.
	     *
	     * #### Notes
	     * If the title is already added to the side bar, it will be moved.
	     */
	    SideBar.prototype.addTitle = function (title) {
	        this.insertTitle(this.titleCount(), title);
	    };
	    /**
	     * Insert a title object at the specified index.
	     *
	     * @param index - The index at which to insert the title.
	     *
	     * @param title - The title object to insert into to the side bar.
	     *
	     * #### Notes
	     * If the title is already added to the side bar, it will be moved.
	     */
	    SideBar.prototype.insertTitle = function (index, title) {
	        var n = this.titleCount();
	        var i = this.titleIndex(title);
	        var j = Math.max(0, Math.min(index | 0, n));
	        if (i !== -1) {
	            if (j === n)
	                j--;
	            if (i === j)
	                return;
	            arrays.move(this._titles, i, j);
	        }
	        else {
	            arrays.insert(this._titles, j, title);
	            title.changed.connect(this._onTitleChanged, this);
	        }
	        this._dirty = true;
	        this.update();
	    };
	    /**
	     * Remove a title object from the side bar.
	     *
	     * @param title - The title object to remove from the side bar.
	     *
	     * #### Notes
	     * If the title is not in the side bar, this is a no-op.
	     */
	    SideBar.prototype.removeTitle = function (title) {
	        var i = arrays.remove(this._titles, title);
	        if (i === -1) {
	            return;
	        }
	        title.changed.disconnect(this._onTitleChanged, this);
	        if (this.currentTitle === title)
	            this.currentTitle = null;
	        this._dirty = true;
	        this.update();
	    };
	    /**
	     * Handle the DOM events for the side bar.
	     *
	     * @param event - The DOM event sent to the side bar.
	     *
	     * #### Notes
	     * This method implements the DOM `EventListener` interface and is
	     * called in response to events on the side bar's DOM node. It should
	     * not be called directly by user code.
	     */
	    SideBar.prototype.handleEvent = function (event) {
	        if (event.type === 'mousedown') {
	            this._evtMouseDown(event);
	        }
	    };
	    /**
	     * A message handler invoked on an `'after-attach'` message.
	     */
	    SideBar.prototype.onAfterAttach = function (msg) {
	        this.node.addEventListener('mousedown', this);
	    };
	    /**
	     * A message handler invoked on a `'before-detach'` message.
	     */
	    SideBar.prototype.onBeforeDetach = function (msg) {
	        this.node.removeEventListener('mousedown', this);
	    };
	    /**
	     * A message handler invoked on an `'update-request'` message.
	     */
	    SideBar.prototype.onUpdateRequest = function (msg) {
	        if (this._dirty) {
	            this._dirty = false;
	            SideBarPrivate.updateButtons(this);
	        }
	        else {
	            SideBarPrivate.updateCurrent(this);
	        }
	    };
	    /**
	     * Handle the `'mousedown'` event for the side bar.
	     */
	    SideBar.prototype._evtMouseDown = function (event) {
	        // Do nothing if it's not a left mouse press.
	        if (event.button !== 0) {
	            return;
	        }
	        // Do nothing if the press is not on a button.
	        var i = SideBarPrivate.hitTestButtons(this, event.clientX, event.clientY);
	        if (i < 0) {
	            return;
	        }
	        // Pressing on a button stops the event propagation.
	        event.preventDefault();
	        event.stopPropagation();
	        // Update the current title.
	        var title = this._titles[i];
	        if (title !== this.currentTitle) {
	            this.currentTitle = title;
	        }
	        else {
	            this.currentTitle = null;
	        }
	    };
	    /**
	     * Handle the `changed` signal of a title object.
	     */
	    SideBar.prototype._onTitleChanged = function () {
	        this._dirty = true;
	        this.update();
	    };
	    return SideBar;
	}(phosphor_widget_1.Widget));
	exports.SideBar = SideBar;
	/**
	 * The namespace for the `SideBar` class private data.
	 */
	var SideBarPrivate;
	(function (SideBarPrivate) {
	    /**
	     * A signal emitted when the current title is changed.
	     */
	    SideBarPrivate.currentChangedSignal = new phosphor_signaling_1.Signal();
	    /**
	     * The property descriptor for the current side bar title.
	     */
	    SideBarPrivate.currentTitleProperty = new phosphor_properties_1.Property({
	        name: 'currentTitle',
	        value: null,
	        coerce: coerceCurrentTitle,
	        changed: onCurrentTitleChanged,
	        notify: SideBarPrivate.currentChangedSignal,
	    });
	    /**
	     * Update the side bar buttons to match the current titles.
	     *
	     * This is a full update which also updates the currrent state.
	     */
	    function updateButtons(owner) {
	        var count = owner.titleCount();
	        var content = owner.contentNode;
	        var children = content.children;
	        while (children.length > count) {
	            content.removeChild(content.lastChild);
	        }
	        while (children.length < count) {
	            content.appendChild(createButtonNode());
	        }
	        for (var i = 0; i < count; ++i) {
	            var node = children[i];
	            updateButtonNode(node, owner.titleAt(i));
	        }
	        updateCurrent(owner);
	    }
	    SideBarPrivate.updateButtons = updateButtons;
	    /**
	     * Update the current state of the buttons to match the side bar.
	     *
	     * This is a partial update which only updates the current button
	     * class. It assumes the button count is the same as the title count.
	     */
	    function updateCurrent(owner) {
	        var count = owner.titleCount();
	        var content = owner.contentNode;
	        var children = content.children;
	        var current = owner.currentTitle;
	        for (var i = 0; i < count; ++i) {
	            var node = children[i];
	            if (owner.titleAt(i) === current) {
	                node.classList.add(CURRENT_CLASS);
	            }
	            else {
	                node.classList.remove(CURRENT_CLASS);
	            }
	        }
	    }
	    SideBarPrivate.updateCurrent = updateCurrent;
	    /**
	     * Get the index of the button node at a client position, or `-1`.
	     */
	    function hitTestButtons(owner, x, y) {
	        var nodes = owner.contentNode.children;
	        for (var i = 0, n = nodes.length; i < n; ++i) {
	            if (phosphor_domutil_1.hitTest(nodes[i], x, y))
	                return i;
	        }
	        return -1;
	    }
	    SideBarPrivate.hitTestButtons = hitTestButtons;
	    /**
	     * The coerce handler for the `currentTitle` property.
	     */
	    function coerceCurrentTitle(owner, value) {
	        return (value && owner.titleIndex(value) !== -1) ? value : null;
	    }
	    /**
	     * The change handler for the `currentTitle` property.
	     */
	    function onCurrentTitleChanged(owner) {
	        owner.update();
	    }
	    /**
	     * Create an uninitialized DOM node for a side bar button.
	     */
	    function createButtonNode() {
	        var node = document.createElement('li');
	        var icon = document.createElement('span');
	        var text = document.createElement('span');
	        text.className = TEXT_CLASS;
	        node.appendChild(icon);
	        node.appendChild(text);
	        return node;
	    }
	    /**
	     * Update a button node to reflect the state of a title.
	     */
	    function updateButtonNode(node, title) {
	        var icon = node.firstChild;
	        var text = node.lastChild;
	        if (title.className) {
	            node.className = BUTTON_CLASS + ' ' + title.className;
	        }
	        else {
	            node.className = BUTTON_CLASS;
	        }
	        if (title.icon) {
	            icon.className = ICON_CLASS + ' ' + title.icon;
	        }
	        else {
	            icon.className = ICON_CLASS;
	        }
	        text.textContent = title.text;
	    }
	})(SideBarPrivate || (SideBarPrivate = {}));


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(49);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(12)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../css-loader/index.js!./sidebar.css", function() {
				var newContent = require("!!./../../../css-loader/index.js!./sidebar.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(11)();
	// imports


	// module
	exports.push([module.id, "/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2016, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n.p-SideBar-content {\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: stretch;\n  list-style-type: none;\n}\n", ""]);

	// exports


/***/ },
/* 50 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * A class which manages a registry of extensions.
	 *
	 * #### Notes
	 * A service registry is used by populating it with extension objects,
	 * then calling the `activate` method to activate a specific extension.
	 *
	 * This class is used internally by the `Application` class. It will
	 * not typically be used directly by user code.
	 */
	var ExtensionRegistry = (function () {
	    /**
	     * Construct a new extension registry.
	     */
	    function ExtensionRegistry() {
	        this._extensionsByID = Private.createExtensionIDMap();
	    }
	    /**
	     * Register an extension with the registry.
	     *
	     * @param extension - The extension to add to the registry.
	     *
	     * #### Notes
	     * An error will be thrown if the extension id is already registered.
	     */
	    ExtensionRegistry.prototype.registerExtension = function (extension) {
	        // Throw an error if the extension id is already registered.
	        if (extension.id in this._extensionsByID) {
	            throw new Error("extension '" + extension.id + "' already registered");
	        }
	        // Create the extended extension and add it to the registry.
	        var ext = Private.createExtensionEx(extension);
	        this._extensionsByID[ext.id] = ext;
	    };
	    /**
	     * List the IDs of all extensions in the registry.
	     *
	     * @returns A new array of all extension IDs in the registry.
	     */
	    ExtensionRegistry.prototype.listExtensions = function () {
	        return Object.keys(this._extensionsByID);
	    };
	    /**
	     * Test whether the registry has an extension with the given id.
	     *
	     * @param id - The id of the extension of interest.
	     *
	     * @returns `true` if an extension with the specified id is
	     *   registered, `false` otherwise.
	     */
	    ExtensionRegistry.prototype.hasExtension = function (id) {
	        return id in this._extensionsByID;
	    };
	    /**
	     * Activate the extension with the given id.
	     *
	     * @param id - The ID of the extension of interest.
	     *
	     * @param context - The context object to pass as the first argument
	     *   to the extension's `activate` function.
	     *
	     * @param services - The service registry for resolving the services
	     *   required by the extension.
	     *
	     * @returns A promise which resolves when the extension is fully
	     *   activated or rejects with an error if it cannot be activated.
	     */
	    ExtensionRegistry.prototype.activateExtension = function (id, context, services) {
	        // Reject the promise if the extension is not registered.
	        var ext = this._extensionsByID[id];
	        if (!ext) {
	            return Promise.reject(new Error("extension '" + id + "' not registered"));
	        }
	        // Resolve immediately if the extension is already activated.
	        if (ext.activated) {
	            return Promise.resolve();
	        }
	        // Return the pending resolver promise if it exists.
	        if (ext.promise) {
	            return ext.promise;
	        }
	        // Resolve the services required by the extension.
	        var promises = ext.requires.map(function (req) { return services.resolveService(req); });
	        // Setup the resolver promise for the extension.
	        ext.promise = Promise.all(promises).then(function (deps) {
	            deps.unshift(context);
	            return ext.activate.apply(void 0, deps);
	        }).then(function () {
	            ext.promise = null;
	            ext.activated = true;
	        }).catch(function (error) {
	            ext.promise = null;
	            throw error;
	        });
	        // Return the pending resolver promise.
	        return ext.promise;
	    };
	    return ExtensionRegistry;
	}());
	exports.ExtensionRegistry = ExtensionRegistry;
	/**
	 * The namespace for the private extension registry functionality.
	 */
	var Private;
	(function (Private) {
	    /**
	     * Create new extension id map.
	     */
	    function createExtensionIDMap() {
	        return Object.create(null);
	    }
	    Private.createExtensionIDMap = createExtensionIDMap;
	    /**
	     * Create a new extended extension.
	     *
	     * @param extension - The extension source object.
	     *
	     * @returns A new extended extension initialized with the data
	     *   from the given extension.
	     *
	     * #### Notes
	     * The `requires` property of the extended extension will always be
	     * specified. If the original extension does not have dependencies,
	     * the `requires` array will be empty.
	     */
	    function createExtensionEx(extension) {
	        var id = extension.id, requires = extension.requires, activate = extension.activate;
	        requires = requires ? requires.slice() : [];
	        return { id: id, requires: requires, activate: activate, activated: false, promise: null };
	    }
	    Private.createExtensionEx = createExtensionEx;
	})(Private || (Private = {}));


/***/ },
/* 51 */
/***/ function(module, exports) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2016, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	"use strict";
	/**
	 * A class which manages a registry of service providers.
	 *
	 * #### Notes
	 * A service registry is used by populating it with service providers,
	 * then calling the `resolve` method to get the singleton instance of
	 * a specified service type.
	 *
	 * This class is used internally by the `Application` class. It will
	 * not typically be used directly by user code.
	 */
	var ServiceRegistry = (function () {
	    /**
	     * Construct a new service registry.
	     */
	    function ServiceRegistry() {
	        this._providersByID = Private.createProviderIDMap();
	        this._providersByType = Private.createProviderTypeMap();
	    }
	    /**
	     * Register a service provider with the registry.
	     *
	     * @param provider - The service provider to add to the registry.
	     *
	     * #### Notes
	     * An error will be thrown if a provider with the same id is already
	     * registered, if a provider which provides the identical service is
	     * already registered, or if the provider has a circular dependency.
	     */
	    ServiceRegistry.prototype.registerProvider = function (provider) {
	        // Throw an error if the provider id is already registered.
	        var pid = provider.id;
	        if (pid in this._providersByID) {
	            throw new Error("provider '" + pid + "' already registered");
	        }
	        // Throw an error if the service type is already registered.
	        var other = this._providersByType.get(provider.provides);
	        if (other) {
	            throw new Error("'" + pid + "' service already provided by '" + other.id + "'");
	        }
	        // Throw an error if the provider has a circular dependency.
	        var cycle = Private.findCycle(provider, this._providersByType);
	        if (cycle) {
	            throw new Error("provider cycle detected: " + cycle.join(' -> '));
	        }
	        // Create the extended provider and add it to the registry.
	        var pex = Private.createProviderEx(provider);
	        this._providersByType.set(pex.provides, pex);
	        this._providersByID[pex.id] = pex;
	    };
	    /**
	     * List the IDs of all service providers in the registry.
	     *
	     * @returns A new array of all provider IDs in the registry.
	     */
	    ServiceRegistry.prototype.listProviders = function () {
	        return Object.keys(this._providersByID);
	    };
	    /**
	     * Test whether the registry has a provider with the given id.
	     *
	     * @param id - The id of the provider of interest.
	     *
	     * @returns `true` if a service provider with the specified id is
	     *   registered, `false` otherwise.
	     */
	    ServiceRegistry.prototype.hasProvider = function (id) {
	        return id in this._providersByID;
	    };
	    /**
	     * Test whether the registry has a provider for the given service.
	     *
	     * @param kind - The type of the service of interest.
	     *
	     * @returns `true` if a service provider is registered for the
	     *   specified service type, `false` otherwise.
	     */
	    ServiceRegistry.prototype.hasProviderFor = function (kind) {
	        return this._providersByType.has(kind);
	    };
	    /**
	     * Resolve a service implementation for the given type.
	     *
	     * @param kind - The type of service object to resolve.
	     *
	     * @returns A promise which resolves the specified service type,
	     *   or rejects with an error if it cannot be satisfied.
	     *
	     * #### Notes
	     * Services are singletons. The same service instance will be
	     * returned each time a given service type is resolved.
	     */
	    ServiceRegistry.prototype.resolveService = function (kind) {
	        return Private.resolveService(kind, this._providersByType, []);
	    };
	    return ServiceRegistry;
	}());
	exports.ServiceRegistry = ServiceRegistry;
	/**
	 * The namespace for the private service registry functionality.
	 */
	var Private;
	(function (Private) {
	    /**
	     * Create new provider id map.
	     */
	    function createProviderIDMap() {
	        return Object.create(null);
	    }
	    Private.createProviderIDMap = createProviderIDMap;
	    /**
	     * Create a new provider type map.
	     */
	    function createProviderTypeMap() {
	        return new Map();
	    }
	    Private.createProviderTypeMap = createProviderTypeMap;
	    /**
	     * Create a new extended provider.
	     *
	     * @param provider - The service provider source object.
	     *
	     * @returns A new extended provider initialized with the data
	     *   from the given service provider.
	     *
	     * #### Notes
	     * The `requires` property of the extended provider will always be
	     * specified. If the original provider does not have dependencies,
	     * the `requires` array will be empty.
	     */
	    function createProviderEx(provider) {
	        var id = provider.id, provides = provider.provides, requires = provider.requires, resolve = provider.resolve;
	        requires = requires ? requires.slice() : [];
	        return { id: id, provides: provides, requires: requires, resolve: resolve, value: null, resolved: false, promise: null };
	    }
	    Private.createProviderEx = createProviderEx;
	    /**
	     * Find a cycle with the given service provider, if one exists.
	     *
	     * @param provider - The service provider to test for a cycle.
	     *
	     * @param map - The mapping of type to extended provider.
	     *
	     * @returns The ordered IDs of the cyclic providers, or null if
	     *   no cycle is present.
	     */
	    function findCycle(provider, map) {
	        if (!provider.requires)
	            return null;
	        var trace = [provider.id];
	        var root = provider.provides;
	        return provider.requires.some(visit) ? trace : null;
	        function visit(kind) {
	            if (kind === root) {
	                return true;
	            }
	            var pex = map.get(kind);
	            if (!pex) {
	                return false;
	            }
	            trace.push(pex.id);
	            if (pex.requires.some(visit)) {
	                return true;
	            }
	            trace.pop();
	            return false;
	        }
	    }
	    Private.findCycle = findCycle;
	    /**
	     * Resolve the instance of the specified service type.
	     *
	     * @param kind - The service type to resolve.
	     *
	     * @param map - The mapping of type to extended provider.
	     *
	     * @param path - An array of provider ids representing the current
	     *   path of the resolver graph. This should be an empty array for
	     *   the first call to this function.
	     *
	     * @returns A promise which resolves to an instance of the requested
	     *   type, or rejects if the instance cannot be created.
	     */
	    function resolveService(kind, map, path) {
	        // Reject the promise if there is no provider for the type.
	        var pex = map.get(kind);
	        if (!pex) {
	            return Promise.reject(missingProviderError(kind, path));
	        }
	        // Resolve immediately if the provider is already resolved.
	        if (pex.resolved) {
	            return Promise.resolve(pex.value);
	        }
	        // Return the pending resolver promise if it exists.
	        if (pex.promise) {
	            return pex.promise;
	        }
	        // Setup the resolver promise for the provider.
	        pex.promise = resolveImpl(pex, map, path).then(function (value) {
	            pex.value = value;
	            pex.promise = null;
	            pex.resolved = true;
	            return value;
	        }, function (error) {
	            pex.promise = null;
	            throw error;
	        });
	        // Return the pending resolver promise.
	        return pex.promise;
	    }
	    Private.resolveService = resolveService;
	    /**
	     * Resolve the service instance for the given provider.
	     */
	    function resolveImpl(pex, map, path) {
	        // Push the current provider id onto the path stack.
	        path.push(pex.id);
	        // Generate the resolver promises from the provider dependencies.
	        var reqs = pex.requires.map(function (kind) { return resolveService(kind, map, path); });
	        // Pop the provider id from the path stack.
	        path.pop();
	        // Return the promise which resolves the type for the provider.
	        return Promise.all(reqs).then(function (deps) { return pex.resolve.apply(void 0, deps); });
	    }
	    /**
	     * Create a formatted error for a missing provider.
	     *
	     * @param kind - The service type which cannot be fulfilled.
	     *
	     * @param path - The resolver path at the point of failure.
	     *
	     * @returns An error with a formatted message.
	     */
	    function missingProviderError(kind, path) {
	        // The `any` cast is needed due to no `Function.name` on IE.
	        var name = kind.name || '';
	        var head = "No registered provider for type: " + name + ".";
	        var tail = "Provider resolution path: " + path.join(' -> ') + ".";
	        return new Error(head + " " + tail);
	    }
	})(Private || (Private = {}));


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2016, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	var phosphor_disposable_1 = __webpack_require__(8);
	var phosphor_signaling_1 = __webpack_require__(22);
	/**
	 * An abstract base class which defines a command registry.
	 */
	var ABCCommandRegistry = (function () {
	    function ABCCommandRegistry() {
	    }
	    Object.defineProperty(ABCCommandRegistry.prototype, "commandsAdded", {
	        /**
	         * A signal emitted when commands are added to the registry.
	         */
	        get: function () {
	            return Private.commandsAddedSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ABCCommandRegistry.prototype, "commandsRemoved", {
	        /**
	         * A signal emitted when commands are removed from the registry.
	         */
	        get: function () {
	            return Private.commandsRemovedSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ABCCommandRegistry.prototype, "commandExecuted", {
	        /**
	         * A signal emitted when a command is executed.
	         */
	        get: function () {
	            return Private.commandExecutedSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ABCCommandRegistry;
	}());
	exports.ABCCommandRegistry = ABCCommandRegistry;
	/**
	 * A concrete implementation of ABCCommandRegistry.
	 */
	var CommandRegistry = (function (_super) {
	    __extends(CommandRegistry, _super);
	    function CommandRegistry() {
	        _super.apply(this, arguments);
	        this._commands = Private.createCommandMap();
	    }
	    /**
	     * List the ids of the currently registered commands.
	     *
	     * @returns A new array of the registered command ids.
	     */
	    CommandRegistry.prototype.list = function () {
	        return Object.keys(this._commands);
	    };
	    /**
	     * Test whether the registry contains a command.
	     *
	     * @param id - The id of the command of interest.
	     *
	     * @returns `true` if the command is registered, `false` otherwise.
	     */
	    CommandRegistry.prototype.has = function (id) {
	        return id in this._commands;
	    };
	    /**
	     * Add commands to the registry.
	     *
	     * @param items - The command items to add to the registry.
	     *
	     * @returns A disposable which will remove the added commands.
	     *
	     * #### Notes
	     * If the `id` for a command is already registered, a warning will be
	     * logged to the console and that specific command will be ignored.
	     */
	    CommandRegistry.prototype.add = function (items) {
	        var _this = this;
	        // Setup the array for the new unique ids.
	        var added = [];
	        // Add the new commands to the map and warn for duplicates.
	        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
	            var _a = items_1[_i], id = _a.id, handler = _a.handler;
	            if (id in this._commands) {
	                console.warn("Command '" + id + "' is already registered.");
	            }
	            else {
	                this._commands[id] = handler;
	                added.push(id);
	            }
	        }
	        // If no items are added, return an empty delegate.
	        if (added.length === 0) {
	            return new phosphor_disposable_1.DisposableDelegate(null);
	        }
	        // Notify for the added commands using a safe shallow copy.
	        this.commandsAdded.emit(added.slice());
	        // Return a delegate which will remove the added commands.
	        return new phosphor_disposable_1.DisposableDelegate(function () {
	            for (var _i = 0, added_1 = added; _i < added_1.length; _i++) {
	                var id = added_1[_i];
	                delete _this._commands[id];
	            }
	            _this.commandsRemoved.emit(added.slice());
	        });
	    };
	    /**
	     * Execute a registered command.
	     *
	     * @param id - The id of the command to execute.
	     *
	     * #### Notes
	     * If the command id is not registered, a warning will be logged.
	     *
	     * If the handler throws an exception, it will be caught and logged.
	     */
	    CommandRegistry.prototype.execute = function (id) {
	        var handler = this._commands[id];
	        if (!handler) {
	            console.warn("command '" + id + "' not registered");
	            return;
	        }
	        try {
	            handler();
	        }
	        catch (err) {
	            console.error("error in command '" + id + "'", err);
	        }
	        this.commandExecuted.emit(id);
	    };
	    return CommandRegistry;
	}(ABCCommandRegistry));
	exports.CommandRegistry = CommandRegistry;
	/**
	 * The default command registry service provider.
	 */
	exports.commandRegistryProvider = {
	    id: 'phosphide.services.commandRegistry',
	    provides: ABCCommandRegistry,
	    resolve: function () { return new CommandRegistry(); },
	};
	/**
	 * The namespace for the private command registry functionality.
	 */
	var Private;
	(function (Private) {
	    /**
	     *
	     */
	    Private.commandsAddedSignal = new phosphor_signaling_1.Signal();
	    /**
	     *
	     */
	    Private.commandsRemovedSignal = new phosphor_signaling_1.Signal();
	    /**
	     *
	     */
	    Private.commandExecutedSignal = new phosphor_signaling_1.Signal();
	    /**
	     *
	     */
	    function createCommandMap() {
	        return Object.create(null);
	    }
	    Private.createCommandMap = createCommandMap;
	})(Private || (Private = {}));


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2016, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	var phosphor_commandpalette_1 = __webpack_require__(54);
	var phosphor_disposable_1 = __webpack_require__(8);
	var phosphor_signaling_1 = __webpack_require__(22);
	var commandregistry_1 = __webpack_require__(52);
	var shortcutregistry_1 = __webpack_require__(61);
	/**
	 *
	 */
	var ABCPaletteRegistry = (function () {
	    function ABCPaletteRegistry() {
	    }
	    Object.defineProperty(ABCPaletteRegistry.prototype, "commandTriggered", {
	        /**
	         * A signal emitted when a command is triggered by the palette.
	         */
	        get: function () {
	            return Private.commandTriggeredSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ABCPaletteRegistry.prototype, "model", {
	        /**
	         *
	         */
	        get: function () {
	            return this.getModel();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ABCPaletteRegistry;
	}());
	exports.ABCPaletteRegistry = ABCPaletteRegistry;
	/**
	 *
	 */
	var PaletteRegistry = (function (_super) {
	    __extends(PaletteRegistry, _super);
	    /**
	     *
	     */
	    function PaletteRegistry(commands, shortcuts) {
	        var _this = this;
	        _super.call(this);
	        /**
	         * The private command handler function.
	         */
	        this._executeCommand = function (id) {
	            _this.commandTriggered.emit(id);
	            _this._commands.execute(id);
	        };
	        this._model = new phosphor_commandpalette_1.StandardPaletteModel();
	        this._boxes = [];
	        this._commands = commands;
	        this._shortcuts = shortcuts;
	        this._shortcuts.shortcutsAdded.connect(this._onShortcutsChanged, this);
	        this._shortcuts.shortcutsRemoved.connect(this._onShortcutsChanged, this);
	    }
	    /**
	     * Add command palette items to the palette registry.
	     *
	     * @param items - The array of items to add to the registry.
	     *
	     * @returns A disposable which will remove the added items.
	     */
	    PaletteRegistry.prototype.add = function (items) {
	        var _this = this;
	        var optionsArray = items.map(function (item) {
	            // let commandExists = this._commandRegistry.has(item.id);
	            // if (!commandExists) return null;
	            var seq = _this._shortcuts.sequenceFor(item.command);
	            var shortcut = seq ? Private.formatSequence(seq) : '';
	            var options = {
	                handler: _this._executeCommand,
	                args: item.command,
	                text: item.text,
	                shortcut: shortcut,
	                icon: item.icon || '',
	                caption: item.caption || '',
	                category: item.category || ''
	            };
	            return options;
	        });
	        if (optionsArray.length === 0) {
	            return new phosphor_disposable_1.DisposableDelegate(null);
	        }
	        var boxes = this._model.addItems(optionsArray).map(function (item) { return ({ item: item }); });
	        Array.prototype.push.apply(this._boxes, boxes);
	        return new phosphor_disposable_1.DisposableDelegate(function () {
	            _this._model.removeItems(boxes.map(function (box) { return box.item; }));
	            _this._boxes = _this._boxes.filter(function (box) { return boxes.indexOf(box) === -1; });
	        });
	    };
	    /**
	     *
	     */
	    PaletteRegistry.prototype.getModel = function () {
	        return this._model;
	    };
	    /**
	     * Update the shortcut for the given item pair.
	     */
	    PaletteRegistry.prototype._updateShortcut = function (box) {
	        var seq = this._shortcuts.sequenceFor(box.item.args);
	        var shortcut = seq ? Private.formatSequence(seq) : '';
	        var options = {
	            handler: this._executeCommand,
	            args: box.item.args,
	            text: box.item.text,
	            shortcut: shortcut,
	            icon: box.item.icon,
	            caption: box.item.caption,
	            category: box.item.category
	        };
	        this._model.removeItem(box.item);
	        box.item = this._model.addItem(options);
	    };
	    /**
	     * A handler for shortcut registry signals.
	     */
	    PaletteRegistry.prototype._onShortcutsChanged = function (sender, commands) {
	        var changed = Object.create(null);
	        commands.forEach(function (id) { changed[id] = true; });
	        for (var _i = 0, _a = this._boxes; _i < _a.length; _i++) {
	            var box = _a[_i];
	            var relevant = box.item.args in changed;
	            if (relevant)
	                this._updateShortcut(box);
	        }
	    };
	    return PaletteRegistry;
	}(ABCPaletteRegistry));
	exports.PaletteRegistry = PaletteRegistry;
	/**
	 * The default palette registry service provider.
	 */
	exports.paletteRegistryProvider = {
	    id: 'phosphide.services.paletteRegistry',
	    provides: ABCPaletteRegistry,
	    requires: [commandregistry_1.ABCCommandRegistry, shortcutregistry_1.ABCShortcutRegistry],
	    resolve: function (commands, shortcuts) {
	        return new PaletteRegistry(commands, shortcuts);
	    },
	};
	/**
	 *
	 */
	var Private;
	(function (Private) {
	    /**
	     * A signal emitted when a command is triggered by the palette.
	     */
	    Private.commandTriggeredSignal = new phosphor_signaling_1.Signal();
	    /**
	     * A flag indicating whether the platform is Mac.
	     */
	    var IS_MAC = !!navigator.platform.match(/Mac/i);
	    /**
	     * How to format Accel (Cmd on Mac, Ctrl elsewhere)
	     */
	    var ACCEL = IS_MAC ? 'Cmd' : 'Ctrl';
	    /**
	     *
	     */
	    function formatSequence(seq) {
	        return seq.map(function (s) { return s.trim().replace(/\s+/g, '-').replace('Accel', ACCEL); }).join(' ');
	    }
	    Private.formatSequence = formatSequence;
	})(Private || (Private = {}));


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2016, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(55));
	__export(__webpack_require__(56));
	__export(__webpack_require__(57));
	__export(__webpack_require__(58));
	__webpack_require__(59);


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2016, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var phosphor_signaling_1 = __webpack_require__(22);
	/**
	 * An enum of the support search result types.
	 */
	(function (SearchResultType) {
	    /**
	     * The search result represents a section header.
	     */
	    SearchResultType[SearchResultType["Header"] = 0] = "Header";
	    /**
	     * The search result represents a command.
	     */
	    SearchResultType[SearchResultType["Command"] = 1] = "Command";
	})(exports.SearchResultType || (exports.SearchResultType = {}));
	var SearchResultType = exports.SearchResultType;
	/**
	 * An abstract base class for creating command palette models.
	 */
	var AbstractPaletteModel = (function () {
	    function AbstractPaletteModel() {
	    }
	    Object.defineProperty(AbstractPaletteModel.prototype, "changed", {
	        /**
	         * A signal emitted when the potential search results change.
	         *
	         * #### Notes
	         * A subclass should emit this signal when its contents change in
	         * a way which may invalidate previously computed search results.
	         */
	        get: function () {
	            return AbstractPaletteModelPrivate.changedSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return AbstractPaletteModel;
	})();
	exports.AbstractPaletteModel = AbstractPaletteModel;
	/**
	 * The namespace for the `AbstractPaletteModel` private data.
	 */
	var AbstractPaletteModelPrivate;
	(function (AbstractPaletteModelPrivate) {
	    /**
	     * A signal emitted when a palette model's search results change.
	     */
	    AbstractPaletteModelPrivate.changedSignal = new phosphor_signaling_1.Signal();
	})(AbstractPaletteModelPrivate || (AbstractPaletteModelPrivate = {}));


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2016, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var arrays = __webpack_require__(3);
	var phosphor_widget_1 = __webpack_require__(20);
	var abstractmodel_1 = __webpack_require__(55);
	/**
	 * The class name added to `CommandPalette` instances.
	 */
	var PALETTE_CLASS = 'p-CommandPalette';
	/**
	 * The class name added to the search section of the palette.
	 */
	var SEARCH_CLASS = 'p-CommandPalette-search';
	/**
	 * The class name added to the input wrapper in the search section.
	 */
	var WRAPPER_CLASS = 'p-CommandPalette-inputWrapper';
	/**
	 * The class name added to the input node in the search section.
	 */
	var INPUT_CLASS = 'p-CommandPalette-input';
	/**
	 * The class name added to the content section of the palette.
	 */
	var CONTENT_CLASS = 'p-CommandPalette-content';
	/**
	 * The class name added to a palette section header.
	 */
	var HEADER_CLASS = 'p-CommandPalette-header';
	/**
	 * The class name added to a palette command.
	 */
	var COMMAND_CLASS = 'p-CommandPalette-command';
	/**
	 * The class name added to the command content node.
	 */
	var COMMAND_CONTENT_CLASS = 'p-CommandPalette-commandContent';
	/**
	 * The class name added to a command icon node.
	 */
	var COMMAND_ICON_CLASS = 'p-CommandPalette-commandIcon';
	/**
	 * The class name added to a command text node.
	 */
	var COMMAND_TEXT_CLASS = 'p-CommandPalette-commandText';
	/**
	 * The class name added to a command shortcut node.
	 */
	var COMMAND_SHORTCUT_CLASS = 'p-CommandPalette-commandShortcut';
	/**
	 * The class name added to a command caption node.
	 */
	var COMMAND_CAPTION_CLASS = 'p-CommandPalette-commandCaption';
	/**
	 * The class name added to the active palette header or command.
	 */
	var ACTIVE_CLASS = 'p-mod-active';
	/**
	 * An enum of command palette activation targets.
	 */
	(function (ActivationTarget) {
	    /**
	     * The activation target is a header item.
	     */
	    ActivationTarget[ActivationTarget["Header"] = 0] = "Header";
	    /**
	     * The activation target is a command item.
	     */
	    ActivationTarget[ActivationTarget["Command"] = 1] = "Command";
	    /**
	     * The activate target is any item.
	     */
	    ActivationTarget[ActivationTarget["Any"] = 2] = "Any";
	})(exports.ActivationTarget || (exports.ActivationTarget = {}));
	var ActivationTarget = exports.ActivationTarget;
	/**
	 * A widget which displays commands from a command source.
	 */
	var CommandPalette = (function (_super) {
	    __extends(CommandPalette, _super);
	    /**
	     * Construct a new command palette.
	     */
	    function CommandPalette() {
	        _super.call(this);
	        this._activeIndex = -1;
	        this._results = [];
	        this._headerPool = [];
	        this._commandPool = [];
	        this._model = null;
	        this.addClass(PALETTE_CLASS);
	    }
	    /**
	     * Create the DOM node for a command palette.
	     */
	    CommandPalette.createNode = function () {
	        var node = document.createElement('div');
	        var search = document.createElement('div');
	        var wrapper = document.createElement('div');
	        var input = document.createElement('input');
	        var content = document.createElement('ul');
	        search.className = SEARCH_CLASS;
	        wrapper.className = WRAPPER_CLASS;
	        input.className = INPUT_CLASS;
	        content.className = CONTENT_CLASS;
	        input.spellcheck = false;
	        wrapper.appendChild(input);
	        search.appendChild(wrapper);
	        node.appendChild(search);
	        node.appendChild(content);
	        return node;
	    };
	    /**
	     * Create a new header node for a command palette.
	     *
	     * @returns A new DOM node for a palette section header.
	     *
	     * #### Notes
	     * This method may be reimplemented to create custom headers.
	     */
	    CommandPalette.createHeaderNode = function () {
	        var node = document.createElement('li');
	        node.className = HEADER_CLASS;
	        return node;
	    };
	    /**
	     * Create a new command node for a command palette.
	     *
	     * @returns A new DOM node for a palette section command.
	     *
	     * #### Notes
	     * This method may be reimplemented to create custom items.
	     */
	    CommandPalette.createCommandNode = function () {
	        var node = document.createElement('li');
	        var content = document.createElement('div');
	        var icon = document.createElement('span');
	        var text = document.createElement('span');
	        var caption = document.createElement('span');
	        var shortcut = document.createElement('span');
	        node.className = COMMAND_CLASS;
	        content.className = COMMAND_CONTENT_CLASS;
	        icon.className = COMMAND_ICON_CLASS;
	        text.className = COMMAND_TEXT_CLASS;
	        caption.className = COMMAND_CAPTION_CLASS;
	        shortcut.className = COMMAND_SHORTCUT_CLASS;
	        content.appendChild(shortcut);
	        content.appendChild(text);
	        content.appendChild(caption);
	        node.appendChild(icon);
	        node.appendChild(content);
	        return node;
	    };
	    /**
	     * Update a header node to reflect the given data.
	     *
	     * @param node - The header node which should be updated.
	     *
	     * @param data - The data object to use for the node state.
	     *
	     * #### Notes
	     * This is called automatically when the node should be updated.
	     *
	     * If the [[createHeaderNode]] method is reimplemented, this method
	     * should also be reimplemented so that the node state is properly
	     * updated.
	     */
	    CommandPalette.updateHeaderNode = function (node, data) {
	        node.className = HEADER_CLASS;
	        node.innerHTML = data.text;
	    };
	    /**
	     * Update a command node to reflect the given data.
	     *
	     * @param node - The command node which should be updated.
	     *
	     * @param data - The data object to use for the node state.
	     *
	     * #### Notes
	     * This is called automatically when the node should be updated.
	     *
	     * If the [[createHeaderNode]] method is reimplemented, this method
	     * should also be reimplemented so that the node state is properly
	     * updated.
	     */
	    CommandPalette.updateCommandNode = function (node, data) {
	        var icon = node.firstChild;
	        var content = icon.nextSibling;
	        var shortcut = content.firstChild;
	        var text = shortcut.nextSibling;
	        var caption = text.nextSibling;
	        var itemClass = COMMAND_CLASS;
	        if (data.className)
	            itemClass += ' ' + data.className;
	        node.className = itemClass;
	        var iconClass = COMMAND_ICON_CLASS;
	        if (data.icon)
	            iconClass += ' ' + data.icon;
	        icon.className = iconClass;
	        text.innerHTML = data.text;
	        caption.innerHTML = data.caption;
	        shortcut.innerHTML = data.shortcut;
	    };
	    /**
	     * Dispose of the resources held by the command palette.
	     */
	    CommandPalette.prototype.dispose = function () {
	        this._model = null;
	        this._results.length = 0;
	        this._headerPool.length = 0;
	        this._commandPool.length = 0;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(CommandPalette.prototype, "model", {
	        /**
	         * Get the model for the command palette.
	         */
	        get: function () {
	            return this._model;
	        },
	        /**
	         * Set the model for the command palette.
	         */
	        set: function (value) {
	            value = value || null;
	            if (this._model === value) {
	                return;
	            }
	            if (this._model) {
	                this._model.changed.disconnect(this._onModelChanged, this);
	            }
	            if (value) {
	                value.changed.connect(this._onModelChanged, this);
	            }
	            this._model = value;
	            this._results.length = 0;
	            this.update();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CommandPalette.prototype, "contentNode", {
	        /**
	         * Get the command palette content node.
	         *
	         * #### Notes
	         * This is the node which holds the command palette item nodes.
	         *
	         * Modifying this node directly can lead to undefined behavior.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this.node.getElementsByClassName(CONTENT_CLASS)[0];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CommandPalette.prototype, "inputNode", {
	        /**
	         * Get the command palette input node.
	         *
	         * #### Notes
	         * This node can be used to trigger manual updates of the command
	         * palette. Simply set the input node `value` to the desired text
	         * and call `palette.update()`.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this.node.getElementsByTagName('input')[0];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Activate the first matching target item in the palette.
	     *
	     * @param target - The activation target. The default is `Any`.
	     *
	     * #### Notes
	     * This automatically scrolls the item into view.
	     *
	     * If no matching item is found, no item is activated.
	     */
	    CommandPalette.prototype.activateFirst = function (target) {
	        if (target === void 0) { target = ActivationTarget.Any; }
	        var i;
	        if (target === ActivationTarget.Header) {
	            var type = abstractmodel_1.SearchResultType.Header;
	            i = arrays.findIndex(this._results, function (r) { return r.type === type; });
	        }
	        else if (target === ActivationTarget.Command) {
	            var type = abstractmodel_1.SearchResultType.Command;
	            i = arrays.findIndex(this._results, function (r) { return r.type === type; });
	        }
	        else {
	            i = 0;
	        }
	        this._activate(i);
	    };
	    /**
	     * Activate the last matching target item in the palette.
	     *
	     * @param target - The activation target. The default is `Any`.
	     *
	     * #### Notes
	     * This automatically scrolls the item into view.
	     *
	     * If no matching item is found, no item is activated.
	     */
	    CommandPalette.prototype.activateLast = function (target) {
	        if (target === void 0) { target = ActivationTarget.Any; }
	        var i;
	        if (target === ActivationTarget.Header) {
	            var type = abstractmodel_1.SearchResultType.Header;
	            i = arrays.rfindIndex(this._results, function (r) { return r.type === type; });
	        }
	        else if (target === ActivationTarget.Command) {
	            var type = abstractmodel_1.SearchResultType.Command;
	            i = arrays.rfindIndex(this._results, function (r) { return r.type === type; });
	        }
	        else {
	            i = this._results.length - 1;
	        }
	        this._activate(i);
	    };
	    /**
	     * Activate the next matching target item in the palette.
	     *
	     * @param target - The activation target. The default is `Any`.
	     *
	     * #### Notes
	     * This automatically scrolls the item into view.
	     *
	     * The search will wrap around at the end of the palette.
	     *
	     * If no matching item is found, no item is activated.
	     */
	    CommandPalette.prototype.activateNext = function (target) {
	        if (target === void 0) { target = ActivationTarget.Any; }
	        var i;
	        var k = this._activeIndex + 1;
	        var j = k >= this._results.length ? 0 : k;
	        if (target === ActivationTarget.Header) {
	            var type = abstractmodel_1.SearchResultType.Header;
	            i = arrays.findIndex(this._results, function (r) { return r.type === type; }, j, true);
	        }
	        else if (target === ActivationTarget.Command) {
	            var type = abstractmodel_1.SearchResultType.Command;
	            i = arrays.findIndex(this._results, function (r) { return r.type === type; }, j, true);
	        }
	        else {
	            i = j;
	        }
	        this._activate(i);
	    };
	    /**
	     * Activate the previous matching target item in the palette.
	     *
	     * @param target - The activation target. The default is `Any`.
	     *
	     * #### Notes
	     * This automatically scrolls the item into view.
	     *
	     * The search will wrap around at the end of the palette.
	     *
	     * If no matching item is found, no item is activated.
	     */
	    CommandPalette.prototype.activatePrevious = function (target) {
	        if (target === void 0) { target = ActivationTarget.Any; }
	        var i;
	        var k = this._activeIndex;
	        var j = k <= 0 ? this._results.length - 1 : k - 1;
	        if (target === ActivationTarget.Header) {
	            var type = abstractmodel_1.SearchResultType.Header;
	            i = arrays.rfindIndex(this._results, function (r) { return r.type === type; }, j, true);
	        }
	        else if (target === ActivationTarget.Command) {
	            var type = abstractmodel_1.SearchResultType.Command;
	            i = arrays.rfindIndex(this._results, function (r) { return r.type === type; }, j, true);
	        }
	        else {
	            i = j;
	        }
	        this._activate(i);
	    };
	    /**
	     * Trigger the currently active item in the palette.
	     *
	     * #### Notes
	     * If the active item is a header, the search results are refined
	     * using the category of the header. If the current category is
	     * the same as the header category, the category will be removed.
	     *
	     * If the active item is a command, the command handler will be
	     * invoked and the current query text will be selected.
	     *
	     * If there is no active item, this is a no-op.
	     */
	    CommandPalette.prototype.triggerActive = function () {
	        var result = this._results[this._activeIndex];
	        if (!result) {
	            return;
	        }
	        if (result.type === abstractmodel_1.SearchResultType.Header) {
	            var input = this.inputNode;
	            var _a = CommandPalette.splitQuery(input.value), category = _a.category, text = _a.text;
	            var desired = result.value.category.trim();
	            var computed = desired === category ? '' : desired;
	            var query = CommandPalette.joinQuery(computed, text);
	            input.value = query;
	            input.focus();
	            this.update();
	        }
	        else if (result.type === abstractmodel_1.SearchResultType.Command) {
	            var _b = result.value, handler = _b.handler, args = _b.args;
	            this.inputNode.select();
	            handler(args);
	        }
	    };
	    /**
	     * Handle the DOM events for the command palette.
	     *
	     * @param event - The DOM event sent to the command palette.
	     *
	     * #### Notes
	     * This method implements the DOM `EventListener` interface and is
	     * called in response to events on the command palette's DOM node.
	     * It should not be called directly by user code.
	     */
	    CommandPalette.prototype.handleEvent = function (event) {
	        switch (event.type) {
	            case 'click':
	                this._evtClick(event);
	                break;
	            case 'keydown':
	                this._evtKeyDown(event);
	                break;
	            case 'input':
	                this.update();
	                break;
	        }
	    };
	    /**
	     * A message handler invoked on a `'after-attach'` message.
	     */
	    CommandPalette.prototype.onAfterAttach = function (msg) {
	        this.node.addEventListener('click', this);
	        this.node.addEventListener('keydown', this);
	        this.node.addEventListener('input', this);
	    };
	    /**
	     * A message handler invoked on a `'before-detach'` message.
	     */
	    CommandPalette.prototype.onBeforeDetach = function (msg) {
	        this.node.removeEventListener('click', this);
	        this.node.removeEventListener('keydown', this);
	        this.node.removeEventListener('input', this);
	    };
	    /**
	     * A message handler invoked on an `'update-request'` message.
	     */
	    CommandPalette.prototype.onUpdateRequest = function (msg) {
	        // Clear the current content.
	        var content = this.contentNode;
	        content.textContent = '';
	        // Reset the active index.
	        this._activeIndex = -1;
	        // Bail early if there is no model.
	        if (!this._model) {
	            return;
	        }
	        // Split the query text into its category and text parts.
	        var _a = CommandPalette.splitQuery(this.inputNode.value), category = _a.category, text = _a.text;
	        // Search for query matches and store the results for later use.
	        var results = this._results = this._model.search(category, text);
	        // If the results are empty, there is nothing left to do.
	        if (results.length === 0) {
	            return;
	        }
	        // Grab the derived class type for access to the render methods.
	        var ctor = this.constructor;
	        // Setup the header node render function.
	        var headerPoolIndex = 0;
	        var headerPool = this._headerPool;
	        var renderHeader = function (data) {
	            var node = headerPool[headerPoolIndex++];
	            if (!node) {
	                node = ctor.createHeaderNode();
	                headerPool.push(node);
	            }
	            ctor.updateHeaderNode(node, data);
	            return node;
	        };
	        // Setup the command node render function.
	        var commandPoolIndex = 0;
	        var commandPool = this._commandPool;
	        var renderCommand = function (data) {
	            var node = commandPool[commandPoolIndex++];
	            if (!node) {
	                node = ctor.createCommandNode();
	                commandPool.push(node);
	            }
	            ctor.updateCommandNode(node, data);
	            return node;
	        };
	        // Loop over the search results and render the nodes.
	        var fragment = document.createDocumentFragment();
	        for (var _i = 0; _i < results.length; _i++) {
	            var _b = results[_i], type = _b.type, value = _b.value;
	            if (type === abstractmodel_1.SearchResultType.Header) {
	                fragment.appendChild(renderHeader(value));
	            }
	            else if (type === abstractmodel_1.SearchResultType.Command) {
	                fragment.appendChild(renderCommand(value));
	            }
	            else {
	                throw new Error('invalid search result type');
	            }
	        }
	        // Update the content node with the rendered search results.
	        content.appendChild(fragment);
	        // If there is query text, highlight the first command item.
	        // Otherwise, reset the content scroll position to the top.
	        if (category || text) {
	            this.activateFirst(ActivationTarget.Command);
	        }
	        else {
	            requestAnimationFrame(function () { content.scrollTop = 0; });
	        }
	    };
	    /**
	     * Activate the node at the given index.
	     *
	     * If the node is scrolled out of view, it will be scrolled into
	     * view and aligned according to the `alignTop` parameter.
	     */
	    CommandPalette.prototype._activate = function (index) {
	        var content = this.contentNode;
	        var children = content.children;
	        if (index < 0 || index >= children.length) {
	            index = -1;
	        }
	        if (this._activeIndex === index) {
	            return;
	        }
	        var oldNode = children[this._activeIndex];
	        var newNode = children[index];
	        this._activeIndex = index;
	        if (oldNode)
	            oldNode.classList.remove(ACTIVE_CLASS);
	        if (newNode)
	            newNode.classList.add(ACTIVE_CLASS);
	        if (newNode)
	            requestAnimationFrame(function () {
	                Private.scrollIfNeeded(content, newNode);
	            });
	    };
	    /**
	     * Handle the `'click'` event for the command palette.
	     */
	    CommandPalette.prototype._evtClick = function (event) {
	        if (event.button !== 0) {
	            return;
	        }
	        event.preventDefault();
	        event.stopPropagation();
	        var root = this.node;
	        var content = this.contentNode;
	        var target = event.target;
	        while (true) {
	            if (target === root)
	                return;
	            var parent_1 = target.parentNode;
	            if (parent_1 === content)
	                break;
	            target = parent_1;
	        }
	        var index = Array.prototype.indexOf.call(content.children, target);
	        this._activate(index);
	        this.triggerActive();
	    };
	    /**
	     * Handle the `'keydown'` event for the command palette.
	     */
	    CommandPalette.prototype._evtKeyDown = function (event) {
	        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {
	            return;
	        }
	        switch (event.keyCode) {
	            case 13:
	                event.preventDefault();
	                event.stopPropagation();
	                this.triggerActive();
	                break;
	            case 38:
	                event.preventDefault();
	                event.stopPropagation();
	                this.activatePrevious();
	                break;
	            case 40:
	                event.preventDefault();
	                event.stopPropagation();
	                this.activateNext();
	                break;
	        }
	    };
	    /**
	     * Handle the `changed` signal for the palette model.
	     */
	    CommandPalette.prototype._onModelChanged = function () {
	        this.update();
	    };
	    return CommandPalette;
	})(phosphor_widget_1.Widget);
	exports.CommandPalette = CommandPalette;
	/**
	 * The namespace for the `CommandPalette` class statics.
	 */
	var CommandPalette;
	(function (CommandPalette) {
	    /**
	     * Split a query string into its category and text components.
	     *
	     * @param query - A query string of the form `(:<category>:)?<text>`.
	     *
	     * @returns The `category` and `text` components of the query with
	     *   leading and trailing whitespace removed.
	     */
	    function splitQuery(query) {
	        query = query.trim();
	        if (query[0] !== ':') {
	            return { category: '', text: query };
	        }
	        var i = query.indexOf(':', 1);
	        if (i === -1) {
	            return { category: query.slice(1).trim(), text: '' };
	        }
	        var category = query.slice(1, i).trim();
	        var text = query.slice(i + 1).trim();
	        return { category: category, text: text };
	    }
	    CommandPalette.splitQuery = splitQuery;
	    /**
	     * Join category and text components into a query string.
	     *
	     * @param category - The category for the query or an empty string.
	     *
	     * @param text - The text for the query or an empty string.
	     *
	     * @returns The joined query string for the components.
	     */
	    function joinQuery(category, text) {
	        var query;
	        if (category && text) {
	            query = ":" + category.trim() + ": " + text.trim();
	        }
	        else if (category) {
	            query = ":" + category.trim() + ": ";
	        }
	        else if (text) {
	            query = text.trim();
	        }
	        else {
	            query = '';
	        }
	        return query;
	    }
	    CommandPalette.joinQuery = joinQuery;
	})(CommandPalette = exports.CommandPalette || (exports.CommandPalette = {}));
	/**
	 * The namespace for the `CommandPalette` private data.
	 */
	var Private;
	(function (Private) {
	    /**
	     * Scroll an element into view if needed.
	     *
	     * @param area - The scroll area element.
	     *
	     * @param elem - The element of interest.
	     */
	    function scrollIfNeeded(area, elem) {
	        var ar = area.getBoundingClientRect();
	        var er = elem.getBoundingClientRect();
	        if (er.top < ar.top) {
	            area.scrollTop -= ar.top - er.top;
	        }
	        else if (er.bottom > ar.bottom) {
	            area.scrollTop += er.bottom - ar.bottom;
	        }
	    }
	    Private.scrollIfNeeded = scrollIfNeeded;
	})(Private || (Private = {}));


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2016, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var arrays = __webpack_require__(3);
	var abstractmodel_1 = __webpack_require__(55);
	var stringsearch_1 = __webpack_require__(58);
	/**
	 * An object for use with a standard palette model.
	 *
	 * #### Notes
	 * Instances of this class will not typically be created directly by
	 * the user. A palette model will create and return instances of the
	 * class from its adder methods.
	 */
	var StandardPaletteItem = (function () {
	    /**
	     * Construct a new standard palette item.
	     *
	     * @param options - The options for initializing the item.
	     */
	    function StandardPaletteItem(options) {
	        this._text = options.text;
	        this._args = options.args;
	        this._handler = options.handler;
	        this._icon = options.icon || '';
	        this._caption = options.caption || '';
	        this._shortcut = options.shortcut || '';
	        this._className = options.className || '';
	        this._category = Private.normalizeCategory(options.category || '');
	    }
	    Object.defineProperty(StandardPaletteItem.prototype, "text", {
	        /**
	         * Get the primary text for the item.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._text;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StandardPaletteItem.prototype, "icon", {
	        /**
	         * Get the icon class name(s) for the item.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._icon;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StandardPaletteItem.prototype, "caption", {
	        /**
	         * Get the descriptive caption for the item.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._caption;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StandardPaletteItem.prototype, "shortcut", {
	        /**
	         * Get the keyboard shortcut for the item.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._shortcut;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StandardPaletteItem.prototype, "category", {
	        /**
	         * Get the category name for the item.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._category;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StandardPaletteItem.prototype, "className", {
	        /**
	         * Get the extra class name(s) for the item.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._className;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StandardPaletteItem.prototype, "handler", {
	        /**
	         * Get the handler function for the item.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._handler;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StandardPaletteItem.prototype, "args", {
	        /**
	         * Get the arguments for the handler.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._args;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return StandardPaletteItem;
	})();
	exports.StandardPaletteItem = StandardPaletteItem;
	/**
	 * A concrete palette model which holds a collection of palette items.
	 *
	 * #### Notes
	 * This class is a reasonable option for populating command palettes
	 * when the number of items is reasonable, and when the items can be
	 * created ahead of time. If lazy searching of a large data set is
	 * required, then a custom palette model should be used instead.
	 */
	var StandardPaletteModel = (function (_super) {
	    __extends(StandardPaletteModel, _super);
	    function StandardPaletteModel() {
	        _super.apply(this, arguments);
	        this._items = [];
	    }
	    /**
	     * Get the items contained in the palette model.
	     *
	     * @returns A new array of the current items in the model.
	     */
	    StandardPaletteModel.prototype.items = function () {
	        return this._items.slice();
	    };
	    /**
	     * Add a new palette item to the model.
	     *
	     * @param options - The options for initializing the item.
	     *
	     * @returns The palette item which was added to the model.
	     */
	    StandardPaletteModel.prototype.addItem = function (options) {
	        var item = new StandardPaletteItem(options);
	        this._items.push(item);
	        this.changed.emit(void 0);
	        return item;
	    };
	    /**
	     * Add several new palette items to the model.
	     *
	     * @param options - The options for initializing the items.
	     *
	     * @returns The new palette items where were added to the model.
	     */
	    StandardPaletteModel.prototype.addItems = function (options) {
	        var items = options.map(function (opts) { return new StandardPaletteItem(opts); });
	        Array.prototype.push.apply(this._items, items);
	        this.changed.emit(void 0);
	        return items;
	    };
	    /**
	     * Remove a palette item from the model.
	     *
	     * @param item - The item to remove from the model.
	     *
	     * #### Notes
	     * If the item is not contained in the model, this is a no-op.
	     */
	    StandardPaletteModel.prototype.removeItem = function (item) {
	        var i = arrays.remove(this._items, item);
	        if (i !== -1)
	            this.changed.emit(void 0);
	    };
	    /**
	     * Remove several items from the model.
	     *
	     * @param items - The items to remove from the model.
	     *
	     * #### Notes
	     * Items which are no contained in the model are ignored.
	     */
	    StandardPaletteModel.prototype.removeItems = function (items) {
	        var rest = this._items.filter(function (other) { return items.indexOf(other) === -1; });
	        if (rest.length === this._items.length) {
	            return;
	        }
	        this._items = rest;
	        this.changed.emit(void 0);
	    };
	    /**
	     * Remove all items from the model.
	     */
	    StandardPaletteModel.prototype.clearItems = function () {
	        if (this._items.length === 0) {
	            return;
	        }
	        this._items.length = 0;
	        this.changed.emit(void 0);
	    };
	    /**
	     * Search the palette model for matching commands.
	     *
	     * @param category - The category match against the model items. If
	     *   this is an empty string, all item categories will be matched.
	     *
	     * @param text - The text to match against the model items. If this
	     *   is an empty string, all items will be matched.
	     *
	     * @returns An array of new search results for the query.
	     */
	    StandardPaletteModel.prototype.search = function (category, text) {
	        // Collect a mapping of the matching categories. The mapping will
	        // only contain categories which match the provided query text.
	        // If the category is an empty string, all categories will be
	        // matched with a score of `0` and a `null` indices array.
	        var catmap = Private.matchCategory(this._items, category);
	        // Filter the items for matching text. Only items which have a
	        // category in the given map are considered. The category score
	        // is added to the text score to create the final item score.
	        // If the text is an empty string, all items will be matched
	        // will a text score of `0` and `null` indices array.
	        var scores = Private.matchText(this._items, text, catmap);
	        // Sort the items based on their total item score. Ties are
	        // broken by locale ordering the category followed by the text.
	        scores.sort(Private.scoreCmp);
	        // Group the item scores by category. The categories are added
	        // to the map in the order they appear in the scores array.
	        var groups = Private.groupScores(scores);
	        // Return the results for the search. The headers are created in
	        // the order of key iteration of the map. On major browsers, this
	        // is insertion order. This means that headers are created in the
	        // order of first appearance in the sorted scores array.
	        return Private.createSearchResults(groups, catmap);
	    };
	    return StandardPaletteModel;
	})(abstractmodel_1.AbstractPaletteModel);
	exports.StandardPaletteModel = StandardPaletteModel;
	/**
	 * The namespace for the `StandardPaletteModel` private data.
	 */
	var Private;
	(function (Private) {
	    /**
	     * Normalize a category for a palette item.
	     *
	     * @param category - The item category to normalize.
	     *
	     * @returns The normalized category text.
	     *
	     * #### Notes
	     * This converts the category to lower case and removes any
	     * extraneous whitespace.
	     */
	    function normalizeCategory(category) {
	        return category.trim().replace(/\s+/g, ' ').toLowerCase();
	    }
	    Private.normalizeCategory = normalizeCategory;
	    /**
	     * Collect a mapping of the categories which match the given query.
	     *
	     * @param items - The palette items to search.
	     *
	     * @param query - The category portion of the palette model query.
	     *
	     * @returns A mapping of matched category to match score.
	     *
	     * #### Notes
	     * The query string will be normalized by lower casing and removing
	     * all whitespace. If the normalized query is an empty string, all
	     * categories will be matched with a `0` score and `null` indices.
	     */
	    function matchCategory(items, query) {
	        // Normalize the query text to lower case with no whitespace.
	        query = normalizeQueryText(query);
	        // Create the maps needed to track the match state.
	        var seen = Object.create(null);
	        var matched = Object.create(null);
	        // Iterate over the items and match the categories.
	        for (var _i = 0; _i < items.length; _i++) {
	            var category = items[_i].category;
	            // If a category has already been seen, no more work is needed.
	            if (category in seen) {
	                continue;
	            }
	            // Mark the category as seen so it is only processed once.
	            seen[category] = true;
	            // If the query is empty, all categories match by default.
	            if (!query) {
	                matched[category] = { score: 0, indices: null };
	                continue;
	            }
	            // Run the matcher for the query and skip if no match.
	            var match = stringsearch_1.StringSearch.sumOfSquares(category, query);
	            if (!match) {
	                continue;
	            }
	            // Store the match score in the results.
	            matched[category] = match;
	        }
	        // Return the final mapping of matched categories.
	        return matched;
	    }
	    Private.matchCategory = matchCategory;
	    /**
	     * Filter palette items for those with matching text and category.
	     *
	     * @param items - The palette items to search.
	     *
	     * @param query - The text portion of the palette model query.
	     *
	     * @param categories - A mapping of the valid item categories.
	     *
	     * @returns An array of item scores for the matching items.
	     *
	     * #### Notes
	     * The query string will be normalized by lower casing and removing
	     * all whitespace. If the normalized query is an empty string, all
	     * items will be matched with a `0` text score and `null` indices.
	     *
	     * Items which have a category which is not present in the category
	     * map will be ignored.
	     *
	     * The final item score is the sum of the item text score and the
	     * relevant category score.
	     *
	     * This function does not sort the results.
	     */
	    function matchText(items, query, categories) {
	        // Normalize the query text to lower case with no whitespace.
	        query = normalizeQueryText(query);
	        // Create the array to hold the resulting scores.
	        var scores = [];
	        // Iterate over the items and match the text with the query.
	        for (var _i = 0; _i < items.length; _i++) {
	            var item = items[_i];
	            // Lookup the category score for the item category.
	            var cs = categories[item.category];
	            // If the category was not matched, the item is skipped.
	            if (!cs) {
	                continue;
	            }
	            // If the query is empty, all items are matched by default.
	            if (!query) {
	                scores.push({ score: cs.score, indices: null, item: item });
	                continue;
	            }
	            // Run the matcher for the query and skip if no match.
	            var match = stringsearch_1.StringSearch.sumOfSquares(item.text.toLowerCase(), query);
	            if (!match) {
	                continue;
	            }
	            // Create the match score for the item.
	            var score = cs.score + match.score;
	            scores.push({ score: score, indices: match.indices, item: item });
	        }
	        // Return the final array of matched item scores.
	        return scores;
	    }
	    Private.matchText = matchText;
	    /**
	     * A sort comparison function for a palette item match score.
	     *
	     * #### Notes
	     * This orders the items first based on score (lower is better), then
	     * by locale order of the item category followed by the item text.
	     */
	    function scoreCmp(a, b) {
	        var d1 = a.score - b.score;
	        if (d1 !== 0) {
	            return d1;
	        }
	        var d2 = a.item.category.localeCompare(b.item.category);
	        if (d2 !== 0) {
	            return d2;
	        }
	        return a.item.text.localeCompare(b.item.text);
	    }
	    Private.scoreCmp = scoreCmp;
	    /**
	     * Group item scores by item category.
	     *
	     * @param scores - The items to group by category.
	     *
	     * @returns A mapping of category name to group of items.
	     *
	     * #### Notes
	     * The categories are added to the map in the order of first
	     * appearance in the `scores` array.
	     */
	    function groupScores(scores) {
	        var result = Object.create(null);
	        for (var _i = 0; _i < scores.length; _i++) {
	            var score = scores[_i];
	            var cat = score.item.category;
	            (result[cat] || (result[cat] = [])).push(score);
	        }
	        return result;
	    }
	    Private.groupScores = groupScores;
	    /**
	     * Create the search results for a collection of item scores.
	     *
	     * @param groups - The item scores, grouped by category.
	     *
	     * @param categories - A mapping of category scores.
	     *
	     * @returns A flat array of search results for the groups.
	     *
	     * #### Notes
	     * This function renders the groups in iteration order, which on all
	     * major browsers is order of insertion (a de facto standard).
	     */
	    function createSearchResults(groups, categories) {
	        var results = [];
	        for (var cat in groups) {
	            results.push(createHeaderResult(cat, categories[cat]));
	            for (var _i = 0, _a = groups[cat]; _i < _a.length; _i++) {
	                var score = _a[_i];
	                results.push(createCommandResult(score));
	            }
	        }
	        return results;
	    }
	    Private.createSearchResults = createSearchResults;
	    /**
	     * Normalize the query text for a palette item.
	     *
	     * @param text - The category or text portion of a palette query.
	     *
	     * @returns The normalized query text.
	     *
	     * #### Notes
	     * The text is normalized by converting to lower case and removing
	     * all whitespace.
	     */
	    function normalizeQueryText(text) {
	        return text.replace(/\s+/g, '').toLowerCase();
	    }
	    /**
	     * Create a header search result for the given data.
	     *
	     * @param category - The category name for the header.
	     *
	     * @param score - The score for the category match.
	     *
	     * @returns A header search result for the given data.
	     */
	    function createHeaderResult(category, score) {
	        var text = highlightText(category, score.indices);
	        return { type: abstractmodel_1.SearchResultType.Header, value: { text: text, category: category } };
	    }
	    /**
	     * Create a command search result for the given data.
	     *
	     * @param score - The score for the item match.
	     *
	     * @returns A command search result for the given data.
	     */
	    function createCommandResult(score) {
	        var text = highlightText(score.item.text, score.indices);
	        var _a = score.item, icon = _a.icon, caption = _a.caption, shortcut = _a.shortcut, className = _a.className, handler = _a.handler, args = _a.args;
	        var value = { text: text, icon: icon, caption: caption, shortcut: shortcut, className: className, handler: handler, args: args };
	        return { type: abstractmodel_1.SearchResultType.Command, value: value };
	    }
	    /**
	     * Highlight the matching character of the given text.
	     *
	     * @param text - The text to highlight.
	     *
	     * @param indices - The character indices to highlight, or `null`.
	     *
	     * @returns The text interpolated with `<mark>` tags as needed.
	     */
	    function highlightText(text, indices) {
	        return indices ? stringsearch_1.StringSearch.highlight(text, indices) : text;
	    }
	})(Private || (Private = {}));


/***/ },
/* 58 */
/***/ function(module, exports) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2016, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	/**
	 * A namespace which holds string searching functionality.
	 */
	var StringSearch;
	(function (StringSearch) {
	    /**
	     * Compute the sum-of-squares match for the given search text.
	     *
	     * @param sourceText - The text which should be searched.
	     *
	     * @param queryText - The query text to locate in the source text.
	     *
	     * @returns The match result object, or `null` if there is no match.
	     *
	     * #### Notes
	     * This scoring algorithm uses a sum-of-squares approach to determine
	     * the score. In order for there to be a match, all of the characters
	     * in `queryText` **must** appear in `sourceText` in order. The index
	     * of each matching character is squared and added to the score. This
	     * means that early and consecutive character matches are preferred.
	     *
	     * The character match is performed with strict equality. It is case
	     * sensitive and does not ignore whitespace. If those behaviors are
	     * required, the text should be transformed before scoring.
	     *
	     * This has a runtime complexity of `O(n)` on `sourceText`.
	     */
	    function sumOfSquares(sourceText, queryText) {
	        var score = 0;
	        var indices = new Array(queryText.length);
	        for (var i = 0, j = 0, n = queryText.length; i < n; ++i, ++j) {
	            j = sourceText.indexOf(queryText[i], j);
	            if (j === -1)
	                return null;
	            indices[i] = j;
	            score += j * j;
	        }
	        return { score: score, indices: indices };
	    }
	    StringSearch.sumOfSquares = sumOfSquares;
	    /**
	     * Highlight the matched characters of a source string.
	     *
	     * @param source - The text which should be highlighted.
	     *
	     * @param indices - The indices of the matched characters. They must
	     *   appear in increasing order and must be in bounds of the source.
	     *
	     * @returns A string with interpolated `<mark>` tags.
	     */
	    function highlight(sourceText, indices) {
	        var k = 0;
	        var last = 0;
	        var result = '';
	        var n = indices.length;
	        while (k < n) {
	            var i = indices[k];
	            var j = indices[k];
	            while (++k < n && indices[k] === j + 1)
	                j++;
	            var head = sourceText.slice(last, i);
	            var chunk = sourceText.slice(i, j + 1);
	            result += head + "<mark>" + chunk + "</mark>";
	            last = j + 1;
	        }
	        return result + sourceText.slice(last);
	    }
	    StringSearch.highlight = highlight;
	})(StringSearch = exports.StringSearch || (exports.StringSearch = {}));


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(60);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(12)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js!./index.css", function() {
				var newContent = require("!!./../../css-loader/index.js!./index.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(11)();
	// imports


	// module
	exports.push([module.id, "/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2016, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\n.p-CommandPalette {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n\r\n.p-CommandPalette-search {\r\n  flex: 0 0 auto;\r\n}\r\n\r\n\r\n.p-CommandPalette-content {\r\n  flex: 1 1 auto;\r\n  margin: 0;\r\n  padding: 0;\r\n  min-height: 0;\r\n  overflow: auto;\r\n  list-style-type: none;\r\n}\r\n\r\n\r\n.p-CommandPalette-header {\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n\r\n.p-CommandPalette-command {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n\r\n.p-CommandPalette-commandIcon {\r\n  flex: 0 0 auto;\r\n}\r\n\r\n\r\n.p-CommandPalette-commandContent {\r\n  flex: 1 1 auto;\r\n}\r\n\r\n\r\n.p-CommandPalette-commandShortcut {\r\n  float: right;\r\n}\r\n\r\n\r\n.p-CommandPalette-commandText {\r\n  display: block;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n\r\n.p-CommandPalette-commandCaption {\r\n  display: block;\r\n}\r\n", ""]);

	// exports


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2016, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	var phosphor_disposable_1 = __webpack_require__(8);
	var phosphor_keymap_1 = __webpack_require__(62);
	var phosphor_signaling_1 = __webpack_require__(22);
	var commandregistry_1 = __webpack_require__(52);
	/**
	 * An abstract base class which defines a shortcut registry.
	 *
	 * TODO - allow multiple shortcuts for a single command?
	 */
	var ABCShortcutRegistry = (function () {
	    function ABCShortcutRegistry() {
	    }
	    Object.defineProperty(ABCShortcutRegistry.prototype, "shortcutsAdded", {
	        /**
	         * A signal emitted when shortcuts are added to the manager.
	         */
	        get: function () {
	            return Private.shortcutsAddedSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ABCShortcutRegistry.prototype, "shortcutsRemoved", {
	        /**
	         * A signal emitted when shortcuts are removed from the manager.
	         */
	        get: function () {
	            return Private.shortcutsRemovedSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ABCShortcutRegistry;
	}());
	exports.ABCShortcutRegistry = ABCShortcutRegistry;
	/**
	 * A concrete implementation of ABCShortcutRegistry.
	 *
	 * TODO - Support configurable keyboard layout.
	 */
	var ShortcutRegistry = (function (_super) {
	    __extends(ShortcutRegistry, _super);
	    /**
	     * Construct a shortcut manager.
	     *
	     * @param commands - The command registry for executing commands.
	     */
	    function ShortcutRegistry(commands) {
	        var _this = this;
	        _super.call(this);
	        /**
	         * The private key binding handler function.
	         */
	        this._executeCommand = function (id) {
	            _this._commands.execute(id);
	            return true;
	        };
	        this._keymap = new phosphor_keymap_1.KeymapManager();
	        this._commands = null;
	        this._sequences = Private.createSequenceMap();
	        this._commands = commands;
	    }
	    /**
	     * List the currently registered command ids.
	     *
	     * @returns A new array of the registered command ids.
	     */
	    ShortcutRegistry.prototype.list = function () {
	        return Object.keys(this._sequences);
	    };
	    /**
	     * Test whether the registry contains a sequence for a command.
	     *
	     * @param id - The id of the command of interest.
	     *
	     * @returns `true` if a sequence is registered, `false` otherwise.
	     */
	    ShortcutRegistry.prototype.has = function (command) {
	        return command in this._sequences;
	    };
	    /**
	     * Get the key sequence for the given command id.
	     *
	     * @param command - The id of the command of interest.
	     *
	     * @returns The key sequence for the specified command, or null.
	     */
	    ShortcutRegistry.prototype.sequenceFor = function (command) {
	        var sequence = this._sequences[command];
	        return sequence ? sequence.slice() : null;
	    };
	    /**
	     * Add key bindings to the shortcut manager.
	     *
	     * @param bindings - The key bindings to add to the manager.
	     *
	     * @returns A disposable which removes the added key bindings.
	     *
	     * #### Notes
	     * If a shortcut for a specific command is already registered,
	     * a warning will be logged and that specific shortcut will be
	     * ignored.
	     */
	    ShortcutRegistry.prototype.add = function (items) {
	        var _this = this;
	        // Setup the added ids and keybinding arrays.
	        var added = [];
	        var bindings = [];
	        // Convert the shortcut items into key bindings.
	        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
	            var _a = items_1[_i], sequence = _a.sequence, selector = _a.selector, command = _a.command;
	            // Log a warning if the command already has a shortcut.
	            if (command in this._sequences) {
	                console.warn("shortcut already registered for '" + command + "'");
	                continue;
	            }
	            // Register a safe shallow copy of the sequence.
	            sequence = sequence.slice();
	            this._sequences[command] = sequence;
	            // Add the command to the tracking array.
	            added.push(command);
	            // Add a keybinding to the tracking array.
	            var handler = this._executeCommand;
	            bindings.push({ sequence: sequence, selector: selector, handler: handler, args: command });
	        }
	        // If no items are added, return an empty delegate.
	        if (added.length === 0) {
	            return new phosphor_disposable_1.DisposableDelegate(null);
	        }
	        // Add the keybindings to the keymap manager.
	        // TODO - if any keybinding is invalid, we'll be out-of-sync.
	        var addedResult = this._keymap.add(bindings);
	        // Notify for the added shortcuts using a safe shallow copy.
	        this.shortcutsAdded.emit(added.slice());
	        // Return a delegate which will remove the added shortcuts.
	        return new phosphor_disposable_1.DisposableDelegate(function () {
	            addedResult.dispose();
	            for (var _i = 0, added_1 = added; _i < added_1.length; _i++) {
	                var id = added_1[_i];
	                delete _this._sequences[id];
	            }
	            _this.shortcutsRemoved.emit(added.slice());
	        });
	    };
	    /**
	     * Process a `'keydown'` event dispatching a matching shortcut.
	     *
	     * @param event - The event object for the `'keydown'` event.
	     *
	     * #### Notes
	     * This will typically be called automatically by the application.
	     */
	    ShortcutRegistry.prototype.processKeydownEvent = function (event) {
	        this._keymap.processKeydownEvent(event);
	    };
	    return ShortcutRegistry;
	}(ABCShortcutRegistry));
	exports.ShortcutRegistry = ShortcutRegistry;
	/**
	 * The default shortcut registry service provider.
	 */
	exports.shortcutRegistryProvider = {
	    id: 'phosphide.services.shortcutRegistry',
	    provides: ABCShortcutRegistry,
	    requires: [commandregistry_1.ABCCommandRegistry],
	    resolve: function (commands) { return new ShortcutRegistry(commands); },
	};
	/**
	 * The namespace for the private shortcut registry functionality.
	 */
	var Private;
	(function (Private) {
	    /**
	     *
	     */
	    Private.shortcutsAddedSignal = new phosphor_signaling_1.Signal();
	    /**
	     *
	     */
	    Private.shortcutsRemovedSignal = new phosphor_signaling_1.Signal();
	    /**
	     *
	     */
	    function createSequenceMap() {
	        return Object.create(null);
	    }
	    Private.createSequenceMap = createSequenceMap;
	})(Private || (Private = {}));


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(63));
	__export(__webpack_require__(64));


/***/ },
/* 63 */
/***/ function(module, exports) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	/**
	 * Create a normalized keystroke for a `'keydown'` event.
	 *
	 * @param event - The event object for a `'keydown'` event.
	 *
	 * @param layout - The keyboard layout for computing the keycap.
	 *
	 * @returns A normalized keystroke, or an empty string if the event
	 *   does not represent a valid shortcut keystroke.
	 */
	function keystrokeForKeydownEvent(event, layout) {
	    var keycap = layout.keycapForKeydownEvent(event);
	    if (!keycap) {
	        return '';
	    }
	    var mods = '';
	    if (event.metaKey && IS_MAC) {
	        mods += 'Cmd ';
	    }
	    if (event.ctrlKey) {
	        mods += 'Ctrl ';
	    }
	    if (event.altKey) {
	        mods += 'Alt ';
	    }
	    if (event.shiftKey) {
	        mods += 'Shift ';
	    }
	    return mods + keycap;
	}
	exports.keystrokeForKeydownEvent = keystrokeForKeydownEvent;
	/**
	 * Normalize and validate a keystroke.
	 *
	 * @param keystroke - The keystroke to normalize.
	 *
	 * @param layout - The keyboard layout for validating the keycap.
	 *
	 * @returns The normalized keystroke.
	 *
	 * @throws An error if the keystroke is invalid.
	 *
	 * #### Notes
	 * The keystroke must adhere to the format:
	 *
	 *   `[<modifier 1> [<modifier 2> [<modifier N]]] <primary key>`
	 *
	 * The supported modifiers are: `Accel`, `Alt`, `Cmd`, `Ctrl`, and
	 * `Shift`. The `Accel` modifier is translated to `Cmd` on Mac and
	 * `Ctrl` on all other platforms.
	 *
	 * The keystroke must conform to the following:
	 *   - Modifiers and the primary key are case senstive.
	 *   - The primary key must be a valid key for the layout.
	 *   - Whitespace is used to separate modifiers and primary key.
	 *   - Modifiers may appear in any order before the primary key.
	 *   - Modifiers cannot appear in duplicate.
	 *   - The `Cmd` modifier is only valid on Mac.
	 *
	 * If a keystroke is nonconforming, an error will be thrown.
	 */
	function normalizeKeystroke(keystroke, layout) {
	    var keycap = '';
	    var alt = false;
	    var cmd = false;
	    var ctrl = false;
	    var shift = false;
	    for (var _i = 0, _a = keystroke.trim().split(/\s+/); _i < _a.length; _i++) {
	        var token = _a[_i];
	        if (token === 'Accel') {
	            token = IS_MAC ? 'Cmd' : 'Ctrl';
	        }
	        if (token === 'Alt') {
	            if (alt) {
	                throwKeystrokeError(keystroke, '`Alt` appears in duplicate');
	            }
	            if (keycap) {
	                throwKeystrokeError(keystroke, '`Alt` follows primary key');
	            }
	            alt = true;
	        }
	        else if (token === 'Cmd') {
	            if (cmd) {
	                throwKeystrokeError(keystroke, '`Cmd` appears in duplicate');
	            }
	            if (keycap) {
	                throwKeystrokeError(keystroke, '`Cmd` follows primary key');
	            }
	            if (!IS_MAC) {
	                throwKeystrokeError(keystroke, '`Cmd` used on non-Mac platform');
	            }
	            cmd = true;
	        }
	        else if (token === 'Ctrl') {
	            if (ctrl) {
	                throwKeystrokeError(keystroke, '`Ctrl` appears in duplicate');
	            }
	            if (keycap) {
	                throwKeystrokeError(keystroke, '`Ctrl` follows primary key');
	            }
	            ctrl = true;
	        }
	        else if (token === 'Shift') {
	            if (shift) {
	                throwKeystrokeError(keystroke, '`Shift` appears in duplicate');
	            }
	            if (keycap) {
	                throwKeystrokeError(keystroke, '`Shift` follows primary key');
	            }
	            shift = true;
	        }
	        else {
	            if (keycap) {
	                throwKeystrokeError(keystroke, 'primary key appears in duplicate');
	            }
	            if (!layout.isValidKeycap(token)) {
	                throwKeystrokeError(keystroke, 'primary key invalid for layout');
	            }
	            keycap = token;
	        }
	    }
	    if (!keycap) {
	        throwKeystrokeError(keystroke, 'primary key not specified');
	    }
	    var mods = '';
	    if (cmd) {
	        mods += 'Cmd ';
	    }
	    if (ctrl) {
	        mods += 'Ctrl ';
	    }
	    if (alt) {
	        mods += 'Alt ';
	    }
	    if (shift) {
	        mods += 'Shift ';
	    }
	    return mods + keycap;
	}
	exports.normalizeKeystroke = normalizeKeystroke;
	/**
	 * A concrete implementation of [[IKeyboardLayout]] based on keycodes.
	 *
	 * The `.keyCode` property of a `'keydown'` event is a browser and OS
	 * specific representation of the physical key (not character) which
	 * was pressed on a keyboard. While not the most convenient API, it
	 * is currently the only one which works reliably on all browsers.
	 *
	 * This class accepts a user-defined mapping of keycodes to keycaps
	 * (the letter(s) printed on a physical keyboard key) which allows
	 * for reliable keyboard shortcuts tailored to the user's system.
	 */
	var KeycodeLayout = (function () {
	    /**
	     * Construct a new keycode layout.
	     *
	     * @param name - The human readable name for the layout.
	     *
	     * @param codes - A mapping of keycode to keycap value.
	     */
	    function KeycodeLayout(name, codes) {
	        this._name = name;
	        this._codes = codes;
	        this._keys = extractKeys(codes);
	    }
	    Object.defineProperty(KeycodeLayout.prototype, "name", {
	        /**
	         * The human readable read-only name of the layout.
	         */
	        get: function () {
	            return this._name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Get an array of all keycap values supported by the layout.
	     *
	     * @returns A new array of the supported keycap values.
	     */
	    KeycodeLayout.prototype.keycaps = function () {
	        return Object.keys(this._keys);
	    };
	    /**
	     * Test whether the given keycap is a valid value for the layout.
	     *
	     * @param keycap - The user provided keycap to test for validity.
	     *
	     * @returns `true` if the keycap is valid, `false` otherwise.
	     */
	    KeycodeLayout.prototype.isValidKeycap = function (keycap) {
	        return keycap in this._keys;
	    };
	    /**
	     * Get the keycap for a `'keydown'` event.
	     *
	     * @param event - The event object for a `'keydown'` event.
	     *
	     * @returns The associated keycap value, or an empty string if
	     *   the event does not represent a valid primary shortcut key.
	     */
	    KeycodeLayout.prototype.keycapForKeydownEvent = function (event) {
	        return this._codes[event.keyCode] || '';
	    };
	    return KeycodeLayout;
	})();
	exports.KeycodeLayout = KeycodeLayout;
	/**
	 * A keycode-based keyboard layout for US English keyboards.
	 *
	 * This layout is valid for the following OS/Browser combinations.
	 *
	 * - Windows
	 *   - Chrome
	 *   - Firefox
	 *   - IE
	 *
	 * - OSX
	 *   - Chrome
	 *   - Firefox
	 *   - Safari
	 *
	 * - Linux
	 *   - Chrome
	 *   - Firefox
	 *
	 * Other combinations may also work, but are untested.
	 */
	exports.EN_US = new KeycodeLayout('en-us', {
	    8: 'Backspace',
	    9: 'Tab',
	    13: 'Enter',
	    19: 'Pause',
	    27: 'Escape',
	    32: 'Space',
	    33: 'PageUp',
	    34: 'PageDown',
	    35: 'End',
	    36: 'Home',
	    37: 'ArrowLeft',
	    38: 'ArrowUp',
	    39: 'ArrowRight',
	    40: 'ArrowDown',
	    45: 'Insert',
	    46: 'Delete',
	    48: '0',
	    49: '1',
	    50: '2',
	    51: '3',
	    52: '4',
	    53: '5',
	    54: '6',
	    55: '7',
	    56: '8',
	    57: '9',
	    59: ';',
	    61: '=',
	    65: 'A',
	    66: 'B',
	    67: 'C',
	    68: 'D',
	    69: 'E',
	    70: 'F',
	    71: 'G',
	    72: 'H',
	    73: 'I',
	    74: 'J',
	    75: 'K',
	    76: 'L',
	    77: 'M',
	    78: 'N',
	    79: 'O',
	    80: 'P',
	    81: 'Q',
	    82: 'R',
	    83: 'S',
	    84: 'T',
	    85: 'U',
	    86: 'V',
	    87: 'W',
	    88: 'X',
	    89: 'Y',
	    90: 'Z',
	    93: 'ContextMenu',
	    96: '0',
	    97: '1',
	    98: '2',
	    99: '3',
	    100: '4',
	    101: '5',
	    102: '6',
	    103: '7',
	    104: '8',
	    105: '9',
	    106: '*',
	    107: '+',
	    109: '-',
	    110: '.',
	    111: '/',
	    112: 'F1',
	    113: 'F2',
	    114: 'F3',
	    115: 'F4',
	    116: 'F5',
	    117: 'F6',
	    118: 'F7',
	    119: 'F8',
	    120: 'F9',
	    121: 'F10',
	    122: 'F11',
	    123: 'F12',
	    173: '-',
	    186: ';',
	    187: '=',
	    188: ',',
	    189: '-',
	    190: '.',
	    191: '/',
	    192: '`',
	    219: '[',
	    220: '\\',
	    221: ']',
	    222: '\'',
	});
	/**
	 * A flag indicating whether the platform is Mac.
	 */
	var IS_MAC = !!navigator.platform.match(/Mac/i);
	/**
	 * Throw an error with the give invalid keystroke.
	 */
	function throwKeystrokeError(keystroke, message) {
	    throw new Error("invalid keystroke: " + keystroke + " (" + message + ")");
	}
	/**
	 * Extract the key set from a code map.
	 */
	function extractKeys(codes) {
	    var keys = Object.create(null);
	    for (var c in codes) {
	        keys[codes[c]] = true;
	    }
	    return keys;
	}


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var clear_cut_1 = __webpack_require__(65);
	var phosphor_disposable_1 = __webpack_require__(8);
	var keyboard_1 = __webpack_require__(63);
	/**
	 * A class which manages a collection of key bindings.
	 */
	var KeymapManager = (function () {
	    /**
	     * Construct a new key map manager.
	     *
	     * @param layout - The keyboard layout to use with the manager.
	     *   The default layout is US English.
	     */
	    function KeymapManager(layout) {
	        if (layout === void 0) { layout = keyboard_1.EN_US; }
	        this._timer = 0;
	        this._replaying = false;
	        this._sequence = [];
	        this._exact = null;
	        this._bindings = [];
	        this._events = [];
	        this._layout = layout;
	    }
	    Object.defineProperty(KeymapManager.prototype, "layout", {
	        /**
	         * Get the keyboard layout used by the manager.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._layout;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Add key bindings to the key map manager.
	     *
	     * @param bindings - The key bindings to add to the manager.
	     *
	     * @returns A disposable which removes the added key bindings.
	     *
	     * #### Notes
	     * If a key binding is invalid, a warning will be logged to the
	     * console and the offending key binding will be ignored.
	     *
	     * If multiple key bindings are registered for the same sequence,
	     * the binding with the highest CSS specificity is executed first.
	     *
	     * Ambiguous key bindings are resolved with a timeout.
	     */
	    KeymapManager.prototype.add = function (bindings) {
	        var _this = this;
	        var exbArray = [];
	        for (var _i = 0; _i < bindings.length; _i++) {
	            var kb = bindings[_i];
	            var exb = createExBinding(kb, this._layout);
	            if (exb !== null)
	                exbArray.push(exb);
	        }
	        Array.prototype.push.apply(this._bindings, exbArray);
	        return new phosphor_disposable_1.DisposableDelegate(function () { return _this._removeBindings(exbArray); });
	    };
	    /**
	     * Process a `'keydown'` event and invoke a matching key binding.
	     *
	     * @param event - The event object for a `'keydown'` event.
	     *
	     * #### Notes
	     * This should be called in response to a `'keydown'` event in order
	     * to invoke the handler function of the best matching key binding.
	     *
	     * The manager **does not** install its own key event listeners. This
	     * allows user code full control over the nodes for which the manager
	     * processes `'keydown'` events.
	     */
	    KeymapManager.prototype.processKeydownEvent = function (event) {
	        // Bail immediately if playing back keystrokes.
	        if (this._replaying) {
	            return;
	        }
	        // Get the canonical keystroke for the event. An empty string
	        // indicates a keystroke which cannot be a valid key shortcut.
	        var keystroke = keyboard_1.keystrokeForKeydownEvent(event, this._layout);
	        if (!keystroke) {
	            return;
	        }
	        // Add the keystroke to the current key sequence.
	        this._sequence.push(keystroke);
	        // Find the exact and partial matches for the key sequence.
	        var _a = findMatch(this._bindings, this._sequence, event), exact = _a.exact, partial = _a.partial;
	        // If there is no exact or partial match, replay any suppressed
	        // events and clear the pending state so that the next key press
	        // starts from a fresh default state.
	        if (!exact && !partial) {
	            this._replayEvents();
	            this._clearPendingState();
	            return;
	        }
	        // Stop propagation of the event. If there is only a partial match,
	        // the event will be replayed if a final match is never triggered.
	        event.preventDefault();
	        event.stopPropagation();
	        // If there is an exact match but no partial, the exact match can
	        // be dispatched immediately. The pending state is cleared so the
	        // next key press starts from a fresh default state.
	        if (!partial) {
	            safeInvoke(exact);
	            this._clearPendingState();
	            return;
	        }
	        // If there is both an exact match and a partial, the exact match
	        // is stored for future dispatch in case the timer expires before
	        // a more specific match is triggered.
	        if (exact)
	            this._exact = exact;
	        // Store the event for possible playback in the future.
	        this._events.push(event);
	        // (Re)start the timer to dispatch the most recent exact match
	        // in case the partial match fails to result in an exact match.
	        this._startTimer();
	    };
	    /**
	     * Remove an array of extended bindings from the key map.
	     */
	    KeymapManager.prototype._removeBindings = function (exbArray) {
	        var count = 0;
	        for (var i = 0, n = this._bindings.length; i < n; ++i) {
	            var exb = this._bindings[i];
	            if (exbArray.indexOf(exb) !== -1) {
	                count++;
	            }
	            else {
	                this._bindings[i - count] = exb;
	            }
	        }
	        this._bindings.length -= count;
	    };
	    /**
	     * Start or restart the pending timer for the key map.
	     */
	    KeymapManager.prototype._startTimer = function () {
	        var _this = this;
	        this._clearTimer();
	        this._timer = setTimeout(function () {
	            _this._onPendingTimeout();
	        }, 1000);
	    };
	    /**
	     * Clear the pending timer for the key map.
	     */
	    KeymapManager.prototype._clearTimer = function () {
	        if (this._timer !== 0) {
	            clearTimeout(this._timer);
	            this._timer = 0;
	        }
	    };
	    /**
	     * Replay the events which were suppressed.
	     */
	    KeymapManager.prototype._replayEvents = function () {
	        if (this._events.length === 0) {
	            return;
	        }
	        this._replaying = true;
	        for (var _i = 0, _a = this._events; _i < _a.length; _i++) {
	            var evt = _a[_i];
	            var clone = cloneKeyboardEvent(evt);
	            evt.target.dispatchEvent(clone);
	        }
	        this._replaying = false;
	    };
	    /**
	     * Clear the pending state for the keymap.
	     */
	    KeymapManager.prototype._clearPendingState = function () {
	        this._clearTimer();
	        this._exact = null;
	        this._events.length = 0;
	        this._sequence.length = 0;
	    };
	    /**
	     * Handle the partial match timeout.
	     */
	    KeymapManager.prototype._onPendingTimeout = function () {
	        this._timer = 0;
	        if (this._exact) {
	            safeInvoke(this._exact);
	        }
	        else {
	            this._replayEvents();
	        }
	        this._clearPendingState();
	    };
	    return KeymapManager;
	})();
	exports.KeymapManager = KeymapManager;
	/**
	 * Create an extended key binding from a user key binding.
	 *
	 * Warns and returns `null` if the key binding is invalid.
	 */
	function createExBinding(binding, layout) {
	    if (!clear_cut_1.isSelectorValid(binding.selector)) {
	        console.warn("invalid key binding selector: " + binding.selector);
	        return null;
	    }
	    if (binding.sequence.length === 0) {
	        console.warn('empty key sequence for key binding');
	        return null;
	    }
	    try {
	        var sequence = binding.sequence.map(function (ks) { return keyboard_1.normalizeKeystroke(ks, layout); });
	    }
	    catch (e) {
	        console.warn(e.message);
	        return null;
	    }
	    return {
	        sequence: sequence,
	        args: binding.args,
	        handler: binding.handler,
	        selector: binding.selector,
	        specificity: clear_cut_1.calculateSpecificity(binding.selector),
	    };
	}
	;
	/**
	 * Test whether a binding sequence matches a key sequence.
	 *
	 * Returns a `SequenceMatch` value indicating the type of match.
	 */
	function matchSequence(exbSeq, keySeq) {
	    if (exbSeq.length < keySeq.length) {
	        return 0 /* None */;
	    }
	    for (var i = 0, n = keySeq.length; i < n; ++i) {
	        if (exbSeq[i] !== keySeq[i]) {
	            return 0 /* None */;
	        }
	    }
	    if (exbSeq.length > keySeq.length) {
	        return 2 /* Partial */;
	    }
	    return 1 /* Exact */;
	}
	/**
	 * Find the distance from the target node to the first matching node.
	 *
	 * This traverses the event path from `target` to `currentTarget` and
	 * computes the distance from `target` to the first node which matches
	 * the CSS selector. If no match is found, `-1` is returned.
	 */
	function targetDistance(selector, event) {
	    var distance = 0;
	    var target = event.target;
	    var current = event.currentTarget;
	    for (; target !== null; target = target.parentElement, ++distance) {
	        if (matchesSelector(target, selector)) {
	            return distance;
	        }
	        if (target === current) {
	            return -1;
	        }
	    }
	    return -1;
	}
	/**
	 * Find the bindings which match a key sequence.
	 *
	 * This returns a match result which contains the best exact matching
	 * binding, and a flag which indicates if there are partial matches.
	 */
	function findMatch(bindings, sequence, event) {
	    // Whether a partial match has been found.
	    var partial = false;
	    // The current best exact match.
	    var exact = null;
	    // The match distance for the exact match.
	    var distance = Infinity;
	    // Iterate the bindings and search for the best match.
	    for (var i = 0, n = bindings.length; i < n; ++i) {
	        // Lookup the current binding.
	        var exb = bindings[i];
	        // Check whether the binding sequence is a match.
	        var match = matchSequence(exb.sequence, sequence);
	        // If there is no match, the binding is ignored.
	        if (match === 0 /* None */) {
	            continue;
	        }
	        // If it is a partial match and no other partial match has been
	        // found, ensure the selector matches and mark the partial flag.
	        if (match === 2 /* Partial */) {
	            if (!partial && targetDistance(exb.selector, event) !== -1) {
	                partial = true;
	            }
	            continue;
	        }
	        // Otherwise, it's an exact match. Update the best match if the
	        // binding is a stronger match than the current best exact match.
	        var td = targetDistance(exb.selector, event);
	        if (td !== -1 && td <= distance) {
	            if (exact === null || exb.specificity > exact.specificity) {
	                exact = exb;
	                distance = td;
	            }
	        }
	    }
	    // Return the match result.
	    return { exact: exact, partial: partial };
	}
	/**
	 * Safely invoke the handler for the key binding.
	 *
	 * Exceptions in the handler will be caught and logged.
	 */
	function safeInvoke(binding) {
	    try {
	        binding.handler.call(void 0, binding.args);
	    }
	    catch (err) {
	        console.error(err);
	    }
	}
	/**
	 * A cross-browser CSS selector matching prototype function.
	 *
	 * This function must be called with an element as `this` context.
	 */
	var protoMatchFunc = (function () {
	    var proto = Element.prototype;
	    return (proto.matches ||
	        proto.matchesSelector ||
	        proto.mozMatchesSelector ||
	        proto.msMatchesSelector ||
	        proto.oMatchesSelector ||
	        proto.webkitMatchesSelector ||
	        (function (selector) {
	            var elem = this;
	            var matches = elem.ownerDocument.querySelectorAll(selector);
	            return Array.prototype.indexOf.call(matches, elem) !== -1;
	        }));
	})();
	/**
	 * Test whether an element matches a CSS selector.
	 */
	function matchesSelector(elem, selector) {
	    return protoMatchFunc.call(elem, selector);
	}
	/**
	 * Clone a keyboard event.
	 *
	 * #### Notes
	 * A custom event is required because Chrome nulls out the `keyCode`
	 * field in user-generated `KeyboardEvent` types.
	 */
	function cloneKeyboardEvent(event) {
	    var clone = document.createEvent('Event');
	    var bubbles = event.bubbles || true;
	    var cancelable = event.cancelable || true;
	    clone.initEvent(event.type || 'keydown', bubbles, cancelable);
	    clone.key = event.key || '';
	    clone.keyCode = event.keyCode || 0;
	    clone.which = event.keyCode || 0;
	    clone.ctrlKey = event.ctrlKey || false;
	    clone.altKey = event.altKey || false;
	    clone.shiftKey = event.shiftKey || false;
	    clone.metaKey = event.metaKey || false;
	    clone.view = event.view || window;
	    return clone;
	}


/***/ },
/* 65 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Originally ported from https://github.com/keeganstreet/specificity/blob/866bf7ab4e7f62a7179c15b13a95af4e1c7b1afa/specificity.js
	 *
	 * Calculates the specificity of CSS selectors
	 * http://www.w3.org/TR/css3-selectors/#specificity
	 *
	 * Returns a selector integer value
	 */

	// The following regular expressions assume that selectors matching the preceding regular expressions have been removed
	var attributeRegex = /(\[[^\]]+\])/g;
	var idRegex = /(#[^\s\+>~\.\[:]+)/g;
	var classRegex = /(\.[^\s\+>~\.\[:]+)/g;
	var pseudoElementRegex = /(::[^\s\+>~\.\[:]+|:first-line|:first-letter|:before|:after)/g;
	var pseudoClassRegex = /(:[^\s\+>~\.\[:]+)/g;
	var elementRegex = /([^\s\+>~\.\[:]+)/g;
	var notRegex = /:not\(([^\)]*)\)/g;
	var ruleRegex = /\{[^]*/gm;
	var separatorRegex = /[\*\s\+>~]/g;
	var straysRegex = /[#\.]/g;

	// Find matches for a regular expression in a string and push their details to parts
	// Type is "a" for IDs, "b" for classes, attributes and pseudo-classes and "c" for elements and pseudo-elements
	var findMatch = function(regex, type, types, selector) {
	  var matches = selector.match(regex);
	  if (matches) {
	    for (var i = 0; i < matches.length; i++) {
	      types[type]++;
	      // Replace this simple selector with whitespace so it won't be counted in further simple selectors
	      selector = selector.replace(matches[i], ' ');
	    }
	  }

	  return selector;
	}

	// Calculate the specificity for a selector by dividing it into simple selectors and counting them
	var calculate = function(selector) {
	  var commaIndex = selector.indexOf(',');
	  if (commaIndex !== -1) {
	    selector = selector.substring(0, commaIndex);
	  }

	  var  types = {
	    a: 0,
	    b: 0,
	    c: 0
	  };

	  // Remove the negation psuedo-class (:not) but leave its argument because specificity is calculated on its argument
	  selector = selector.replace(notRegex, ' $1 ');

	  // Remove anything after a left brace in case a user has pasted in a rule, not just a selector
	  selector = selector.replace(ruleRegex, ' ');

	  // Add attribute selectors to parts collection (type b)
	  selector = findMatch(attributeRegex, 'b', types, selector);

	  // Add ID selectors to parts collection (type a)
	  selector = findMatch(idRegex, 'a', types, selector);

	  // Add class selectors to parts collection (type b)
	  selector = findMatch(classRegex, 'b', types, selector);

	  // Add pseudo-element selectors to parts collection (type c)
	  selector = findMatch(pseudoElementRegex, 'c', types, selector);

	  // Add pseudo-class selectors to parts collection (type b)
	  selector = findMatch(pseudoClassRegex, 'b', types, selector);

	  // Remove universal selector and separator characters
	  selector = selector.replace(separatorRegex, ' ');

	  // Remove any stray dots or hashes which aren't attached to words
	  // These may be present if the user is live-editing this selector
	  selector = selector.replace(straysRegex, ' ');

	  // The only things left should be element selectors (type c)
	  findMatch(elementRegex, 'c', types, selector);

	  return (types.a * 100) + (types.b * 10) + (types.c * 1);
	}

	var specificityCache = {};

	exports.calculateSpecificity = function(selector) {
	  var specificity = specificityCache[selector];
	  if (specificity === undefined) {
	    specificity = calculate(selector);
	    specificityCache[selector] = specificity;
	  }
	  return specificity;
	}

	if (global.document) {
	  var validSelectorCache = {};
	  var testSelectorElement = global.document.createElement('div');

	  exports.isSelectorValid = function(selector) {
	    var valid = validSelectorCache[selector];
	    if (valid === undefined) {
	      try {
	        testSelectorElement.querySelector(selector);
	        valid = true;
	      } catch (error) {
	        valid = false;
	      }
	      validSelectorCache[selector] = valid;
	    }
	    return valid;
	  }

	  exports.validateSelector = function(selector) {
	    if (!exports.isSelectorValid(selector)) {
	      var error = new SyntaxError(selector + ' is not a valid selector');
	      error.code = 'EBADSELECTOR';
	      throw error;
	    }
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2016, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var phosphor_widget_1 = __webpack_require__(20);
	//var $ = require('jquery');
	var jstree = __webpack_require__(68);
	var graph = __webpack_require__(69).provGraphExtension
	var my_app;

	exports.procTreeExtension = {
	    id: 'cadets.sidebar.proctree',
	    activate: activateprocTree
	};
	function createCommandItem(id, message) {
	    return { id: id, handler: function () { console.log("COMMAND: " + message); } };
	}

	function convert_to_jstree(node_array) {
	  if(node_array.length==0) return;
	  var arr = []
	  for(var i in node_array) {
	    var node = node_array[i];
	    var tree_node = { id: node.id,
	                      binary: node.exe,
	                      icon: "fa fa-cube",
	                      pid: node.pid,
	                      gnode_id: node.gnode_id,
	                      state: { opened: false },
	                      children: convert_to_jstree(node.children)
	                     };
	    if('user' in node){
	        tree_node.user = node.user;
	        if('ip' in node){
	            tree_node.ip = node.ip;
	            tree_node.text = `${node.exe} [${node.user}@${node.ip} - ${node.pid}]`;
	        } else {
	            tree_node.text = `${node.exe} [${node.user} - ${node.pid}]`;
	        }
	    } else {
	        tree_node.text = `${node.exe} [${node.pid}]`;
	    }
	    arr.push(tree_node);
	  }
	  return arr;
	}

	function load_proctree(dom_node) {
	 $.ajax({url: "../proctree",
	         type: "GET",
	         async: true,
	         success: function(data) {
	           var jdata = convert_to_jstree($.parseJSON(data))
	           $("#"+dom_node.id)
	           .on('activate_node.jstree', function(ev, node) {
	              graph.addGraph(node.node);
	           })
	           .jstree({
	           'core': {
	             'themes' : { },
	             'data': jdata
	           },
	           'plugins':['wholerow', 'search']
	           });
	          }
	        }
	      );

	}

	function activateprocTree(app) {
	    var widget = new phosphor_widget_1.Widget();
	    widget.id = 'proctree';
	    widget.title.text = 'Sessions';
	    widget.addClass('proctree-content');
	    app.shell.addToLeftArea(widget, { rank: 10 });

	    /* TODO(lc525) add search */

	    let div = document.createElement('div');
	    div.id = 'proctree_host';
	    widget.node.appendChild(div);
	    load_proctree(div);
	    return Promise.resolve();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(67)))

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-disable no-unused-vars*/
	/*!
	 * jQuery JavaScript Library v3.1.0
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2016-07-07T21:44Z
	 */
	( function( global, factory ) {

		"use strict";

		if ( typeof module === "object" && typeof module.exports === "object" ) {

			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call( Object );

	var support = {};



		function DOMEval( code, doc ) {
			doc = doc || document;

			var script = doc.createElement( "script" );

			script.text = code;
			doc.head.appendChild( script ).parentNode.removeChild( script );
		}
	/* global Symbol */
	// Defining this global in .eslintrc would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module



	var
		version = "3.1.0",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isArray: Array.isArray,

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {

			// As of jQuery 3.0, isNumeric is limited to
			// strings and numbers (primitives or objects)
			// that can be coerced to finite numbers (gh-2662)
			var type = jQuery.type( obj );
			return ( type === "number" || type === "string" ) &&

				// parseFloat NaNs numeric-cast false positives ("")
				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
				// subtraction forces infinities to NaN
				!isNaN( obj - parseFloat( obj ) );
		},

		isPlainObject: function( obj ) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}

			proto = getProto( obj );

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},

		isEmptyObject: function( obj ) {

			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;

			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}

			// Support: Android <=2.3 only (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			DOMEval( code );
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE <=9 - 11, Edge 12 - 13
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android <=4.0 only
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.3.0
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-01-04
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,

		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,
		fcssescape = function( ch, asCodePoint ) {
			if ( asCodePoint ) {

				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if ( ch === "\0" ) {
					return "\uFFFD";
				}

				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
			}

			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		},

		disabledAncestor = addCombinator(
			function( elem ) {
				return elem.disabled === true;
			},
			{ dir: "parentNode", next: "legend" }
		);

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						while ( i-- ) {
							groups[i] = "#" + nid + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created element and returns a boolean result
	 */
	function assert( fn ) {
		var el = document.createElement("fieldset");

		try {
			return !!fn( el );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( el.parentNode ) {
				el.parentNode.removeChild( el );
			}
			// release memory in IE
			el = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				a.sourceIndex - b.sourceIndex;

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for :enabled/:disabled
	 * @param {Boolean} disabled true for :disabled; false for :enabled
	 */
	function createDisabledPseudo( disabled ) {
		// Known :disabled false positives:
		// IE: *[disabled]:not(button, input, select, textarea, optgroup, option, menuitem, fieldset)
		// not IE: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
		return function( elem ) {

			// Check form elements and option elements for explicit disabling
			return "label" in elem && elem.disabled === disabled ||
				"form" in elem && elem.disabled === disabled ||

				// Check non-disabled form elements for fieldset[disabled] ancestors
				"form" in elem && elem.disabled === false && (
					// Support: IE6-11+
					// Ancestry is covered for us
					elem.isDisabled === disabled ||

					// Otherwise, assume any non-<option> under fieldset[disabled] is disabled
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						("label" in elem || !disabledAncestor( elem )) !== disabled
				);
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, subWindow,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( preferredDoc !== document &&
			(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

			// Support: IE 11, Edge
			if ( subWindow.addEventListener ) {
				subWindow.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( subWindow.attachEvent ) {
				subWindow.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( el ) {
			el.className = "i";
			return !el.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( el ) {
			el.appendChild( document.createComment("") );
			return !el.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programmatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( el ) {
			docElem.appendChild( el ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See https://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( el ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// https://bugs.jquery.com/ticket/12359
				docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( el.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !el.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !el.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibling-combinator selector` fails
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( el ) {
				el.innerHTML = "<a href='' disabled='disabled'></a>" +
					"<select disabled='disabled'><option/></select>";

				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				el.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( el.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( el.querySelectorAll(":enabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Support: IE9-11+
				// IE's :disabled selector does not pick up the children of disabled fieldsets
				docElem.appendChild( el ).disabled = true;
				if ( el.querySelectorAll(":disabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				el.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( el ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( el, "*" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( el, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.escape = function( sel ) {
		return (sel + "").replace( rcssescape, fcssescape );
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": createDisabledPseudo( false ),
			"disabled": createDisabledPseudo( true ),

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			skip = combinator.next,
			key = skip || dir,
			checkNonElements = base && key === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( skip && skip === elem.nodeName.toLowerCase() ) {
								elem = elem[ dir ] || elem;
							} else if ( (oldCache = uniqueCache[ key ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ key ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( el ) {
		// Should return 1, but returns 4 (following)
		return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( el ) {
		el.innerHTML = "<a href='#'></a>";
		return el.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( el ) {
		el.innerHTML = "<input/>";
		el.firstChild.setAttribute( "value", "" );
		return el.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( el ) {
		return el.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;




	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			ret = this.pushStack( [] );

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						if ( elem ) {

							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );

			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :

							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
								jQuery.find.matchesSelector( cur, selectors ) ) ) {

							matched.push( cur );
							break;
						}
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}

	function adoptValue( value, resolve, reject ) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );

			// Other thenables
			} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );

			// Other non-thenables
			} else {

				// Support: Android 4.0 only
				// Strict mode functions invoked without .call/.apply get global-object context
				resolve.call( undefined, value );
			}

		// For Promises/A+, convert exceptions into rejections
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
		// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.call( undefined, value );
		}
	}

	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},

					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;

						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {

								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;

										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}

										returned = handler.apply( that, args );

										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}

										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&

											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;

										// Handle a returned thenable
										if ( jQuery.isFunction( then ) ) {

											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);

											// Normal processors (resolve) also hook into progress
											} else {

												// ...and disregard older resolution values
												maxDepth++;

												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}

										// Handle all other returned values
										} else {

											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}

											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},

									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {

												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}

												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {

													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}

													deferred.rejectWith( that, args );
												}
											}
										};

								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {

									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}

						return jQuery.Deferred( function( newDefer ) {

							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);

							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);

							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add(
						function() {

							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},

						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,

						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock
					);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( singleValue ) {
			var

				// count of uncompleted subordinates
				remaining = arguments.length,

				// count of unprocessed arguments
				i = remaining,

				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),

				// the master Deferred
				master = jQuery.Deferred(),

				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							master.resolveWith( resolveContexts, resolveValues );
						}
					};
				};

			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( master.state() === "pending" ||
					jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

					return master.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
			}

			return master.promise();
		}
	} );


	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function( error, stack ) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};




	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};




	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function( fn ) {

		readyList
			.then( fn )

			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );

	jQuery.ready.then = readyList.then;

	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );

	} else {

		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );

		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function( owner ) {

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ jQuery.camelCase( data ) ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ jQuery.camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :

				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
		},
		access: function( owner, key, value ) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				return this.get( owner, key );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key !== undefined ) {

				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( jQuery.camelCase );
				} else {
					key = jQuery.camelCase( key );

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnotwhite ) || [] );
				}

				i = key.length;

				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :

						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? JSON.parse( data ) :
						data;
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each( function() {

					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHiddenWithinTree = function( elem, el ) {

			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;

			// Inline style trumps all
			return elem.style.display === "none" ||
				elem.style.display === "" &&

				// Otherwise, check computed style
				// Support: Firefox <=43 - 45
				// Disconnected elements can have computed display: none, so first confirm that elem is
				// in the document.
				jQuery.contains( elem.ownerDocument, elem ) &&

				jQuery.css( elem, "display" ) === "none";
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};




	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}


	var defaultDisplayMap = {};

	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];

		if ( display ) {
			return display;
		}

		temp = doc.body.appendChild( doc.createElement( nodeName ) ),
		display = jQuery.css( temp, "display" );

		temp.parentNode.removeChild( temp );

		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;

		return display;
	}

	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;

		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			display = elem.style.display;
			if ( show ) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";

					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}

		return elements;
	}

	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE <=9 only
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	var documentElement = document.documentElement;



	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( nativeEvent ) {

			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix( nativeEvent );

			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;

			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Support: IE <=9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox <=42
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: jQuery.isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
								return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
								return this.originalEvent[ name ];
						}
					},

				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},

		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android <=2.3 only
					src.returnValue === false ?
				returnTrue :
				returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function( event ) {
			var button = event.button;

			// Add which for key events
			if ( event.which == null && rkeyEvent.test( event.type ) ) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
				return ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event.which;
		}
	}, jQuery.event.addProp );

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {

		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var

		/* eslint-disable max-len */

		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

		/* eslint-enable */

		// Support: IE <=10 - 11, Edge 12 - 13
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	function manipulationTarget( elem, content ) {
		if ( jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view || !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};



	( function() {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}

			div.style.cssText =
				"box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild( container );

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );

		jQuery.extend( support, {
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
				computeStyleTests();
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// Support: IE <=9 only
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?

			// If we already have the right measurement, avoid augmentation
			4 :

			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var val,
			valueIsBorderBox = true,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Support: IE <=11 only
		// Running getBoundingClientRect on a disconnected node
		// in IE throws an error.
		if ( elem.getClientRects().length ) {
			val = elem.getBoundingClientRect()[ name ];
		}

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {

			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					style[ name ] = value;
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	function raf() {
		if ( timerId ) {
			window.requestAnimationFrame( raf );
			jQuery.fx.tick();
		}
	}

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;

					// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {

			// Support: IE <=9 - 11, Edge 12 - 13
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}

			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {

					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {

			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}

				/* eslint-disable no-loop-func */

				anim.done( function() {

				/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}

			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {

		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		// Go to the end state if fx are off or if document is hidden
		if ( jQuery.fx.off || document.hidden ) {
			opt.duration = 0;

		} else {
			opt.duration = typeof opt.duration === "number" ?
				opt.duration : opt.duration in jQuery.fx.speeds ?
					jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.requestAnimationFrame ?
				window.requestAnimationFrame( raf ) :
				window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		if ( window.cancelAnimationFrame ) {
			window.cancelAnimationFrame( timerId );
		} else {
			window.clearInterval( timerId );
		}

		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};

	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();

			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;

					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




	var rclass = /[\t\r\n\f]/g;

	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g,
		rspaces = /[\x20\t\r\n\f]+/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?

						// Handle most common string cases
						ret.replace( rreturn, "" ) :

						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								!option.disabled &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];

						/* eslint-disable no-cond-assign */

						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);

			jQuery.event.trigger( e, null, elem );
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	support.focusin = "onfocusin" in window;


	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {

				// If value is a function, invoke it and use its return value
				var value = jQuery.isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;

				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// Request state (becomes false upon send and true upon completion)
				completed,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// uncached part of the url
				uncached,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {

								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR );

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE <=8 - 11, Edge 12 - 13
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in uncached url if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rts, "" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

			// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}

					// Propagate others as results
					done( -1, e );
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Ignore repeat invocations
				if ( completed ) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( this[ 0 ] ) {
				if ( jQuery.isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );


	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};




	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );

	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if ( !context ) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {

			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var docElem, win, rect, doc,
				elem = this[ 0 ];

			if ( !elem ) {
				return;
			}

			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}

			rect = elem.getBoundingClientRect();

			// Make sure element is not hidden (display: none)
			if ( rect.width || rect.height ) {
				doc = elem.ownerDocument;
				win = getWindow( doc );
				docElem = doc.documentElement;

				return {
					top: rect.top + win.pageYOffset - docElem.clientTop,
					left: rect.left + win.pageXOffset - docElem.clientLeft
				};
			}

			// Return zeros for disconnected and hidden elements (gh-2310)
			return rect;
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset = {
					top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
					left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
				};
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf( "outer" ) === 0 ?
							elem[ "inner" + name ] :
							elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );

	jQuery.parseJSON = JSON.parse;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}





	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}


	return jQuery;
	} );


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*globals jQuery, define, module, exports, require, window, document, postMessage */
	(function (factory) {
		"use strict";
		if (true) {
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(67)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}
		else if(typeof module !== 'undefined' && module.exports) {
			module.exports = factory(require('jquery'));
		}
		else {
			factory(jQuery);
		}
	}(function ($, undefined) {
		"use strict";
	/*!
	 * jsTree 3.3.1
	 * http://jstree.com/
	 *
	 * Copyright (c) 2014 Ivan Bozhanov (http://vakata.com)
	 *
	 * Licensed same as jquery - under the terms of the MIT License
	 *   http://www.opensource.org/licenses/mit-license.php
	 */
	/*!
	 * if using jslint please allow for the jQuery global and use following options:
	 * jslint: loopfunc: true, browser: true, ass: true, bitwise: true, continue: true, nomen: true, plusplus: true, regexp: true, unparam: true, todo: true, white: true
	 */
	/*jshint -W083 */

		// prevent another load? maybe there is a better way?
		if($.jstree) {
			return;
		}

		/**
		 * ### jsTree core functionality
		 */

		// internal variables
		var instance_counter = 0,
			ccp_node = false,
			ccp_mode = false,
			ccp_inst = false,
			themes_loaded = [],
			src = $('script:last').attr('src'),
			document = window.document, // local variable is always faster to access then a global
			_node = document.createElement('LI'), _temp1, _temp2;

		_node.setAttribute('role', 'treeitem');
		_temp1 = document.createElement('I');
		_temp1.className = 'jstree-icon jstree-ocl';
		_temp1.setAttribute('role', 'presentation');
		_node.appendChild(_temp1);
		_temp1 = document.createElement('A');
		_temp1.className = 'jstree-anchor';
		_temp1.setAttribute('href','#');
		_temp1.setAttribute('tabindex','-1');
		_temp2 = document.createElement('I');
		_temp2.className = 'jstree-icon jstree-themeicon';
		_temp2.setAttribute('role', 'presentation');
		_temp1.appendChild(_temp2);
		_node.appendChild(_temp1);
		_temp1 = _temp2 = null;


		/**
		 * holds all jstree related functions and variables, including the actual class and methods to create, access and manipulate instances.
		 * @name $.jstree
		 */
		$.jstree = {
			/**
			 * specifies the jstree version in use
			 * @name $.jstree.version
			 */
			version : '3.3.1',
			/**
			 * holds all the default options used when creating new instances
			 * @name $.jstree.defaults
			 */
			defaults : {
				/**
				 * configure which plugins will be active on an instance. Should be an array of strings, where each element is a plugin name. The default is `[]`
				 * @name $.jstree.defaults.plugins
				 */
				plugins : []
			},
			/**
			 * stores all loaded jstree plugins (used internally)
			 * @name $.jstree.plugins
			 */
			plugins : {},
			path : src && src.indexOf('/') !== -1 ? src.replace(/\/[^\/]+$/,'') : '',
			idregex : /[\\:&!^|()\[\]<>@*'+~#";.,=\- \/${}%?`]/g,
			root : '#'
		};
		/**
		 * creates a jstree instance
		 * @name $.jstree.create(el [, options])
		 * @param {DOMElement|jQuery|String} el the element to create the instance on, can be jQuery extended or a selector
		 * @param {Object} options options for this instance (extends `$.jstree.defaults`)
		 * @return {jsTree} the new instance
		 */
		$.jstree.create = function (el, options) {
			var tmp = new $.jstree.core(++instance_counter),
				opt = options;
			options = $.extend(true, {}, $.jstree.defaults, options);
			if(opt && opt.plugins) {
				options.plugins = opt.plugins;
			}
			$.each(options.plugins, function (i, k) {
				if(i !== 'core') {
					tmp = tmp.plugin(k, options[k]);
				}
			});
			$(el).data('jstree', tmp);
			tmp.init(el, options);
			return tmp;
		};
		/**
		 * remove all traces of jstree from the DOM and destroy all instances
		 * @name $.jstree.destroy()
		 */
		$.jstree.destroy = function () {
			$('.jstree:jstree').jstree('destroy');
			$(document).off('.jstree');
		};
		/**
		 * the jstree class constructor, used only internally
		 * @private
		 * @name $.jstree.core(id)
		 * @param {Number} id this instance's index
		 */
		$.jstree.core = function (id) {
			this._id = id;
			this._cnt = 0;
			this._wrk = null;
			this._data = {
				core : {
					themes : {
						name : false,
						dots : false,
						icons : false
					},
					selected : [],
					last_error : {},
					working : false,
					worker_queue : [],
					focused : null
				}
			};
		};
		/**
		 * get a reference to an existing instance
		 *
		 * __Examples__
		 *
		 *	// provided a container with an ID of "tree", and a nested node with an ID of "branch"
		 *	// all of there will return the same instance
		 *	$.jstree.reference('tree');
		 *	$.jstree.reference('#tree');
		 *	$.jstree.reference($('#tree'));
		 *	$.jstree.reference(document.getElementByID('tree'));
		 *	$.jstree.reference('branch');
		 *	$.jstree.reference('#branch');
		 *	$.jstree.reference($('#branch'));
		 *	$.jstree.reference(document.getElementByID('branch'));
		 *
		 * @name $.jstree.reference(needle)
		 * @param {DOMElement|jQuery|String} needle
		 * @return {jsTree|null} the instance or `null` if not found
		 */
		$.jstree.reference = function (needle) {
			var tmp = null,
				obj = null;
			if(needle && needle.id && (!needle.tagName || !needle.nodeType)) { needle = needle.id; }

			if(!obj || !obj.length) {
				try { obj = $(needle); } catch (ignore) { }
			}
			if(!obj || !obj.length) {
				try { obj = $('#' + needle.replace($.jstree.idregex,'\\$&')); } catch (ignore) { }
			}
			if(obj && obj.length && (obj = obj.closest('.jstree')).length && (obj = obj.data('jstree'))) {
				tmp = obj;
			}
			else {
				$('.jstree').each(function () {
					var inst = $(this).data('jstree');
					if(inst && inst._model.data[needle]) {
						tmp = inst;
						return false;
					}
				});
			}
			return tmp;
		};
		/**
		 * Create an instance, get an instance or invoke a command on a instance.
		 *
		 * If there is no instance associated with the current node a new one is created and `arg` is used to extend `$.jstree.defaults` for this new instance. There would be no return value (chaining is not broken).
		 *
		 * If there is an existing instance and `arg` is a string the command specified by `arg` is executed on the instance, with any additional arguments passed to the function. If the function returns a value it will be returned (chaining could break depending on function).
		 *
		 * If there is an existing instance and `arg` is not a string the instance itself is returned (similar to `$.jstree.reference`).
		 *
		 * In any other case - nothing is returned and chaining is not broken.
		 *
		 * __Examples__
		 *
		 *	$('#tree1').jstree(); // creates an instance
		 *	$('#tree2').jstree({ plugins : [] }); // create an instance with some options
		 *	$('#tree1').jstree('open_node', '#branch_1'); // call a method on an existing instance, passing additional arguments
		 *	$('#tree2').jstree(); // get an existing instance (or create an instance)
		 *	$('#tree2').jstree(true); // get an existing instance (will not create new instance)
		 *	$('#branch_1').jstree().select_node('#branch_1'); // get an instance (using a nested element and call a method)
		 *
		 * @name $().jstree([arg])
		 * @param {String|Object} arg
		 * @return {Mixed}
		 */
		$.fn.jstree = function (arg) {
			// check for string argument
			var is_method	= (typeof arg === 'string'),
				args		= Array.prototype.slice.call(arguments, 1),
				result		= null;
			if(arg === true && !this.length) { return false; }
			this.each(function () {
				// get the instance (if there is one) and method (if it exists)
				var instance = $.jstree.reference(this),
					method = is_method && instance ? instance[arg] : null;
				// if calling a method, and method is available - execute on the instance
				result = is_method && method ?
					method.apply(instance, args) :
					null;
				// if there is no instance and no method is being called - create one
				if(!instance && !is_method && (arg === undefined || $.isPlainObject(arg))) {
					$.jstree.create(this, arg);
				}
				// if there is an instance and no method is called - return the instance
				if( (instance && !is_method) || arg === true ) {
					result = instance || false;
				}
				// if there was a method call which returned a result - break and return the value
				if(result !== null && result !== undefined) {
					return false;
				}
			});
			// if there was a method call with a valid return value - return that, otherwise continue the chain
			return result !== null && result !== undefined ?
				result : this;
		};
		/**
		 * used to find elements containing an instance
		 *
		 * __Examples__
		 *
		 *	$('div:jstree').each(function () {
		 *		$(this).jstree('destroy');
		 *	});
		 *
		 * @name $(':jstree')
		 * @return {jQuery}
		 */
		$.expr[':'].jstree = $.expr.createPseudo(function(search) {
			return function(a) {
				return $(a).hasClass('jstree') &&
					$(a).data('jstree') !== undefined;
			};
		});

		/**
		 * stores all defaults for the core
		 * @name $.jstree.defaults.core
		 */
		$.jstree.defaults.core = {
			/**
			 * data configuration
			 *
			 * If left as `false` the HTML inside the jstree container element is used to populate the tree (that should be an unordered list with list items).
			 *
			 * You can also pass in a HTML string or a JSON array here.
			 *
			 * It is possible to pass in a standard jQuery-like AJAX config and jstree will automatically determine if the response is JSON or HTML and use that to populate the tree.
			 * In addition to the standard jQuery ajax options here you can suppy functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node is being loaded, the return value of those functions will be used.
			 *
			 * The last option is to specify a function, that function will receive the node being loaded as argument and a second param which is a function which should be called with the result.
			 *
			 * __Examples__
			 *
			 *	// AJAX
			 *	$('#tree').jstree({
			 *		'core' : {
			 *			'data' : {
			 *				'url' : '/get/children/',
			 *				'data' : function (node) {
			 *					return { 'id' : node.id };
			 *				}
			 *			}
			 *		});
			 *
			 *	// direct data
			 *	$('#tree').jstree({
			 *		'core' : {
			 *			'data' : [
			 *				'Simple root node',
			 *				{
			 *					'id' : 'node_2',
			 *					'text' : 'Root node with options',
			 *					'state' : { 'opened' : true, 'selected' : true },
			 *					'children' : [ { 'text' : 'Child 1' }, 'Child 2']
			 *				}
			 *			]
			 *		}
			 *	});
			 *
			 *	// function
			 *	$('#tree').jstree({
			 *		'core' : {
			 *			'data' : function (obj, callback) {
			 *				callback.call(this, ['Root 1', 'Root 2']);
			 *			}
			 *		});
			 *
			 * @name $.jstree.defaults.core.data
			 */
			data			: false,
			/**
			 * configure the various strings used throughout the tree
			 *
			 * You can use an object where the key is the string you need to replace and the value is your replacement.
			 * Another option is to specify a function which will be called with an argument of the needed string and should return the replacement.
			 * If left as `false` no replacement is made.
			 *
			 * __Examples__
			 *
			 *	$('#tree').jstree({
			 *		'core' : {
			 *			'strings' : {
			 *				'Loading ...' : 'Please wait ...'
			 *			}
			 *		}
			 *	});
			 *
			 * @name $.jstree.defaults.core.strings
			 */
			strings			: false,
			/**
			 * determines what happens when a user tries to modify the structure of the tree
			 * If left as `false` all operations like create, rename, delete, move or copy are prevented.
			 * You can set this to `true` to allow all interactions or use a function to have better control.
			 *
			 * __Examples__
			 *
			 *	$('#tree').jstree({
			 *		'core' : {
			 *			'check_callback' : function (operation, node, node_parent, node_position, more) {
			 *				// operation can be 'create_node', 'rename_node', 'delete_node', 'move_node' or 'copy_node'
			 *				// in case of 'rename_node' node_position is filled with the new node name
			 *				return operation === 'rename_node' ? true : false;
			 *			}
			 *		}
			 *	});
			 *
			 * @name $.jstree.defaults.core.check_callback
			 */
			check_callback	: false,
			/**
			 * a callback called with a single object parameter in the instance's scope when something goes wrong (operation prevented, ajax failed, etc)
			 * @name $.jstree.defaults.core.error
			 */
			error			: $.noop,
			/**
			 * the open / close animation duration in milliseconds - set this to `false` to disable the animation (default is `200`)
			 * @name $.jstree.defaults.core.animation
			 */
			animation		: 200,
			/**
			 * a boolean indicating if multiple nodes can be selected
			 * @name $.jstree.defaults.core.multiple
			 */
			multiple		: true,
			/**
			 * theme configuration object
			 * @name $.jstree.defaults.core.themes
			 */
			themes			: {
				/**
				 * the name of the theme to use (if left as `false` the default theme is used)
				 * @name $.jstree.defaults.core.themes.name
				 */
				name			: false,
				/**
				 * the URL of the theme's CSS file, leave this as `false` if you have manually included the theme CSS (recommended). You can set this to `true` too which will try to autoload the theme.
				 * @name $.jstree.defaults.core.themes.url
				 */
				url				: false,
				/**
				 * the location of all jstree themes - only used if `url` is set to `true`
				 * @name $.jstree.defaults.core.themes.dir
				 */
				dir				: false,
				/**
				 * a boolean indicating if connecting dots are shown
				 * @name $.jstree.defaults.core.themes.dots
				 */
				dots			: true,
				/**
				 * a boolean indicating if node icons are shown
				 * @name $.jstree.defaults.core.themes.icons
				 */
				icons			: true,
				/**
				 * a boolean indicating if the tree background is striped
				 * @name $.jstree.defaults.core.themes.stripes
				 */
				stripes			: false,
				/**
				 * a string (or boolean `false`) specifying the theme variant to use (if the theme supports variants)
				 * @name $.jstree.defaults.core.themes.variant
				 */
				variant			: false,
				/**
				 * a boolean specifying if a reponsive version of the theme should kick in on smaller screens (if the theme supports it). Defaults to `false`.
				 * @name $.jstree.defaults.core.themes.responsive
				 */
				responsive		: false
			},
			/**
			 * if left as `true` all parents of all selected nodes will be opened once the tree loads (so that all selected nodes are visible to the user)
			 * @name $.jstree.defaults.core.expand_selected_onload
			 */
			expand_selected_onload : true,
			/**
			 * if left as `true` web workers will be used to parse incoming JSON data where possible, so that the UI will not be blocked by large requests. Workers are however about 30% slower. Defaults to `true`
			 * @name $.jstree.defaults.core.worker
			 */
			worker : true,
			/**
			 * Force node text to plain text (and escape HTML). Defaults to `false`
			 * @name $.jstree.defaults.core.force_text
			 */
			force_text : false,
			/**
			 * Should the node should be toggled if the text is double clicked . Defaults to `true`
			 * @name $.jstree.defaults.core.dblclick_toggle
			 */
			dblclick_toggle : true
		};
		$.jstree.core.prototype = {
			/**
			 * used to decorate an instance with a plugin. Used internally.
			 * @private
			 * @name plugin(deco [, opts])
			 * @param  {String} deco the plugin to decorate with
			 * @param  {Object} opts options for the plugin
			 * @return {jsTree}
			 */
			plugin : function (deco, opts) {
				var Child = $.jstree.plugins[deco];
				if(Child) {
					this._data[deco] = {};
					Child.prototype = this;
					return new Child(opts, this);
				}
				return this;
			},
			/**
			 * initialize the instance. Used internally.
			 * @private
			 * @name init(el, optons)
			 * @param {DOMElement|jQuery|String} el the element we are transforming
			 * @param {Object} options options for this instance
			 * @trigger init.jstree, loading.jstree, loaded.jstree, ready.jstree, changed.jstree
			 */
			init : function (el, options) {
				this._model = {
					data : {},
					changed : [],
					force_full_redraw : false,
					redraw_timeout : false,
					default_state : {
						loaded : true,
						opened : false,
						selected : false,
						disabled : false
					}
				};
				this._model.data[$.jstree.root] = {
					id : $.jstree.root,
					parent : null,
					parents : [],
					children : [],
					children_d : [],
					state : { loaded : false }
				};

				this.element = $(el).addClass('jstree jstree-' + this._id);
				this.settings = options;

				this._data.core.ready = false;
				this._data.core.loaded = false;
				this._data.core.rtl = (this.element.css("direction") === "rtl");
				this.element[this._data.core.rtl ? 'addClass' : 'removeClass']("jstree-rtl");
				this.element.attr('role','tree');
				if(this.settings.core.multiple) {
					this.element.attr('aria-multiselectable', true);
				}
				if(!this.element.attr('tabindex')) {
					this.element.attr('tabindex','0');
				}

				this.bind();
				/**
				 * triggered after all events are bound
				 * @event
				 * @name init.jstree
				 */
				this.trigger("init");

				this._data.core.original_container_html = this.element.find(" > ul > li").clone(true);
				this._data.core.original_container_html
					.find("li").addBack()
					.contents().filter(function() {
						return this.nodeType === 3 && (!this.nodeValue || /^\s+$/.test(this.nodeValue));
					})
					.remove();
				this.element.html("<"+"ul class='jstree-container-ul jstree-children' role='group'><"+"li id='j"+this._id+"_loading' class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='tree-item'><i class='jstree-icon jstree-ocl'></i><"+"a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>" + this.get_string("Loading ...") + "</a></li></ul>");
				this.element.attr('aria-activedescendant','j' + this._id + '_loading');
				this._data.core.li_height = this.get_container_ul().children("li").first().height() || 24;
				/**
				 * triggered after the loading text is shown and before loading starts
				 * @event
				 * @name loading.jstree
				 */
				this.trigger("loading");
				this.load_node($.jstree.root);
			},
			/**
			 * destroy an instance
			 * @name destroy()
			 * @param  {Boolean} keep_html if not set to `true` the container will be emptied, otherwise the current DOM elements will be kept intact
			 */
			destroy : function (keep_html) {
				if(this._wrk) {
					try {
						window.URL.revokeObjectURL(this._wrk);
						this._wrk = null;
					}
					catch (ignore) { }
				}
				if(!keep_html) { this.element.empty(); }
				this.teardown();
			},
			/**
			 * part of the destroying of an instance. Used internally.
			 * @private
			 * @name teardown()
			 */
			teardown : function () {
				this.unbind();
				this.element
					.removeClass('jstree')
					.removeData('jstree')
					.find("[class^='jstree']")
						.addBack()
						.attr("class", function () { return this.className.replace(/jstree[^ ]*|$/ig,''); });
				this.element = null;
			},
			/**
			 * bind all events. Used internally.
			 * @private
			 * @name bind()
			 */
			bind : function () {
				var word = '',
					tout = null,
					was_click = 0;
				this.element
					.on("dblclick.jstree", function (e) {
							if(e.target.tagName && e.target.tagName.toLowerCase() === "input") { return true; }
							if(document.selection && document.selection.empty) {
								document.selection.empty();
							}
							else {
								if(window.getSelection) {
									var sel = window.getSelection();
									try {
										sel.removeAllRanges();
										sel.collapse();
									} catch (ignore) { }
								}
							}
						})
					.on("mousedown.jstree", $.proxy(function (e) {
							if(e.target === this.element[0]) {
								e.preventDefault(); // prevent losing focus when clicking scroll arrows (FF, Chrome)
								was_click = +(new Date()); // ie does not allow to prevent losing focus
							}
						}, this))
					.on("mousedown.jstree", ".jstree-ocl", function (e) {
							e.preventDefault(); // prevent any node inside from losing focus when clicking the open/close icon
						})
					.on("click.jstree", ".jstree-ocl", $.proxy(function (e) {
							this.toggle_node(e.target);
						}, this))
					.on("dblclick.jstree", ".jstree-anchor", $.proxy(function (e) {
							if(e.target.tagName && e.target.tagName.toLowerCase() === "input") { return true; }
							if(this.settings.core.dblclick_toggle) {
								this.toggle_node(e.target);
							}
						}, this))
					.on("click.jstree", ".jstree-anchor", $.proxy(function (e) {
							e.preventDefault();
							if(e.currentTarget !== document.activeElement) { $(e.currentTarget).focus(); }
							this.activate_node(e.currentTarget, e);
						}, this))
					.on('keydown.jstree', '.jstree-anchor', $.proxy(function (e) {
							if(e.target.tagName && e.target.tagName.toLowerCase() === "input") { return true; }
							if(e.which !== 32 && e.which !== 13 && (e.shiftKey || e.ctrlKey || e.altKey || e.metaKey)) { return true; }
							var o = null;
							if(this._data.core.rtl) {
								if(e.which === 37) { e.which = 39; }
								else if(e.which === 39) { e.which = 37; }
							}
							switch(e.which) {
								case 32: // aria defines space only with Ctrl
									if(e.ctrlKey) {
										e.type = "click";
										$(e.currentTarget).trigger(e);
									}
									break;
								case 13: // enter
									e.type = "click";
									$(e.currentTarget).trigger(e);
									break;
								case 37: // left
									e.preventDefault();
									if(this.is_open(e.currentTarget)) {
										this.close_node(e.currentTarget);
									}
									else {
										o = this.get_parent(e.currentTarget);
										if(o && o.id !== $.jstree.root) { this.get_node(o, true).children('.jstree-anchor').focus(); }
									}
									break;
								case 38: // up
									e.preventDefault();
									o = this.get_prev_dom(e.currentTarget);
									if(o && o.length) { o.children('.jstree-anchor').focus(); }
									break;
								case 39: // right
									e.preventDefault();
									if(this.is_closed(e.currentTarget)) {
										this.open_node(e.currentTarget, function (o) { this.get_node(o, true).children('.jstree-anchor').focus(); });
									}
									else if (this.is_open(e.currentTarget)) {
										o = this.get_node(e.currentTarget, true).children('.jstree-children')[0];
										if(o) { $(this._firstChild(o)).children('.jstree-anchor').focus(); }
									}
									break;
								case 40: // down
									e.preventDefault();
									o = this.get_next_dom(e.currentTarget);
									if(o && o.length) { o.children('.jstree-anchor').focus(); }
									break;
								case 106: // aria defines * on numpad as open_all - not very common
									this.open_all();
									break;
								case 36: // home
									e.preventDefault();
									o = this._firstChild(this.get_container_ul()[0]);
									if(o) { $(o).children('.jstree-anchor').filter(':visible').focus(); }
									break;
								case 35: // end
									e.preventDefault();
									this.element.find('.jstree-anchor').filter(':visible').last().focus();
									break;
								case 113: // f2 - safe to include - if check_callback is false it will fail
									e.preventDefault();
									this.edit(e.currentTarget);
									break;
								default:
									break;
								/*!
								// delete
								case 46:
									e.preventDefault();
									o = this.get_node(e.currentTarget);
									if(o && o.id && o.id !== $.jstree.root) {
										o = this.is_selected(o) ? this.get_selected() : o;
										this.delete_node(o);
									}
									break;

								*/
							}
						}, this))
					.on("load_node.jstree", $.proxy(function (e, data) {
							if(data.status) {
								if(data.node.id === $.jstree.root && !this._data.core.loaded) {
									this._data.core.loaded = true;
									if(this._firstChild(this.get_container_ul()[0])) {
										this.element.attr('aria-activedescendant',this._firstChild(this.get_container_ul()[0]).id);
									}
									/**
									 * triggered after the root node is loaded for the first time
									 * @event
									 * @name loaded.jstree
									 */
									this.trigger("loaded");
								}
								if(!this._data.core.ready) {
									setTimeout($.proxy(function() {
										if(this.element && !this.get_container_ul().find('.jstree-loading').length) {
											this._data.core.ready = true;
											if(this._data.core.selected.length) {
												if(this.settings.core.expand_selected_onload) {
													var tmp = [], i, j;
													for(i = 0, j = this._data.core.selected.length; i < j; i++) {
														tmp = tmp.concat(this._model.data[this._data.core.selected[i]].parents);
													}
													tmp = $.vakata.array_unique(tmp);
													for(i = 0, j = tmp.length; i < j; i++) {
														this.open_node(tmp[i], false, 0);
													}
												}
												this.trigger('changed', { 'action' : 'ready', 'selected' : this._data.core.selected });
											}
											/**
											 * triggered after all nodes are finished loading
											 * @event
											 * @name ready.jstree
											 */
											this.trigger("ready");
										}
									}, this), 0);
								}
							}
						}, this))
					// quick searching when the tree is focused
					.on('keypress.jstree', $.proxy(function (e) {
							if(e.target.tagName && e.target.tagName.toLowerCase() === "input") { return true; }
							if(tout) { clearTimeout(tout); }
							tout = setTimeout(function () {
								word = '';
							}, 500);

							var chr = String.fromCharCode(e.which).toLowerCase(),
								col = this.element.find('.jstree-anchor').filter(':visible'),
								ind = col.index(document.activeElement) || 0,
								end = false;
							word += chr;

							// match for whole word from current node down (including the current node)
							if(word.length > 1) {
								col.slice(ind).each($.proxy(function (i, v) {
									if($(v).text().toLowerCase().indexOf(word) === 0) {
										$(v).focus();
										end = true;
										return false;
									}
								}, this));
								if(end) { return; }

								// match for whole word from the beginning of the tree
								col.slice(0, ind).each($.proxy(function (i, v) {
									if($(v).text().toLowerCase().indexOf(word) === 0) {
										$(v).focus();
										end = true;
										return false;
									}
								}, this));
								if(end) { return; }
							}
							// list nodes that start with that letter (only if word consists of a single char)
							if(new RegExp('^' + chr.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&') + '+$').test(word)) {
								// search for the next node starting with that letter
								col.slice(ind + 1).each($.proxy(function (i, v) {
									if($(v).text().toLowerCase().charAt(0) === chr) {
										$(v).focus();
										end = true;
										return false;
									}
								}, this));
								if(end) { return; }

								// search from the beginning
								col.slice(0, ind + 1).each($.proxy(function (i, v) {
									if($(v).text().toLowerCase().charAt(0) === chr) {
										$(v).focus();
										end = true;
										return false;
									}
								}, this));
								if(end) { return; }
							}
						}, this))
					// THEME RELATED
					.on("init.jstree", $.proxy(function () {
							var s = this.settings.core.themes;
							this._data.core.themes.dots			= s.dots;
							this._data.core.themes.stripes		= s.stripes;
							this._data.core.themes.icons		= s.icons;
							this.set_theme(s.name || "default", s.url);
							this.set_theme_variant(s.variant);
						}, this))
					.on("loading.jstree", $.proxy(function () {
							this[ this._data.core.themes.dots ? "show_dots" : "hide_dots" ]();
							this[ this._data.core.themes.icons ? "show_icons" : "hide_icons" ]();
							this[ this._data.core.themes.stripes ? "show_stripes" : "hide_stripes" ]();
						}, this))
					.on('blur.jstree', '.jstree-anchor', $.proxy(function (e) {
							this._data.core.focused = null;
							$(e.currentTarget).filter('.jstree-hovered').mouseleave();
							this.element.attr('tabindex', '0');
						}, this))
					.on('focus.jstree', '.jstree-anchor', $.proxy(function (e) {
							var tmp = this.get_node(e.currentTarget);
							if(tmp && tmp.id) {
								this._data.core.focused = tmp.id;
							}
							this.element.find('.jstree-hovered').not(e.currentTarget).mouseleave();
							$(e.currentTarget).mouseenter();
							this.element.attr('tabindex', '-1');
						}, this))
					.on('focus.jstree', $.proxy(function () {
							if(+(new Date()) - was_click > 500 && !this._data.core.focused) {
								was_click = 0;
								var act = this.get_node(this.element.attr('aria-activedescendant'), true);
								if(act) {
									act.find('> .jstree-anchor').focus();
								}
							}
						}, this))
					.on('mouseenter.jstree', '.jstree-anchor', $.proxy(function (e) {
							this.hover_node(e.currentTarget);
						}, this))
					.on('mouseleave.jstree', '.jstree-anchor', $.proxy(function (e) {
							this.dehover_node(e.currentTarget);
						}, this));
			},
			/**
			 * part of the destroying of an instance. Used internally.
			 * @private
			 * @name unbind()
			 */
			unbind : function () {
				this.element.off('.jstree');
				$(document).off('.jstree-' + this._id);
			},
			/**
			 * trigger an event. Used internally.
			 * @private
			 * @name trigger(ev [, data])
			 * @param  {String} ev the name of the event to trigger
			 * @param  {Object} data additional data to pass with the event
			 */
			trigger : function (ev, data) {
				if(!data) {
					data = {};
				}
				data.instance = this;
				this.element.triggerHandler(ev.replace('.jstree','') + '.jstree', data);
			},
			/**
			 * returns the jQuery extended instance container
			 * @name get_container()
			 * @return {jQuery}
			 */
			get_container : function () {
				return this.element;
			},
			/**
			 * returns the jQuery extended main UL node inside the instance container. Used internally.
			 * @private
			 * @name get_container_ul()
			 * @return {jQuery}
			 */
			get_container_ul : function () {
				return this.element.children(".jstree-children").first();
			},
			/**
			 * gets string replacements (localization). Used internally.
			 * @private
			 * @name get_string(key)
			 * @param  {String} key
			 * @return {String}
			 */
			get_string : function (key) {
				var a = this.settings.core.strings;
				if($.isFunction(a)) { return a.call(this, key); }
				if(a && a[key]) { return a[key]; }
				return key;
			},
			/**
			 * gets the first child of a DOM node. Used internally.
			 * @private
			 * @name _firstChild(dom)
			 * @param  {DOMElement} dom
			 * @return {DOMElement}
			 */
			_firstChild : function (dom) {
				dom = dom ? dom.firstChild : null;
				while(dom !== null && dom.nodeType !== 1) {
					dom = dom.nextSibling;
				}
				return dom;
			},
			/**
			 * gets the next sibling of a DOM node. Used internally.
			 * @private
			 * @name _nextSibling(dom)
			 * @param  {DOMElement} dom
			 * @return {DOMElement}
			 */
			_nextSibling : function (dom) {
				dom = dom ? dom.nextSibling : null;
				while(dom !== null && dom.nodeType !== 1) {
					dom = dom.nextSibling;
				}
				return dom;
			},
			/**
			 * gets the previous sibling of a DOM node. Used internally.
			 * @private
			 * @name _previousSibling(dom)
			 * @param  {DOMElement} dom
			 * @return {DOMElement}
			 */
			_previousSibling : function (dom) {
				dom = dom ? dom.previousSibling : null;
				while(dom !== null && dom.nodeType !== 1) {
					dom = dom.previousSibling;
				}
				return dom;
			},
			/**
			 * get the JSON representation of a node (or the actual jQuery extended DOM node) by using any input (child DOM element, ID string, selector, etc)
			 * @name get_node(obj [, as_dom])
			 * @param  {mixed} obj
			 * @param  {Boolean} as_dom
			 * @return {Object|jQuery}
			 */
			get_node : function (obj, as_dom) {
				if(obj && obj.id) {
					obj = obj.id;
				}
				var dom;
				try {
					if(this._model.data[obj]) {
						obj = this._model.data[obj];
					}
					else if(typeof obj === "string" && this._model.data[obj.replace(/^#/, '')]) {
						obj = this._model.data[obj.replace(/^#/, '')];
					}
					else if(typeof obj === "string" && (dom = $('#' + obj.replace($.jstree.idregex,'\\$&'), this.element)).length && this._model.data[dom.closest('.jstree-node').attr('id')]) {
						obj = this._model.data[dom.closest('.jstree-node').attr('id')];
					}
					else if((dom = $(obj, this.element)).length && this._model.data[dom.closest('.jstree-node').attr('id')]) {
						obj = this._model.data[dom.closest('.jstree-node').attr('id')];
					}
					else if((dom = $(obj, this.element)).length && dom.hasClass('jstree')) {
						obj = this._model.data[$.jstree.root];
					}
					else {
						return false;
					}

					if(as_dom) {
						obj = obj.id === $.jstree.root ? this.element : $('#' + obj.id.replace($.jstree.idregex,'\\$&'), this.element);
					}
					return obj;
				} catch (ex) { return false; }
			},
			/**
			 * get the path to a node, either consisting of node texts, or of node IDs, optionally glued together (otherwise an array)
			 * @name get_path(obj [, glue, ids])
			 * @param  {mixed} obj the node
			 * @param  {String} glue if you want the path as a string - pass the glue here (for example '/'), if a falsy value is supplied here, an array is returned
			 * @param  {Boolean} ids if set to true build the path using ID, otherwise node text is used
			 * @return {mixed}
			 */
			get_path : function (obj, glue, ids) {
				obj = obj.parents ? obj : this.get_node(obj);
				if(!obj || obj.id === $.jstree.root || !obj.parents) {
					return false;
				}
				var i, j, p = [];
				p.push(ids ? obj.id : obj.text);
				for(i = 0, j = obj.parents.length; i < j; i++) {
					p.push(ids ? obj.parents[i] : this.get_text(obj.parents[i]));
				}
				p = p.reverse().slice(1);
				return glue ? p.join(glue) : p;
			},
			/**
			 * get the next visible node that is below the `obj` node. If `strict` is set to `true` only sibling nodes are returned.
			 * @name get_next_dom(obj [, strict])
			 * @param  {mixed} obj
			 * @param  {Boolean} strict
			 * @return {jQuery}
			 */
			get_next_dom : function (obj, strict) {
				var tmp;
				obj = this.get_node(obj, true);
				if(obj[0] === this.element[0]) {
					tmp = this._firstChild(this.get_container_ul()[0]);
					while (tmp && tmp.offsetHeight === 0) {
						tmp = this._nextSibling(tmp);
					}
					return tmp ? $(tmp) : false;
				}
				if(!obj || !obj.length) {
					return false;
				}
				if(strict) {
					tmp = obj[0];
					do {
						tmp = this._nextSibling(tmp);
					} while (tmp && tmp.offsetHeight === 0);
					return tmp ? $(tmp) : false;
				}
				if(obj.hasClass("jstree-open")) {
					tmp = this._firstChild(obj.children('.jstree-children')[0]);
					while (tmp && tmp.offsetHeight === 0) {
						tmp = this._nextSibling(tmp);
					}
					if(tmp !== null) {
						return $(tmp);
					}
				}
				tmp = obj[0];
				do {
					tmp = this._nextSibling(tmp);
				} while (tmp && tmp.offsetHeight === 0);
				if(tmp !== null) {
					return $(tmp);
				}
				return obj.parentsUntil(".jstree",".jstree-node").nextAll(".jstree-node:visible").first();
			},
			/**
			 * get the previous visible node that is above the `obj` node. If `strict` is set to `true` only sibling nodes are returned.
			 * @name get_prev_dom(obj [, strict])
			 * @param  {mixed} obj
			 * @param  {Boolean} strict
			 * @return {jQuery}
			 */
			get_prev_dom : function (obj, strict) {
				var tmp;
				obj = this.get_node(obj, true);
				if(obj[0] === this.element[0]) {
					tmp = this.get_container_ul()[0].lastChild;
					while (tmp && tmp.offsetHeight === 0) {
						tmp = this._previousSibling(tmp);
					}
					return tmp ? $(tmp) : false;
				}
				if(!obj || !obj.length) {
					return false;
				}
				if(strict) {
					tmp = obj[0];
					do {
						tmp = this._previousSibling(tmp);
					} while (tmp && tmp.offsetHeight === 0);
					return tmp ? $(tmp) : false;
				}
				tmp = obj[0];
				do {
					tmp = this._previousSibling(tmp);
				} while (tmp && tmp.offsetHeight === 0);
				if(tmp !== null) {
					obj = $(tmp);
					while(obj.hasClass("jstree-open")) {
						obj = obj.children(".jstree-children").first().children(".jstree-node:visible:last");
					}
					return obj;
				}
				tmp = obj[0].parentNode.parentNode;
				return tmp && tmp.className && tmp.className.indexOf('jstree-node') !== -1 ? $(tmp) : false;
			},
			/**
			 * get the parent ID of a node
			 * @name get_parent(obj)
			 * @param  {mixed} obj
			 * @return {String}
			 */
			get_parent : function (obj) {
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) {
					return false;
				}
				return obj.parent;
			},
			/**
			 * get a jQuery collection of all the children of a node (node must be rendered)
			 * @name get_children_dom(obj)
			 * @param  {mixed} obj
			 * @return {jQuery}
			 */
			get_children_dom : function (obj) {
				obj = this.get_node(obj, true);
				if(obj[0] === this.element[0]) {
					return this.get_container_ul().children(".jstree-node");
				}
				if(!obj || !obj.length) {
					return false;
				}
				return obj.children(".jstree-children").children(".jstree-node");
			},
			/**
			 * checks if a node has children
			 * @name is_parent(obj)
			 * @param  {mixed} obj
			 * @return {Boolean}
			 */
			is_parent : function (obj) {
				obj = this.get_node(obj);
				return obj && (obj.state.loaded === false || obj.children.length > 0);
			},
			/**
			 * checks if a node is loaded (its children are available)
			 * @name is_loaded(obj)
			 * @param  {mixed} obj
			 * @return {Boolean}
			 */
			is_loaded : function (obj) {
				obj = this.get_node(obj);
				return obj && obj.state.loaded;
			},
			/**
			 * check if a node is currently loading (fetching children)
			 * @name is_loading(obj)
			 * @param  {mixed} obj
			 * @return {Boolean}
			 */
			is_loading : function (obj) {
				obj = this.get_node(obj);
				return obj && obj.state && obj.state.loading;
			},
			/**
			 * check if a node is opened
			 * @name is_open(obj)
			 * @param  {mixed} obj
			 * @return {Boolean}
			 */
			is_open : function (obj) {
				obj = this.get_node(obj);
				return obj && obj.state.opened;
			},
			/**
			 * check if a node is in a closed state
			 * @name is_closed(obj)
			 * @param  {mixed} obj
			 * @return {Boolean}
			 */
			is_closed : function (obj) {
				obj = this.get_node(obj);
				return obj && this.is_parent(obj) && !obj.state.opened;
			},
			/**
			 * check if a node has no children
			 * @name is_leaf(obj)
			 * @param  {mixed} obj
			 * @return {Boolean}
			 */
			is_leaf : function (obj) {
				return !this.is_parent(obj);
			},
			/**
			 * loads a node (fetches its children using the `core.data` setting). Multiple nodes can be passed to by using an array.
			 * @name load_node(obj [, callback])
			 * @param  {mixed} obj
			 * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives two arguments - the node and a boolean status
			 * @return {Boolean}
			 * @trigger load_node.jstree
			 */
			load_node : function (obj, callback) {
				var k, l, i, j, c;
				if($.isArray(obj)) {
					this._load_nodes(obj.slice(), callback);
					return true;
				}
				obj = this.get_node(obj);
				if(!obj) {
					if(callback) { callback.call(this, obj, false); }
					return false;
				}
				// if(obj.state.loading) { } // the node is already loading - just wait for it to load and invoke callback? but if called implicitly it should be loaded again?
				if(obj.state.loaded) {
					obj.state.loaded = false;
					for(i = 0, j = obj.parents.length; i < j; i++) {
						this._model.data[obj.parents[i]].children_d = $.vakata.array_filter(this._model.data[obj.parents[i]].children_d, function (v) {
							return $.inArray(v, obj.children_d) === -1;
						});
					}
					for(k = 0, l = obj.children_d.length; k < l; k++) {
						if(this._model.data[obj.children_d[k]].state.selected) {
							c = true;
						}
						delete this._model.data[obj.children_d[k]];
					}
					if (c) {
						this._data.core.selected = $.vakata.array_filter(this._data.core.selected, function (v) {
							return $.inArray(v, obj.children_d) === -1;
						});
					}
					obj.children = [];
					obj.children_d = [];
					if(c) {
						this.trigger('changed', { 'action' : 'load_node', 'node' : obj, 'selected' : this._data.core.selected });
					}
				}
				obj.state.failed = false;
				obj.state.loading = true;
				this.get_node(obj, true).addClass("jstree-loading").attr('aria-busy',true);
				this._load_node(obj, $.proxy(function (status) {
					obj = this._model.data[obj.id];
					obj.state.loading = false;
					obj.state.loaded = status;
					obj.state.failed = !obj.state.loaded;
					var dom = this.get_node(obj, true), i = 0, j = 0, m = this._model.data, has_children = false;
					for(i = 0, j = obj.children.length; i < j; i++) {
						if(m[obj.children[i]] && !m[obj.children[i]].state.hidden) {
							has_children = true;
							break;
						}
					}
					if(obj.state.loaded && dom && dom.length) {
						dom.removeClass('jstree-closed jstree-open jstree-leaf');
						if (!has_children) {
							dom.addClass('jstree-leaf');
						}
						else {
							if (obj.id !== '#') {
								dom.addClass(obj.state.opened ? 'jstree-open' : 'jstree-closed');
							}
						}
					}
					dom.removeClass("jstree-loading").attr('aria-busy',false);
					/**
					 * triggered after a node is loaded
					 * @event
					 * @name load_node.jstree
					 * @param {Object} node the node that was loading
					 * @param {Boolean} status was the node loaded successfully
					 */
					this.trigger('load_node', { "node" : obj, "status" : status });
					if(callback) {
						callback.call(this, obj, status);
					}
				}, this));
				return true;
			},
			/**
			 * load an array of nodes (will also load unavailable nodes as soon as the appear in the structure). Used internally.
			 * @private
			 * @name _load_nodes(nodes [, callback])
			 * @param  {array} nodes
			 * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - the array passed to _load_nodes
			 */
			_load_nodes : function (nodes, callback, is_callback, force_reload) {
				var r = true,
					c = function () { this._load_nodes(nodes, callback, true); },
					m = this._model.data, i, j, tmp = [];
				for(i = 0, j = nodes.length; i < j; i++) {
					if(m[nodes[i]] && ( (!m[nodes[i]].state.loaded && !m[nodes[i]].state.failed) || (!is_callback && force_reload) )) {
						if(!this.is_loading(nodes[i])) {
							this.load_node(nodes[i], c);
						}
						r = false;
					}
				}
				if(r) {
					for(i = 0, j = nodes.length; i < j; i++) {
						if(m[nodes[i]] && m[nodes[i]].state.loaded) {
							tmp.push(nodes[i]);
						}
					}
					if(callback && !callback.done) {
						callback.call(this, tmp);
						callback.done = true;
					}
				}
			},
			/**
			 * loads all unloaded nodes
			 * @name load_all([obj, callback])
			 * @param {mixed} obj the node to load recursively, omit to load all nodes in the tree
			 * @param {function} callback a function to be executed once loading all the nodes is complete,
			 * @trigger load_all.jstree
			 */
			load_all : function (obj, callback) {
				if(!obj) { obj = $.jstree.root; }
				obj = this.get_node(obj);
				if(!obj) { return false; }
				var to_load = [],
					m = this._model.data,
					c = m[obj.id].children_d,
					i, j;
				if(obj.state && !obj.state.loaded) {
					to_load.push(obj.id);
				}
				for(i = 0, j = c.length; i < j; i++) {
					if(m[c[i]] && m[c[i]].state && !m[c[i]].state.loaded) {
						to_load.push(c[i]);
					}
				}
				if(to_load.length) {
					this._load_nodes(to_load, function () {
						this.load_all(obj, callback);
					});
				}
				else {
					/**
					 * triggered after a load_all call completes
					 * @event
					 * @name load_all.jstree
					 * @param {Object} node the recursively loaded node
					 */
					if(callback) { callback.call(this, obj); }
					this.trigger('load_all', { "node" : obj });
				}
			},
			/**
			 * handles the actual loading of a node. Used only internally.
			 * @private
			 * @name _load_node(obj [, callback])
			 * @param  {mixed} obj
			 * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - a boolean status
			 * @return {Boolean}
			 */
			_load_node : function (obj, callback) {
				var s = this.settings.core.data, t;
				// use original HTML
				if(!s) {
					if(obj.id === $.jstree.root) {
						return this._append_html_data(obj, this._data.core.original_container_html.clone(true), function (status) {
							callback.call(this, status);
						});
					}
					else {
						return callback.call(this, false);
					}
					// return callback.call(this, obj.id === $.jstree.root ? this._append_html_data(obj, this._data.core.original_container_html.clone(true)) : false);
				}
				if($.isFunction(s)) {
					return s.call(this, obj, $.proxy(function (d) {
						if(d === false) {
							callback.call(this, false);
						}
						else {
							this[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $($.parseHTML(d)).filter(function () { return this.nodeType !== 3; }) : d, function (status) {
								callback.call(this, status);
							});
						}
						// return d === false ? callback.call(this, false) : callback.call(this, this[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $(d) : d));
					}, this));
				}
				if(typeof s === 'object') {
					if(s.url) {
						s = $.extend(true, {}, s);
						if($.isFunction(s.url)) {
							s.url = s.url.call(this, obj);
						}
						if($.isFunction(s.data)) {
							s.data = s.data.call(this, obj);
						}
						return $.ajax(s)
							.done($.proxy(function (d,t,x) {
									var type = x.getResponseHeader('Content-Type');
									if((type && type.indexOf('json') !== -1) || typeof d === "object") {
										return this._append_json_data(obj, d, function (status) { callback.call(this, status); });
										//return callback.call(this, this._append_json_data(obj, d));
									}
									if((type && type.indexOf('html') !== -1) || typeof d === "string") {
										return this._append_html_data(obj, $($.parseHTML(d)).filter(function () { return this.nodeType !== 3; }), function (status) { callback.call(this, status); });
										// return callback.call(this, this._append_html_data(obj, $(d)));
									}
									this._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'core', 'id' : 'core_04', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id, 'xhr' : x }) };
									this.settings.core.error.call(this, this._data.core.last_error);
									return callback.call(this, false);
								}, this))
							.fail($.proxy(function (f) {
									callback.call(this, false);
									this._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'core', 'id' : 'core_04', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id, 'xhr' : f }) };
									this.settings.core.error.call(this, this._data.core.last_error);
								}, this));
					}
					t = ($.isArray(s) || $.isPlainObject(s)) ? JSON.parse(JSON.stringify(s)) : s;
					if(obj.id === $.jstree.root) {
						return this._append_json_data(obj, t, function (status) {
							callback.call(this, status);
						});
					}
					else {
						this._data.core.last_error = { 'error' : 'nodata', 'plugin' : 'core', 'id' : 'core_05', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id }) };
						this.settings.core.error.call(this, this._data.core.last_error);
						return callback.call(this, false);
					}
					//return callback.call(this, (obj.id === $.jstree.root ? this._append_json_data(obj, t) : false) );
				}
				if(typeof s === 'string') {
					if(obj.id === $.jstree.root) {
						return this._append_html_data(obj, $($.parseHTML(s)).filter(function () { return this.nodeType !== 3; }), function (status) {
							callback.call(this, status);
						});
					}
					else {
						this._data.core.last_error = { 'error' : 'nodata', 'plugin' : 'core', 'id' : 'core_06', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id }) };
						this.settings.core.error.call(this, this._data.core.last_error);
						return callback.call(this, false);
					}
					//return callback.call(this, (obj.id === $.jstree.root ? this._append_html_data(obj, $(s)) : false) );
				}
				return callback.call(this, false);
			},
			/**
			 * adds a node to the list of nodes to redraw. Used only internally.
			 * @private
			 * @name _node_changed(obj [, callback])
			 * @param  {mixed} obj
			 */
			_node_changed : function (obj) {
				obj = this.get_node(obj);
				if(obj) {
					this._model.changed.push(obj.id);
				}
			},
			/**
			 * appends HTML content to the tree. Used internally.
			 * @private
			 * @name _append_html_data(obj, data)
			 * @param  {mixed} obj the node to append to
			 * @param  {String} data the HTML string to parse and append
			 * @trigger model.jstree, changed.jstree
			 */
			_append_html_data : function (dom, data, cb) {
				dom = this.get_node(dom);
				dom.children = [];
				dom.children_d = [];
				var dat = data.is('ul') ? data.children() : data,
					par = dom.id,
					chd = [],
					dpc = [],
					m = this._model.data,
					p = m[par],
					s = this._data.core.selected.length,
					tmp, i, j;
				dat.each($.proxy(function (i, v) {
					tmp = this._parse_model_from_html($(v), par, p.parents.concat());
					if(tmp) {
						chd.push(tmp);
						dpc.push(tmp);
						if(m[tmp].children_d.length) {
							dpc = dpc.concat(m[tmp].children_d);
						}
					}
				}, this));
				p.children = chd;
				p.children_d = dpc;
				for(i = 0, j = p.parents.length; i < j; i++) {
					m[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);
				}
				/**
				 * triggered when new data is inserted to the tree model
				 * @event
				 * @name model.jstree
				 * @param {Array} nodes an array of node IDs
				 * @param {String} parent the parent ID of the nodes
				 */
				this.trigger('model', { "nodes" : dpc, 'parent' : par });
				if(par !== $.jstree.root) {
					this._node_changed(par);
					this.redraw();
				}
				else {
					this.get_container_ul().children('.jstree-initial-node').remove();
					this.redraw(true);
				}
				if(this._data.core.selected.length !== s) {
					this.trigger('changed', { 'action' : 'model', 'selected' : this._data.core.selected });
				}
				cb.call(this, true);
			},
			/**
			 * appends JSON content to the tree. Used internally.
			 * @private
			 * @name _append_json_data(obj, data)
			 * @param  {mixed} obj the node to append to
			 * @param  {String} data the JSON object to parse and append
			 * @param  {Boolean} force_processing internal param - do not set
			 * @trigger model.jstree, changed.jstree
			 */
			_append_json_data : function (dom, data, cb, force_processing) {
				if(this.element === null) { return; }
				dom = this.get_node(dom);
				dom.children = [];
				dom.children_d = [];
				// *%$@!!!
				if(data.d) {
					data = data.d;
					if(typeof data === "string") {
						data = JSON.parse(data);
					}
				}
				if(!$.isArray(data)) { data = [data]; }
				var w = null,
					args = {
						'df'	: this._model.default_state,
						'dat'	: data,
						'par'	: dom.id,
						'm'		: this._model.data,
						't_id'	: this._id,
						't_cnt'	: this._cnt,
						'sel'	: this._data.core.selected
					},
					func = function (data, undefined) {
						if(data.data) { data = data.data; }
						var dat = data.dat,
							par = data.par,
							chd = [],
							dpc = [],
							add = [],
							df = data.df,
							t_id = data.t_id,
							t_cnt = data.t_cnt,
							m = data.m,
							p = m[par],
							sel = data.sel,
							tmp, i, j, rslt,
							parse_flat = function (d, p, ps) {
								if(!ps) { ps = []; }
								else { ps = ps.concat(); }
								if(p) { ps.unshift(p); }
								var tid = d.id.toString(),
									i, j, c, e,
									tmp = {
										id			: tid,
										text		: d.text || '',
										icon		: d.icon !== undefined ? d.icon : true,
										parent		: p,
										parents		: ps,
										children	: d.children || [],
										children_d	: d.children_d || [],
										data		: d.data,
										state		: { },
										li_attr		: { id : false },
										a_attr		: { href : '#' },
										original	: false
									};
								for(i in df) {
									if(df.hasOwnProperty(i)) {
										tmp.state[i] = df[i];
									}
								}
								if(d && d.data && d.data.jstree && d.data.jstree.icon) {
									tmp.icon = d.data.jstree.icon;
								}
								if(tmp.icon === undefined || tmp.icon === null || tmp.icon === "") {
									tmp.icon = true;
								}
								if(d && d.data) {
									tmp.data = d.data;
									if(d.data.jstree) {
										for(i in d.data.jstree) {
											if(d.data.jstree.hasOwnProperty(i)) {
												tmp.state[i] = d.data.jstree[i];
											}
										}
									}
								}
								if(d && typeof d.state === 'object') {
									for (i in d.state) {
										if(d.state.hasOwnProperty(i)) {
											tmp.state[i] = d.state[i];
										}
									}
								}
								if(d && typeof d.li_attr === 'object') {
									for (i in d.li_attr) {
										if(d.li_attr.hasOwnProperty(i)) {
											tmp.li_attr[i] = d.li_attr[i];
										}
									}
								}
								if(!tmp.li_attr.id) {
									tmp.li_attr.id = tid;
								}
								if(d && typeof d.a_attr === 'object') {
									for (i in d.a_attr) {
										if(d.a_attr.hasOwnProperty(i)) {
											tmp.a_attr[i] = d.a_attr[i];
										}
									}
								}
								if(d && d.children && d.children === true) {
									tmp.state.loaded = false;
									tmp.children = [];
									tmp.children_d = [];
								}
								m[tmp.id] = tmp;
								for(i = 0, j = tmp.children.length; i < j; i++) {
									c = parse_flat(m[tmp.children[i]], tmp.id, ps);
									e = m[c];
									tmp.children_d.push(c);
									if(e.children_d.length) {
										tmp.children_d = tmp.children_d.concat(e.children_d);
									}
								}
								delete d.data;
								delete d.children;
								m[tmp.id].original = d;
								if(tmp.state.selected) {
									add.push(tmp.id);
								}
								return tmp.id;
							},
							parse_nest = function (d, p, ps) {
								if(!ps) { ps = []; }
								else { ps = ps.concat(); }
								if(p) { ps.unshift(p); }
								var tid = false, i, j, c, e, tmp;
								do {
									tid = 'j' + t_id + '_' + (++t_cnt);
								} while(m[tid]);

								tmp = {
									id			: false,
									text		: typeof d === 'string' ? d : '',
									icon		: typeof d === 'object' && d.icon !== undefined ? d.icon : true,
									parent		: p,
									parents		: ps,
									children	: [],
									children_d	: [],
									data		: null,
									state		: { },
									li_attr		: { id : false },
									a_attr		: { href : '#' },
									original	: false
								};
								for(i in df) {
									if(df.hasOwnProperty(i)) {
										tmp.state[i] = df[i];
									}
								}
								if(d && d.id) { tmp.id = d.id.toString(); }
								if(d && d.text) { tmp.text = d.text; }
								if(d && d.data && d.data.jstree && d.data.jstree.icon) {
									tmp.icon = d.data.jstree.icon;
								}
								if(tmp.icon === undefined || tmp.icon === null || tmp.icon === "") {
									tmp.icon = true;
								}
								if(d && d.data) {
									tmp.data = d.data;
									if(d.data.jstree) {
										for(i in d.data.jstree) {
											if(d.data.jstree.hasOwnProperty(i)) {
												tmp.state[i] = d.data.jstree[i];
											}
										}
									}
								}
								if(d && typeof d.state === 'object') {
									for (i in d.state) {
										if(d.state.hasOwnProperty(i)) {
											tmp.state[i] = d.state[i];
										}
									}
								}
								if(d && typeof d.li_attr === 'object') {
									for (i in d.li_attr) {
										if(d.li_attr.hasOwnProperty(i)) {
											tmp.li_attr[i] = d.li_attr[i];
										}
									}
								}
								if(tmp.li_attr.id && !tmp.id) {
									tmp.id = tmp.li_attr.id.toString();
								}
								if(!tmp.id) {
									tmp.id = tid;
								}
								if(!tmp.li_attr.id) {
									tmp.li_attr.id = tmp.id;
								}
								if(d && typeof d.a_attr === 'object') {
									for (i in d.a_attr) {
										if(d.a_attr.hasOwnProperty(i)) {
											tmp.a_attr[i] = d.a_attr[i];
										}
									}
								}
								if(d && d.children && d.children.length) {
									for(i = 0, j = d.children.length; i < j; i++) {
										c = parse_nest(d.children[i], tmp.id, ps);
										e = m[c];
										tmp.children.push(c);
										if(e.children_d.length) {
											tmp.children_d = tmp.children_d.concat(e.children_d);
										}
									}
									tmp.children_d = tmp.children_d.concat(tmp.children);
								}
								if(d && d.children && d.children === true) {
									tmp.state.loaded = false;
									tmp.children = [];
									tmp.children_d = [];
								}
								delete d.data;
								delete d.children;
								tmp.original = d;
								m[tmp.id] = tmp;
								if(tmp.state.selected) {
									add.push(tmp.id);
								}
								return tmp.id;
							};

						if(dat.length && dat[0].id !== undefined && dat[0].parent !== undefined) {
							// Flat JSON support (for easy import from DB):
							// 1) convert to object (foreach)
							for(i = 0, j = dat.length; i < j; i++) {
								if(!dat[i].children) {
									dat[i].children = [];
								}
								m[dat[i].id.toString()] = dat[i];
							}
							// 2) populate children (foreach)
							for(i = 0, j = dat.length; i < j; i++) {
								m[dat[i].parent.toString()].children.push(dat[i].id.toString());
								// populate parent.children_d
								p.children_d.push(dat[i].id.toString());
							}
							// 3) normalize && populate parents and children_d with recursion
							for(i = 0, j = p.children.length; i < j; i++) {
								tmp = parse_flat(m[p.children[i]], par, p.parents.concat());
								dpc.push(tmp);
								if(m[tmp].children_d.length) {
									dpc = dpc.concat(m[tmp].children_d);
								}
							}
							for(i = 0, j = p.parents.length; i < j; i++) {
								m[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);
							}
							// ?) three_state selection - p.state.selected && t - (if three_state foreach(dat => ch) -> foreach(parents) if(parent.selected) child.selected = true;
							rslt = {
								'cnt' : t_cnt,
								'mod' : m,
								'sel' : sel,
								'par' : par,
								'dpc' : dpc,
								'add' : add
							};
						}
						else {
							for(i = 0, j = dat.length; i < j; i++) {
								tmp = parse_nest(dat[i], par, p.parents.concat());
								if(tmp) {
									chd.push(tmp);
									dpc.push(tmp);
									if(m[tmp].children_d.length) {
										dpc = dpc.concat(m[tmp].children_d);
									}
								}
							}
							p.children = chd;
							p.children_d = dpc;
							for(i = 0, j = p.parents.length; i < j; i++) {
								m[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);
							}
							rslt = {
								'cnt' : t_cnt,
								'mod' : m,
								'sel' : sel,
								'par' : par,
								'dpc' : dpc,
								'add' : add
							};
						}
						if(typeof window === 'undefined' || typeof window.document === 'undefined') {
							postMessage(rslt);
						}
						else {
							return rslt;
						}
					},
					rslt = function (rslt, worker) {
						if(this.element === null) { return; }
						this._cnt = rslt.cnt;
						var i, m = this._model.data;
						for (i in m) {
							if (m.hasOwnProperty(i) && m[i].state && m[i].state.loading && rslt.mod[i]) {
								rslt.mod[i].state.loading = true;
							}
						}
						this._model.data = rslt.mod; // breaks the reference in load_node - careful

						if(worker) {
							var j, a = rslt.add, r = rslt.sel, s = this._data.core.selected.slice();
							m = this._model.data;
							// if selection was changed while calculating in worker
							if(r.length !== s.length || $.vakata.array_unique(r.concat(s)).length !== r.length) {
								// deselect nodes that are no longer selected
								for(i = 0, j = r.length; i < j; i++) {
									if($.inArray(r[i], a) === -1 && $.inArray(r[i], s) === -1) {
										m[r[i]].state.selected = false;
									}
								}
								// select nodes that were selected in the mean time
								for(i = 0, j = s.length; i < j; i++) {
									if($.inArray(s[i], r) === -1) {
										m[s[i]].state.selected = true;
									}
								}
							}
						}
						if(rslt.add.length) {
							this._data.core.selected = this._data.core.selected.concat(rslt.add);
						}

						this.trigger('model', { "nodes" : rslt.dpc, 'parent' : rslt.par });

						if(rslt.par !== $.jstree.root) {
							this._node_changed(rslt.par);
							this.redraw();
						}
						else {
							// this.get_container_ul().children('.jstree-initial-node').remove();
							this.redraw(true);
						}
						if(rslt.add.length) {
							this.trigger('changed', { 'action' : 'model', 'selected' : this._data.core.selected });
						}
						cb.call(this, true);
					};
				if(this.settings.core.worker && window.Blob && window.URL && window.Worker) {
					try {
						if(this._wrk === null) {
							this._wrk = window.URL.createObjectURL(
								new window.Blob(
									['self.onmessage = ' + func.toString()],
									{type:"text/javascript"}
								)
							);
						}
						if(!this._data.core.working || force_processing) {
							this._data.core.working = true;
							w = new window.Worker(this._wrk);
							w.onmessage = $.proxy(function (e) {
								rslt.call(this, e.data, true);
								try { w.terminate(); w = null; } catch(ignore) { }
								if(this._data.core.worker_queue.length) {
									this._append_json_data.apply(this, this._data.core.worker_queue.shift());
								}
								else {
									this._data.core.working = false;
								}
							}, this);
							if(!args.par) {
								if(this._data.core.worker_queue.length) {
									this._append_json_data.apply(this, this._data.core.worker_queue.shift());
								}
								else {
									this._data.core.working = false;
								}
							}
							else {
								w.postMessage(args);
							}
						}
						else {
							this._data.core.worker_queue.push([dom, data, cb, true]);
						}
					}
					catch(e) {
						rslt.call(this, func(args), false);
						if(this._data.core.worker_queue.length) {
							this._append_json_data.apply(this, this._data.core.worker_queue.shift());
						}
						else {
							this._data.core.working = false;
						}
					}
				}
				else {
					rslt.call(this, func(args), false);
				}
			},
			/**
			 * parses a node from a jQuery object and appends them to the in memory tree model. Used internally.
			 * @private
			 * @name _parse_model_from_html(d [, p, ps])
			 * @param  {jQuery} d the jQuery object to parse
			 * @param  {String} p the parent ID
			 * @param  {Array} ps list of all parents
			 * @return {String} the ID of the object added to the model
			 */
			_parse_model_from_html : function (d, p, ps) {
				if(!ps) { ps = []; }
				else { ps = [].concat(ps); }
				if(p) { ps.unshift(p); }
				var c, e, m = this._model.data,
					data = {
						id			: false,
						text		: false,
						icon		: true,
						parent		: p,
						parents		: ps,
						children	: [],
						children_d	: [],
						data		: null,
						state		: { },
						li_attr		: { id : false },
						a_attr		: { href : '#' },
						original	: false
					}, i, tmp, tid;
				for(i in this._model.default_state) {
					if(this._model.default_state.hasOwnProperty(i)) {
						data.state[i] = this._model.default_state[i];
					}
				}
				tmp = $.vakata.attributes(d, true);
				$.each(tmp, function (i, v) {
					v = $.trim(v);
					if(!v.length) { return true; }
					data.li_attr[i] = v;
					if(i === 'id') {
						data.id = v.toString();
					}
				});
				tmp = d.children('a').first();
				if(tmp.length) {
					tmp = $.vakata.attributes(tmp, true);
					$.each(tmp, function (i, v) {
						v = $.trim(v);
						if(v.length) {
							data.a_attr[i] = v;
						}
					});
				}
				tmp = d.children("a").first().length ? d.children("a").first().clone() : d.clone();
				tmp.children("ins, i, ul").remove();
				tmp = tmp.html();
				tmp = $('<div />').html(tmp);
				data.text = this.settings.core.force_text ? tmp.text() : tmp.html();
				tmp = d.data();
				data.data = tmp ? $.extend(true, {}, tmp) : null;
				data.state.opened = d.hasClass('jstree-open');
				data.state.selected = d.children('a').hasClass('jstree-clicked');
				data.state.disabled = d.children('a').hasClass('jstree-disabled');
				if(data.data && data.data.jstree) {
					for(i in data.data.jstree) {
						if(data.data.jstree.hasOwnProperty(i)) {
							data.state[i] = data.data.jstree[i];
						}
					}
				}
				tmp = d.children("a").children(".jstree-themeicon");
				if(tmp.length) {
					data.icon = tmp.hasClass('jstree-themeicon-hidden') ? false : tmp.attr('rel');
				}
				if(data.state.icon !== undefined) {
					data.icon = data.state.icon;
				}
				if(data.icon === undefined || data.icon === null || data.icon === "") {
					data.icon = true;
				}
				tmp = d.children("ul").children("li");
				do {
					tid = 'j' + this._id + '_' + (++this._cnt);
				} while(m[tid]);
				data.id = data.li_attr.id ? data.li_attr.id.toString() : tid;
				if(tmp.length) {
					tmp.each($.proxy(function (i, v) {
						c = this._parse_model_from_html($(v), data.id, ps);
						e = this._model.data[c];
						data.children.push(c);
						if(e.children_d.length) {
							data.children_d = data.children_d.concat(e.children_d);
						}
					}, this));
					data.children_d = data.children_d.concat(data.children);
				}
				else {
					if(d.hasClass('jstree-closed')) {
						data.state.loaded = false;
					}
				}
				if(data.li_attr['class']) {
					data.li_attr['class'] = data.li_attr['class'].replace('jstree-closed','').replace('jstree-open','');
				}
				if(data.a_attr['class']) {
					data.a_attr['class'] = data.a_attr['class'].replace('jstree-clicked','').replace('jstree-disabled','');
				}
				m[data.id] = data;
				if(data.state.selected) {
					this._data.core.selected.push(data.id);
				}
				return data.id;
			},
			/**
			 * parses a node from a JSON object (used when dealing with flat data, which has no nesting of children, but has id and parent properties) and appends it to the in memory tree model. Used internally.
			 * @private
			 * @name _parse_model_from_flat_json(d [, p, ps])
			 * @param  {Object} d the JSON object to parse
			 * @param  {String} p the parent ID
			 * @param  {Array} ps list of all parents
			 * @return {String} the ID of the object added to the model
			 */
			_parse_model_from_flat_json : function (d, p, ps) {
				if(!ps) { ps = []; }
				else { ps = ps.concat(); }
				if(p) { ps.unshift(p); }
				var tid = d.id.toString(),
					m = this._model.data,
					df = this._model.default_state,
					i, j, c, e,
					tmp = {
						id			: tid,
						text		: d.text || '',
						icon		: d.icon !== undefined ? d.icon : true,
						parent		: p,
						parents		: ps,
						children	: d.children || [],
						children_d	: d.children_d || [],
						data		: d.data,
						state		: { },
						li_attr		: { id : false },
						a_attr		: { href : '#' },
						original	: false
					};
				for(i in df) {
					if(df.hasOwnProperty(i)) {
						tmp.state[i] = df[i];
					}
				}
				if(d && d.data && d.data.jstree && d.data.jstree.icon) {
					tmp.icon = d.data.jstree.icon;
				}
				if(tmp.icon === undefined || tmp.icon === null || tmp.icon === "") {
					tmp.icon = true;
				}
				if(d && d.data) {
					tmp.data = d.data;
					if(d.data.jstree) {
						for(i in d.data.jstree) {
							if(d.data.jstree.hasOwnProperty(i)) {
								tmp.state[i] = d.data.jstree[i];
							}
						}
					}
				}
				if(d && typeof d.state === 'object') {
					for (i in d.state) {
						if(d.state.hasOwnProperty(i)) {
							tmp.state[i] = d.state[i];
						}
					}
				}
				if(d && typeof d.li_attr === 'object') {
					for (i in d.li_attr) {
						if(d.li_attr.hasOwnProperty(i)) {
							tmp.li_attr[i] = d.li_attr[i];
						}
					}
				}
				if(!tmp.li_attr.id) {
					tmp.li_attr.id = tid;
				}
				if(d && typeof d.a_attr === 'object') {
					for (i in d.a_attr) {
						if(d.a_attr.hasOwnProperty(i)) {
							tmp.a_attr[i] = d.a_attr[i];
						}
					}
				}
				if(d && d.children && d.children === true) {
					tmp.state.loaded = false;
					tmp.children = [];
					tmp.children_d = [];
				}
				m[tmp.id] = tmp;
				for(i = 0, j = tmp.children.length; i < j; i++) {
					c = this._parse_model_from_flat_json(m[tmp.children[i]], tmp.id, ps);
					e = m[c];
					tmp.children_d.push(c);
					if(e.children_d.length) {
						tmp.children_d = tmp.children_d.concat(e.children_d);
					}
				}
				delete d.data;
				delete d.children;
				m[tmp.id].original = d;
				if(tmp.state.selected) {
					this._data.core.selected.push(tmp.id);
				}
				return tmp.id;
			},
			/**
			 * parses a node from a JSON object and appends it to the in memory tree model. Used internally.
			 * @private
			 * @name _parse_model_from_json(d [, p, ps])
			 * @param  {Object} d the JSON object to parse
			 * @param  {String} p the parent ID
			 * @param  {Array} ps list of all parents
			 * @return {String} the ID of the object added to the model
			 */
			_parse_model_from_json : function (d, p, ps) {
				if(!ps) { ps = []; }
				else { ps = ps.concat(); }
				if(p) { ps.unshift(p); }
				var tid = false, i, j, c, e, m = this._model.data, df = this._model.default_state, tmp;
				do {
					tid = 'j' + this._id + '_' + (++this._cnt);
				} while(m[tid]);

				tmp = {
					id			: false,
					text		: typeof d === 'string' ? d : '',
					icon		: typeof d === 'object' && d.icon !== undefined ? d.icon : true,
					parent		: p,
					parents		: ps,
					children	: [],
					children_d	: [],
					data		: null,
					state		: { },
					li_attr		: { id : false },
					a_attr		: { href : '#' },
					original	: false
				};
				for(i in df) {
					if(df.hasOwnProperty(i)) {
						tmp.state[i] = df[i];
					}
				}
				if(d && d.id) { tmp.id = d.id.toString(); }
				if(d && d.text) { tmp.text = d.text; }
				if(d && d.data && d.data.jstree && d.data.jstree.icon) {
					tmp.icon = d.data.jstree.icon;
				}
				if(tmp.icon === undefined || tmp.icon === null || tmp.icon === "") {
					tmp.icon = true;
				}
				if(d && d.data) {
					tmp.data = d.data;
					if(d.data.jstree) {
						for(i in d.data.jstree) {
							if(d.data.jstree.hasOwnProperty(i)) {
								tmp.state[i] = d.data.jstree[i];
							}
						}
					}
				}
				if(d && typeof d.state === 'object') {
					for (i in d.state) {
						if(d.state.hasOwnProperty(i)) {
							tmp.state[i] = d.state[i];
						}
					}
				}
				if(d && typeof d.li_attr === 'object') {
					for (i in d.li_attr) {
						if(d.li_attr.hasOwnProperty(i)) {
							tmp.li_attr[i] = d.li_attr[i];
						}
					}
				}
				if(tmp.li_attr.id && !tmp.id) {
					tmp.id = tmp.li_attr.id.toString();
				}
				if(!tmp.id) {
					tmp.id = tid;
				}
				if(!tmp.li_attr.id) {
					tmp.li_attr.id = tmp.id;
				}
				if(d && typeof d.a_attr === 'object') {
					for (i in d.a_attr) {
						if(d.a_attr.hasOwnProperty(i)) {
							tmp.a_attr[i] = d.a_attr[i];
						}
					}
				}
				if(d && d.children && d.children.length) {
					for(i = 0, j = d.children.length; i < j; i++) {
						c = this._parse_model_from_json(d.children[i], tmp.id, ps);
						e = m[c];
						tmp.children.push(c);
						if(e.children_d.length) {
							tmp.children_d = tmp.children_d.concat(e.children_d);
						}
					}
					tmp.children_d = tmp.children_d.concat(tmp.children);
				}
				if(d && d.children && d.children === true) {
					tmp.state.loaded = false;
					tmp.children = [];
					tmp.children_d = [];
				}
				delete d.data;
				delete d.children;
				tmp.original = d;
				m[tmp.id] = tmp;
				if(tmp.state.selected) {
					this._data.core.selected.push(tmp.id);
				}
				return tmp.id;
			},
			/**
			 * redraws all nodes that need to be redrawn. Used internally.
			 * @private
			 * @name _redraw()
			 * @trigger redraw.jstree
			 */
			_redraw : function () {
				var nodes = this._model.force_full_redraw ? this._model.data[$.jstree.root].children.concat([]) : this._model.changed.concat([]),
					f = document.createElement('UL'), tmp, i, j, fe = this._data.core.focused;
				for(i = 0, j = nodes.length; i < j; i++) {
					tmp = this.redraw_node(nodes[i], true, this._model.force_full_redraw);
					if(tmp && this._model.force_full_redraw) {
						f.appendChild(tmp);
					}
				}
				if(this._model.force_full_redraw) {
					f.className = this.get_container_ul()[0].className;
					f.setAttribute('role','group');
					this.element.empty().append(f);
					//this.get_container_ul()[0].appendChild(f);
				}
				if(fe !== null) {
					tmp = this.get_node(fe, true);
					if(tmp && tmp.length && tmp.children('.jstree-anchor')[0] !== document.activeElement) {
						tmp.children('.jstree-anchor').focus();
					}
					else {
						this._data.core.focused = null;
					}
				}
				this._model.force_full_redraw = false;
				this._model.changed = [];
				/**
				 * triggered after nodes are redrawn
				 * @event
				 * @name redraw.jstree
				 * @param {array} nodes the redrawn nodes
				 */
				this.trigger('redraw', { "nodes" : nodes });
			},
			/**
			 * redraws all nodes that need to be redrawn or optionally - the whole tree
			 * @name redraw([full])
			 * @param {Boolean} full if set to `true` all nodes are redrawn.
			 */
			redraw : function (full) {
				if(full) {
					this._model.force_full_redraw = true;
				}
				//if(this._model.redraw_timeout) {
				//	clearTimeout(this._model.redraw_timeout);
				//}
				//this._model.redraw_timeout = setTimeout($.proxy(this._redraw, this),0);
				this._redraw();
			},
			/**
			 * redraws a single node's children. Used internally.
			 * @private
			 * @name draw_children(node)
			 * @param {mixed} node the node whose children will be redrawn
			 */
			draw_children : function (node) {
				var obj = this.get_node(node),
					i = false,
					j = false,
					k = false,
					d = document;
				if(!obj) { return false; }
				if(obj.id === $.jstree.root) { return this.redraw(true); }
				node = this.get_node(node, true);
				if(!node || !node.length) { return false; } // TODO: quick toggle

				node.children('.jstree-children').remove();
				node = node[0];
				if(obj.children.length && obj.state.loaded) {
					k = d.createElement('UL');
					k.setAttribute('role', 'group');
					k.className = 'jstree-children';
					for(i = 0, j = obj.children.length; i < j; i++) {
						k.appendChild(this.redraw_node(obj.children[i], true, true));
					}
					node.appendChild(k);
				}
			},
			/**
			 * redraws a single node. Used internally.
			 * @private
			 * @name redraw_node(node, deep, is_callback, force_render)
			 * @param {mixed} node the node to redraw
			 * @param {Boolean} deep should child nodes be redrawn too
			 * @param {Boolean} is_callback is this a recursion call
			 * @param {Boolean} force_render should children of closed parents be drawn anyway
			 */
			redraw_node : function (node, deep, is_callback, force_render) {
				var obj = this.get_node(node),
					par = false,
					ind = false,
					old = false,
					i = false,
					j = false,
					k = false,
					c = '',
					d = document,
					m = this._model.data,
					f = false,
					s = false,
					tmp = null,
					t = 0,
					l = 0,
					has_children = false,
					last_sibling = false;
				if(!obj) { return false; }
				if(obj.id === $.jstree.root) {  return this.redraw(true); }
				deep = deep || obj.children.length === 0;
				node = !document.querySelector ? document.getElementById(obj.id) : this.element[0].querySelector('#' + ("0123456789".indexOf(obj.id[0]) !== -1 ? '\\3' + obj.id[0] + ' ' + obj.id.substr(1).replace($.jstree.idregex,'\\$&') : obj.id.replace($.jstree.idregex,'\\$&')) ); //, this.element);
				if(!node) {
					deep = true;
					//node = d.createElement('LI');
					if(!is_callback) {
						par = obj.parent !== $.jstree.root ? $('#' + obj.parent.replace($.jstree.idregex,'\\$&'), this.element)[0] : null;
						if(par !== null && (!par || !m[obj.parent].state.opened)) {
							return false;
						}
						ind = $.inArray(obj.id, par === null ? m[$.jstree.root].children : m[obj.parent].children);
					}
				}
				else {
					node = $(node);
					if(!is_callback) {
						par = node.parent().parent()[0];
						if(par === this.element[0]) {
							par = null;
						}
						ind = node.index();
					}
					// m[obj.id].data = node.data(); // use only node's data, no need to touch jquery storage
					if(!deep && obj.children.length && !node.children('.jstree-children').length) {
						deep = true;
					}
					if(!deep) {
						old = node.children('.jstree-children')[0];
					}
					f = node.children('.jstree-anchor')[0] === document.activeElement;
					node.remove();
					//node = d.createElement('LI');
					//node = node[0];
				}
				node = _node.cloneNode(true);
				// node is DOM, deep is boolean

				c = 'jstree-node ';
				for(i in obj.li_attr) {
					if(obj.li_attr.hasOwnProperty(i)) {
						if(i === 'id') { continue; }
						if(i !== 'class') {
							node.setAttribute(i, obj.li_attr[i]);
						}
						else {
							c += obj.li_attr[i];
						}
					}
				}
				if(!obj.a_attr.id) {
					obj.a_attr.id = obj.id + '_anchor';
				}
				node.setAttribute('aria-selected', !!obj.state.selected);
				node.setAttribute('aria-level', obj.parents.length);
				node.setAttribute('aria-labelledby', obj.a_attr.id);
				if(obj.state.disabled) {
					node.setAttribute('aria-disabled', true);
				}

				for(i = 0, j = obj.children.length; i < j; i++) {
					if(!m[obj.children[i]].state.hidden) {
						has_children = true;
						break;
					}
				}
				if(obj.parent !== null && m[obj.parent] && !obj.state.hidden) {
					i = $.inArray(obj.id, m[obj.parent].children);
					last_sibling = obj.id;
					if(i !== -1) {
						i++;
						for(j = m[obj.parent].children.length; i < j; i++) {
							if(!m[m[obj.parent].children[i]].state.hidden) {
								last_sibling = m[obj.parent].children[i];
							}
							if(last_sibling !== obj.id) {
								break;
							}
						}
					}
				}

				if(obj.state.hidden) {
					c += ' jstree-hidden';
				}
				if(obj.state.loaded && !has_children) {
					c += ' jstree-leaf';
				}
				else {
					c += obj.state.opened && obj.state.loaded ? ' jstree-open' : ' jstree-closed';
					node.setAttribute('aria-expanded', (obj.state.opened && obj.state.loaded) );
				}
				if(last_sibling === obj.id) {
					c += ' jstree-last';
				}
				node.id = obj.id;
				node.className = c;
				c = ( obj.state.selected ? ' jstree-clicked' : '') + ( obj.state.disabled ? ' jstree-disabled' : '');
				for(j in obj.a_attr) {
					if(obj.a_attr.hasOwnProperty(j)) {
						if(j === 'href' && obj.a_attr[j] === '#') { continue; }
						if(j !== 'class') {
							node.childNodes[1].setAttribute(j, obj.a_attr[j]);
						}
						else {
							c += ' ' + obj.a_attr[j];
						}
					}
				}
				if(c.length) {
					node.childNodes[1].className = 'jstree-anchor ' + c;
				}
				if((obj.icon && obj.icon !== true) || obj.icon === false) {
					if(obj.icon === false) {
						node.childNodes[1].childNodes[0].className += ' jstree-themeicon-hidden';
					}
					else if(obj.icon.indexOf('/') === -1 && obj.icon.indexOf('.') === -1) {
						node.childNodes[1].childNodes[0].className += ' ' + obj.icon + ' jstree-themeicon-custom';
					}
					else {
						node.childNodes[1].childNodes[0].style.backgroundImage = 'url("'+obj.icon+'")';
						node.childNodes[1].childNodes[0].style.backgroundPosition = 'center center';
						node.childNodes[1].childNodes[0].style.backgroundSize = 'auto';
						node.childNodes[1].childNodes[0].className += ' jstree-themeicon-custom';
					}
				}

				if(this.settings.core.force_text) {
					node.childNodes[1].appendChild(d.createTextNode(obj.text));
				}
				else {
					node.childNodes[1].innerHTML += obj.text;
				}


				if(deep && obj.children.length && (obj.state.opened || force_render) && obj.state.loaded) {
					k = d.createElement('UL');
					k.setAttribute('role', 'group');
					k.className = 'jstree-children';
					for(i = 0, j = obj.children.length; i < j; i++) {
						k.appendChild(this.redraw_node(obj.children[i], deep, true));
					}
					node.appendChild(k);
				}
				if(old) {
					node.appendChild(old);
				}
				if(!is_callback) {
					// append back using par / ind
					if(!par) {
						par = this.element[0];
					}
					for(i = 0, j = par.childNodes.length; i < j; i++) {
						if(par.childNodes[i] && par.childNodes[i].className && par.childNodes[i].className.indexOf('jstree-children') !== -1) {
							tmp = par.childNodes[i];
							break;
						}
					}
					if(!tmp) {
						tmp = d.createElement('UL');
						tmp.setAttribute('role', 'group');
						tmp.className = 'jstree-children';
						par.appendChild(tmp);
					}
					par = tmp;

					if(ind < par.childNodes.length) {
						par.insertBefore(node, par.childNodes[ind]);
					}
					else {
						par.appendChild(node);
					}
					if(f) {
						t = this.element[0].scrollTop;
						l = this.element[0].scrollLeft;
						node.childNodes[1].focus();
						this.element[0].scrollTop = t;
						this.element[0].scrollLeft = l;
					}
				}
				if(obj.state.opened && !obj.state.loaded) {
					obj.state.opened = false;
					setTimeout($.proxy(function () {
						this.open_node(obj.id, false, 0);
					}, this), 0);
				}
				return node;
			},
			/**
			 * opens a node, revaling its children. If the node is not loaded it will be loaded and opened once ready.
			 * @name open_node(obj [, callback, animation])
			 * @param {mixed} obj the node to open
			 * @param {Function} callback a function to execute once the node is opened
			 * @param {Number} animation the animation duration in milliseconds when opening the node (overrides the `core.animation` setting). Use `false` for no animation.
			 * @trigger open_node.jstree, after_open.jstree, before_open.jstree
			 */
			open_node : function (obj, callback, animation) {
				var t1, t2, d, t;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.open_node(obj[t1], callback, animation);
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) {
					return false;
				}
				animation = animation === undefined ? this.settings.core.animation : animation;
				if(!this.is_closed(obj)) {
					if(callback) {
						callback.call(this, obj, false);
					}
					return false;
				}
				if(!this.is_loaded(obj)) {
					if(this.is_loading(obj)) {
						return setTimeout($.proxy(function () {
							this.open_node(obj, callback, animation);
						}, this), 500);
					}
					this.load_node(obj, function (o, ok) {
						return ok ? this.open_node(o, callback, animation) : (callback ? callback.call(this, o, false) : false);
					});
				}
				else {
					d = this.get_node(obj, true);
					t = this;
					if(d.length) {
						if(animation && d.children(".jstree-children").length) {
							d.children(".jstree-children").stop(true, true);
						}
						if(obj.children.length && !this._firstChild(d.children('.jstree-children')[0])) {
							this.draw_children(obj);
							//d = this.get_node(obj, true);
						}
						if(!animation) {
							this.trigger('before_open', { "node" : obj });
							d[0].className = d[0].className.replace('jstree-closed', 'jstree-open');
							d[0].setAttribute("aria-expanded", true);
						}
						else {
							this.trigger('before_open', { "node" : obj });
							d
								.children(".jstree-children").css("display","none").end()
								.removeClass("jstree-closed").addClass("jstree-open").attr("aria-expanded", true)
								.children(".jstree-children").stop(true, true)
									.slideDown(animation, function () {
										this.style.display = "";
										if (t.element) {
											t.trigger("after_open", { "node" : obj });
										}
									});
						}
					}
					obj.state.opened = true;
					if(callback) {
						callback.call(this, obj, true);
					}
					if(!d.length) {
						/**
						 * triggered when a node is about to be opened (if the node is supposed to be in the DOM, it will be, but it won't be visible yet)
						 * @event
						 * @name before_open.jstree
						 * @param {Object} node the opened node
						 */
						this.trigger('before_open', { "node" : obj });
					}
					/**
					 * triggered when a node is opened (if there is an animation it will not be completed yet)
					 * @event
					 * @name open_node.jstree
					 * @param {Object} node the opened node
					 */
					this.trigger('open_node', { "node" : obj });
					if(!animation || !d.length) {
						/**
						 * triggered when a node is opened and the animation is complete
						 * @event
						 * @name after_open.jstree
						 * @param {Object} node the opened node
						 */
						this.trigger("after_open", { "node" : obj });
					}
					return true;
				}
			},
			/**
			 * opens every parent of a node (node should be loaded)
			 * @name _open_to(obj)
			 * @param {mixed} obj the node to reveal
			 * @private
			 */
			_open_to : function (obj) {
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) {
					return false;
				}
				var i, j, p = obj.parents;
				for(i = 0, j = p.length; i < j; i+=1) {
					if(i !== $.jstree.root) {
						this.open_node(p[i], false, 0);
					}
				}
				return $('#' + obj.id.replace($.jstree.idregex,'\\$&'), this.element);
			},
			/**
			 * closes a node, hiding its children
			 * @name close_node(obj [, animation])
			 * @param {mixed} obj the node to close
			 * @param {Number} animation the animation duration in milliseconds when closing the node (overrides the `core.animation` setting). Use `false` for no animation.
			 * @trigger close_node.jstree, after_close.jstree
			 */
			close_node : function (obj, animation) {
				var t1, t2, t, d;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.close_node(obj[t1], animation);
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) {
					return false;
				}
				if(this.is_closed(obj)) {
					return false;
				}
				animation = animation === undefined ? this.settings.core.animation : animation;
				t = this;
				d = this.get_node(obj, true);

				obj.state.opened = false;
				/**
				 * triggered when a node is closed (if there is an animation it will not be complete yet)
				 * @event
				 * @name close_node.jstree
				 * @param {Object} node the closed node
				 */
				this.trigger('close_node',{ "node" : obj });
				if(!d.length) {
					/**
					 * triggered when a node is closed and the animation is complete
					 * @event
					 * @name after_close.jstree
					 * @param {Object} node the closed node
					 */
					this.trigger("after_close", { "node" : obj });
				}
				else {
					if(!animation) {
						d[0].className = d[0].className.replace('jstree-open', 'jstree-closed');
						d.attr("aria-expanded", false).children('.jstree-children').remove();
						this.trigger("after_close", { "node" : obj });
					}
					else {
						d
							.children(".jstree-children").attr("style","display:block !important").end()
							.removeClass("jstree-open").addClass("jstree-closed").attr("aria-expanded", false)
							.children(".jstree-children").stop(true, true).slideUp(animation, function () {
								this.style.display = "";
								d.children('.jstree-children').remove();
								if (t.element) {
									t.trigger("after_close", { "node" : obj });
								}
							});
					}
				}
			},
			/**
			 * toggles a node - closing it if it is open, opening it if it is closed
			 * @name toggle_node(obj)
			 * @param {mixed} obj the node to toggle
			 */
			toggle_node : function (obj) {
				var t1, t2;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.toggle_node(obj[t1]);
					}
					return true;
				}
				if(this.is_closed(obj)) {
					return this.open_node(obj);
				}
				if(this.is_open(obj)) {
					return this.close_node(obj);
				}
			},
			/**
			 * opens all nodes within a node (or the tree), revaling their children. If the node is not loaded it will be loaded and opened once ready.
			 * @name open_all([obj, animation, original_obj])
			 * @param {mixed} obj the node to open recursively, omit to open all nodes in the tree
			 * @param {Number} animation the animation duration in milliseconds when opening the nodes, the default is no animation
			 * @param {jQuery} reference to the node that started the process (internal use)
			 * @trigger open_all.jstree
			 */
			open_all : function (obj, animation, original_obj) {
				if(!obj) { obj = $.jstree.root; }
				obj = this.get_node(obj);
				if(!obj) { return false; }
				var dom = obj.id === $.jstree.root ? this.get_container_ul() : this.get_node(obj, true), i, j, _this;
				if(!dom.length) {
					for(i = 0, j = obj.children_d.length; i < j; i++) {
						if(this.is_closed(this._model.data[obj.children_d[i]])) {
							this._model.data[obj.children_d[i]].state.opened = true;
						}
					}
					return this.trigger('open_all', { "node" : obj });
				}
				original_obj = original_obj || dom;
				_this = this;
				dom = this.is_closed(obj) ? dom.find('.jstree-closed').addBack() : dom.find('.jstree-closed');
				dom.each(function () {
					_this.open_node(
						this,
						function(node, status) { if(status && this.is_parent(node)) { this.open_all(node, animation, original_obj); } },
						animation || 0
					);
				});
				if(original_obj.find('.jstree-closed').length === 0) {
					/**
					 * triggered when an `open_all` call completes
					 * @event
					 * @name open_all.jstree
					 * @param {Object} node the opened node
					 */
					this.trigger('open_all', { "node" : this.get_node(original_obj) });
				}
			},
			/**
			 * closes all nodes within a node (or the tree), revaling their children
			 * @name close_all([obj, animation])
			 * @param {mixed} obj the node to close recursively, omit to close all nodes in the tree
			 * @param {Number} animation the animation duration in milliseconds when closing the nodes, the default is no animation
			 * @trigger close_all.jstree
			 */
			close_all : function (obj, animation) {
				if(!obj) { obj = $.jstree.root; }
				obj = this.get_node(obj);
				if(!obj) { return false; }
				var dom = obj.id === $.jstree.root ? this.get_container_ul() : this.get_node(obj, true),
					_this = this, i, j;
				if(dom.length) {
					dom = this.is_open(obj) ? dom.find('.jstree-open').addBack() : dom.find('.jstree-open');
					$(dom.get().reverse()).each(function () { _this.close_node(this, animation || 0); });
				}
				for(i = 0, j = obj.children_d.length; i < j; i++) {
					this._model.data[obj.children_d[i]].state.opened = false;
				}
				/**
				 * triggered when an `close_all` call completes
				 * @event
				 * @name close_all.jstree
				 * @param {Object} node the closed node
				 */
				this.trigger('close_all', { "node" : obj });
			},
			/**
			 * checks if a node is disabled (not selectable)
			 * @name is_disabled(obj)
			 * @param  {mixed} obj
			 * @return {Boolean}
			 */
			is_disabled : function (obj) {
				obj = this.get_node(obj);
				return obj && obj.state && obj.state.disabled;
			},
			/**
			 * enables a node - so that it can be selected
			 * @name enable_node(obj)
			 * @param {mixed} obj the node to enable
			 * @trigger enable_node.jstree
			 */
			enable_node : function (obj) {
				var t1, t2;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.enable_node(obj[t1]);
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) {
					return false;
				}
				obj.state.disabled = false;
				this.get_node(obj,true).children('.jstree-anchor').removeClass('jstree-disabled').attr('aria-disabled', false);
				/**
				 * triggered when an node is enabled
				 * @event
				 * @name enable_node.jstree
				 * @param {Object} node the enabled node
				 */
				this.trigger('enable_node', { 'node' : obj });
			},
			/**
			 * disables a node - so that it can not be selected
			 * @name disable_node(obj)
			 * @param {mixed} obj the node to disable
			 * @trigger disable_node.jstree
			 */
			disable_node : function (obj) {
				var t1, t2;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.disable_node(obj[t1]);
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) {
					return false;
				}
				obj.state.disabled = true;
				this.get_node(obj,true).children('.jstree-anchor').addClass('jstree-disabled').attr('aria-disabled', true);
				/**
				 * triggered when an node is disabled
				 * @event
				 * @name disable_node.jstree
				 * @param {Object} node the disabled node
				 */
				this.trigger('disable_node', { 'node' : obj });
			},
			/**
			 * determines if a node is hidden
			 * @name is_hidden(obj)
			 * @param {mixed} obj the node
			 */
			is_hidden : function (obj) {
				obj = this.get_node(obj);
				return obj.state.hidden === true;
			},
			/**
			 * hides a node - it is still in the structure but will not be visible
			 * @name hide_node(obj)
			 * @param {mixed} obj the node to hide
			 * @param {Boolean} redraw internal parameter controlling if redraw is called
			 * @trigger hide_node.jstree
			 */
			hide_node : function (obj, skip_redraw) {
				var t1, t2;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.hide_node(obj[t1], true);
					}
					if (!skip_redraw) {
						this.redraw();
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) {
					return false;
				}
				if(!obj.state.hidden) {
					obj.state.hidden = true;
					this._node_changed(obj.parent);
					if(!skip_redraw) {
						this.redraw();
					}
					/**
					 * triggered when an node is hidden
					 * @event
					 * @name hide_node.jstree
					 * @param {Object} node the hidden node
					 */
					this.trigger('hide_node', { 'node' : obj });
				}
			},
			/**
			 * shows a node
			 * @name show_node(obj)
			 * @param {mixed} obj the node to show
			 * @param {Boolean} skip_redraw internal parameter controlling if redraw is called
			 * @trigger show_node.jstree
			 */
			show_node : function (obj, skip_redraw) {
				var t1, t2;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.show_node(obj[t1], true);
					}
					if (!skip_redraw) {
						this.redraw();
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) {
					return false;
				}
				if(obj.state.hidden) {
					obj.state.hidden = false;
					this._node_changed(obj.parent);
					if(!skip_redraw) {
						this.redraw();
					}
					/**
					 * triggered when an node is shown
					 * @event
					 * @name show_node.jstree
					 * @param {Object} node the shown node
					 */
					this.trigger('show_node', { 'node' : obj });
				}
			},
			/**
			 * hides all nodes
			 * @name hide_all()
			 * @trigger hide_all.jstree
			 */
			hide_all : function (skip_redraw) {
				var i, m = this._model.data, ids = [];
				for(i in m) {
					if(m.hasOwnProperty(i) && i !== $.jstree.root && !m[i].state.hidden) {
						m[i].state.hidden = true;
						ids.push(i);
					}
				}
				this._model.force_full_redraw = true;
				if(!skip_redraw) {
					this.redraw();
				}
				/**
				 * triggered when all nodes are hidden
				 * @event
				 * @name hide_all.jstree
				 * @param {Array} nodes the IDs of all hidden nodes
				 */
				this.trigger('hide_all', { 'nodes' : ids });
				return ids;
			},
			/**
			 * shows all nodes
			 * @name show_all()
			 * @trigger show_all.jstree
			 */
			show_all : function (skip_redraw) {
				var i, m = this._model.data, ids = [];
				for(i in m) {
					if(m.hasOwnProperty(i) && i !== $.jstree.root && m[i].state.hidden) {
						m[i].state.hidden = false;
						ids.push(i);
					}
				}
				this._model.force_full_redraw = true;
				if(!skip_redraw) {
					this.redraw();
				}
				/**
				 * triggered when all nodes are shown
				 * @event
				 * @name show_all.jstree
				 * @param {Array} nodes the IDs of all shown nodes
				 */
				this.trigger('show_all', { 'nodes' : ids });
				return ids;
			},
			/**
			 * called when a node is selected by the user. Used internally.
			 * @private
			 * @name activate_node(obj, e)
			 * @param {mixed} obj the node
			 * @param {Object} e the related event
			 * @trigger activate_node.jstree, changed.jstree
			 */
			activate_node : function (obj, e) {
				if(this.is_disabled(obj)) {
					return false;
				}
				if(!e || typeof e !== 'object') {
					e = {};
				}

				// ensure last_clicked is still in the DOM, make it fresh (maybe it was moved?) and make sure it is still selected, if not - make last_clicked the last selected node
				this._data.core.last_clicked = this._data.core.last_clicked && this._data.core.last_clicked.id !== undefined ? this.get_node(this._data.core.last_clicked.id) : null;
				if(this._data.core.last_clicked && !this._data.core.last_clicked.state.selected) { this._data.core.last_clicked = null; }
				if(!this._data.core.last_clicked && this._data.core.selected.length) { this._data.core.last_clicked = this.get_node(this._data.core.selected[this._data.core.selected.length - 1]); }

				if(!this.settings.core.multiple || (!e.metaKey && !e.ctrlKey && !e.shiftKey) || (e.shiftKey && (!this._data.core.last_clicked || !this.get_parent(obj) || this.get_parent(obj) !== this._data.core.last_clicked.parent ) )) {
					if(!this.settings.core.multiple && (e.metaKey || e.ctrlKey || e.shiftKey) && this.is_selected(obj)) {
						this.deselect_node(obj, false, e);
					}
					else {
						this.deselect_all(true);
						this.select_node(obj, false, false, e);
						this._data.core.last_clicked = this.get_node(obj);
					}
				}
				else {
					if(e.shiftKey) {
						var o = this.get_node(obj).id,
							l = this._data.core.last_clicked.id,
							p = this.get_node(this._data.core.last_clicked.parent).children,
							c = false,
							i, j;
						for(i = 0, j = p.length; i < j; i += 1) {
							// separate IFs work whem o and l are the same
							if(p[i] === o) {
								c = !c;
							}
							if(p[i] === l) {
								c = !c;
							}
							if(!this.is_disabled(p[i]) && (c || p[i] === o || p[i] === l)) {
								if (!this.is_hidden(p[i])) {
									this.select_node(p[i], true, false, e);
								}
							}
							else {
								this.deselect_node(p[i], true, e);
							}
						}
						this.trigger('changed', { 'action' : 'select_node', 'node' : this.get_node(obj), 'selected' : this._data.core.selected, 'event' : e });
					}
					else {
						if(!this.is_selected(obj)) {
							this.select_node(obj, false, false, e);
						}
						else {
							this.deselect_node(obj, false, e);
						}
					}
				}
				/**
				 * triggered when an node is clicked or intercated with by the user
				 * @event
				 * @name activate_node.jstree
				 * @param {Object} node
				 * @param {Object} event the ooriginal event (if any) which triggered the call (may be an empty object)
				 */
				this.trigger('activate_node', { 'node' : this.get_node(obj), 'event' : e });
			},
			/**
			 * applies the hover state on a node, called when a node is hovered by the user. Used internally.
			 * @private
			 * @name hover_node(obj)
			 * @param {mixed} obj
			 * @trigger hover_node.jstree
			 */
			hover_node : function (obj) {
				obj = this.get_node(obj, true);
				if(!obj || !obj.length || obj.children('.jstree-hovered').length) {
					return false;
				}
				var o = this.element.find('.jstree-hovered'), t = this.element;
				if(o && o.length) { this.dehover_node(o); }

				obj.children('.jstree-anchor').addClass('jstree-hovered');
				/**
				 * triggered when an node is hovered
				 * @event
				 * @name hover_node.jstree
				 * @param {Object} node
				 */
				this.trigger('hover_node', { 'node' : this.get_node(obj) });
				setTimeout(function () { t.attr('aria-activedescendant', obj[0].id); }, 0);
			},
			/**
			 * removes the hover state from a nodecalled when a node is no longer hovered by the user. Used internally.
			 * @private
			 * @name dehover_node(obj)
			 * @param {mixed} obj
			 * @trigger dehover_node.jstree
			 */
			dehover_node : function (obj) {
				obj = this.get_node(obj, true);
				if(!obj || !obj.length || !obj.children('.jstree-hovered').length) {
					return false;
				}
				obj.children('.jstree-anchor').removeClass('jstree-hovered');
				/**
				 * triggered when an node is no longer hovered
				 * @event
				 * @name dehover_node.jstree
				 * @param {Object} node
				 */
				this.trigger('dehover_node', { 'node' : this.get_node(obj) });
			},
			/**
			 * select a node
			 * @name select_node(obj [, supress_event, prevent_open])
			 * @param {mixed} obj an array can be used to select multiple nodes
			 * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered
			 * @param {Boolean} prevent_open if set to `true` parents of the selected node won't be opened
			 * @trigger select_node.jstree, changed.jstree
			 */
			select_node : function (obj, supress_event, prevent_open, e) {
				var dom, t1, t2, th;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.select_node(obj[t1], supress_event, prevent_open, e);
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) {
					return false;
				}
				dom = this.get_node(obj, true);
				if(!obj.state.selected) {
					obj.state.selected = true;
					this._data.core.selected.push(obj.id);
					if(!prevent_open) {
						dom = this._open_to(obj);
					}
					if(dom && dom.length) {
						dom.attr('aria-selected', true).children('.jstree-anchor').addClass('jstree-clicked');
					}
					/**
					 * triggered when an node is selected
					 * @event
					 * @name select_node.jstree
					 * @param {Object} node
					 * @param {Array} selected the current selection
					 * @param {Object} event the event (if any) that triggered this select_node
					 */
					this.trigger('select_node', { 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });
					if(!supress_event) {
						/**
						 * triggered when selection changes
						 * @event
						 * @name changed.jstree
						 * @param {Object} node
						 * @param {Object} action the action that caused the selection to change
						 * @param {Array} selected the current selection
						 * @param {Object} event the event (if any) that triggered this changed event
						 */
						this.trigger('changed', { 'action' : 'select_node', 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });
					}
				}
			},
			/**
			 * deselect a node
			 * @name deselect_node(obj [, supress_event])
			 * @param {mixed} obj an array can be used to deselect multiple nodes
			 * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered
			 * @trigger deselect_node.jstree, changed.jstree
			 */
			deselect_node : function (obj, supress_event, e) {
				var t1, t2, dom;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.deselect_node(obj[t1], supress_event, e);
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) {
					return false;
				}
				dom = this.get_node(obj, true);
				if(obj.state.selected) {
					obj.state.selected = false;
					this._data.core.selected = $.vakata.array_remove_item(this._data.core.selected, obj.id);
					if(dom.length) {
						dom.attr('aria-selected', false).children('.jstree-anchor').removeClass('jstree-clicked');
					}
					/**
					 * triggered when an node is deselected
					 * @event
					 * @name deselect_node.jstree
					 * @param {Object} node
					 * @param {Array} selected the current selection
					 * @param {Object} event the event (if any) that triggered this deselect_node
					 */
					this.trigger('deselect_node', { 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });
					if(!supress_event) {
						this.trigger('changed', { 'action' : 'deselect_node', 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });
					}
				}
			},
			/**
			 * select all nodes in the tree
			 * @name select_all([supress_event])
			 * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered
			 * @trigger select_all.jstree, changed.jstree
			 */
			select_all : function (supress_event) {
				var tmp = this._data.core.selected.concat([]), i, j;
				this._data.core.selected = this._model.data[$.jstree.root].children_d.concat();
				for(i = 0, j = this._data.core.selected.length; i < j; i++) {
					if(this._model.data[this._data.core.selected[i]]) {
						this._model.data[this._data.core.selected[i]].state.selected = true;
					}
				}
				this.redraw(true);
				/**
				 * triggered when all nodes are selected
				 * @event
				 * @name select_all.jstree
				 * @param {Array} selected the current selection
				 */
				this.trigger('select_all', { 'selected' : this._data.core.selected });
				if(!supress_event) {
					this.trigger('changed', { 'action' : 'select_all', 'selected' : this._data.core.selected, 'old_selection' : tmp });
				}
			},
			/**
			 * deselect all selected nodes
			 * @name deselect_all([supress_event])
			 * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered
			 * @trigger deselect_all.jstree, changed.jstree
			 */
			deselect_all : function (supress_event) {
				var tmp = this._data.core.selected.concat([]), i, j;
				for(i = 0, j = this._data.core.selected.length; i < j; i++) {
					if(this._model.data[this._data.core.selected[i]]) {
						this._model.data[this._data.core.selected[i]].state.selected = false;
					}
				}
				this._data.core.selected = [];
				this.element.find('.jstree-clicked').removeClass('jstree-clicked').parent().attr('aria-selected', false);
				/**
				 * triggered when all nodes are deselected
				 * @event
				 * @name deselect_all.jstree
				 * @param {Object} node the previous selection
				 * @param {Array} selected the current selection
				 */
				this.trigger('deselect_all', { 'selected' : this._data.core.selected, 'node' : tmp });
				if(!supress_event) {
					this.trigger('changed', { 'action' : 'deselect_all', 'selected' : this._data.core.selected, 'old_selection' : tmp });
				}
			},
			/**
			 * checks if a node is selected
			 * @name is_selected(obj)
			 * @param  {mixed}  obj
			 * @return {Boolean}
			 */
			is_selected : function (obj) {
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) {
					return false;
				}
				return obj.state.selected;
			},
			/**
			 * get an array of all selected nodes
			 * @name get_selected([full])
			 * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
			 * @return {Array}
			 */
			get_selected : function (full) {
				return full ? $.map(this._data.core.selected, $.proxy(function (i) { return this.get_node(i); }, this)) : this._data.core.selected.slice();
			},
			/**
			 * get an array of all top level selected nodes (ignoring children of selected nodes)
			 * @name get_top_selected([full])
			 * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
			 * @return {Array}
			 */
			get_top_selected : function (full) {
				var tmp = this.get_selected(true),
					obj = {}, i, j, k, l;
				for(i = 0, j = tmp.length; i < j; i++) {
					obj[tmp[i].id] = tmp[i];
				}
				for(i = 0, j = tmp.length; i < j; i++) {
					for(k = 0, l = tmp[i].children_d.length; k < l; k++) {
						if(obj[tmp[i].children_d[k]]) {
							delete obj[tmp[i].children_d[k]];
						}
					}
				}
				tmp = [];
				for(i in obj) {
					if(obj.hasOwnProperty(i)) {
						tmp.push(i);
					}
				}
				return full ? $.map(tmp, $.proxy(function (i) { return this.get_node(i); }, this)) : tmp;
			},
			/**
			 * get an array of all bottom level selected nodes (ignoring selected parents)
			 * @name get_bottom_selected([full])
			 * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
			 * @return {Array}
			 */
			get_bottom_selected : function (full) {
				var tmp = this.get_selected(true),
					obj = [], i, j;
				for(i = 0, j = tmp.length; i < j; i++) {
					if(!tmp[i].children.length) {
						obj.push(tmp[i].id);
					}
				}
				return full ? $.map(obj, $.proxy(function (i) { return this.get_node(i); }, this)) : obj;
			},
			/**
			 * gets the current state of the tree so that it can be restored later with `set_state(state)`. Used internally.
			 * @name get_state()
			 * @private
			 * @return {Object}
			 */
			get_state : function () {
				var state	= {
					'core' : {
						'open' : [],
						'scroll' : {
							'left' : this.element.scrollLeft(),
							'top' : this.element.scrollTop()
						},
						/*!
						'themes' : {
							'name' : this.get_theme(),
							'icons' : this._data.core.themes.icons,
							'dots' : this._data.core.themes.dots
						},
						*/
						'selected' : []
					}
				}, i;
				for(i in this._model.data) {
					if(this._model.data.hasOwnProperty(i)) {
						if(i !== $.jstree.root) {
							if(this._model.data[i].state.opened) {
								state.core.open.push(i);
							}
							if(this._model.data[i].state.selected) {
								state.core.selected.push(i);
							}
						}
					}
				}
				return state;
			},
			/**
			 * sets the state of the tree. Used internally.
			 * @name set_state(state [, callback])
			 * @private
			 * @param {Object} state the state to restore. Keep in mind this object is passed by reference and jstree will modify it.
			 * @param {Function} callback an optional function to execute once the state is restored.
			 * @trigger set_state.jstree
			 */
			set_state : function (state, callback) {
				if(state) {
					if(state.core) {
						var res, n, t, _this, i;
						if(state.core.open) {
							if(!$.isArray(state.core.open) || !state.core.open.length) {
								delete state.core.open;
								this.set_state(state, callback);
							}
							else {
								this._load_nodes(state.core.open, function (nodes) {
									this.open_node(nodes, false, 0);
									delete state.core.open;
									this.set_state(state, callback);
								}, true);
							}
							return false;
						}
						if(state.core.scroll) {
							if(state.core.scroll && state.core.scroll.left !== undefined) {
								this.element.scrollLeft(state.core.scroll.left);
							}
							if(state.core.scroll && state.core.scroll.top !== undefined) {
								this.element.scrollTop(state.core.scroll.top);
							}
							delete state.core.scroll;
							this.set_state(state, callback);
							return false;
						}
						if(state.core.selected) {
							_this = this;
							this.deselect_all();
							$.each(state.core.selected, function (i, v) {
								_this.select_node(v, false, true);
							});
							delete state.core.selected;
							this.set_state(state, callback);
							return false;
						}
						for(i in state) {
							if(state.hasOwnProperty(i) && i !== "core" && $.inArray(i, this.settings.plugins) === -1) {
								delete state[i];
							}
						}
						if($.isEmptyObject(state.core)) {
							delete state.core;
							this.set_state(state, callback);
							return false;
						}
					}
					if($.isEmptyObject(state)) {
						state = null;
						if(callback) { callback.call(this); }
						/**
						 * triggered when a `set_state` call completes
						 * @event
						 * @name set_state.jstree
						 */
						this.trigger('set_state');
						return false;
					}
					return true;
				}
				return false;
			},
			/**
			 * refreshes the tree - all nodes are reloaded with calls to `load_node`.
			 * @name refresh()
			 * @param {Boolean} skip_loading an option to skip showing the loading indicator
			 * @param {Mixed} forget_state if set to `true` state will not be reapplied, if set to a function (receiving the current state as argument) the result of that function will be used as state
			 * @trigger refresh.jstree
			 */
			refresh : function (skip_loading, forget_state) {
				this._data.core.state = forget_state === true ? {} : this.get_state();
				if(forget_state && $.isFunction(forget_state)) { this._data.core.state = forget_state.call(this, this._data.core.state); }
				this._cnt = 0;
				this._model.data = {};
				this._model.data[$.jstree.root] = {
					id : $.jstree.root,
					parent : null,
					parents : [],
					children : [],
					children_d : [],
					state : { loaded : false }
				};
				this._data.core.selected = [];
				this._data.core.last_clicked = null;
				this._data.core.focused = null;

				var c = this.get_container_ul()[0].className;
				if(!skip_loading) {
					this.element.html("<"+"ul class='"+c+"' role='group'><"+"li class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='treeitem' id='j"+this._id+"_loading'><i class='jstree-icon jstree-ocl'></i><"+"a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>" + this.get_string("Loading ...") + "</a></li></ul>");
					this.element.attr('aria-activedescendant','j'+this._id+'_loading');
				}
				this.load_node($.jstree.root, function (o, s) {
					if(s) {
						this.get_container_ul()[0].className = c;
						if(this._firstChild(this.get_container_ul()[0])) {
							this.element.attr('aria-activedescendant',this._firstChild(this.get_container_ul()[0]).id);
						}
						this.set_state($.extend(true, {}, this._data.core.state), function () {
							/**
							 * triggered when a `refresh` call completes
							 * @event
							 * @name refresh.jstree
							 */
							this.trigger('refresh');
						});
					}
					this._data.core.state = null;
				});
			},
			/**
			 * refreshes a node in the tree (reload its children) all opened nodes inside that node are reloaded with calls to `load_node`.
			 * @name refresh_node(obj)
			 * @param  {mixed} obj the node
			 * @trigger refresh_node.jstree
			 */
			refresh_node : function (obj) {
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) { return false; }
				var opened = [], to_load = [], s = this._data.core.selected.concat([]);
				to_load.push(obj.id);
				if(obj.state.opened === true) { opened.push(obj.id); }
				this.get_node(obj, true).find('.jstree-open').each(function() { to_load.push(this.id); opened.push(this.id); });
				this._load_nodes(to_load, $.proxy(function (nodes) {
					this.open_node(opened, false, 0);
					this.select_node(s);
					/**
					 * triggered when a node is refreshed
					 * @event
					 * @name refresh_node.jstree
					 * @param {Object} node - the refreshed node
					 * @param {Array} nodes - an array of the IDs of the nodes that were reloaded
					 */
					this.trigger('refresh_node', { 'node' : obj, 'nodes' : nodes });
				}, this), false, true);
			},
			/**
			 * set (change) the ID of a node
			 * @name set_id(obj, id)
			 * @param  {mixed} obj the node
			 * @param  {String} id the new ID
			 * @return {Boolean}
			 * @trigger set_id.jstree
			 */
			set_id : function (obj, id) {
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) { return false; }
				var i, j, m = this._model.data, old = obj.id;
				id = id.toString();
				// update parents (replace current ID with new one in children and children_d)
				m[obj.parent].children[$.inArray(obj.id, m[obj.parent].children)] = id;
				for(i = 0, j = obj.parents.length; i < j; i++) {
					m[obj.parents[i]].children_d[$.inArray(obj.id, m[obj.parents[i]].children_d)] = id;
				}
				// update children (replace current ID with new one in parent and parents)
				for(i = 0, j = obj.children.length; i < j; i++) {
					m[obj.children[i]].parent = id;
				}
				for(i = 0, j = obj.children_d.length; i < j; i++) {
					m[obj.children_d[i]].parents[$.inArray(obj.id, m[obj.children_d[i]].parents)] = id;
				}
				i = $.inArray(obj.id, this._data.core.selected);
				if(i !== -1) { this._data.core.selected[i] = id; }
				// update model and obj itself (obj.id, this._model.data[KEY])
				i = this.get_node(obj.id, true);
				if(i) {
					i.attr('id', id); //.children('.jstree-anchor').attr('id', id + '_anchor').end().attr('aria-labelledby', id + '_anchor');
					if(this.element.attr('aria-activedescendant') === obj.id) {
						this.element.attr('aria-activedescendant', id);
					}
				}
				delete m[obj.id];
				obj.id = id;
				obj.li_attr.id = id;
				m[id] = obj;
				/**
				 * triggered when a node id value is changed
				 * @event
				 * @name set_id.jstree
				 * @param {Object} node
				 * @param {String} old the old id
				 */
				this.trigger('set_id',{ "node" : obj, "new" : obj.id, "old" : old });
				return true;
			},
			/**
			 * get the text value of a node
			 * @name get_text(obj)
			 * @param  {mixed} obj the node
			 * @return {String}
			 */
			get_text : function (obj) {
				obj = this.get_node(obj);
				return (!obj || obj.id === $.jstree.root) ? false : obj.text;
			},
			/**
			 * set the text value of a node. Used internally, please use `rename_node(obj, val)`.
			 * @private
			 * @name set_text(obj, val)
			 * @param  {mixed} obj the node, you can pass an array to set the text on multiple nodes
			 * @param  {String} val the new text value
			 * @return {Boolean}
			 * @trigger set_text.jstree
			 */
			set_text : function (obj, val) {
				var t1, t2;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.set_text(obj[t1], val);
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) { return false; }
				obj.text = val;
				if(this.get_node(obj, true).length) {
					this.redraw_node(obj.id);
				}
				/**
				 * triggered when a node text value is changed
				 * @event
				 * @name set_text.jstree
				 * @param {Object} obj
				 * @param {String} text the new value
				 */
				this.trigger('set_text',{ "obj" : obj, "text" : val });
				return true;
			},
			/**
			 * gets a JSON representation of a node (or the whole tree)
			 * @name get_json([obj, options])
			 * @param  {mixed} obj
			 * @param  {Object} options
			 * @param  {Boolean} options.no_state do not return state information
			 * @param  {Boolean} options.no_id do not return ID
			 * @param  {Boolean} options.no_children do not include children
			 * @param  {Boolean} options.no_data do not include node data
			 * @param  {Boolean} options.flat return flat JSON instead of nested
			 * @return {Object}
			 */
			get_json : function (obj, options, flat) {
				obj = this.get_node(obj || $.jstree.root);
				if(!obj) { return false; }
				if(options && options.flat && !flat) { flat = []; }
				var tmp = {
					'id' : obj.id,
					'text' : obj.text,
					'icon' : this.get_icon(obj),
					'li_attr' : $.extend(true, {}, obj.li_attr),
					'a_attr' : $.extend(true, {}, obj.a_attr),
					'state' : {},
					'data' : options && options.no_data ? false : $.extend(true, {}, obj.data)
					//( this.get_node(obj, true).length ? this.get_node(obj, true).data() : obj.data ),
				}, i, j;
				if(options && options.flat) {
					tmp.parent = obj.parent;
				}
				else {
					tmp.children = [];
				}
				if(!options || !options.no_state) {
					for(i in obj.state) {
						if(obj.state.hasOwnProperty(i)) {
							tmp.state[i] = obj.state[i];
						}
					}
				}
				if(options && options.no_id) {
					delete tmp.id;
					if(tmp.li_attr && tmp.li_attr.id) {
						delete tmp.li_attr.id;
					}
					if(tmp.a_attr && tmp.a_attr.id) {
						delete tmp.a_attr.id;
					}
				}
				if(options && options.flat && obj.id !== $.jstree.root) {
					flat.push(tmp);
				}
				if(!options || !options.no_children) {
					for(i = 0, j = obj.children.length; i < j; i++) {
						if(options && options.flat) {
							this.get_json(obj.children[i], options, flat);
						}
						else {
							tmp.children.push(this.get_json(obj.children[i], options));
						}
					}
				}
				return options && options.flat ? flat : (obj.id === $.jstree.root ? tmp.children : tmp);
			},
			/**
			 * create a new node (do not confuse with load_node)
			 * @name create_node([par, node, pos, callback, is_loaded])
			 * @param  {mixed}   par       the parent node (to create a root node use either "#" (string) or `null`)
			 * @param  {mixed}   node      the data for the new node (a valid JSON object, or a simple string with the name)
			 * @param  {mixed}   pos       the index at which to insert the node, "first" and "last" are also supported, default is "last"
			 * @param  {Function} callback a function to be called once the node is created
			 * @param  {Boolean} is_loaded internal argument indicating if the parent node was succesfully loaded
			 * @return {String}            the ID of the newly create node
			 * @trigger model.jstree, create_node.jstree
			 */
			create_node : function (par, node, pos, callback, is_loaded) {
				if(par === null) { par = $.jstree.root; }
				par = this.get_node(par);
				if(!par) { return false; }
				pos = pos === undefined ? "last" : pos;
				if(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {
					return this.load_node(par, function () { this.create_node(par, node, pos, callback, true); });
				}
				if(!node) { node = { "text" : this.get_string('New node') }; }
				if(typeof node === "string") { node = { "text" : node }; }
				if(node.text === undefined) { node.text = this.get_string('New node'); }
				var tmp, dpc, i, j;

				if(par.id === $.jstree.root) {
					if(pos === "before") { pos = "first"; }
					if(pos === "after") { pos = "last"; }
				}
				switch(pos) {
					case "before":
						tmp = this.get_node(par.parent);
						pos = $.inArray(par.id, tmp.children);
						par = tmp;
						break;
					case "after" :
						tmp = this.get_node(par.parent);
						pos = $.inArray(par.id, tmp.children) + 1;
						par = tmp;
						break;
					case "inside":
					case "first":
						pos = 0;
						break;
					case "last":
						pos = par.children.length;
						break;
					default:
						if(!pos) { pos = 0; }
						break;
				}
				if(pos > par.children.length) { pos = par.children.length; }
				if(!node.id) { node.id = true; }
				if(!this.check("create_node", node, par, pos)) {
					this.settings.core.error.call(this, this._data.core.last_error);
					return false;
				}
				if(node.id === true) { delete node.id; }
				node = this._parse_model_from_json(node, par.id, par.parents.concat());
				if(!node) { return false; }
				tmp = this.get_node(node);
				dpc = [];
				dpc.push(node);
				dpc = dpc.concat(tmp.children_d);
				this.trigger('model', { "nodes" : dpc, "parent" : par.id });

				par.children_d = par.children_d.concat(dpc);
				for(i = 0, j = par.parents.length; i < j; i++) {
					this._model.data[par.parents[i]].children_d = this._model.data[par.parents[i]].children_d.concat(dpc);
				}
				node = tmp;
				tmp = [];
				for(i = 0, j = par.children.length; i < j; i++) {
					tmp[i >= pos ? i+1 : i] = par.children[i];
				}
				tmp[pos] = node.id;
				par.children = tmp;

				this.redraw_node(par, true);
				if(callback) { callback.call(this, this.get_node(node)); }
				/**
				 * triggered when a node is created
				 * @event
				 * @name create_node.jstree
				 * @param {Object} node
				 * @param {String} parent the parent's ID
				 * @param {Number} position the position of the new node among the parent's children
				 */
				this.trigger('create_node', { "node" : this.get_node(node), "parent" : par.id, "position" : pos });
				return node.id;
			},
			/**
			 * set the text value of a node
			 * @name rename_node(obj, val)
			 * @param  {mixed} obj the node, you can pass an array to rename multiple nodes to the same name
			 * @param  {String} val the new text value
			 * @return {Boolean}
			 * @trigger rename_node.jstree
			 */
			rename_node : function (obj, val) {
				var t1, t2, old;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.rename_node(obj[t1], val);
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) { return false; }
				old = obj.text;
				if(!this.check("rename_node", obj, this.get_parent(obj), val)) {
					this.settings.core.error.call(this, this._data.core.last_error);
					return false;
				}
				this.set_text(obj, val); // .apply(this, Array.prototype.slice.call(arguments))
				/**
				 * triggered when a node is renamed
				 * @event
				 * @name rename_node.jstree
				 * @param {Object} node
				 * @param {String} text the new value
				 * @param {String} old the old value
				 */
				this.trigger('rename_node', { "node" : obj, "text" : val, "old" : old });
				return true;
			},
			/**
			 * remove a node
			 * @name delete_node(obj)
			 * @param  {mixed} obj the node, you can pass an array to delete multiple nodes
			 * @return {Boolean}
			 * @trigger delete_node.jstree, changed.jstree
			 */
			delete_node : function (obj) {
				var t1, t2, par, pos, tmp, i, j, k, l, c, top, lft;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.delete_node(obj[t1]);
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) { return false; }
				par = this.get_node(obj.parent);
				pos = $.inArray(obj.id, par.children);
				c = false;
				if(!this.check("delete_node", obj, par, pos)) {
					this.settings.core.error.call(this, this._data.core.last_error);
					return false;
				}
				if(pos !== -1) {
					par.children = $.vakata.array_remove(par.children, pos);
				}
				tmp = obj.children_d.concat([]);
				tmp.push(obj.id);
				for(i = 0, j = obj.parents.length; i < j; i++) {
					this._model.data[obj.parents[i]].children_d = $.vakata.array_filter(this._model.data[obj.parents[i]].children_d, function (v) {
						return $.inArray(v, tmp) === -1;
					});
				}
				for(k = 0, l = tmp.length; k < l; k++) {
					if(this._model.data[tmp[k]].state.selected) {
						c = true;
						break;
					}
				}
				if (c) {
					this._data.core.selected = $.vakata.array_filter(this._data.core.selected, function (v) {
						return $.inArray(v, tmp) === -1;
					});
				}
				/**
				 * triggered when a node is deleted
				 * @event
				 * @name delete_node.jstree
				 * @param {Object} node
				 * @param {String} parent the parent's ID
				 */
				this.trigger('delete_node', { "node" : obj, "parent" : par.id });
				if(c) {
					this.trigger('changed', { 'action' : 'delete_node', 'node' : obj, 'selected' : this._data.core.selected, 'parent' : par.id });
				}
				for(k = 0, l = tmp.length; k < l; k++) {
					delete this._model.data[tmp[k]];
				}
				if($.inArray(this._data.core.focused, tmp) !== -1) {
					this._data.core.focused = null;
					top = this.element[0].scrollTop;
					lft = this.element[0].scrollLeft;
					if(par.id === $.jstree.root) {
						if (this._model.data[$.jstree.root].children[0]) {
							this.get_node(this._model.data[$.jstree.root].children[0], true).children('.jstree-anchor').focus();
						}
					}
					else {
						this.get_node(par, true).children('.jstree-anchor').focus();
					}
					this.element[0].scrollTop  = top;
					this.element[0].scrollLeft = lft;
				}
				this.redraw_node(par, true);
				return true;
			},
			/**
			 * check if an operation is premitted on the tree. Used internally.
			 * @private
			 * @name check(chk, obj, par, pos)
			 * @param  {String} chk the operation to check, can be "create_node", "rename_node", "delete_node", "copy_node" or "move_node"
			 * @param  {mixed} obj the node
			 * @param  {mixed} par the parent
			 * @param  {mixed} pos the position to insert at, or if "rename_node" - the new name
			 * @param  {mixed} more some various additional information, for example if a "move_node" operations is triggered by DND this will be the hovered node
			 * @return {Boolean}
			 */
			check : function (chk, obj, par, pos, more) {
				obj = obj && obj.id ? obj : this.get_node(obj);
				par = par && par.id ? par : this.get_node(par);
				var tmp = chk.match(/^move_node|copy_node|create_node$/i) ? par : obj,
					chc = this.settings.core.check_callback;
				if(chk === "move_node" || chk === "copy_node") {
					if((!more || !more.is_multi) && (obj.id === par.id || (chk === "move_node" && $.inArray(obj.id, par.children) === pos) || $.inArray(par.id, obj.children_d) !== -1)) {
						this._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_01', 'reason' : 'Moving parent inside child', 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };
						return false;
					}
				}
				if(tmp && tmp.data) { tmp = tmp.data; }
				if(tmp && tmp.functions && (tmp.functions[chk] === false || tmp.functions[chk] === true)) {
					if(tmp.functions[chk] === false) {
						this._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_02', 'reason' : 'Node data prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };
					}
					return tmp.functions[chk];
				}
				if(chc === false || ($.isFunction(chc) && chc.call(this, chk, obj, par, pos, more) === false) || (chc && chc[chk] === false)) {
					this._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_03', 'reason' : 'User config for core.check_callback prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };
					return false;
				}
				return true;
			},
			/**
			 * get the last error
			 * @name last_error()
			 * @return {Object}
			 */
			last_error : function () {
				return this._data.core.last_error;
			},
			/**
			 * move a node to a new parent
			 * @name move_node(obj, par [, pos, callback, is_loaded])
			 * @param  {mixed} obj the node to move, pass an array to move multiple nodes
			 * @param  {mixed} par the new parent
			 * @param  {mixed} pos the position to insert at (besides integer values, "first" and "last" are supported, as well as "before" and "after"), defaults to integer `0`
			 * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position
			 * @param  {Boolean} is_loaded internal parameter indicating if the parent node has been loaded
			 * @param  {Boolean} skip_redraw internal parameter indicating if the tree should be redrawn
			 * @param  {Boolean} instance internal parameter indicating if the node comes from another instance
			 * @trigger move_node.jstree
			 */
			move_node : function (obj, par, pos, callback, is_loaded, skip_redraw, origin) {
				var t1, t2, old_par, old_pos, new_par, old_ins, is_multi, dpc, tmp, i, j, k, l, p;

				par = this.get_node(par);
				pos = pos === undefined ? 0 : pos;
				if(!par) { return false; }
				if(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {
					return this.load_node(par, function () { this.move_node(obj, par, pos, callback, true, false, origin); });
				}

				if($.isArray(obj)) {
					if(obj.length === 1) {
						obj = obj[0];
					}
					else {
						//obj = obj.slice();
						for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
							if((tmp = this.move_node(obj[t1], par, pos, callback, is_loaded, false, origin))) {
								par = tmp;
								pos = "after";
							}
						}
						this.redraw();
						return true;
					}
				}
				obj = obj && obj.id ? obj : this.get_node(obj);

				if(!obj || obj.id === $.jstree.root) { return false; }

				old_par = (obj.parent || $.jstree.root).toString();
				new_par = (!pos.toString().match(/^(before|after)$/) || par.id === $.jstree.root) ? par : this.get_node(par.parent);
				old_ins = origin ? origin : (this._model.data[obj.id] ? this : $.jstree.reference(obj.id));
				is_multi = !old_ins || !old_ins._id || (this._id !== old_ins._id);
				old_pos = old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $.inArray(obj.id, old_ins._model.data[old_par].children) : -1;
				if(old_ins && old_ins._id) {
					obj = old_ins._model.data[obj.id];
				}

				if(is_multi) {
					if((tmp = this.copy_node(obj, par, pos, callback, is_loaded, false, origin))) {
						if(old_ins) { old_ins.delete_node(obj); }
						return tmp;
					}
					return false;
				}
				//var m = this._model.data;
				if(par.id === $.jstree.root) {
					if(pos === "before") { pos = "first"; }
					if(pos === "after") { pos = "last"; }
				}
				switch(pos) {
					case "before":
						pos = $.inArray(par.id, new_par.children);
						break;
					case "after" :
						pos = $.inArray(par.id, new_par.children) + 1;
						break;
					case "inside":
					case "first":
						pos = 0;
						break;
					case "last":
						pos = new_par.children.length;
						break;
					default:
						if(!pos) { pos = 0; }
						break;
				}
				if(pos > new_par.children.length) { pos = new_par.children.length; }
				if(!this.check("move_node", obj, new_par, pos, { 'core' : true, 'origin' : origin, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id) })) {
					this.settings.core.error.call(this, this._data.core.last_error);
					return false;
				}
				if(obj.parent === new_par.id) {
					dpc = new_par.children.concat();
					tmp = $.inArray(obj.id, dpc);
					if(tmp !== -1) {
						dpc = $.vakata.array_remove(dpc, tmp);
						if(pos > tmp) { pos--; }
					}
					tmp = [];
					for(i = 0, j = dpc.length; i < j; i++) {
						tmp[i >= pos ? i+1 : i] = dpc[i];
					}
					tmp[pos] = obj.id;
					new_par.children = tmp;
					this._node_changed(new_par.id);
					this.redraw(new_par.id === $.jstree.root);
				}
				else {
					// clean old parent and up
					tmp = obj.children_d.concat();
					tmp.push(obj.id);
					for(i = 0, j = obj.parents.length; i < j; i++) {
						dpc = [];
						p = old_ins._model.data[obj.parents[i]].children_d;
						for(k = 0, l = p.length; k < l; k++) {
							if($.inArray(p[k], tmp) === -1) {
								dpc.push(p[k]);
							}
						}
						old_ins._model.data[obj.parents[i]].children_d = dpc;
					}
					old_ins._model.data[old_par].children = $.vakata.array_remove_item(old_ins._model.data[old_par].children, obj.id);

					// insert into new parent and up
					for(i = 0, j = new_par.parents.length; i < j; i++) {
						this._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(tmp);
					}
					dpc = [];
					for(i = 0, j = new_par.children.length; i < j; i++) {
						dpc[i >= pos ? i+1 : i] = new_par.children[i];
					}
					dpc[pos] = obj.id;
					new_par.children = dpc;
					new_par.children_d.push(obj.id);
					new_par.children_d = new_par.children_d.concat(obj.children_d);

					// update object
					obj.parent = new_par.id;
					tmp = new_par.parents.concat();
					tmp.unshift(new_par.id);
					p = obj.parents.length;
					obj.parents = tmp;

					// update object children
					tmp = tmp.concat();
					for(i = 0, j = obj.children_d.length; i < j; i++) {
						this._model.data[obj.children_d[i]].parents = this._model.data[obj.children_d[i]].parents.slice(0,p*-1);
						Array.prototype.push.apply(this._model.data[obj.children_d[i]].parents, tmp);
					}

					if(old_par === $.jstree.root || new_par.id === $.jstree.root) {
						this._model.force_full_redraw = true;
					}
					if(!this._model.force_full_redraw) {
						this._node_changed(old_par);
						this._node_changed(new_par.id);
					}
					if(!skip_redraw) {
						this.redraw();
					}
				}
				if(callback) { callback.call(this, obj, new_par, pos); }
				/**
				 * triggered when a node is moved
				 * @event
				 * @name move_node.jstree
				 * @param {Object} node
				 * @param {String} parent the parent's ID
				 * @param {Number} position the position of the node among the parent's children
				 * @param {String} old_parent the old parent of the node
				 * @param {Number} old_position the old position of the node
				 * @param {Boolean} is_multi do the node and new parent belong to different instances
				 * @param {jsTree} old_instance the instance the node came from
				 * @param {jsTree} new_instance the instance of the new parent
				 */
				this.trigger('move_node', { "node" : obj, "parent" : new_par.id, "position" : pos, "old_parent" : old_par, "old_position" : old_pos, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id), 'old_instance' : old_ins, 'new_instance' : this });
				return obj.id;
			},
			/**
			 * copy a node to a new parent
			 * @name copy_node(obj, par [, pos, callback, is_loaded])
			 * @param  {mixed} obj the node to copy, pass an array to copy multiple nodes
			 * @param  {mixed} par the new parent
			 * @param  {mixed} pos the position to insert at (besides integer values, "first" and "last" are supported, as well as "before" and "after"), defaults to integer `0`
			 * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position
			 * @param  {Boolean} is_loaded internal parameter indicating if the parent node has been loaded
			 * @param  {Boolean} skip_redraw internal parameter indicating if the tree should be redrawn
			 * @param  {Boolean} instance internal parameter indicating if the node comes from another instance
			 * @trigger model.jstree copy_node.jstree
			 */
			copy_node : function (obj, par, pos, callback, is_loaded, skip_redraw, origin) {
				var t1, t2, dpc, tmp, i, j, node, old_par, new_par, old_ins, is_multi;

				par = this.get_node(par);
				pos = pos === undefined ? 0 : pos;
				if(!par) { return false; }
				if(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {
					return this.load_node(par, function () { this.copy_node(obj, par, pos, callback, true, false, origin); });
				}

				if($.isArray(obj)) {
					if(obj.length === 1) {
						obj = obj[0];
					}
					else {
						//obj = obj.slice();
						for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
							if((tmp = this.copy_node(obj[t1], par, pos, callback, is_loaded, true, origin))) {
								par = tmp;
								pos = "after";
							}
						}
						this.redraw();
						return true;
					}
				}
				obj = obj && obj.id ? obj : this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) { return false; }

				old_par = (obj.parent || $.jstree.root).toString();
				new_par = (!pos.toString().match(/^(before|after)$/) || par.id === $.jstree.root) ? par : this.get_node(par.parent);
				old_ins = origin ? origin : (this._model.data[obj.id] ? this : $.jstree.reference(obj.id));
				is_multi = !old_ins || !old_ins._id || (this._id !== old_ins._id);

				if(old_ins && old_ins._id) {
					obj = old_ins._model.data[obj.id];
				}

				if(par.id === $.jstree.root) {
					if(pos === "before") { pos = "first"; }
					if(pos === "after") { pos = "last"; }
				}
				switch(pos) {
					case "before":
						pos = $.inArray(par.id, new_par.children);
						break;
					case "after" :
						pos = $.inArray(par.id, new_par.children) + 1;
						break;
					case "inside":
					case "first":
						pos = 0;
						break;
					case "last":
						pos = new_par.children.length;
						break;
					default:
						if(!pos) { pos = 0; }
						break;
				}
				if(pos > new_par.children.length) { pos = new_par.children.length; }
				if(!this.check("copy_node", obj, new_par, pos, { 'core' : true, 'origin' : origin, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id) })) {
					this.settings.core.error.call(this, this._data.core.last_error);
					return false;
				}
				node = old_ins ? old_ins.get_json(obj, { no_id : true, no_data : true, no_state : true }) : obj;
				if(!node) { return false; }
				if(node.id === true) { delete node.id; }
				node = this._parse_model_from_json(node, new_par.id, new_par.parents.concat());
				if(!node) { return false; }
				tmp = this.get_node(node);
				if(obj && obj.state && obj.state.loaded === false) { tmp.state.loaded = false; }
				dpc = [];
				dpc.push(node);
				dpc = dpc.concat(tmp.children_d);
				this.trigger('model', { "nodes" : dpc, "parent" : new_par.id });

				// insert into new parent and up
				for(i = 0, j = new_par.parents.length; i < j; i++) {
					this._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(dpc);
				}
				dpc = [];
				for(i = 0, j = new_par.children.length; i < j; i++) {
					dpc[i >= pos ? i+1 : i] = new_par.children[i];
				}
				dpc[pos] = tmp.id;
				new_par.children = dpc;
				new_par.children_d.push(tmp.id);
				new_par.children_d = new_par.children_d.concat(tmp.children_d);

				if(new_par.id === $.jstree.root) {
					this._model.force_full_redraw = true;
				}
				if(!this._model.force_full_redraw) {
					this._node_changed(new_par.id);
				}
				if(!skip_redraw) {
					this.redraw(new_par.id === $.jstree.root);
				}
				if(callback) { callback.call(this, tmp, new_par, pos); }
				/**
				 * triggered when a node is copied
				 * @event
				 * @name copy_node.jstree
				 * @param {Object} node the copied node
				 * @param {Object} original the original node
				 * @param {String} parent the parent's ID
				 * @param {Number} position the position of the node among the parent's children
				 * @param {String} old_parent the old parent of the node
				 * @param {Number} old_position the position of the original node
				 * @param {Boolean} is_multi do the node and new parent belong to different instances
				 * @param {jsTree} old_instance the instance the node came from
				 * @param {jsTree} new_instance the instance of the new parent
				 */
				this.trigger('copy_node', { "node" : tmp, "original" : obj, "parent" : new_par.id, "position" : pos, "old_parent" : old_par, "old_position" : old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $.inArray(obj.id, old_ins._model.data[old_par].children) : -1,'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id), 'old_instance' : old_ins, 'new_instance' : this });
				return tmp.id;
			},
			/**
			 * cut a node (a later call to `paste(obj)` would move the node)
			 * @name cut(obj)
			 * @param  {mixed} obj multiple objects can be passed using an array
			 * @trigger cut.jstree
			 */
			cut : function (obj) {
				if(!obj) { obj = this._data.core.selected.concat(); }
				if(!$.isArray(obj)) { obj = [obj]; }
				if(!obj.length) { return false; }
				var tmp = [], o, t1, t2;
				for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
					o = this.get_node(obj[t1]);
					if(o && o.id && o.id !== $.jstree.root) { tmp.push(o); }
				}
				if(!tmp.length) { return false; }
				ccp_node = tmp;
				ccp_inst = this;
				ccp_mode = 'move_node';
				/**
				 * triggered when nodes are added to the buffer for moving
				 * @event
				 * @name cut.jstree
				 * @param {Array} node
				 */
				this.trigger('cut', { "node" : obj });
			},
			/**
			 * copy a node (a later call to `paste(obj)` would copy the node)
			 * @name copy(obj)
			 * @param  {mixed} obj multiple objects can be passed using an array
			 * @trigger copy.jstree
			 */
			copy : function (obj) {
				if(!obj) { obj = this._data.core.selected.concat(); }
				if(!$.isArray(obj)) { obj = [obj]; }
				if(!obj.length) { return false; }
				var tmp = [], o, t1, t2;
				for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
					o = this.get_node(obj[t1]);
					if(o && o.id && o.id !== $.jstree.root) { tmp.push(o); }
				}
				if(!tmp.length) { return false; }
				ccp_node = tmp;
				ccp_inst = this;
				ccp_mode = 'copy_node';
				/**
				 * triggered when nodes are added to the buffer for copying
				 * @event
				 * @name copy.jstree
				 * @param {Array} node
				 */
				this.trigger('copy', { "node" : obj });
			},
			/**
			 * get the current buffer (any nodes that are waiting for a paste operation)
			 * @name get_buffer()
			 * @return {Object} an object consisting of `mode` ("copy_node" or "move_node"), `node` (an array of objects) and `inst` (the instance)
			 */
			get_buffer : function () {
				return { 'mode' : ccp_mode, 'node' : ccp_node, 'inst' : ccp_inst };
			},
			/**
			 * check if there is something in the buffer to paste
			 * @name can_paste()
			 * @return {Boolean}
			 */
			can_paste : function () {
				return ccp_mode !== false && ccp_node !== false; // && ccp_inst._model.data[ccp_node];
			},
			/**
			 * copy or move the previously cut or copied nodes to a new parent
			 * @name paste(obj [, pos])
			 * @param  {mixed} obj the new parent
			 * @param  {mixed} pos the position to insert at (besides integer, "first" and "last" are supported), defaults to integer `0`
			 * @trigger paste.jstree
			 */
			paste : function (obj, pos) {
				obj = this.get_node(obj);
				if(!obj || !ccp_mode || !ccp_mode.match(/^(copy_node|move_node)$/) || !ccp_node) { return false; }
				if(this[ccp_mode](ccp_node, obj, pos, false, false, false, ccp_inst)) {
					/**
					 * triggered when paste is invoked
					 * @event
					 * @name paste.jstree
					 * @param {String} parent the ID of the receiving node
					 * @param {Array} node the nodes in the buffer
					 * @param {String} mode the performed operation - "copy_node" or "move_node"
					 */
					this.trigger('paste', { "parent" : obj.id, "node" : ccp_node, "mode" : ccp_mode });
				}
				ccp_node = false;
				ccp_mode = false;
				ccp_inst = false;
			},
			/**
			 * clear the buffer of previously copied or cut nodes
			 * @name clear_buffer()
			 * @trigger clear_buffer.jstree
			 */
			clear_buffer : function () {
				ccp_node = false;
				ccp_mode = false;
				ccp_inst = false;
				/**
				 * triggered when the copy / cut buffer is cleared
				 * @event
				 * @name clear_buffer.jstree
				 */
				this.trigger('clear_buffer');
			},
			/**
			 * put a node in edit mode (input field to rename the node)
			 * @name edit(obj [, default_text, callback])
			 * @param  {mixed} obj
			 * @param  {String} default_text the text to populate the input with (if omitted or set to a non-string value the node's text value is used)
			 * @param  {Function} callback a function to be called once the text box is blurred, it is called in the instance's scope and receives the node, a status parameter (true if the rename is successful, false otherwise) and a boolean indicating if the user cancelled the edit. You can access the node's title using .text
			 */
			edit : function (obj, default_text, callback) {
				var rtl, w, a, s, t, h1, h2, fn, tmp, cancel = false;
				obj = this.get_node(obj);
				if(!obj) { return false; }
				if(this.settings.core.check_callback === false) {
					this._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_07', 'reason' : 'Could not edit node because of check_callback' };
					this.settings.core.error.call(this, this._data.core.last_error);
					return false;
				}
				tmp = obj;
				default_text = typeof default_text === 'string' ? default_text : obj.text;
				this.set_text(obj, "");
				obj = this._open_to(obj);
				tmp.text = default_text;

				rtl = this._data.core.rtl;
				w  = this.element.width();
				this._data.core.focused = tmp.id;
				a  = obj.children('.jstree-anchor').focus();
				s  = $('<span>');
				/*!
				oi = obj.children("i:visible"),
				ai = a.children("i:visible"),
				w1 = oi.width() * oi.length,
				w2 = ai.width() * ai.length,
				*/
				t  = default_text;
				h1 = $("<"+"div />", { css : { "position" : "absolute", "top" : "-200px", "left" : (rtl ? "0px" : "-1000px"), "visibility" : "hidden" } }).appendTo("body");
				h2 = $("<"+"input />", {
							"value" : t,
							"class" : "jstree-rename-input",
							// "size" : t.length,
							"css" : {
								"padding" : "0",
								"border" : "1px solid silver",
								"box-sizing" : "border-box",
								"display" : "inline-block",
								"height" : (this._data.core.li_height) + "px",
								"lineHeight" : (this._data.core.li_height) + "px",
								"width" : "150px" // will be set a bit further down
							},
							"blur" : $.proxy(function (e) {
								e.stopImmediatePropagation();
								e.preventDefault();
								var i = s.children(".jstree-rename-input"),
									v = i.val(),
									f = this.settings.core.force_text,
									nv;
								if(v === "") { v = t; }
								h1.remove();
								s.replaceWith(a);
								s.remove();
								t = f ? t : $('<div></div>').append($.parseHTML(t)).html();
								this.set_text(obj, t);
								nv = !!this.rename_node(obj, f ? $('<div></div>').text(v).text() : $('<div></div>').append($.parseHTML(v)).html());
								if(!nv) {
									this.set_text(obj, t); // move this up? and fix #483
								}
								this._data.core.focused = tmp.id;
								setTimeout($.proxy(function () {
									var node = this.get_node(tmp.id, true);
									if(node.length) {
										this._data.core.focused = tmp.id;
										node.children('.jstree-anchor').focus();
									}
								}, this), 0);
								if(callback) {
									callback.call(this, tmp, nv, cancel);
								}
								h2 = null;
							}, this),
							"keydown" : function (e) {
								var key = e.which;
								if(key === 27) {
									cancel = true;
									this.value = t;
								}
								if(key === 27 || key === 13 || key === 37 || key === 38 || key === 39 || key === 40 || key === 32) {
									e.stopImmediatePropagation();
								}
								if(key === 27 || key === 13) {
									e.preventDefault();
									this.blur();
								}
							},
							"click" : function (e) { e.stopImmediatePropagation(); },
							"mousedown" : function (e) { e.stopImmediatePropagation(); },
							"keyup" : function (e) {
								h2.width(Math.min(h1.text("pW" + this.value).width(),w));
							},
							"keypress" : function(e) {
								if(e.which === 13) { return false; }
							}
						});
					fn = {
							fontFamily		: a.css('fontFamily')		|| '',
							fontSize		: a.css('fontSize')			|| '',
							fontWeight		: a.css('fontWeight')		|| '',
							fontStyle		: a.css('fontStyle')		|| '',
							fontStretch		: a.css('fontStretch')		|| '',
							fontVariant		: a.css('fontVariant')		|| '',
							letterSpacing	: a.css('letterSpacing')	|| '',
							wordSpacing		: a.css('wordSpacing')		|| ''
					};
				s.attr('class', a.attr('class')).append(a.contents().clone()).append(h2);
				a.replaceWith(s);
				h1.css(fn);
				h2.css(fn).width(Math.min(h1.text("pW" + h2[0].value).width(),w))[0].select();
				$(document).one('mousedown.jstree touchstart.jstree dnd_start.vakata', function (e) {
					if (h2 && e.target !== h2) {
						$(h2).blur();
					}
				});
			},


			/**
			 * changes the theme
			 * @name set_theme(theme_name [, theme_url])
			 * @param {String} theme_name the name of the new theme to apply
			 * @param {mixed} theme_url  the location of the CSS file for this theme. Omit or set to `false` if you manually included the file. Set to `true` to autoload from the `core.themes.dir` directory.
			 * @trigger set_theme.jstree
			 */
			set_theme : function (theme_name, theme_url) {
				if(!theme_name) { return false; }
				if(theme_url === true) {
					var dir = this.settings.core.themes.dir;
					if(!dir) { dir = $.jstree.path + '/themes'; }
					theme_url = dir + '/' + theme_name + '/style.css';
				}
				if(theme_url && $.inArray(theme_url, themes_loaded) === -1) {
					$('head').append('<'+'link rel="stylesheet" href="' + theme_url + '" type="text/css" />');
					themes_loaded.push(theme_url);
				}
				if(this._data.core.themes.name) {
					this.element.removeClass('jstree-' + this._data.core.themes.name);
				}
				this._data.core.themes.name = theme_name;
				this.element.addClass('jstree-' + theme_name);
				this.element[this.settings.core.themes.responsive ? 'addClass' : 'removeClass' ]('jstree-' + theme_name + '-responsive');
				/**
				 * triggered when a theme is set
				 * @event
				 * @name set_theme.jstree
				 * @param {String} theme the new theme
				 */
				this.trigger('set_theme', { 'theme' : theme_name });
			},
			/**
			 * gets the name of the currently applied theme name
			 * @name get_theme()
			 * @return {String}
			 */
			get_theme : function () { return this._data.core.themes.name; },
			/**
			 * changes the theme variant (if the theme has variants)
			 * @name set_theme_variant(variant_name)
			 * @param {String|Boolean} variant_name the variant to apply (if `false` is used the current variant is removed)
			 */
			set_theme_variant : function (variant_name) {
				if(this._data.core.themes.variant) {
					this.element.removeClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);
				}
				this._data.core.themes.variant = variant_name;
				if(variant_name) {
					this.element.addClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);
				}
			},
			/**
			 * gets the name of the currently applied theme variant
			 * @name get_theme()
			 * @return {String}
			 */
			get_theme_variant : function () { return this._data.core.themes.variant; },
			/**
			 * shows a striped background on the container (if the theme supports it)
			 * @name show_stripes()
			 */
			show_stripes : function () { this._data.core.themes.stripes = true; this.get_container_ul().addClass("jstree-striped"); },
			/**
			 * hides the striped background on the container
			 * @name hide_stripes()
			 */
			hide_stripes : function () { this._data.core.themes.stripes = false; this.get_container_ul().removeClass("jstree-striped"); },
			/**
			 * toggles the striped background on the container
			 * @name toggle_stripes()
			 */
			toggle_stripes : function () { if(this._data.core.themes.stripes) { this.hide_stripes(); } else { this.show_stripes(); } },
			/**
			 * shows the connecting dots (if the theme supports it)
			 * @name show_dots()
			 */
			show_dots : function () { this._data.core.themes.dots = true; this.get_container_ul().removeClass("jstree-no-dots"); },
			/**
			 * hides the connecting dots
			 * @name hide_dots()
			 */
			hide_dots : function () { this._data.core.themes.dots = false; this.get_container_ul().addClass("jstree-no-dots"); },
			/**
			 * toggles the connecting dots
			 * @name toggle_dots()
			 */
			toggle_dots : function () { if(this._data.core.themes.dots) { this.hide_dots(); } else { this.show_dots(); } },
			/**
			 * show the node icons
			 * @name show_icons()
			 */
			show_icons : function () { this._data.core.themes.icons = true; this.get_container_ul().removeClass("jstree-no-icons"); },
			/**
			 * hide the node icons
			 * @name hide_icons()
			 */
			hide_icons : function () { this._data.core.themes.icons = false; this.get_container_ul().addClass("jstree-no-icons"); },
			/**
			 * toggle the node icons
			 * @name toggle_icons()
			 */
			toggle_icons : function () { if(this._data.core.themes.icons) { this.hide_icons(); } else { this.show_icons(); } },
			/**
			 * set the node icon for a node
			 * @name set_icon(obj, icon)
			 * @param {mixed} obj
			 * @param {String} icon the new icon - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class
			 */
			set_icon : function (obj, icon) {
				var t1, t2, dom, old;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.set_icon(obj[t1], icon);
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) { return false; }
				old = obj.icon;
				obj.icon = icon === true || icon === null || icon === undefined || icon === '' ? true : icon;
				dom = this.get_node(obj, true).children(".jstree-anchor").children(".jstree-themeicon");
				if(icon === false) {
					this.hide_icon(obj);
				}
				else if(icon === true || icon === null || icon === undefined || icon === '') {
					dom.removeClass('jstree-themeicon-custom ' + old).css("background","").removeAttr("rel");
					if(old === false) { this.show_icon(obj); }
				}
				else if(icon.indexOf("/") === -1 && icon.indexOf(".") === -1) {
					dom.removeClass(old).css("background","");
					dom.addClass(icon + ' jstree-themeicon-custom').attr("rel",icon);
					if(old === false) { this.show_icon(obj); }
				}
				else {
					dom.removeClass(old).css("background","");
					dom.addClass('jstree-themeicon-custom').css("background", "url('" + icon + "') center center no-repeat").attr("rel",icon);
					if(old === false) { this.show_icon(obj); }
				}
				return true;
			},
			/**
			 * get the node icon for a node
			 * @name get_icon(obj)
			 * @param {mixed} obj
			 * @return {String}
			 */
			get_icon : function (obj) {
				obj = this.get_node(obj);
				return (!obj || obj.id === $.jstree.root) ? false : obj.icon;
			},
			/**
			 * hide the icon on an individual node
			 * @name hide_icon(obj)
			 * @param {mixed} obj
			 */
			hide_icon : function (obj) {
				var t1, t2;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.hide_icon(obj[t1]);
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj === $.jstree.root) { return false; }
				obj.icon = false;
				this.get_node(obj, true).children(".jstree-anchor").children(".jstree-themeicon").addClass('jstree-themeicon-hidden');
				return true;
			},
			/**
			 * show the icon on an individual node
			 * @name show_icon(obj)
			 * @param {mixed} obj
			 */
			show_icon : function (obj) {
				var t1, t2, dom;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.show_icon(obj[t1]);
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj === $.jstree.root) { return false; }
				dom = this.get_node(obj, true);
				obj.icon = dom.length ? dom.children(".jstree-anchor").children(".jstree-themeicon").attr('rel') : true;
				if(!obj.icon) { obj.icon = true; }
				dom.children(".jstree-anchor").children(".jstree-themeicon").removeClass('jstree-themeicon-hidden');
				return true;
			}
		};

		// helpers
		$.vakata = {};
		// collect attributes
		$.vakata.attributes = function(node, with_values) {
			node = $(node)[0];
			var attr = with_values ? {} : [];
			if(node && node.attributes) {
				$.each(node.attributes, function (i, v) {
					if($.inArray(v.name.toLowerCase(),['style','contenteditable','hasfocus','tabindex']) !== -1) { return; }
					if(v.value !== null && $.trim(v.value) !== '') {
						if(with_values) { attr[v.name] = v.value; }
						else { attr.push(v.name); }
					}
				});
			}
			return attr;
		};
		$.vakata.array_unique = function(array) {
			var a = [], i, j, l, o = {};
			for(i = 0, l = array.length; i < l; i++) {
				if(o[array[i]] === undefined) {
					a.push(array[i]);
					o[array[i]] = true;
				}
			}
			return a;
		};
		// remove item from array
		$.vakata.array_remove = function(array, from) {
			array.splice(from, 1);
			return array;
			//var rest = array.slice((to || from) + 1 || array.length);
			//array.length = from < 0 ? array.length + from : from;
			//array.push.apply(array, rest);
			//return array;
		};
		// remove item from array
		$.vakata.array_remove_item = function(array, item) {
			var tmp = $.inArray(item, array);
			return tmp !== -1 ? $.vakata.array_remove(array, tmp) : array;
		};
		$.vakata.array_filter = function(c,a,b,d,e) {
			if (c.filter) {
				return c.filter(a, b);
			}
			d=[];
			for (e in c) {
				if (~~e+''===e+'' && e>=0 && a.call(b,c[e],+e,c)) {
					d.push(c[e]);
				}
			}
			return d;
		};


	/**
	 * ### Changed plugin
	 *
	 * This plugin adds more information to the `changed.jstree` event. The new data is contained in the `changed` event data property, and contains a lists of `selected` and `deselected` nodes.
	 */

		$.jstree.plugins.changed = function (options, parent) {
			var last = [];
			this.trigger = function (ev, data) {
				var i, j;
				if(!data) {
					data = {};
				}
				if(ev.replace('.jstree','') === 'changed') {
					data.changed = { selected : [], deselected : [] };
					var tmp = {};
					for(i = 0, j = last.length; i < j; i++) {
						tmp[last[i]] = 1;
					}
					for(i = 0, j = data.selected.length; i < j; i++) {
						if(!tmp[data.selected[i]]) {
							data.changed.selected.push(data.selected[i]);
						}
						else {
							tmp[data.selected[i]] = 2;
						}
					}
					for(i = 0, j = last.length; i < j; i++) {
						if(tmp[last[i]] === 1) {
							data.changed.deselected.push(last[i]);
						}
					}
					last = data.selected.slice();
				}
				/**
				 * triggered when selection changes (the "changed" plugin enhances the original event with more data)
				 * @event
				 * @name changed.jstree
				 * @param {Object} node
				 * @param {Object} action the action that caused the selection to change
				 * @param {Array} selected the current selection
				 * @param {Object} changed an object containing two properties `selected` and `deselected` - both arrays of node IDs, which were selected or deselected since the last changed event
				 * @param {Object} event the event (if any) that triggered this changed event
				 * @plugin changed
				 */
				parent.trigger.call(this, ev, data);
			};
			this.refresh = function (skip_loading, forget_state) {
				last = [];
				return parent.refresh.apply(this, arguments);
			};
		};

	/**
	 * ### Checkbox plugin
	 *
	 * This plugin renders checkbox icons in front of each node, making multiple selection much easier.
	 * It also supports tri-state behavior, meaning that if a node has a few of its children checked it will be rendered as undetermined, and state will be propagated up.
	 */

		var _i = document.createElement('I');
		_i.className = 'jstree-icon jstree-checkbox';
		_i.setAttribute('role', 'presentation');
		/**
		 * stores all defaults for the checkbox plugin
		 * @name $.jstree.defaults.checkbox
		 * @plugin checkbox
		 */
		$.jstree.defaults.checkbox = {
			/**
			 * a boolean indicating if checkboxes should be visible (can be changed at a later time using `show_checkboxes()` and `hide_checkboxes`). Defaults to `true`.
			 * @name $.jstree.defaults.checkbox.visible
			 * @plugin checkbox
			 */
			visible				: true,
			/**
			 * a boolean indicating if checkboxes should cascade down and have an undetermined state. Defaults to `true`.
			 * @name $.jstree.defaults.checkbox.three_state
			 * @plugin checkbox
			 */
			three_state			: true,
			/**
			 * a boolean indicating if clicking anywhere on the node should act as clicking on the checkbox. Defaults to `true`.
			 * @name $.jstree.defaults.checkbox.whole_node
			 * @plugin checkbox
			 */
			whole_node			: true,
			/**
			 * a boolean indicating if the selected style of a node should be kept, or removed. Defaults to `true`.
			 * @name $.jstree.defaults.checkbox.keep_selected_style
			 * @plugin checkbox
			 */
			keep_selected_style	: true,
			/**
			 * This setting controls how cascading and undetermined nodes are applied.
			 * If 'up' is in the string - cascading up is enabled, if 'down' is in the string - cascading down is enabled, if 'undetermined' is in the string - undetermined nodes will be used.
			 * If `three_state` is set to `true` this setting is automatically set to 'up+down+undetermined'. Defaults to ''.
			 * @name $.jstree.defaults.checkbox.cascade
			 * @plugin checkbox
			 */
			cascade				: '',
			/**
			 * This setting controls if checkbox are bound to the general tree selection or to an internal array maintained by the checkbox plugin. Defaults to `true`, only set to `false` if you know exactly what you are doing.
			 * @name $.jstree.defaults.checkbox.tie_selection
			 * @plugin checkbox
			 */
			tie_selection		: true
		};
		$.jstree.plugins.checkbox = function (options, parent) {
			this.bind = function () {
				parent.bind.call(this);
				this._data.checkbox.uto = false;
				this._data.checkbox.selected = [];
				if(this.settings.checkbox.three_state) {
					this.settings.checkbox.cascade = 'up+down+undetermined';
				}
				this.element
					.on("init.jstree", $.proxy(function () {
							this._data.checkbox.visible = this.settings.checkbox.visible;
							if(!this.settings.checkbox.keep_selected_style) {
								this.element.addClass('jstree-checkbox-no-clicked');
							}
							if(this.settings.checkbox.tie_selection) {
								this.element.addClass('jstree-checkbox-selection');
							}
						}, this))
					.on("loading.jstree", $.proxy(function () {
							this[ this._data.checkbox.visible ? 'show_checkboxes' : 'hide_checkboxes' ]();
						}, this));
				if(this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {
					this.element
						.on('changed.jstree uncheck_node.jstree check_node.jstree uncheck_all.jstree check_all.jstree move_node.jstree copy_node.jstree redraw.jstree open_node.jstree', $.proxy(function () {
								// only if undetermined is in setting
								if(this._data.checkbox.uto) { clearTimeout(this._data.checkbox.uto); }
								this._data.checkbox.uto = setTimeout($.proxy(this._undetermined, this), 50);
							}, this));
				}
				if(!this.settings.checkbox.tie_selection) {
					this.element
						.on('model.jstree', $.proxy(function (e, data) {
							var m = this._model.data,
								p = m[data.parent],
								dpc = data.nodes,
								i, j;
							for(i = 0, j = dpc.length; i < j; i++) {
								m[dpc[i]].state.checked = m[dpc[i]].state.checked || (m[dpc[i]].original && m[dpc[i]].original.state && m[dpc[i]].original.state.checked);
								if(m[dpc[i]].state.checked) {
									this._data.checkbox.selected.push(dpc[i]);
								}
							}
						}, this));
				}
				if(this.settings.checkbox.cascade.indexOf('up') !== -1 || this.settings.checkbox.cascade.indexOf('down') !== -1) {
					this.element
						.on('model.jstree', $.proxy(function (e, data) {
								var m = this._model.data,
									p = m[data.parent],
									dpc = data.nodes,
									chd = [],
									c, i, j, k, l, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection;

								if(s.indexOf('down') !== -1) {
									// apply down
									if(p.state[ t ? 'selected' : 'checked' ]) {
										for(i = 0, j = dpc.length; i < j; i++) {
											m[dpc[i]].state[ t ? 'selected' : 'checked' ] = true;
										}
										this._data[ t ? 'core' : 'checkbox' ].selected = this._data[ t ? 'core' : 'checkbox' ].selected.concat(dpc);
									}
									else {
										for(i = 0, j = dpc.length; i < j; i++) {
											if(m[dpc[i]].state[ t ? 'selected' : 'checked' ]) {
												for(k = 0, l = m[dpc[i]].children_d.length; k < l; k++) {
													m[m[dpc[i]].children_d[k]].state[ t ? 'selected' : 'checked' ] = true;
												}
												this._data[ t ? 'core' : 'checkbox' ].selected = this._data[ t ? 'core' : 'checkbox' ].selected.concat(m[dpc[i]].children_d);
											}
										}
									}
								}

								if(s.indexOf('up') !== -1) {
									// apply up
									for(i = 0, j = p.children_d.length; i < j; i++) {
										if(!m[p.children_d[i]].children.length) {
											chd.push(m[p.children_d[i]].parent);
										}
									}
									chd = $.vakata.array_unique(chd);
									for(k = 0, l = chd.length; k < l; k++) {
										p = m[chd[k]];
										while(p && p.id !== $.jstree.root) {
											c = 0;
											for(i = 0, j = p.children.length; i < j; i++) {
												c += m[p.children[i]].state[ t ? 'selected' : 'checked' ];
											}
											if(c === j) {
												p.state[ t ? 'selected' : 'checked' ] = true;
												this._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);
												tmp = this.get_node(p, true);
												if(tmp && tmp.length) {
													tmp.attr('aria-selected', true).children('.jstree-anchor').addClass( t ? 'jstree-clicked' : 'jstree-checked');
												}
											}
											else {
												break;
											}
											p = this.get_node(p.parent);
										}
									}
								}

								this._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_unique(this._data[ t ? 'core' : 'checkbox' ].selected);
							}, this))
						.on(this.settings.checkbox.tie_selection ? 'select_node.jstree' : 'check_node.jstree', $.proxy(function (e, data) {
								var obj = data.node,
									m = this._model.data,
									par = this.get_node(obj.parent),
									dom = this.get_node(obj, true),
									i, j, c, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection,
									sel = {}, cur = this._data[ t ? 'core' : 'checkbox' ].selected;

								for (i = 0, j = cur.length; i < j; i++) {
									sel[cur[i]] = true;
								}
								// apply down
								if(s.indexOf('down') !== -1) {
									//this._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_unique(this._data[ t ? 'core' : 'checkbox' ].selected.concat(obj.children_d));
									for(i = 0, j = obj.children_d.length; i < j; i++) {
										sel[obj.children_d[i]] = true;
										tmp = m[obj.children_d[i]];
										tmp.state[ t ? 'selected' : 'checked' ] = true;
										if(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {
											tmp.original.state.undetermined = false;
										}
									}
								}

								// apply up
								if(s.indexOf('up') !== -1) {
									while(par && par.id !== $.jstree.root) {
										c = 0;
										for(i = 0, j = par.children.length; i < j; i++) {
											c += m[par.children[i]].state[ t ? 'selected' : 'checked' ];
										}
										if(c === j) {
											par.state[ t ? 'selected' : 'checked' ] = true;
											sel[par.id] = true;
											//this._data[ t ? 'core' : 'checkbox' ].selected.push(par.id);
											tmp = this.get_node(par, true);
											if(tmp && tmp.length) {
												tmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');
											}
										}
										else {
											break;
										}
										par = this.get_node(par.parent);
									}
								}

								cur = [];
								for (i in sel) {
									if (sel.hasOwnProperty(i)) {
										cur.push(i);
									}
								}
								this._data[ t ? 'core' : 'checkbox' ].selected = cur;

								// apply down (process .children separately?)
								if(s.indexOf('down') !== -1 && dom.length) {
									dom.find('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked').parent().attr('aria-selected', true);
								}
							}, this))
						.on(this.settings.checkbox.tie_selection ? 'deselect_all.jstree' : 'uncheck_all.jstree', $.proxy(function (e, data) {
								var obj = this.get_node($.jstree.root),
									m = this._model.data,
									i, j, tmp;
								for(i = 0, j = obj.children_d.length; i < j; i++) {
									tmp = m[obj.children_d[i]];
									if(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {
										tmp.original.state.undetermined = false;
									}
								}
							}, this))
						.on(this.settings.checkbox.tie_selection ? 'deselect_node.jstree' : 'uncheck_node.jstree', $.proxy(function (e, data) {
								var obj = data.node,
									dom = this.get_node(obj, true),
									i, j, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection,
									cur = this._data[ t ? 'core' : 'checkbox' ].selected, sel = {};
								if(obj && obj.original && obj.original.state && obj.original.state.undetermined) {
									obj.original.state.undetermined = false;
								}

								// apply down
								if(s.indexOf('down') !== -1) {
									for(i = 0, j = obj.children_d.length; i < j; i++) {
										tmp = this._model.data[obj.children_d[i]];
										tmp.state[ t ? 'selected' : 'checked' ] = false;
										if(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {
											tmp.original.state.undetermined = false;
										}
									}
								}

								// apply up
								if(s.indexOf('up') !== -1) {
									for(i = 0, j = obj.parents.length; i < j; i++) {
										tmp = this._model.data[obj.parents[i]];
										tmp.state[ t ? 'selected' : 'checked' ] = false;
										if(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {
											tmp.original.state.undetermined = false;
										}
										tmp = this.get_node(obj.parents[i], true);
										if(tmp && tmp.length) {
											tmp.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');
										}
									}
								}
								sel = {};
								for(i = 0, j = cur.length; i < j; i++) {
									// apply down + apply up
									if(
										(s.indexOf('down') === -1 || $.inArray(cur[i], obj.children_d) === -1) &&
										(s.indexOf('up') === -1 || $.inArray(cur[i], obj.parents) === -1)
									) {
										sel[cur[i]] = true;
									}
								}
								cur = [];
								for (i in sel) {
									if (sel.hasOwnProperty(i)) {
										cur.push(i);
									}
								}
								this._data[ t ? 'core' : 'checkbox' ].selected = cur;
								
								// apply down (process .children separately?)
								if(s.indexOf('down') !== -1 && dom.length) {
									dom.find('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked').parent().attr('aria-selected', false);
								}
							}, this));
				}
				if(this.settings.checkbox.cascade.indexOf('up') !== -1) {
					this.element
						.on('delete_node.jstree', $.proxy(function (e, data) {
								// apply up (whole handler)
								var p = this.get_node(data.parent),
									m = this._model.data,
									i, j, c, tmp, t = this.settings.checkbox.tie_selection;
								while(p && p.id !== $.jstree.root && !p.state[ t ? 'selected' : 'checked' ]) {
									c = 0;
									for(i = 0, j = p.children.length; i < j; i++) {
										c += m[p.children[i]].state[ t ? 'selected' : 'checked' ];
									}
									if(j > 0 && c === j) {
										p.state[ t ? 'selected' : 'checked' ] = true;
										this._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);
										tmp = this.get_node(p, true);
										if(tmp && tmp.length) {
											tmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');
										}
									}
									else {
										break;
									}
									p = this.get_node(p.parent);
								}
							}, this))
						.on('move_node.jstree', $.proxy(function (e, data) {
								// apply up (whole handler)
								var is_multi = data.is_multi,
									old_par = data.old_parent,
									new_par = this.get_node(data.parent),
									m = this._model.data,
									p, c, i, j, tmp, t = this.settings.checkbox.tie_selection;
								if(!is_multi) {
									p = this.get_node(old_par);
									while(p && p.id !== $.jstree.root && !p.state[ t ? 'selected' : 'checked' ]) {
										c = 0;
										for(i = 0, j = p.children.length; i < j; i++) {
											c += m[p.children[i]].state[ t ? 'selected' : 'checked' ];
										}
										if(j > 0 && c === j) {
											p.state[ t ? 'selected' : 'checked' ] = true;
											this._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);
											tmp = this.get_node(p, true);
											if(tmp && tmp.length) {
												tmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');
											}
										}
										else {
											break;
										}
										p = this.get_node(p.parent);
									}
								}
								p = new_par;
								while(p && p.id !== $.jstree.root) {
									c = 0;
									for(i = 0, j = p.children.length; i < j; i++) {
										c += m[p.children[i]].state[ t ? 'selected' : 'checked' ];
									}
									if(c === j) {
										if(!p.state[ t ? 'selected' : 'checked' ]) {
											p.state[ t ? 'selected' : 'checked' ] = true;
											this._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);
											tmp = this.get_node(p, true);
											if(tmp && tmp.length) {
												tmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');
											}
										}
									}
									else {
										if(p.state[ t ? 'selected' : 'checked' ]) {
											p.state[ t ? 'selected' : 'checked' ] = false;
											this._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_remove_item(this._data[ t ? 'core' : 'checkbox' ].selected, p.id);
											tmp = this.get_node(p, true);
											if(tmp && tmp.length) {
												tmp.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');
											}
										}
										else {
											break;
										}
									}
									p = this.get_node(p.parent);
								}
							}, this));
				}
			};
			/**
			 * set the undetermined state where and if necessary. Used internally.
			 * @private
			 * @name _undetermined()
			 * @plugin checkbox
			 */
			this._undetermined = function () {
				if(this.element === null) { return; }
				var i, j, k, l, o = {}, m = this._model.data, t = this.settings.checkbox.tie_selection, s = this._data[ t ? 'core' : 'checkbox' ].selected, p = [], tt = this;
				for(i = 0, j = s.length; i < j; i++) {
					if(m[s[i]] && m[s[i]].parents) {
						for(k = 0, l = m[s[i]].parents.length; k < l; k++) {
							if(o[m[s[i]].parents[k]] !== undefined) {
								break;
							}
							if(m[s[i]].parents[k] !== $.jstree.root) {
								o[m[s[i]].parents[k]] = true;
								p.push(m[s[i]].parents[k]);
							}
						}
					}
				}
				// attempt for server side undetermined state
				this.element.find('.jstree-closed').not(':has(.jstree-children)')
					.each(function () {
						var tmp = tt.get_node(this), tmp2;
						if(!tmp.state.loaded) {
							if(tmp.original && tmp.original.state && tmp.original.state.undetermined && tmp.original.state.undetermined === true) {
								if(o[tmp.id] === undefined && tmp.id !== $.jstree.root) {
									o[tmp.id] = true;
									p.push(tmp.id);
								}
								for(k = 0, l = tmp.parents.length; k < l; k++) {
									if(o[tmp.parents[k]] === undefined && tmp.parents[k] !== $.jstree.root) {
										o[tmp.parents[k]] = true;
										p.push(tmp.parents[k]);
									}
								}
							}
						}
						else {
							for(i = 0, j = tmp.children_d.length; i < j; i++) {
								tmp2 = m[tmp.children_d[i]];
								if(!tmp2.state.loaded && tmp2.original && tmp2.original.state && tmp2.original.state.undetermined && tmp2.original.state.undetermined === true) {
									if(o[tmp2.id] === undefined && tmp2.id !== $.jstree.root) {
										o[tmp2.id] = true;
										p.push(tmp2.id);
									}
									for(k = 0, l = tmp2.parents.length; k < l; k++) {
										if(o[tmp2.parents[k]] === undefined && tmp2.parents[k] !== $.jstree.root) {
											o[tmp2.parents[k]] = true;
											p.push(tmp2.parents[k]);
										}
									}
								}
							}
						}
					});

				this.element.find('.jstree-undetermined').removeClass('jstree-undetermined');
				for(i = 0, j = p.length; i < j; i++) {
					if(!m[p[i]].state[ t ? 'selected' : 'checked' ]) {
						s = this.get_node(p[i], true);
						if(s && s.length) {
							s.children('.jstree-anchor').children('.jstree-checkbox').addClass('jstree-undetermined');
						}
					}
				}
			};
			this.redraw_node = function(obj, deep, is_callback, force_render) {
				obj = parent.redraw_node.apply(this, arguments);
				if(obj) {
					var i, j, tmp = null, icon = null;
					for(i = 0, j = obj.childNodes.length; i < j; i++) {
						if(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf("jstree-anchor") !== -1) {
							tmp = obj.childNodes[i];
							break;
						}
					}
					if(tmp) {
						if(!this.settings.checkbox.tie_selection && this._model.data[obj.id].state.checked) { tmp.className += ' jstree-checked'; }
						icon = _i.cloneNode(false);
						if(this._model.data[obj.id].state.checkbox_disabled) { icon.className += ' jstree-checkbox-disabled'; }
						tmp.insertBefore(icon, tmp.childNodes[0]);
					}
				}
				if(!is_callback && this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {
					if(this._data.checkbox.uto) { clearTimeout(this._data.checkbox.uto); }
					this._data.checkbox.uto = setTimeout($.proxy(this._undetermined, this), 50);
				}
				return obj;
			};
			/**
			 * show the node checkbox icons
			 * @name show_checkboxes()
			 * @plugin checkbox
			 */
			this.show_checkboxes = function () { this._data.core.themes.checkboxes = true; this.get_container_ul().removeClass("jstree-no-checkboxes"); };
			/**
			 * hide the node checkbox icons
			 * @name hide_checkboxes()
			 * @plugin checkbox
			 */
			this.hide_checkboxes = function () { this._data.core.themes.checkboxes = false; this.get_container_ul().addClass("jstree-no-checkboxes"); };
			/**
			 * toggle the node icons
			 * @name toggle_checkboxes()
			 * @plugin checkbox
			 */
			this.toggle_checkboxes = function () { if(this._data.core.themes.checkboxes) { this.hide_checkboxes(); } else { this.show_checkboxes(); } };
			/**
			 * checks if a node is in an undetermined state
			 * @name is_undetermined(obj)
			 * @param  {mixed} obj
			 * @return {Boolean}
			 */
			this.is_undetermined = function (obj) {
				obj = this.get_node(obj);
				var s = this.settings.checkbox.cascade, i, j, t = this.settings.checkbox.tie_selection, d = this._data[ t ? 'core' : 'checkbox' ].selected, m = this._model.data;
				if(!obj || obj.state[ t ? 'selected' : 'checked' ] === true || s.indexOf('undetermined') === -1 || (s.indexOf('down') === -1 && s.indexOf('up') === -1)) {
					return false;
				}
				if(!obj.state.loaded && obj.original.state.undetermined === true) {
					return true;
				}
				for(i = 0, j = obj.children_d.length; i < j; i++) {
					if($.inArray(obj.children_d[i], d) !== -1 || (!m[obj.children_d[i]].state.loaded && m[obj.children_d[i]].original.state.undetermined)) {
						return true;
					}
				}
				return false;
			};
			/**
			 * disable a node's checkbox
			 * @name disable_checkbox(obj)
			 * @param {mixed} obj an array can be used too
			 * @trigger disable_checkbox.jstree
			 * @plugin checkbox
			 */
			this.disable_checkbox = function (obj) {
				var t1, t2, dom;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.disable_checkbox(obj[t1]);
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) {
					return false;
				}
				dom = this.get_node(obj, true);
				if(!obj.state.checkbox_disabled) {
					obj.state.checkbox_disabled = true;
					if(dom && dom.length) {
						dom.children('.jstree-anchor').children('.jstree-checkbox').addClass('jstree-checkbox-disabled');
					}
					/**
					 * triggered when an node's checkbox is disabled
					 * @event
					 * @name disable_checkbox.jstree
					 * @param {Object} node
					 * @plugin checkbox
					 */
					this.trigger('disable_checkbox', { 'node' : obj });
				}
			};
			/**
			 * enable a node's checkbox
			 * @name disable_checkbox(obj)
			 * @param {mixed} obj an array can be used too
			 * @trigger enable_checkbox.jstree
			 * @plugin checkbox
			 */
			this.enable_checkbox = function (obj) {
				var t1, t2, dom;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.enable_checkbox(obj[t1]);
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) {
					return false;
				}
				dom = this.get_node(obj, true);
				if(obj.state.checkbox_disabled) {
					obj.state.checkbox_disabled = false;
					if(dom && dom.length) {
						dom.children('.jstree-anchor').children('.jstree-checkbox').removeClass('jstree-checkbox-disabled');
					}
					/**
					 * triggered when an node's checkbox is enabled
					 * @event
					 * @name enable_checkbox.jstree
					 * @param {Object} node
					 * @plugin checkbox
					 */
					this.trigger('enable_checkbox', { 'node' : obj });
				}
			};

			this.activate_node = function (obj, e) {
				if($(e.target).hasClass('jstree-checkbox-disabled')) {
					return false;
				}
				if(this.settings.checkbox.tie_selection && (this.settings.checkbox.whole_node || $(e.target).hasClass('jstree-checkbox'))) {
					e.ctrlKey = true;
				}
				if(this.settings.checkbox.tie_selection || (!this.settings.checkbox.whole_node && !$(e.target).hasClass('jstree-checkbox'))) {
					return parent.activate_node.call(this, obj, e);
				}
				if(this.is_disabled(obj)) {
					return false;
				}
				if(this.is_checked(obj)) {
					this.uncheck_node(obj, e);
				}
				else {
					this.check_node(obj, e);
				}
				this.trigger('activate_node', { 'node' : this.get_node(obj) });
			};

			/**
			 * check a node (only if tie_selection in checkbox settings is false, otherwise select_node will be called internally)
			 * @name check_node(obj)
			 * @param {mixed} obj an array can be used to check multiple nodes
			 * @trigger check_node.jstree
			 * @plugin checkbox
			 */
			this.check_node = function (obj, e) {
				if(this.settings.checkbox.tie_selection) { return this.select_node(obj, false, true, e); }
				var dom, t1, t2, th;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.check_node(obj[t1], e);
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) {
					return false;
				}
				dom = this.get_node(obj, true);
				if(!obj.state.checked) {
					obj.state.checked = true;
					this._data.checkbox.selected.push(obj.id);
					if(dom && dom.length) {
						dom.children('.jstree-anchor').addClass('jstree-checked');
					}
					/**
					 * triggered when an node is checked (only if tie_selection in checkbox settings is false)
					 * @event
					 * @name check_node.jstree
					 * @param {Object} node
					 * @param {Array} selected the current selection
					 * @param {Object} event the event (if any) that triggered this check_node
					 * @plugin checkbox
					 */
					this.trigger('check_node', { 'node' : obj, 'selected' : this._data.checkbox.selected, 'event' : e });
				}
			};
			/**
			 * uncheck a node (only if tie_selection in checkbox settings is false, otherwise deselect_node will be called internally)
			 * @name uncheck_node(obj)
			 * @param {mixed} obj an array can be used to uncheck multiple nodes
			 * @trigger uncheck_node.jstree
			 * @plugin checkbox
			 */
			this.uncheck_node = function (obj, e) {
				if(this.settings.checkbox.tie_selection) { return this.deselect_node(obj, false, e); }
				var t1, t2, dom;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.uncheck_node(obj[t1], e);
					}
					return true;
				}
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) {
					return false;
				}
				dom = this.get_node(obj, true);
				if(obj.state.checked) {
					obj.state.checked = false;
					this._data.checkbox.selected = $.vakata.array_remove_item(this._data.checkbox.selected, obj.id);
					if(dom.length) {
						dom.children('.jstree-anchor').removeClass('jstree-checked');
					}
					/**
					 * triggered when an node is unchecked (only if tie_selection in checkbox settings is false)
					 * @event
					 * @name uncheck_node.jstree
					 * @param {Object} node
					 * @param {Array} selected the current selection
					 * @param {Object} event the event (if any) that triggered this uncheck_node
					 * @plugin checkbox
					 */
					this.trigger('uncheck_node', { 'node' : obj, 'selected' : this._data.checkbox.selected, 'event' : e });
				}
			};
			/**
			 * checks all nodes in the tree (only if tie_selection in checkbox settings is false, otherwise select_all will be called internally)
			 * @name check_all()
			 * @trigger check_all.jstree, changed.jstree
			 * @plugin checkbox
			 */
			this.check_all = function () {
				if(this.settings.checkbox.tie_selection) { return this.select_all(); }
				var tmp = this._data.checkbox.selected.concat([]), i, j;
				this._data.checkbox.selected = this._model.data[$.jstree.root].children_d.concat();
				for(i = 0, j = this._data.checkbox.selected.length; i < j; i++) {
					if(this._model.data[this._data.checkbox.selected[i]]) {
						this._model.data[this._data.checkbox.selected[i]].state.checked = true;
					}
				}
				this.redraw(true);
				/**
				 * triggered when all nodes are checked (only if tie_selection in checkbox settings is false)
				 * @event
				 * @name check_all.jstree
				 * @param {Array} selected the current selection
				 * @plugin checkbox
				 */
				this.trigger('check_all', { 'selected' : this._data.checkbox.selected });
			};
			/**
			 * uncheck all checked nodes (only if tie_selection in checkbox settings is false, otherwise deselect_all will be called internally)
			 * @name uncheck_all()
			 * @trigger uncheck_all.jstree
			 * @plugin checkbox
			 */
			this.uncheck_all = function () {
				if(this.settings.checkbox.tie_selection) { return this.deselect_all(); }
				var tmp = this._data.checkbox.selected.concat([]), i, j;
				for(i = 0, j = this._data.checkbox.selected.length; i < j; i++) {
					if(this._model.data[this._data.checkbox.selected[i]]) {
						this._model.data[this._data.checkbox.selected[i]].state.checked = false;
					}
				}
				this._data.checkbox.selected = [];
				this.element.find('.jstree-checked').removeClass('jstree-checked');
				/**
				 * triggered when all nodes are unchecked (only if tie_selection in checkbox settings is false)
				 * @event
				 * @name uncheck_all.jstree
				 * @param {Object} node the previous selection
				 * @param {Array} selected the current selection
				 * @plugin checkbox
				 */
				this.trigger('uncheck_all', { 'selected' : this._data.checkbox.selected, 'node' : tmp });
			};
			/**
			 * checks if a node is checked (if tie_selection is on in the settings this function will return the same as is_selected)
			 * @name is_checked(obj)
			 * @param  {mixed}  obj
			 * @return {Boolean}
			 * @plugin checkbox
			 */
			this.is_checked = function (obj) {
				if(this.settings.checkbox.tie_selection) { return this.is_selected(obj); }
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) { return false; }
				return obj.state.checked;
			};
			/**
			 * get an array of all checked nodes (if tie_selection is on in the settings this function will return the same as get_selected)
			 * @name get_checked([full])
			 * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
			 * @return {Array}
			 * @plugin checkbox
			 */
			this.get_checked = function (full) {
				if(this.settings.checkbox.tie_selection) { return this.get_selected(full); }
				return full ? $.map(this._data.checkbox.selected, $.proxy(function (i) { return this.get_node(i); }, this)) : this._data.checkbox.selected;
			};
			/**
			 * get an array of all top level checked nodes (ignoring children of checked nodes) (if tie_selection is on in the settings this function will return the same as get_top_selected)
			 * @name get_top_checked([full])
			 * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
			 * @return {Array}
			 * @plugin checkbox
			 */
			this.get_top_checked = function (full) {
				if(this.settings.checkbox.tie_selection) { return this.get_top_selected(full); }
				var tmp = this.get_checked(true),
					obj = {}, i, j, k, l;
				for(i = 0, j = tmp.length; i < j; i++) {
					obj[tmp[i].id] = tmp[i];
				}
				for(i = 0, j = tmp.length; i < j; i++) {
					for(k = 0, l = tmp[i].children_d.length; k < l; k++) {
						if(obj[tmp[i].children_d[k]]) {
							delete obj[tmp[i].children_d[k]];
						}
					}
				}
				tmp = [];
				for(i in obj) {
					if(obj.hasOwnProperty(i)) {
						tmp.push(i);
					}
				}
				return full ? $.map(tmp, $.proxy(function (i) { return this.get_node(i); }, this)) : tmp;
			};
			/**
			 * get an array of all bottom level checked nodes (ignoring selected parents) (if tie_selection is on in the settings this function will return the same as get_bottom_selected)
			 * @name get_bottom_checked([full])
			 * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
			 * @return {Array}
			 * @plugin checkbox
			 */
			this.get_bottom_checked = function (full) {
				if(this.settings.checkbox.tie_selection) { return this.get_bottom_selected(full); }
				var tmp = this.get_checked(true),
					obj = [], i, j;
				for(i = 0, j = tmp.length; i < j; i++) {
					if(!tmp[i].children.length) {
						obj.push(tmp[i].id);
					}
				}
				return full ? $.map(obj, $.proxy(function (i) { return this.get_node(i); }, this)) : obj;
			};
			this.load_node = function (obj, callback) {
				var k, l, i, j, c, tmp;
				if(!$.isArray(obj) && !this.settings.checkbox.tie_selection) {
					tmp = this.get_node(obj);
					if(tmp && tmp.state.loaded) {
						for(k = 0, l = tmp.children_d.length; k < l; k++) {
							if(this._model.data[tmp.children_d[k]].state.checked) {
								c = true;
								this._data.checkbox.selected = $.vakata.array_remove_item(this._data.checkbox.selected, tmp.children_d[k]);
							}
						}
					}
				}
				return parent.load_node.apply(this, arguments);
			};
			this.get_state = function () {
				var state = parent.get_state.apply(this, arguments);
				if(this.settings.checkbox.tie_selection) { return state; }
				state.checkbox = this._data.checkbox.selected.slice();
				return state;
			};
			this.set_state = function (state, callback) {
				var res = parent.set_state.apply(this, arguments);
				if(res && state.checkbox) {
					if(!this.settings.checkbox.tie_selection) {
						this.uncheck_all();
						var _this = this;
						$.each(state.checkbox, function (i, v) {
							_this.check_node(v);
						});
					}
					delete state.checkbox;
					this.set_state(state, callback);
					return false;
				}
				return res;
			};
			this.refresh = function (skip_loading, forget_state) {
				if(!this.settings.checkbox.tie_selection) {
					this._data.checkbox.selected = [];
				}
				return parent.refresh.apply(this, arguments);
			};
		};

		// include the checkbox plugin by default
		// $.jstree.defaults.plugins.push("checkbox");

	/**
	 * ### Conditionalselect plugin
	 *
	 * This plugin allows defining a callback to allow or deny node selection by user input (activate node method).
	 */

		/**
		 * a callback (function) which is invoked in the instance's scope and receives two arguments - the node and the event that triggered the `activate_node` call. Returning false prevents working with the node, returning true allows invoking activate_node. Defaults to returning `true`.
		 * @name $.jstree.defaults.checkbox.visible
		 * @plugin checkbox
		 */
		$.jstree.defaults.conditionalselect = function () { return true; };
		$.jstree.plugins.conditionalselect = function (options, parent) {
			// own function
			this.activate_node = function (obj, e) {
				if(this.settings.conditionalselect.call(this, this.get_node(obj), e)) {
					parent.activate_node.call(this, obj, e);
				}
			};
		};


	/**
	 * ### Contextmenu plugin
	 *
	 * Shows a context menu when a node is right-clicked.
	 */

		/**
		 * stores all defaults for the contextmenu plugin
		 * @name $.jstree.defaults.contextmenu
		 * @plugin contextmenu
		 */
		$.jstree.defaults.contextmenu = {
			/**
			 * a boolean indicating if the node should be selected when the context menu is invoked on it. Defaults to `true`.
			 * @name $.jstree.defaults.contextmenu.select_node
			 * @plugin contextmenu
			 */
			select_node : true,
			/**
			 * a boolean indicating if the menu should be shown aligned with the node. Defaults to `true`, otherwise the mouse coordinates are used.
			 * @name $.jstree.defaults.contextmenu.show_at_node
			 * @plugin contextmenu
			 */
			show_at_node : true,
			/**
			 * an object of actions, or a function that accepts a node and a callback function and calls the callback function with an object of actions available for that node (you can also return the items too).
			 *
			 * Each action consists of a key (a unique name) and a value which is an object with the following properties (only label and action are required). Once a menu item is activated the `action` function will be invoked with an object containing the following keys: item - the contextmenu item definition as seen below, reference - the DOM node that was used (the tree node), element - the contextmenu DOM element, position - an object with x/y properties indicating the position of the menu.
			 *
			 * * `separator_before` - a boolean indicating if there should be a separator before this item
			 * * `separator_after` - a boolean indicating if there should be a separator after this item
			 * * `_disabled` - a boolean indicating if this action should be disabled
			 * * `label` - a string - the name of the action (could be a function returning a string)
			 * * `action` - a function to be executed if this item is chosen, the function will receive 
			 * * `icon` - a string, can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class
			 * * `shortcut` - keyCode which will trigger the action if the menu is open (for example `113` for rename, which equals F2)
			 * * `shortcut_label` - shortcut label (like for example `F2` for rename)
			 * * `submenu` - an object with the same structure as $.jstree.defaults.contextmenu.items which can be used to create a submenu - each key will be rendered as a separate option in a submenu that will appear once the current item is hovered
			 *
			 * @name $.jstree.defaults.contextmenu.items
			 * @plugin contextmenu
			 */
			items : function (o, cb) { // Could be an object directly
				return {
					"create" : {
						"separator_before"	: false,
						"separator_after"	: true,
						"_disabled"			: false, //(this.check("create_node", data.reference, {}, "last")),
						"label"				: "Create",
						"action"			: function (data) {
							var inst = $.jstree.reference(data.reference),
								obj = inst.get_node(data.reference);
							inst.create_node(obj, {}, "last", function (new_node) {
								setTimeout(function () { inst.edit(new_node); },0);
							});
						}
					},
					"rename" : {
						"separator_before"	: false,
						"separator_after"	: false,
						"_disabled"			: false, //(this.check("rename_node", data.reference, this.get_parent(data.reference), "")),
						"label"				: "Rename",
						/*!
						"shortcut"			: 113,
						"shortcut_label"	: 'F2',
						"icon"				: "glyphicon glyphicon-leaf",
						*/
						"action"			: function (data) {
							var inst = $.jstree.reference(data.reference),
								obj = inst.get_node(data.reference);
							inst.edit(obj);
						}
					},
					"remove" : {
						"separator_before"	: false,
						"icon"				: false,
						"separator_after"	: false,
						"_disabled"			: false, //(this.check("delete_node", data.reference, this.get_parent(data.reference), "")),
						"label"				: "Delete",
						"action"			: function (data) {
							var inst = $.jstree.reference(data.reference),
								obj = inst.get_node(data.reference);
							if(inst.is_selected(obj)) {
								inst.delete_node(inst.get_selected());
							}
							else {
								inst.delete_node(obj);
							}
						}
					},
					"ccp" : {
						"separator_before"	: true,
						"icon"				: false,
						"separator_after"	: false,
						"label"				: "Edit",
						"action"			: false,
						"submenu" : {
							"cut" : {
								"separator_before"	: false,
								"separator_after"	: false,
								"label"				: "Cut",
								"action"			: function (data) {
									var inst = $.jstree.reference(data.reference),
										obj = inst.get_node(data.reference);
									if(inst.is_selected(obj)) {
										inst.cut(inst.get_top_selected());
									}
									else {
										inst.cut(obj);
									}
								}
							},
							"copy" : {
								"separator_before"	: false,
								"icon"				: false,
								"separator_after"	: false,
								"label"				: "Copy",
								"action"			: function (data) {
									var inst = $.jstree.reference(data.reference),
										obj = inst.get_node(data.reference);
									if(inst.is_selected(obj)) {
										inst.copy(inst.get_top_selected());
									}
									else {
										inst.copy(obj);
									}
								}
							},
							"paste" : {
								"separator_before"	: false,
								"icon"				: false,
								"_disabled"			: function (data) {
									return !$.jstree.reference(data.reference).can_paste();
								},
								"separator_after"	: false,
								"label"				: "Paste",
								"action"			: function (data) {
									var inst = $.jstree.reference(data.reference),
										obj = inst.get_node(data.reference);
									inst.paste(obj);
								}
							}
						}
					}
				};
			}
		};

		$.jstree.plugins.contextmenu = function (options, parent) {
			this.bind = function () {
				parent.bind.call(this);

				var last_ts = 0, cto = null, ex, ey;
				this.element
					.on("contextmenu.jstree", ".jstree-anchor", $.proxy(function (e, data) {
							if (e.target.tagName.toLowerCase() === 'input') {
								return;
							}
							e.preventDefault();
							last_ts = e.ctrlKey ? +new Date() : 0;
							if(data || cto) {
								last_ts = (+new Date()) + 10000;
							}
							if(cto) {
								clearTimeout(cto);
							}
							if(!this.is_loading(e.currentTarget)) {
								this.show_contextmenu(e.currentTarget, e.pageX, e.pageY, e);
							}
						}, this))
					.on("click.jstree", ".jstree-anchor", $.proxy(function (e) {
							if(this._data.contextmenu.visible && (!last_ts || (+new Date()) - last_ts > 250)) { // work around safari & macOS ctrl+click
								$.vakata.context.hide();
							}
							last_ts = 0;
						}, this))
					.on("touchstart.jstree", ".jstree-anchor", function (e) {
							if(!e.originalEvent || !e.originalEvent.changedTouches || !e.originalEvent.changedTouches[0]) {
								return;
							}
							ex = e.pageX;
							ey = e.pageY;
							cto = setTimeout(function () {
								$(e.currentTarget).trigger('contextmenu', true);
							}, 750);
						})
					.on('touchmove.vakata.jstree', function (e) {
							if(cto && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0] && (Math.abs(ex - e.pageX) > 50 || Math.abs(ey - e.pageY) > 50)) {
								clearTimeout(cto);
							}
						})
					.on('touchend.vakata.jstree', function (e) {
							if(cto) {
								clearTimeout(cto);
							}
						});

				/*!
				if(!('oncontextmenu' in document.body) && ('ontouchstart' in document.body)) {
					var el = null, tm = null;
					this.element
						.on("touchstart", ".jstree-anchor", function (e) {
							el = e.currentTarget;
							tm = +new Date();
							$(document).one("touchend", function (e) {
								e.target = document.elementFromPoint(e.originalEvent.targetTouches[0].pageX - window.pageXOffset, e.originalEvent.targetTouches[0].pageY - window.pageYOffset);
								e.currentTarget = e.target;
								tm = ((+(new Date())) - tm);
								if(e.target === el && tm > 600 && tm < 1000) {
									e.preventDefault();
									$(el).trigger('contextmenu', e);
								}
								el = null;
								tm = null;
							});
						});
				}
				*/
				$(document).on("context_hide.vakata.jstree", $.proxy(function (e, data) {
					this._data.contextmenu.visible = false;
					data.reference.removeClass('jstree-context');
				}, this));
			};
			this.teardown = function () {
				if(this._data.contextmenu.visible) {
					$.vakata.context.hide();
				}
				parent.teardown.call(this);
			};

			/**
			 * prepare and show the context menu for a node
			 * @name show_contextmenu(obj [, x, y])
			 * @param {mixed} obj the node
			 * @param {Number} x the x-coordinate relative to the document to show the menu at
			 * @param {Number} y the y-coordinate relative to the document to show the menu at
			 * @param {Object} e the event if available that triggered the contextmenu
			 * @plugin contextmenu
			 * @trigger show_contextmenu.jstree
			 */
			this.show_contextmenu = function (obj, x, y, e) {
				obj = this.get_node(obj);
				if(!obj || obj.id === $.jstree.root) { return false; }
				var s = this.settings.contextmenu,
					d = this.get_node(obj, true),
					a = d.children(".jstree-anchor"),
					o = false,
					i = false;
				if(s.show_at_node || x === undefined || y === undefined) {
					o = a.offset();
					x = o.left;
					y = o.top + this._data.core.li_height;
				}
				if(this.settings.contextmenu.select_node && !this.is_selected(obj)) {
					this.activate_node(obj, e);
				}

				i = s.items;
				if($.isFunction(i)) {
					i = i.call(this, obj, $.proxy(function (i) {
						this._show_contextmenu(obj, x, y, i);
					}, this));
				}
				if($.isPlainObject(i)) {
					this._show_contextmenu(obj, x, y, i);
				}
			};
			/**
			 * show the prepared context menu for a node
			 * @name _show_contextmenu(obj, x, y, i)
			 * @param {mixed} obj the node
			 * @param {Number} x the x-coordinate relative to the document to show the menu at
			 * @param {Number} y the y-coordinate relative to the document to show the menu at
			 * @param {Number} i the object of items to show
			 * @plugin contextmenu
			 * @trigger show_contextmenu.jstree
			 * @private
			 */
			this._show_contextmenu = function (obj, x, y, i) {
				var d = this.get_node(obj, true),
					a = d.children(".jstree-anchor");
				$(document).one("context_show.vakata.jstree", $.proxy(function (e, data) {
					var cls = 'jstree-contextmenu jstree-' + this.get_theme() + '-contextmenu';
					$(data.element).addClass(cls);
					a.addClass('jstree-context');
				}, this));
				this._data.contextmenu.visible = true;
				$.vakata.context.show(a, { 'x' : x, 'y' : y }, i);
				/**
				 * triggered when the contextmenu is shown for a node
				 * @event
				 * @name show_contextmenu.jstree
				 * @param {Object} node the node
				 * @param {Number} x the x-coordinate of the menu relative to the document
				 * @param {Number} y the y-coordinate of the menu relative to the document
				 * @plugin contextmenu
				 */
				this.trigger('show_contextmenu', { "node" : obj, "x" : x, "y" : y });
			};
		};

		// contextmenu helper
		(function ($) {
			var right_to_left = false,
				vakata_context = {
					element		: false,
					reference	: false,
					position_x	: 0,
					position_y	: 0,
					items		: [],
					html		: "",
					is_visible	: false
				};

			$.vakata.context = {
				settings : {
					hide_onmouseleave	: 0,
					icons				: true
				},
				_trigger : function (event_name) {
					$(document).triggerHandler("context_" + event_name + ".vakata", {
						"reference"	: vakata_context.reference,
						"element"	: vakata_context.element,
						"position"	: {
							"x" : vakata_context.position_x,
							"y" : vakata_context.position_y
						}
					});
				},
				_execute : function (i) {
					i = vakata_context.items[i];
					return i && (!i._disabled || ($.isFunction(i._disabled) && !i._disabled({ "item" : i, "reference" : vakata_context.reference, "element" : vakata_context.element }))) && i.action ? i.action.call(null, {
								"item"		: i,
								"reference"	: vakata_context.reference,
								"element"	: vakata_context.element,
								"position"	: {
									"x" : vakata_context.position_x,
									"y" : vakata_context.position_y
								}
							}) : false;
				},
				_parse : function (o, is_callback) {
					if(!o) { return false; }
					if(!is_callback) {
						vakata_context.html		= "";
						vakata_context.items	= [];
					}
					var str = "",
						sep = false,
						tmp;

					if(is_callback) { str += "<"+"ul>"; }
					$.each(o, function (i, val) {
						if(!val) { return true; }
						vakata_context.items.push(val);
						if(!sep && val.separator_before) {
							str += "<"+"li class='vakata-context-separator'><"+"a href='#' " + ($.vakata.context.settings.icons ? '' : 'style="margin-left:0px;"') + ">&#160;<"+"/a><"+"/li>";
						}
						sep = false;
						str += "<"+"li class='" + (val._class || "") + (val._disabled === true || ($.isFunction(val._disabled) && val._disabled({ "item" : val, "reference" : vakata_context.reference, "element" : vakata_context.element })) ? " vakata-contextmenu-disabled " : "") + "' "+(val.shortcut?" data-shortcut='"+val.shortcut+"' ":'')+">";
						str += "<"+"a href='#' rel='" + (vakata_context.items.length - 1) + "'>";
						if($.vakata.context.settings.icons) {
							str += "<"+"i ";
							if(val.icon) {
								if(val.icon.indexOf("/") !== -1 || val.icon.indexOf(".") !== -1) { str += " style='background:url(\"" + val.icon + "\") center center no-repeat' "; }
								else { str += " class='" + val.icon + "' "; }
							}
							str += "><"+"/i><"+"span class='vakata-contextmenu-sep'>&#160;<"+"/span>";
						}
						str += ($.isFunction(val.label) ? val.label({ "item" : i, "reference" : vakata_context.reference, "element" : vakata_context.element }) : val.label) + (val.shortcut?' <span class="vakata-contextmenu-shortcut vakata-contextmenu-shortcut-'+val.shortcut+'">'+ (val.shortcut_label || '') +'</span>':'') + "<"+"/a>";
						if(val.submenu) {
							tmp = $.vakata.context._parse(val.submenu, true);
							if(tmp) { str += tmp; }
						}
						str += "<"+"/li>";
						if(val.separator_after) {
							str += "<"+"li class='vakata-context-separator'><"+"a href='#' " + ($.vakata.context.settings.icons ? '' : 'style="margin-left:0px;"') + ">&#160;<"+"/a><"+"/li>";
							sep = true;
						}
					});
					str  = str.replace(/<li class\='vakata-context-separator'\><\/li\>$/,"");
					if(is_callback) { str += "</ul>"; }
					/**
					 * triggered on the document when the contextmenu is parsed (HTML is built)
					 * @event
					 * @plugin contextmenu
					 * @name context_parse.vakata
					 * @param {jQuery} reference the element that was right clicked
					 * @param {jQuery} element the DOM element of the menu itself
					 * @param {Object} position the x & y coordinates of the menu
					 */
					if(!is_callback) { vakata_context.html = str; $.vakata.context._trigger("parse"); }
					return str.length > 10 ? str : false;
				},
				_show_submenu : function (o) {
					o = $(o);
					if(!o.length || !o.children("ul").length) { return; }
					var e = o.children("ul"),
						xl = o.offset().left,
						x = xl + o.outerWidth(),
						y = o.offset().top,
						w = e.width(),
						h = e.height(),
						dw = $(window).width() + $(window).scrollLeft(),
						dh = $(window).height() + $(window).scrollTop();
					// може да се спести е една проверка - дали няма някой от класовете вече нагоре
					if(right_to_left) {
						o[x - (w + 10 + o.outerWidth()) < 0 ? "addClass" : "removeClass"]("vakata-context-left");
					}
					else {
						o[x + w > dw  && xl > dw - x ? "addClass" : "removeClass"]("vakata-context-right");
					}
					if(y + h + 10 > dh) {
						e.css("bottom","-1px");
					}

					//if does not fit - stick it to the side
					if (o.hasClass('vakata-context-right')) {
						if (xl < w) {
							e.css("margin-right", xl - w);
						}
					} else {
						if (dw - x < w) {
							e.css("margin-left", dw - x - w);
						}
					}

					e.show();
				},
				show : function (reference, position, data) {
					var o, e, x, y, w, h, dw, dh, cond = true;
					if(vakata_context.element && vakata_context.element.length) {
						vakata_context.element.width('');
					}
					switch(cond) {
						case (!position && !reference):
							return false;
						case (!!position && !!reference):
							vakata_context.reference	= reference;
							vakata_context.position_x	= position.x;
							vakata_context.position_y	= position.y;
							break;
						case (!position && !!reference):
							vakata_context.reference	= reference;
							o = reference.offset();
							vakata_context.position_x	= o.left + reference.outerHeight();
							vakata_context.position_y	= o.top;
							break;
						case (!!position && !reference):
							vakata_context.position_x	= position.x;
							vakata_context.position_y	= position.y;
							break;
					}
					if(!!reference && !data && $(reference).data('vakata_contextmenu')) {
						data = $(reference).data('vakata_contextmenu');
					}
					if($.vakata.context._parse(data)) {
						vakata_context.element.html(vakata_context.html);
					}
					if(vakata_context.items.length) {
						vakata_context.element.appendTo("body");
						e = vakata_context.element;
						x = vakata_context.position_x;
						y = vakata_context.position_y;
						w = e.width();
						h = e.height();
						dw = $(window).width() + $(window).scrollLeft();
						dh = $(window).height() + $(window).scrollTop();
						if(right_to_left) {
							x -= (e.outerWidth() - $(reference).outerWidth());
							if(x < $(window).scrollLeft() + 20) {
								x = $(window).scrollLeft() + 20;
							}
						}
						if(x + w + 20 > dw) {
							x = dw - (w + 20);
						}
						if(y + h + 20 > dh) {
							y = dh - (h + 20);
						}

						vakata_context.element
							.css({ "left" : x, "top" : y })
							.show()
							.find('a').first().focus().parent().addClass("vakata-context-hover");
						vakata_context.is_visible = true;
						/**
						 * triggered on the document when the contextmenu is shown
						 * @event
						 * @plugin contextmenu
						 * @name context_show.vakata
						 * @param {jQuery} reference the element that was right clicked
						 * @param {jQuery} element the DOM element of the menu itself
						 * @param {Object} position the x & y coordinates of the menu
						 */
						$.vakata.context._trigger("show");
					}
				},
				hide : function () {
					if(vakata_context.is_visible) {
						vakata_context.element.hide().find("ul").hide().end().find(':focus').blur().end().detach();
						vakata_context.is_visible = false;
						/**
						 * triggered on the document when the contextmenu is hidden
						 * @event
						 * @plugin contextmenu
						 * @name context_hide.vakata
						 * @param {jQuery} reference the element that was right clicked
						 * @param {jQuery} element the DOM element of the menu itself
						 * @param {Object} position the x & y coordinates of the menu
						 */
						$.vakata.context._trigger("hide");
					}
				}
			};
			$(function () {
				right_to_left = $("body").css("direction") === "rtl";
				var to = false;

				vakata_context.element = $("<ul class='vakata-context'></ul>");
				vakata_context.element
					.on("mouseenter", "li", function (e) {
						e.stopImmediatePropagation();

						if($.contains(this, e.relatedTarget)) {
							// премахнато заради delegate mouseleave по-долу
							// $(this).find(".vakata-context-hover").removeClass("vakata-context-hover");
							return;
						}

						if(to) { clearTimeout(to); }
						vakata_context.element.find(".vakata-context-hover").removeClass("vakata-context-hover").end();

						$(this)
							.siblings().find("ul").hide().end().end()
							.parentsUntil(".vakata-context", "li").addBack().addClass("vakata-context-hover");
						$.vakata.context._show_submenu(this);
					})
					// тестово - дали не натоварва?
					.on("mouseleave", "li", function (e) {
						if($.contains(this, e.relatedTarget)) { return; }
						$(this).find(".vakata-context-hover").addBack().removeClass("vakata-context-hover");
					})
					.on("mouseleave", function (e) {
						$(this).find(".vakata-context-hover").removeClass("vakata-context-hover");
						if($.vakata.context.settings.hide_onmouseleave) {
							to = setTimeout(
								(function (t) {
									return function () { $.vakata.context.hide(); };
								}(this)), $.vakata.context.settings.hide_onmouseleave);
						}
					})
					.on("click", "a", function (e) {
						e.preventDefault();
					//})
					//.on("mouseup", "a", function (e) {
						if(!$(this).blur().parent().hasClass("vakata-context-disabled") && $.vakata.context._execute($(this).attr("rel")) !== false) {
							$.vakata.context.hide();
						}
					})
					.on('keydown', 'a', function (e) {
							var o = null;
							switch(e.which) {
								case 13:
								case 32:
									e.type = "mouseup";
									e.preventDefault();
									$(e.currentTarget).trigger(e);
									break;
								case 37:
									if(vakata_context.is_visible) {
										vakata_context.element.find(".vakata-context-hover").last().closest("li").first().find("ul").hide().find(".vakata-context-hover").removeClass("vakata-context-hover").end().end().children('a').focus();
										e.stopImmediatePropagation();
										e.preventDefault();
									}
									break;
								case 38:
									if(vakata_context.is_visible) {
										o = vakata_context.element.find("ul:visible").addBack().last().children(".vakata-context-hover").removeClass("vakata-context-hover").prevAll("li:not(.vakata-context-separator)").first();
										if(!o.length) { o = vakata_context.element.find("ul:visible").addBack().last().children("li:not(.vakata-context-separator)").last(); }
										o.addClass("vakata-context-hover").children('a').focus();
										e.stopImmediatePropagation();
										e.preventDefault();
									}
									break;
								case 39:
									if(vakata_context.is_visible) {
										vakata_context.element.find(".vakata-context-hover").last().children("ul").show().children("li:not(.vakata-context-separator)").removeClass("vakata-context-hover").first().addClass("vakata-context-hover").children('a').focus();
										e.stopImmediatePropagation();
										e.preventDefault();
									}
									break;
								case 40:
									if(vakata_context.is_visible) {
										o = vakata_context.element.find("ul:visible").addBack().last().children(".vakata-context-hover").removeClass("vakata-context-hover").nextAll("li:not(.vakata-context-separator)").first();
										if(!o.length) { o = vakata_context.element.find("ul:visible").addBack().last().children("li:not(.vakata-context-separator)").first(); }
										o.addClass("vakata-context-hover").children('a').focus();
										e.stopImmediatePropagation();
										e.preventDefault();
									}
									break;
								case 27:
									$.vakata.context.hide();
									e.preventDefault();
									break;
								default:
									//console.log(e.which);
									break;
							}
						})
					.on('keydown', function (e) {
						e.preventDefault();
						var a = vakata_context.element.find('.vakata-contextmenu-shortcut-' + e.which).parent();
						if(a.parent().not('.vakata-context-disabled')) {
							a.click();
						}
					});

				$(document)
					.on("mousedown.vakata.jstree", function (e) {
						if(vakata_context.is_visible && !$.contains(vakata_context.element[0], e.target)) {
							$.vakata.context.hide();
						}
					})
					.on("context_show.vakata.jstree", function (e, data) {
						vakata_context.element.find("li:has(ul)").children("a").addClass("vakata-context-parent");
						if(right_to_left) {
							vakata_context.element.addClass("vakata-context-rtl").css("direction", "rtl");
						}
						// also apply a RTL class?
						vakata_context.element.find("ul").hide().end();
					});
			});
		}($));
		// $.jstree.defaults.plugins.push("contextmenu");


	/**
	 * ### Drag'n'drop plugin
	 *
	 * Enables dragging and dropping of nodes in the tree, resulting in a move or copy operations.
	 */

		/**
		 * stores all defaults for the drag'n'drop plugin
		 * @name $.jstree.defaults.dnd
		 * @plugin dnd
		 */
		$.jstree.defaults.dnd = {
			/**
			 * a boolean indicating if a copy should be possible while dragging (by pressint the meta key or Ctrl). Defaults to `true`.
			 * @name $.jstree.defaults.dnd.copy
			 * @plugin dnd
			 */
			copy : true,
			/**
			 * a number indicating how long a node should remain hovered while dragging to be opened. Defaults to `500`.
			 * @name $.jstree.defaults.dnd.open_timeout
			 * @plugin dnd
			 */
			open_timeout : 500,
			/**
			 * a function invoked each time a node is about to be dragged, invoked in the tree's scope and receives the nodes about to be dragged as an argument (array) and the event that started the drag - return `false` to prevent dragging
			 * @name $.jstree.defaults.dnd.is_draggable
			 * @plugin dnd
			 */
			is_draggable : true,
			/**
			 * a boolean indicating if checks should constantly be made while the user is dragging the node (as opposed to checking only on drop), default is `true`
			 * @name $.jstree.defaults.dnd.check_while_dragging
			 * @plugin dnd
			 */
			check_while_dragging : true,
			/**
			 * a boolean indicating if nodes from this tree should only be copied with dnd (as opposed to moved), default is `false`
			 * @name $.jstree.defaults.dnd.always_copy
			 * @plugin dnd
			 */
			always_copy : false,
			/**
			 * when dropping a node "inside", this setting indicates the position the node should go to - it can be an integer or a string: "first" (same as 0) or "last", default is `0`
			 * @name $.jstree.defaults.dnd.inside_pos
			 * @plugin dnd
			 */
			inside_pos : 0,
			/**
			 * when starting the drag on a node that is selected this setting controls if all selected nodes are dragged or only the single node, default is `true`, which means all selected nodes are dragged when the drag is started on a selected node
			 * @name $.jstree.defaults.dnd.drag_selection
			 * @plugin dnd
			 */
			drag_selection : true,
			/**
			 * controls whether dnd works on touch devices. If left as boolean true dnd will work the same as in desktop browsers, which in some cases may impair scrolling. If set to boolean false dnd will not work on touch devices. There is a special third option - string "selected" which means only selected nodes can be dragged on touch devices.
			 * @name $.jstree.defaults.dnd.touch
			 * @plugin dnd
			 */
			touch : true,
			/**
			 * controls whether items can be dropped anywhere on the node, not just on the anchor, by default only the node anchor is a valid drop target. Works best with the wholerow plugin. If enabled on mobile depending on the interface it might be hard for the user to cancel the drop, since the whole tree container will be a valid drop target.
			 * @name $.jstree.defaults.dnd.large_drop_target
			 * @plugin dnd
			 */
			large_drop_target : false,
			/**
			 * controls whether a drag can be initiated from any part of the node and not just the text/icon part, works best with the wholerow plugin. Keep in mind it can cause problems with tree scrolling on mobile depending on the interface - in that case set the touch option to "selected".
			 * @name $.jstree.defaults.dnd.large_drag_target
			 * @plugin dnd
			 */
			large_drag_target : false,
			/**
			 * controls whether use HTML5 dnd api instead of classical. That will allow better integration of dnd events with other HTML5 controls.
			 * @reference http://caniuse.com/#feat=dragndrop
			 * @name $.jstree.defaults.dnd.use_html5
			 * @plugin dnd
			 */
			use_html5: false
		};
		var drg, elm;
		// TODO: now check works by checking for each node individually, how about max_children, unique, etc?
		$.jstree.plugins.dnd = function (options, parent) {
			this.init = function (el, options) {
				parent.init.call(this, el, options);
				this.settings.dnd.use_html5 = this.settings.dnd.use_html5 && ('draggable' in document.createElement('span'));
			};
			this.bind = function () {
				parent.bind.call(this);

				this.element
					.on(this.settings.dnd.use_html5 ? 'dragstart.jstree' : 'mousedown.jstree touchstart.jstree', this.settings.dnd.large_drag_target ? '.jstree-node' : '.jstree-anchor', $.proxy(function (e) {
							if(this.settings.dnd.large_drag_target && $(e.target).closest('.jstree-node')[0] !== e.currentTarget) {
								return true;
							}
							if(e.type === "touchstart" && (!this.settings.dnd.touch || (this.settings.dnd.touch === 'selected' && !$(e.currentTarget).closest('.jstree-node').children('.jstree-anchor').hasClass('jstree-clicked')))) {
								return true;
							}
							var obj = this.get_node(e.target),
								mlt = this.is_selected(obj) && this.settings.dnd.drag_selection ? this.get_top_selected().length : 1,
								txt = (mlt > 1 ? mlt + ' ' + this.get_string('nodes') : this.get_text(e.currentTarget));
							if(this.settings.core.force_text) {
								txt = $.vakata.html.escape(txt);
							}
							if(obj && obj.id && obj.id !== $.jstree.root && (e.which === 1 || e.type === "touchstart" || e.type === "dragstart") &&
								(this.settings.dnd.is_draggable === true || ($.isFunction(this.settings.dnd.is_draggable) && this.settings.dnd.is_draggable.call(this, (mlt > 1 ? this.get_top_selected(true) : [obj]), e)))
							) {
								drg = { 'jstree' : true, 'origin' : this, 'obj' : this.get_node(obj,true), 'nodes' : mlt > 1 ? this.get_top_selected() : [obj.id] };
								elm = e.currentTarget;
								if (this.settings.dnd.use_html5) {
									$.vakata.dnd._trigger('start', e, { 'helper': $(), 'element': elm, 'data': drg });
								} else {
									this.element.trigger('mousedown.jstree');
									return $.vakata.dnd.start(e, drg, '<div id="jstree-dnd" class="jstree-' + this.get_theme() + ' jstree-' + this.get_theme() + '-' + this.get_theme_variant() + ' ' + ( this.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ) + '"><i class="jstree-icon jstree-er"></i>' + txt + '<ins class="jstree-copy" style="display:none;">+</ins></div>');
								}
							}
						}, this));
				if (this.settings.dnd.use_html5) {
					this.element
						.on('dragover.jstree', function (e) {
								e.preventDefault();
								$.vakata.dnd._trigger('move', e, { 'helper': $(), 'element': elm, 'data': drg });
								return false;
							})
						//.on('dragenter.jstree', this.settings.dnd.large_drop_target ? '.jstree-node' : '.jstree-anchor', $.proxy(function (e) {
						//		e.preventDefault();
						//		$.vakata.dnd._trigger('move', e, { 'helper': $(), 'element': elm, 'data': drg });
						//		return false;
						//	}, this))
						.on('drop.jstree', $.proxy(function (e) {
								e.preventDefault();
								$.vakata.dnd._trigger('stop', e, { 'helper': $(), 'element': elm, 'data': drg });
								return false;
							}, this));
				}
			};
			this.redraw_node = function(obj, deep, callback, force_render) {
				obj = parent.redraw_node.apply(this, arguments);
				if (obj && this.settings.dnd.use_html5) {
					if (this.settings.dnd.large_drag_target) {
						obj.setAttribute('draggable', true);
					} else {
						var i, j, tmp = null;
						for(i = 0, j = obj.childNodes.length; i < j; i++) {
							if(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf("jstree-anchor") !== -1) {
								tmp = obj.childNodes[i];
								break;
							}
						}
						if(tmp) {
							tmp.setAttribute('draggable', true);
						}
					}
				}
				return obj;
			};
		};

		$(function() {
			// bind only once for all instances
			var lastmv = false,
				laster = false,
				lastev = false,
				opento = false,
				marker = $('<div id="jstree-marker">&#160;</div>').hide(); //.appendTo('body');

			$(document)
				.on('dnd_start.vakata.jstree', function (e, data) {
					lastmv = false;
					lastev = false;
					if(!data || !data.data || !data.data.jstree) { return; }
					marker.appendTo('body'); //.show();
				})
				.on('dnd_move.vakata.jstree', function (e, data) {
					if(opento) {
						if (!data.event || data.event.type !== 'dragover' || data.event.target !== lastev.target) {
							clearTimeout(opento);
						}
					}
					if(!data || !data.data || !data.data.jstree) { return; }

					// if we are hovering the marker image do nothing (can happen on "inside" drags)
					if(data.event.target.id && data.event.target.id === 'jstree-marker') {
						return;
					}
					lastev = data.event;

					var ins = $.jstree.reference(data.event.target),
						ref = false,
						off = false,
						rel = false,
						tmp, l, t, h, p, i, o, ok, t1, t2, op, ps, pr, ip, tm, is_copy;
					// if we are over an instance
					if(ins && ins._data && ins._data.dnd) {
						marker.attr('class', 'jstree-' + ins.get_theme() + ( ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ));
						is_copy = data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)));
						data.helper
							.children().attr('class', 'jstree-' + ins.get_theme() + ' jstree-' + ins.get_theme() + '-' + ins.get_theme_variant() + ' ' + ( ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ))
							.find('.jstree-copy').first()[ is_copy ? 'show' : 'hide' ]();

						// if are hovering the container itself add a new root node
						//console.log(data.event);
						if( (data.event.target === ins.element[0] || data.event.target === ins.get_container_ul()[0]) && ins.get_container_ul().children().length === 0) {
							ok = true;
							for(t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {
								ok = ok && ins.check( (data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)) ) ? "copy_node" : "move_node"), (data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1]), $.jstree.root, 'last', { 'dnd' : true, 'ref' : ins.get_node($.jstree.root), 'pos' : 'i', 'origin' : data.data.origin, 'is_multi' : (data.data.origin && data.data.origin !== ins), 'is_foreign' : (!data.data.origin) });
								if(!ok) { break; }
							}
							if(ok) {
								lastmv = { 'ins' : ins, 'par' : $.jstree.root, 'pos' : 'last' };
								marker.hide();
								data.helper.find('.jstree-icon').first().removeClass('jstree-er').addClass('jstree-ok');
								if (data.event.originalEvent && data.event.originalEvent.dataTransfer) {
									data.event.originalEvent.dataTransfer.dropEffect = is_copy ? 'copy' : 'move';
								}
								return;
							}
						}
						else {
							// if we are hovering a tree node
							ref = ins.settings.dnd.large_drop_target ? $(data.event.target).closest('.jstree-node').children('.jstree-anchor') : $(data.event.target).closest('.jstree-anchor');
							if(ref && ref.length && ref.parent().is('.jstree-closed, .jstree-open, .jstree-leaf')) {
								off = ref.offset();
								rel = (data.event.pageY !== undefined ? data.event.pageY : data.event.originalEvent.pageY) - off.top;
								h = ref.outerHeight();
								if(rel < h / 3) {
									o = ['b', 'i', 'a'];
								}
								else if(rel > h - h / 3) {
									o = ['a', 'i', 'b'];
								}
								else {
									o = rel > h / 2 ? ['i', 'a', 'b'] : ['i', 'b', 'a'];
								}
								$.each(o, function (j, v) {
									switch(v) {
										case 'b':
											l = off.left - 6;
											t = off.top;
											p = ins.get_parent(ref);
											i = ref.parent().index();
											break;
										case 'i':
											ip = ins.settings.dnd.inside_pos;
											tm = ins.get_node(ref.parent());
											l = off.left - 2;
											t = off.top + h / 2 + 1;
											p = tm.id;
											i = ip === 'first' ? 0 : (ip === 'last' ? tm.children.length : Math.min(ip, tm.children.length));
											break;
										case 'a':
											l = off.left - 6;
											t = off.top + h;
											p = ins.get_parent(ref);
											i = ref.parent().index() + 1;
											break;
									}
									ok = true;
									for(t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {
										op = data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey))) ? "copy_node" : "move_node";
										ps = i;
										if(op === "move_node" && v === 'a' && (data.data.origin && data.data.origin === ins) && p === ins.get_parent(data.data.nodes[t1])) {
											pr = ins.get_node(p);
											if(ps > $.inArray(data.data.nodes[t1], pr.children)) {
												ps -= 1;
											}
										}
										ok = ok && ( (ins && ins.settings && ins.settings.dnd && ins.settings.dnd.check_while_dragging === false) || ins.check(op, (data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1]), p, ps, { 'dnd' : true, 'ref' : ins.get_node(ref.parent()), 'pos' : v, 'origin' : data.data.origin, 'is_multi' : (data.data.origin && data.data.origin !== ins), 'is_foreign' : (!data.data.origin) }) );
										if(!ok) {
											if(ins && ins.last_error) { laster = ins.last_error(); }
											break;
										}
									}
									if(v === 'i' && ref.parent().is('.jstree-closed') && ins.settings.dnd.open_timeout) {
										opento = setTimeout((function (x, z) { return function () { x.open_node(z); }; }(ins, ref)), ins.settings.dnd.open_timeout);
									}
									if(ok) {
										lastmv = { 'ins' : ins, 'par' : p, 'pos' : v === 'i' && ip === 'last' && i === 0 && !ins.is_loaded(tm) ? 'last' : i };
										marker.css({ 'left' : l + 'px', 'top' : t + 'px' }).show();
										data.helper.find('.jstree-icon').first().removeClass('jstree-er').addClass('jstree-ok');
										if (data.event.originalEvent && data.event.originalEvent.dataTransfer) {
											data.event.originalEvent.dataTransfer.dropEffect = is_copy ? 'copy' : 'move';
										}
										laster = {};
										o = true;
										return false;
									}
								});
								if(o === true) { return; }
							}
						}
					}
					lastmv = false;
					data.helper.find('.jstree-icon').removeClass('jstree-ok').addClass('jstree-er');
					if (data.event.originalEvent && data.event.originalEvent.dataTransfer) {
						data.event.originalEvent.dataTransfer.dropEffect = 'none';
					}
					marker.hide();
				})
				.on('dnd_scroll.vakata.jstree', function (e, data) {
					if(!data || !data.data || !data.data.jstree) { return; }
					marker.hide();
					lastmv = false;
					lastev = false;
					data.helper.find('.jstree-icon').first().removeClass('jstree-ok').addClass('jstree-er');
				})
				.on('dnd_stop.vakata.jstree', function (e, data) {
					if(opento) { clearTimeout(opento); }
					if(!data || !data.data || !data.data.jstree) { return; }
					marker.hide().detach();
					var i, j, nodes = [];
					if(lastmv) {
						for(i = 0, j = data.data.nodes.length; i < j; i++) {
							nodes[i] = data.data.origin ? data.data.origin.get_node(data.data.nodes[i]) : data.data.nodes[i];
						}
						lastmv.ins[ data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey))) ? 'copy_node' : 'move_node' ](nodes, lastmv.par, lastmv.pos, false, false, false, data.data.origin);
					}
					else {
						i = $(data.event.target).closest('.jstree');
						if(i.length && laster && laster.error && laster.error === 'check') {
							i = i.jstree(true);
							if(i) {
								i.settings.core.error.call(this, laster);
							}
						}
					}
					lastev = false;
					lastmv = false;
				})
				.on('keyup.jstree keydown.jstree', function (e, data) {
					data = $.vakata.dnd._get();
					if(data && data.data && data.data.jstree) {
						if (e.type === "keyup" && e.which === 27) {
							if (opento) { clearTimeout(opento); }
							lastmv = false;
							laster = false;
							lastev = false;
							opento = false;
							marker.hide().detach();
							$.vakata.dnd._clean();
						} else {
							data.helper.find('.jstree-copy').first()[ data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (e.metaKey || e.ctrlKey))) ? 'show' : 'hide' ]();
							if(lastev) {
								lastev.metaKey = e.metaKey;
								lastev.ctrlKey = e.ctrlKey;
								$.vakata.dnd._trigger('move', lastev);
							}
						}
					}
				});
		});

		// helpers
		(function ($) {
			$.vakata.html = {
				div : $('<div />'),
				escape : function (str) {
					return $.vakata.html.div.text(str).html();
				},
				strip : function (str) {
					return $.vakata.html.div.empty().append($.parseHTML(str)).text();
				}
			};
			// private variable
			var vakata_dnd = {
				element	: false,
				target	: false,
				is_down	: false,
				is_drag	: false,
				helper	: false,
				helper_w: 0,
				data	: false,
				init_x	: 0,
				init_y	: 0,
				scroll_l: 0,
				scroll_t: 0,
				scroll_e: false,
				scroll_i: false,
				is_touch: false
			};
			$.vakata.dnd = {
				settings : {
					scroll_speed		: 10,
					scroll_proximity	: 20,
					helper_left			: 5,
					helper_top			: 10,
					threshold			: 5,
					threshold_touch		: 50
				},
				_trigger : function (event_name, e, data) {
					if (data === undefined) {
						data = $.vakata.dnd._get();
					}
					data.event = e;
					$(document).triggerHandler("dnd_" + event_name + ".vakata", data);
				},
				_get : function () {
					return {
						"data"		: vakata_dnd.data,
						"element"	: vakata_dnd.element,
						"helper"	: vakata_dnd.helper
					};
				},
				_clean : function () {
					if(vakata_dnd.helper) { vakata_dnd.helper.remove(); }
					if(vakata_dnd.scroll_i) { clearInterval(vakata_dnd.scroll_i); vakata_dnd.scroll_i = false; }
					vakata_dnd = {
						element	: false,
						target	: false,
						is_down	: false,
						is_drag	: false,
						helper	: false,
						helper_w: 0,
						data	: false,
						init_x	: 0,
						init_y	: 0,
						scroll_l: 0,
						scroll_t: 0,
						scroll_e: false,
						scroll_i: false,
						is_touch: false
					};
					$(document).off("mousemove.vakata.jstree touchmove.vakata.jstree", $.vakata.dnd.drag);
					$(document).off("mouseup.vakata.jstree touchend.vakata.jstree", $.vakata.dnd.stop);
				},
				_scroll : function (init_only) {
					if(!vakata_dnd.scroll_e || (!vakata_dnd.scroll_l && !vakata_dnd.scroll_t)) {
						if(vakata_dnd.scroll_i) { clearInterval(vakata_dnd.scroll_i); vakata_dnd.scroll_i = false; }
						return false;
					}
					if(!vakata_dnd.scroll_i) {
						vakata_dnd.scroll_i = setInterval($.vakata.dnd._scroll, 100);
						return false;
					}
					if(init_only === true) { return false; }

					var i = vakata_dnd.scroll_e.scrollTop(),
						j = vakata_dnd.scroll_e.scrollLeft();
					vakata_dnd.scroll_e.scrollTop(i + vakata_dnd.scroll_t * $.vakata.dnd.settings.scroll_speed);
					vakata_dnd.scroll_e.scrollLeft(j + vakata_dnd.scroll_l * $.vakata.dnd.settings.scroll_speed);
					if(i !== vakata_dnd.scroll_e.scrollTop() || j !== vakata_dnd.scroll_e.scrollLeft()) {
						/**
						 * triggered on the document when a drag causes an element to scroll
						 * @event
						 * @plugin dnd
						 * @name dnd_scroll.vakata
						 * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start
						 * @param {DOM} element the DOM element being dragged
						 * @param {jQuery} helper the helper shown next to the mouse
						 * @param {jQuery} event the element that is scrolling
						 */
						$.vakata.dnd._trigger("scroll", vakata_dnd.scroll_e);
					}
				},
				start : function (e, data, html) {
					if(e.type === "touchstart" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {
						e.pageX = e.originalEvent.changedTouches[0].pageX;
						e.pageY = e.originalEvent.changedTouches[0].pageY;
						e.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);
					}
					if(vakata_dnd.is_drag) { $.vakata.dnd.stop({}); }
					try {
						e.currentTarget.unselectable = "on";
						e.currentTarget.onselectstart = function() { return false; };
						if(e.currentTarget.style) {
							e.currentTarget.style.touchAction = "none";
							e.currentTarget.style.msTouchAction = "none";
							e.currentTarget.style.MozUserSelect = "none";
						}
					} catch(ignore) { }
					vakata_dnd.init_x	= e.pageX;
					vakata_dnd.init_y	= e.pageY;
					vakata_dnd.data		= data;
					vakata_dnd.is_down	= true;
					vakata_dnd.element	= e.currentTarget;
					vakata_dnd.target	= e.target;
					vakata_dnd.is_touch	= e.type === "touchstart";
					if(html !== false) {
						vakata_dnd.helper = $("<div id='vakata-dnd'></div>").html(html).css({
							"display"		: "block",
							"margin"		: "0",
							"padding"		: "0",
							"position"		: "absolute",
							"top"			: "-2000px",
							"lineHeight"	: "16px",
							"zIndex"		: "10000"
						});
					}
					$(document).on("mousemove.vakata.jstree touchmove.vakata.jstree", $.vakata.dnd.drag);
					$(document).on("mouseup.vakata.jstree touchend.vakata.jstree", $.vakata.dnd.stop);
					return false;
				},
				drag : function (e) {
					if(e.type === "touchmove" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {
						e.pageX = e.originalEvent.changedTouches[0].pageX;
						e.pageY = e.originalEvent.changedTouches[0].pageY;
						e.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);
					}
					if(!vakata_dnd.is_down) { return; }
					if(!vakata_dnd.is_drag) {
						if(
							Math.abs(e.pageX - vakata_dnd.init_x) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold) ||
							Math.abs(e.pageY - vakata_dnd.init_y) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold)
						) {
							if(vakata_dnd.helper) {
								vakata_dnd.helper.appendTo("body");
								vakata_dnd.helper_w = vakata_dnd.helper.outerWidth();
							}
							vakata_dnd.is_drag = true;
							/**
							 * triggered on the document when a drag starts
							 * @event
							 * @plugin dnd
							 * @name dnd_start.vakata
							 * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start
							 * @param {DOM} element the DOM element being dragged
							 * @param {jQuery} helper the helper shown next to the mouse
							 * @param {Object} event the event that caused the start (probably mousemove)
							 */
							$.vakata.dnd._trigger("start", e);
						}
						else { return; }
					}

					var d  = false, w  = false,
						dh = false, wh = false,
						dw = false, ww = false,
						dt = false, dl = false,
						ht = false, hl = false;

					vakata_dnd.scroll_t = 0;
					vakata_dnd.scroll_l = 0;
					vakata_dnd.scroll_e = false;
					$($(e.target).parentsUntil("body").addBack().get().reverse())
						.filter(function () {
							return	(/^auto|scroll$/).test($(this).css("overflow")) &&
									(this.scrollHeight > this.offsetHeight || this.scrollWidth > this.offsetWidth);
						})
						.each(function () {
							var t = $(this), o = t.offset();
							if(this.scrollHeight > this.offsetHeight) {
								if(o.top + t.height() - e.pageY < $.vakata.dnd.settings.scroll_proximity)	{ vakata_dnd.scroll_t = 1; }
								if(e.pageY - o.top < $.vakata.dnd.settings.scroll_proximity)				{ vakata_dnd.scroll_t = -1; }
							}
							if(this.scrollWidth > this.offsetWidth) {
								if(o.left + t.width() - e.pageX < $.vakata.dnd.settings.scroll_proximity)	{ vakata_dnd.scroll_l = 1; }
								if(e.pageX - o.left < $.vakata.dnd.settings.scroll_proximity)				{ vakata_dnd.scroll_l = -1; }
							}
							if(vakata_dnd.scroll_t || vakata_dnd.scroll_l) {
								vakata_dnd.scroll_e = $(this);
								return false;
							}
						});

					if(!vakata_dnd.scroll_e) {
						d  = $(document); w = $(window);
						dh = d.height(); wh = w.height();
						dw = d.width(); ww = w.width();
						dt = d.scrollTop(); dl = d.scrollLeft();
						if(dh > wh && e.pageY - dt < $.vakata.dnd.settings.scroll_proximity)		{ vakata_dnd.scroll_t = -1;  }
						if(dh > wh && wh - (e.pageY - dt) < $.vakata.dnd.settings.scroll_proximity)	{ vakata_dnd.scroll_t = 1; }
						if(dw > ww && e.pageX - dl < $.vakata.dnd.settings.scroll_proximity)		{ vakata_dnd.scroll_l = -1; }
						if(dw > ww && ww - (e.pageX - dl) < $.vakata.dnd.settings.scroll_proximity)	{ vakata_dnd.scroll_l = 1; }
						if(vakata_dnd.scroll_t || vakata_dnd.scroll_l) {
							vakata_dnd.scroll_e = d;
						}
					}
					if(vakata_dnd.scroll_e) { $.vakata.dnd._scroll(true); }

					if(vakata_dnd.helper) {
						ht = parseInt(e.pageY + $.vakata.dnd.settings.helper_top, 10);
						hl = parseInt(e.pageX + $.vakata.dnd.settings.helper_left, 10);
						if(dh && ht + 25 > dh) { ht = dh - 50; }
						if(dw && hl + vakata_dnd.helper_w > dw) { hl = dw - (vakata_dnd.helper_w + 2); }
						vakata_dnd.helper.css({
							left	: hl + "px",
							top		: ht + "px"
						});
					}
					/**
					 * triggered on the document when a drag is in progress
					 * @event
					 * @plugin dnd
					 * @name dnd_move.vakata
					 * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start
					 * @param {DOM} element the DOM element being dragged
					 * @param {jQuery} helper the helper shown next to the mouse
					 * @param {Object} event the event that caused this to trigger (most likely mousemove)
					 */
					$.vakata.dnd._trigger("move", e);
					return false;
				},
				stop : function (e) {
					if(e.type === "touchend" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {
						e.pageX = e.originalEvent.changedTouches[0].pageX;
						e.pageY = e.originalEvent.changedTouches[0].pageY;
						e.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);
					}
					if(vakata_dnd.is_drag) {
						/**
						 * triggered on the document when a drag stops (the dragged element is dropped)
						 * @event
						 * @plugin dnd
						 * @name dnd_stop.vakata
						 * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start
						 * @param {DOM} element the DOM element being dragged
						 * @param {jQuery} helper the helper shown next to the mouse
						 * @param {Object} event the event that caused the stop
						 */
						$.vakata.dnd._trigger("stop", e);
					}
					else {
						if(e.type === "touchend" && e.target === vakata_dnd.target) {
							var to = setTimeout(function () { $(e.target).click(); }, 100);
							$(e.target).one('click', function() { if(to) { clearTimeout(to); } });
						}
					}
					$.vakata.dnd._clean();
					return false;
				}
			};
		}($));

		// include the dnd plugin by default
		// $.jstree.defaults.plugins.push("dnd");


	/**
	 * ### Massload plugin
	 *
	 * Adds massload functionality to jsTree, so that multiple nodes can be loaded in a single request (only useful with lazy loading).
	 */

		/**
		 * massload configuration
		 *
		 * It is possible to set this to a standard jQuery-like AJAX config.
		 * In addition to the standard jQuery ajax options here you can supply functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node IDs need to be loaded, the return value of those functions will be used.
		 *
		 * You can also set this to a function, that function will receive the node IDs being loaded as argument and a second param which is a function (callback) which should be called with the result.
		 *
		 * Both the AJAX and the function approach rely on the same return value - an object where the keys are the node IDs, and the value is the children of that node as an array.
		 *
		 *	{
		 *		"id1" : [{ "text" : "Child of ID1", "id" : "c1" }, { "text" : "Another child of ID1", "id" : "c2" }],
		 *		"id2" : [{ "text" : "Child of ID2", "id" : "c3" }]
		 *	}
		 * 
		 * @name $.jstree.defaults.massload
		 * @plugin massload
		 */
		$.jstree.defaults.massload = null;
		$.jstree.plugins.massload = function (options, parent) {
			this.init = function (el, options) {
				this._data.massload = {};
				parent.init.call(this, el, options);
			};
			this._load_nodes = function (nodes, callback, is_callback, force_reload) {
				var s = this.settings.massload,
					nodesString = JSON.stringify(nodes),
					toLoad = [],
					m = this._model.data,
					i, j, dom;
				if (!is_callback) {
					for(i = 0, j = nodes.length; i < j; i++) {
						if(!m[nodes[i]] || ( (!m[nodes[i]].state.loaded && !m[nodes[i]].state.failed) || force_reload) ) {
							toLoad.push(nodes[i]);
							dom = this.get_node(nodes[i], true);
							if (dom && dom.length) {
								dom.addClass("jstree-loading").attr('aria-busy',true);
							}
						}
					}
					this._data.massload = {};
					if (toLoad.length) {
						if($.isFunction(s)) {
							return s.call(this, toLoad, $.proxy(function (data) {
								var i, j;
								if(data) {
									for(i in data) {
										if(data.hasOwnProperty(i)) {
											this._data.massload[i] = data[i];
										}
									}
								}
								for(i = 0, j = nodes.length; i < j; i++) {
									dom = this.get_node(nodes[i], true);
									if (dom && dom.length) {
										dom.removeClass("jstree-loading").attr('aria-busy',false);
									}
								}
								parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);
							}, this));
						}
						if(typeof s === 'object' && s && s.url) {
							s = $.extend(true, {}, s);
							if($.isFunction(s.url)) {
								s.url = s.url.call(this, toLoad);
							}
							if($.isFunction(s.data)) {
								s.data = s.data.call(this, toLoad);
							}
							return $.ajax(s)
								.done($.proxy(function (data,t,x) {
										var i, j;
										if(data) {
											for(i in data) {
												if(data.hasOwnProperty(i)) {
													this._data.massload[i] = data[i];
												}
											}
										}
										for(i = 0, j = nodes.length; i < j; i++) {
											dom = this.get_node(nodes[i], true);
											if (dom && dom.length) {
												dom.removeClass("jstree-loading").attr('aria-busy',false);
											}
										}
										parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);
									}, this))
								.fail($.proxy(function (f) {
										parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);
									}, this));
						}
					}
				}
				return parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);
			};
			this._load_node = function (obj, callback) {
				var data = this._data.massload[obj.id],
					rslt = null, dom;
				if(data) {
					rslt = this[typeof data === 'string' ? '_append_html_data' : '_append_json_data'](
						obj,
						typeof data === 'string' ? $($.parseHTML(data)).filter(function () { return this.nodeType !== 3; }) : data,
						function (status) { callback.call(this, status); }
					);
					dom = this.get_node(obj.id, true);
					if (dom && dom.length) {
						dom.removeClass("jstree-loading").attr('aria-busy',false);
					}
					delete this._data.massload[obj.id];
					return rslt;
				}
				return parent._load_node.call(this, obj, callback);
			};
		};

	/**
	 * ### Search plugin
	 *
	 * Adds search functionality to jsTree.
	 */

		/**
		 * stores all defaults for the search plugin
		 * @name $.jstree.defaults.search
		 * @plugin search
		 */
		$.jstree.defaults.search = {
			/**
			 * a jQuery-like AJAX config, which jstree uses if a server should be queried for results.
			 *
			 * A `str` (which is the search string) parameter will be added with the request, an optional `inside` parameter will be added if the search is limited to a node id. The expected result is a JSON array with nodes that need to be opened so that matching nodes will be revealed.
			 * Leave this setting as `false` to not query the server. You can also set this to a function, which will be invoked in the instance's scope and receive 3 parameters - the search string, the callback to call with the array of nodes to load, and the optional node ID to limit the search to
			 * @name $.jstree.defaults.search.ajax
			 * @plugin search
			 */
			ajax : false,
			/**
			 * Indicates if the search should be fuzzy or not (should `chnd3` match `child node 3`). Default is `false`.
			 * @name $.jstree.defaults.search.fuzzy
			 * @plugin search
			 */
			fuzzy : false,
			/**
			 * Indicates if the search should be case sensitive. Default is `false`.
			 * @name $.jstree.defaults.search.case_sensitive
			 * @plugin search
			 */
			case_sensitive : false,
			/**
			 * Indicates if the tree should be filtered (by default) to show only matching nodes (keep in mind this can be a heavy on large trees in old browsers).
			 * This setting can be changed at runtime when calling the search method. Default is `false`.
			 * @name $.jstree.defaults.search.show_only_matches
			 * @plugin search
			 */
			show_only_matches : false,
			/**
			 * Indicates if the children of matched element are shown (when show_only_matches is true)
			 * This setting can be changed at runtime when calling the search method. Default is `false`.
			 * @name $.jstree.defaults.search.show_only_matches_children
			 * @plugin search
			 */
			show_only_matches_children : false,
			/**
			 * Indicates if all nodes opened to reveal the search result, should be closed when the search is cleared or a new search is performed. Default is `true`.
			 * @name $.jstree.defaults.search.close_opened_onclear
			 * @plugin search
			 */
			close_opened_onclear : true,
			/**
			 * Indicates if only leaf nodes should be included in search results. Default is `false`.
			 * @name $.jstree.defaults.search.search_leaves_only
			 * @plugin search
			 */
			search_leaves_only : false,
			/**
			 * If set to a function it wil be called in the instance's scope with two arguments - search string and node (where node will be every node in the structure, so use with caution).
			 * If the function returns a truthy value the node will be considered a match (it might not be displayed if search_only_leaves is set to true and the node is not a leaf). Default is `false`.
			 * @name $.jstree.defaults.search.search_callback
			 * @plugin search
			 */
			search_callback : false
		};

		$.jstree.plugins.search = function (options, parent) {
			this.bind = function () {
				parent.bind.call(this);

				this._data.search.str = "";
				this._data.search.dom = $();
				this._data.search.res = [];
				this._data.search.opn = [];
				this._data.search.som = false;
				this._data.search.smc = false;
				this._data.search.hdn = [];

				this.element
					.on("search.jstree", $.proxy(function (e, data) {
							if(this._data.search.som && data.res.length) {
								var m = this._model.data, i, j, p = [], k, l;
								for(i = 0, j = data.res.length; i < j; i++) {
									if(m[data.res[i]] && !m[data.res[i]].state.hidden) {
										p.push(data.res[i]);
										p = p.concat(m[data.res[i]].parents);
										if(this._data.search.smc) {
											for (k = 0, l = m[data.res[i]].children_d.length; k < l; k++) {
												if (m[m[data.res[i]].children_d[k]] && !m[m[data.res[i]].children_d[k]].state.hidden) {
													p.push(m[data.res[i]].children_d[k]);
												}
											}
										}
									}
								}
								p = $.vakata.array_remove_item($.vakata.array_unique(p), $.jstree.root);
								this._data.search.hdn = this.hide_all(true);
								this.show_node(p, true);
								this.redraw(true);
							}
						}, this))
					.on("clear_search.jstree", $.proxy(function (e, data) {
							if(this._data.search.som && data.res.length) {
								this.show_node(this._data.search.hdn, true);
								this.redraw(true);
							}
						}, this));
			};
			/**
			 * used to search the tree nodes for a given string
			 * @name search(str [, skip_async])
			 * @param {String} str the search string
			 * @param {Boolean} skip_async if set to true server will not be queried even if configured
			 * @param {Boolean} show_only_matches if set to true only matching nodes will be shown (keep in mind this can be very slow on large trees or old browsers)
			 * @param {mixed} inside an optional node to whose children to limit the search
			 * @param {Boolean} append if set to true the results of this search are appended to the previous search
			 * @plugin search
			 * @trigger search.jstree
			 */
			this.search = function (str, skip_async, show_only_matches, inside, append, show_only_matches_children) {
				if(str === false || $.trim(str.toString()) === "") {
					return this.clear_search();
				}
				inside = this.get_node(inside);
				inside = inside && inside.id ? inside.id : null;
				str = str.toString();
				var s = this.settings.search,
					a = s.ajax ? s.ajax : false,
					m = this._model.data,
					f = null,
					r = [],
					p = [], i, j;
				if(this._data.search.res.length && !append) {
					this.clear_search();
				}
				if(show_only_matches === undefined) {
					show_only_matches = s.show_only_matches;
				}
				if(show_only_matches_children === undefined) {
					show_only_matches_children = s.show_only_matches_children;
				}
				if(!skip_async && a !== false) {
					if($.isFunction(a)) {
						return a.call(this, str, $.proxy(function (d) {
								if(d && d.d) { d = d.d; }
								this._load_nodes(!$.isArray(d) ? [] : $.vakata.array_unique(d), function () {
									this.search(str, true, show_only_matches, inside, append);
								});
							}, this), inside);
					}
					else {
						a = $.extend({}, a);
						if(!a.data) { a.data = {}; }
						a.data.str = str;
						if(inside) {
							a.data.inside = inside;
						}
						return $.ajax(a)
							.fail($.proxy(function () {
								this._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'search', 'id' : 'search_01', 'reason' : 'Could not load search parents', 'data' : JSON.stringify(a) };
								this.settings.core.error.call(this, this._data.core.last_error);
							}, this))
							.done($.proxy(function (d) {
								if(d && d.d) { d = d.d; }
								this._load_nodes(!$.isArray(d) ? [] : $.vakata.array_unique(d), function () {
									this.search(str, true, show_only_matches, inside, append);
								});
							}, this));
					}
				}
				if(!append) {
					this._data.search.str = str;
					this._data.search.dom = $();
					this._data.search.res = [];
					this._data.search.opn = [];
					this._data.search.som = show_only_matches;
					this._data.search.smc = show_only_matches_children;
				}

				f = new $.vakata.search(str, true, { caseSensitive : s.case_sensitive, fuzzy : s.fuzzy });
				$.each(m[inside ? inside : $.jstree.root].children_d, function (ii, i) {
					var v = m[i];
					if(v.text && !v.state.hidden && (!s.search_leaves_only || (v.state.loaded && v.children.length === 0)) && ( (s.search_callback && s.search_callback.call(this, str, v)) || (!s.search_callback && f.search(v.text).isMatch) ) ) {
						r.push(i);
						p = p.concat(v.parents);
					}
				});
				if(r.length) {
					p = $.vakata.array_unique(p);
					for(i = 0, j = p.length; i < j; i++) {
						if(p[i] !== $.jstree.root && m[p[i]] && this.open_node(p[i], null, 0) === true) {
							this._data.search.opn.push(p[i]);
						}
					}
					if(!append) {
						this._data.search.dom = $(this.element[0].querySelectorAll('#' + $.map(r, function (v) { return "0123456789".indexOf(v[0]) !== -1 ? '\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\$&') : v.replace($.jstree.idregex,'\\$&'); }).join(', #')));
						this._data.search.res = r;
					}
					else {
						this._data.search.dom = this._data.search.dom.add($(this.element[0].querySelectorAll('#' + $.map(r, function (v) { return "0123456789".indexOf(v[0]) !== -1 ? '\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\$&') : v.replace($.jstree.idregex,'\\$&'); }).join(', #'))));
						this._data.search.res = $.vakata.array_unique(this._data.search.res.concat(r));
					}
					this._data.search.dom.children(".jstree-anchor").addClass('jstree-search');
				}
				/**
				 * triggered after search is complete
				 * @event
				 * @name search.jstree
				 * @param {jQuery} nodes a jQuery collection of matching nodes
				 * @param {String} str the search string
				 * @param {Array} res a collection of objects represeing the matching nodes
				 * @plugin search
				 */
				this.trigger('search', { nodes : this._data.search.dom, str : str, res : this._data.search.res, show_only_matches : show_only_matches });
			};
			/**
			 * used to clear the last search (removes classes and shows all nodes if filtering is on)
			 * @name clear_search()
			 * @plugin search
			 * @trigger clear_search.jstree
			 */
			this.clear_search = function () {
				if(this.settings.search.close_opened_onclear) {
					this.close_node(this._data.search.opn, 0);
				}
				/**
				 * triggered after search is complete
				 * @event
				 * @name clear_search.jstree
				 * @param {jQuery} nodes a jQuery collection of matching nodes (the result from the last search)
				 * @param {String} str the search string (the last search string)
				 * @param {Array} res a collection of objects represeing the matching nodes (the result from the last search)
				 * @plugin search
				 */
				this.trigger('clear_search', { 'nodes' : this._data.search.dom, str : this._data.search.str, res : this._data.search.res });
				if(this._data.search.res.length) {
					this._data.search.dom = $(this.element[0].querySelectorAll('#' + $.map(this._data.search.res, function (v) {
						return "0123456789".indexOf(v[0]) !== -1 ? '\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\$&') : v.replace($.jstree.idregex,'\\$&');
					}).join(', #')));
					this._data.search.dom.children(".jstree-anchor").removeClass("jstree-search");
				}
				this._data.search.str = "";
				this._data.search.res = [];
				this._data.search.opn = [];
				this._data.search.dom = $();
			};

			this.redraw_node = function(obj, deep, callback, force_render) {
				obj = parent.redraw_node.apply(this, arguments);
				if(obj) {
					if($.inArray(obj.id, this._data.search.res) !== -1) {
						var i, j, tmp = null;
						for(i = 0, j = obj.childNodes.length; i < j; i++) {
							if(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf("jstree-anchor") !== -1) {
								tmp = obj.childNodes[i];
								break;
							}
						}
						if(tmp) {
							tmp.className += ' jstree-search';
						}
					}
				}
				return obj;
			};
		};

		// helpers
		(function ($) {
			// from http://kiro.me/projects/fuse.html
			$.vakata.search = function(pattern, txt, options) {
				options = options || {};
				options = $.extend({}, $.vakata.search.defaults, options);
				if(options.fuzzy !== false) {
					options.fuzzy = true;
				}
				pattern = options.caseSensitive ? pattern : pattern.toLowerCase();
				var MATCH_LOCATION	= options.location,
					MATCH_DISTANCE	= options.distance,
					MATCH_THRESHOLD	= options.threshold,
					patternLen = pattern.length,
					matchmask, pattern_alphabet, match_bitapScore, search;
				if(patternLen > 32) {
					options.fuzzy = false;
				}
				if(options.fuzzy) {
					matchmask = 1 << (patternLen - 1);
					pattern_alphabet = (function () {
						var mask = {},
							i = 0;
						for (i = 0; i < patternLen; i++) {
							mask[pattern.charAt(i)] = 0;
						}
						for (i = 0; i < patternLen; i++) {
							mask[pattern.charAt(i)] |= 1 << (patternLen - i - 1);
						}
						return mask;
					}());
					match_bitapScore = function (e, x) {
						var accuracy = e / patternLen,
							proximity = Math.abs(MATCH_LOCATION - x);
						if(!MATCH_DISTANCE) {
							return proximity ? 1.0 : accuracy;
						}
						return accuracy + (proximity / MATCH_DISTANCE);
					};
				}
				search = function (text) {
					text = options.caseSensitive ? text : text.toLowerCase();
					if(pattern === text || text.indexOf(pattern) !== -1) {
						return {
							isMatch: true,
							score: 0
						};
					}
					if(!options.fuzzy) {
						return {
							isMatch: false,
							score: 1
						};
					}
					var i, j,
						textLen = text.length,
						scoreThreshold = MATCH_THRESHOLD,
						bestLoc = text.indexOf(pattern, MATCH_LOCATION),
						binMin, binMid,
						binMax = patternLen + textLen,
						lastRd, start, finish, rd, charMatch,
						score = 1,
						locations = [];
					if (bestLoc !== -1) {
						scoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);
						bestLoc = text.lastIndexOf(pattern, MATCH_LOCATION + patternLen);
						if (bestLoc !== -1) {
							scoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);
						}
					}
					bestLoc = -1;
					for (i = 0; i < patternLen; i++) {
						binMin = 0;
						binMid = binMax;
						while (binMin < binMid) {
							if (match_bitapScore(i, MATCH_LOCATION + binMid) <= scoreThreshold) {
								binMin = binMid;
							} else {
								binMax = binMid;
							}
							binMid = Math.floor((binMax - binMin) / 2 + binMin);
						}
						binMax = binMid;
						start = Math.max(1, MATCH_LOCATION - binMid + 1);
						finish = Math.min(MATCH_LOCATION + binMid, textLen) + patternLen;
						rd = new Array(finish + 2);
						rd[finish + 1] = (1 << i) - 1;
						for (j = finish; j >= start; j--) {
							charMatch = pattern_alphabet[text.charAt(j - 1)];
							if (i === 0) {
								rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;
							} else {
								rd[j] = ((rd[j + 1] << 1) | 1) & charMatch | (((lastRd[j + 1] | lastRd[j]) << 1) | 1) | lastRd[j + 1];
							}
							if (rd[j] & matchmask) {
								score = match_bitapScore(i, j - 1);
								if (score <= scoreThreshold) {
									scoreThreshold = score;
									bestLoc = j - 1;
									locations.push(bestLoc);
									if (bestLoc > MATCH_LOCATION) {
										start = Math.max(1, 2 * MATCH_LOCATION - bestLoc);
									} else {
										break;
									}
								}
							}
						}
						if (match_bitapScore(i + 1, MATCH_LOCATION) > scoreThreshold) {
							break;
						}
						lastRd = rd;
					}
					return {
						isMatch: bestLoc >= 0,
						score: score
					};
				};
				return txt === true ? { 'search' : search } : search(txt);
			};
			$.vakata.search.defaults = {
				location : 0,
				distance : 100,
				threshold : 0.6,
				fuzzy : false,
				caseSensitive : false
			};
		}($));

		// include the search plugin by default
		// $.jstree.defaults.plugins.push("search");


	/**
	 * ### Sort plugin
	 *
	 * Automatically sorts all siblings in the tree according to a sorting function.
	 */

		/**
		 * the settings function used to sort the nodes.
		 * It is executed in the tree's context, accepts two nodes as arguments and should return `1` or `-1`.
		 * @name $.jstree.defaults.sort
		 * @plugin sort
		 */
		$.jstree.defaults.sort = function (a, b) {
			//return this.get_type(a) === this.get_type(b) ? (this.get_text(a) > this.get_text(b) ? 1 : -1) : this.get_type(a) >= this.get_type(b);
			return this.get_text(a) > this.get_text(b) ? 1 : -1;
		};
		$.jstree.plugins.sort = function (options, parent) {
			this.bind = function () {
				parent.bind.call(this);
				this.element
					.on("model.jstree", $.proxy(function (e, data) {
							this.sort(data.parent, true);
						}, this))
					.on("rename_node.jstree create_node.jstree", $.proxy(function (e, data) {
							this.sort(data.parent || data.node.parent, false);
							this.redraw_node(data.parent || data.node.parent, true);
						}, this))
					.on("move_node.jstree copy_node.jstree", $.proxy(function (e, data) {
							this.sort(data.parent, false);
							this.redraw_node(data.parent, true);
						}, this));
			};
			/**
			 * used to sort a node's children
			 * @private
			 * @name sort(obj [, deep])
			 * @param  {mixed} obj the node
			 * @param {Boolean} deep if set to `true` nodes are sorted recursively.
			 * @plugin sort
			 * @trigger search.jstree
			 */
			this.sort = function (obj, deep) {
				var i, j;
				obj = this.get_node(obj);
				if(obj && obj.children && obj.children.length) {
					obj.children.sort($.proxy(this.settings.sort, this));
					if(deep) {
						for(i = 0, j = obj.children_d.length; i < j; i++) {
							this.sort(obj.children_d[i], false);
						}
					}
				}
			};
		};

		// include the sort plugin by default
		// $.jstree.defaults.plugins.push("sort");

	/**
	 * ### State plugin
	 *
	 * Saves the state of the tree (selected nodes, opened nodes) on the user's computer using available options (localStorage, cookies, etc)
	 */

		var to = false;
		/**
		 * stores all defaults for the state plugin
		 * @name $.jstree.defaults.state
		 * @plugin state
		 */
		$.jstree.defaults.state = {
			/**
			 * A string for the key to use when saving the current tree (change if using multiple trees in your project). Defaults to `jstree`.
			 * @name $.jstree.defaults.state.key
			 * @plugin state
			 */
			key		: 'jstree',
			/**
			 * A space separated list of events that trigger a state save. Defaults to `changed.jstree open_node.jstree close_node.jstree`.
			 * @name $.jstree.defaults.state.events
			 * @plugin state
			 */
			events	: 'changed.jstree open_node.jstree close_node.jstree check_node.jstree uncheck_node.jstree',
			/**
			 * Time in milliseconds after which the state will expire. Defaults to 'false' meaning - no expire.
			 * @name $.jstree.defaults.state.ttl
			 * @plugin state
			 */
			ttl		: false,
			/**
			 * A function that will be executed prior to restoring state with one argument - the state object. Can be used to clear unwanted parts of the state.
			 * @name $.jstree.defaults.state.filter
			 * @plugin state
			 */
			filter	: false
		};
		$.jstree.plugins.state = function (options, parent) {
			this.bind = function () {
				parent.bind.call(this);
				var bind = $.proxy(function () {
					this.element.on(this.settings.state.events, $.proxy(function () {
						if(to) { clearTimeout(to); }
						to = setTimeout($.proxy(function () { this.save_state(); }, this), 100);
					}, this));
					/**
					 * triggered when the state plugin is finished restoring the state (and immediately after ready if there is no state to restore).
					 * @event
					 * @name state_ready.jstree
					 * @plugin state
					 */
					this.trigger('state_ready');
				}, this);
				this.element
					.on("ready.jstree", $.proxy(function (e, data) {
							this.element.one("restore_state.jstree", bind);
							if(!this.restore_state()) { bind(); }
						}, this));
			};
			/**
			 * save the state
			 * @name save_state()
			 * @plugin state
			 */
			this.save_state = function () {
				var st = { 'state' : this.get_state(), 'ttl' : this.settings.state.ttl, 'sec' : +(new Date()) };
				$.vakata.storage.set(this.settings.state.key, JSON.stringify(st));
			};
			/**
			 * restore the state from the user's computer
			 * @name restore_state()
			 * @plugin state
			 */
			this.restore_state = function () {
				var k = $.vakata.storage.get(this.settings.state.key);
				if(!!k) { try { k = JSON.parse(k); } catch(ex) { return false; } }
				if(!!k && k.ttl && k.sec && +(new Date()) - k.sec > k.ttl) { return false; }
				if(!!k && k.state) { k = k.state; }
				if(!!k && $.isFunction(this.settings.state.filter)) { k = this.settings.state.filter.call(this, k); }
				if(!!k) {
					this.element.one("set_state.jstree", function (e, data) { data.instance.trigger('restore_state', { 'state' : $.extend(true, {}, k) }); });
					this.set_state(k);
					return true;
				}
				return false;
			};
			/**
			 * clear the state on the user's computer
			 * @name clear_state()
			 * @plugin state
			 */
			this.clear_state = function () {
				return $.vakata.storage.del(this.settings.state.key);
			};
		};

		(function ($, undefined) {
			$.vakata.storage = {
				// simply specifying the functions in FF throws an error
				set : function (key, val) { return window.localStorage.setItem(key, val); },
				get : function (key) { return window.localStorage.getItem(key); },
				del : function (key) { return window.localStorage.removeItem(key); }
			};
		}($));

		// include the state plugin by default
		// $.jstree.defaults.plugins.push("state");

	/**
	 * ### Types plugin
	 *
	 * Makes it possible to add predefined types for groups of nodes, which make it possible to easily control nesting rules and icon for each group.
	 */

		/**
		 * An object storing all types as key value pairs, where the key is the type name and the value is an object that could contain following keys (all optional).
		 *
		 * * `max_children` the maximum number of immediate children this node type can have. Do not specify or set to `-1` for unlimited.
		 * * `max_depth` the maximum number of nesting this node type can have. A value of `1` would mean that the node can have children, but no grandchildren. Do not specify or set to `-1` for unlimited.
		 * * `valid_children` an array of node type strings, that nodes of this type can have as children. Do not specify or set to `-1` for no limits.
		 * * `icon` a string - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class. Omit to use the default icon from your theme.
		 * * `li_attr` an object of values which will be used to add HTML attributes on the resulting LI DOM node (merged with the node's own data)
		 * * `a_attr` an object of values which will be used to add HTML attributes on the resulting A DOM node (merged with the node's own data)
		 *
		 * There are two predefined types:
		 *
		 * * `#` represents the root of the tree, for example `max_children` would control the maximum number of root nodes.
		 * * `default` represents the default node - any settings here will be applied to all nodes that do not have a type specified.
		 *
		 * @name $.jstree.defaults.types
		 * @plugin types
		 */
		$.jstree.defaults.types = {
			'default' : {}
		};
		$.jstree.defaults.types[$.jstree.root] = {};

		$.jstree.plugins.types = function (options, parent) {
			this.init = function (el, options) {
				var i, j;
				if(options && options.types && options.types['default']) {
					for(i in options.types) {
						if(i !== "default" && i !== $.jstree.root && options.types.hasOwnProperty(i)) {
							for(j in options.types['default']) {
								if(options.types['default'].hasOwnProperty(j) && options.types[i][j] === undefined) {
									options.types[i][j] = options.types['default'][j];
								}
							}
						}
					}
				}
				parent.init.call(this, el, options);
				this._model.data[$.jstree.root].type = $.jstree.root;
			};
			this.refresh = function (skip_loading, forget_state) {
				parent.refresh.call(this, skip_loading, forget_state);
				this._model.data[$.jstree.root].type = $.jstree.root;
			};
			this.bind = function () {
				this.element
					.on('model.jstree', $.proxy(function (e, data) {
							var m = this._model.data,
								dpc = data.nodes,
								t = this.settings.types,
								i, j, c = 'default', k;
							for(i = 0, j = dpc.length; i < j; i++) {
								c = 'default';
								if(m[dpc[i]].original && m[dpc[i]].original.type && t[m[dpc[i]].original.type]) {
									c = m[dpc[i]].original.type;
								}
								if(m[dpc[i]].data && m[dpc[i]].data.jstree && m[dpc[i]].data.jstree.type && t[m[dpc[i]].data.jstree.type]) {
									c = m[dpc[i]].data.jstree.type;
								}
								m[dpc[i]].type = c;
								if(m[dpc[i]].icon === true && t[c].icon !== undefined) {
									m[dpc[i]].icon = t[c].icon;
								}
								if(t[c].li_attr !== undefined && typeof t[c].li_attr === 'object') {
									for (k in t[c].li_attr) {
										if (t[c].li_attr.hasOwnProperty(k)) {
											if (k === 'id') {
												continue;
											}
											else if (m[dpc[i]].li_attr[k] === undefined) {
												m[dpc[i]].li_attr[k] = t[c].li_attr[k];
											}
											else if (k === 'class') {
												m[dpc[i]].li_attr['class'] = t[c].li_attr['class'] + ' ' + m[dpc[i]].li_attr['class'];
											}
										}
									}
								}
								if(t[c].a_attr !== undefined && typeof t[c].a_attr === 'object') {
									for (k in t[c].a_attr) {
										if (t[c].a_attr.hasOwnProperty(k)) {
											if (k === 'id') {
												continue;
											}
											else if (m[dpc[i]].a_attr[k] === undefined) {
												m[dpc[i]].a_attr[k] = t[c].a_attr[k];
											}
											else if (k === 'href' && m[dpc[i]].a_attr[k] === '#') {
												m[dpc[i]].a_attr['href'] = t[c].a_attr['href'];
											}
											else if (k === 'class') {
												m[dpc[i]].a_attr['class'] = t[c].a_attr['class'] + ' ' + m[dpc[i]].a_attr['class'];
											}
										}
									}
								}
							}
							m[$.jstree.root].type = $.jstree.root;
						}, this));
				parent.bind.call(this);
			};
			this.get_json = function (obj, options, flat) {
				var i, j,
					m = this._model.data,
					opt = options ? $.extend(true, {}, options, {no_id:false}) : {},
					tmp = parent.get_json.call(this, obj, opt, flat);
				if(tmp === false) { return false; }
				if($.isArray(tmp)) {
					for(i = 0, j = tmp.length; i < j; i++) {
						tmp[i].type = tmp[i].id && m[tmp[i].id] && m[tmp[i].id].type ? m[tmp[i].id].type : "default";
						if(options && options.no_id) {
							delete tmp[i].id;
							if(tmp[i].li_attr && tmp[i].li_attr.id) {
								delete tmp[i].li_attr.id;
							}
							if(tmp[i].a_attr && tmp[i].a_attr.id) {
								delete tmp[i].a_attr.id;
							}
						}
					}
				}
				else {
					tmp.type = tmp.id && m[tmp.id] && m[tmp.id].type ? m[tmp.id].type : "default";
					if(options && options.no_id) {
						tmp = this._delete_ids(tmp);
					}
				}
				return tmp;
			};
			this._delete_ids = function (tmp) {
				if($.isArray(tmp)) {
					for(var i = 0, j = tmp.length; i < j; i++) {
						tmp[i] = this._delete_ids(tmp[i]);
					}
					return tmp;
				}
				delete tmp.id;
				if(tmp.li_attr && tmp.li_attr.id) {
					delete tmp.li_attr.id;
				}
				if(tmp.a_attr && tmp.a_attr.id) {
					delete tmp.a_attr.id;
				}
				if(tmp.children && $.isArray(tmp.children)) {
					tmp.children = this._delete_ids(tmp.children);
				}
				return tmp;
			};
			this.check = function (chk, obj, par, pos, more) {
				if(parent.check.call(this, chk, obj, par, pos, more) === false) { return false; }
				obj = obj && obj.id ? obj : this.get_node(obj);
				par = par && par.id ? par : this.get_node(par);
				var m = obj && obj.id ? (more && more.origin ? more.origin : $.jstree.reference(obj.id)) : null, tmp, d, i, j;
				m = m && m._model && m._model.data ? m._model.data : null;
				switch(chk) {
					case "create_node":
					case "move_node":
					case "copy_node":
						if(chk !== 'move_node' || $.inArray(obj.id, par.children) === -1) {
							tmp = this.get_rules(par);
							if(tmp.max_children !== undefined && tmp.max_children !== -1 && tmp.max_children === par.children.length) {
								this._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_01', 'reason' : 'max_children prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };
								return false;
							}
							if(tmp.valid_children !== undefined && tmp.valid_children !== -1 && $.inArray((obj.type || 'default'), tmp.valid_children) === -1) {
								this._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_02', 'reason' : 'valid_children prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };
								return false;
							}
							if(m && obj.children_d && obj.parents) {
								d = 0;
								for(i = 0, j = obj.children_d.length; i < j; i++) {
									d = Math.max(d, m[obj.children_d[i]].parents.length);
								}
								d = d - obj.parents.length + 1;
							}
							if(d <= 0 || d === undefined) { d = 1; }
							do {
								if(tmp.max_depth !== undefined && tmp.max_depth !== -1 && tmp.max_depth < d) {
									this._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_03', 'reason' : 'max_depth prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };
									return false;
								}
								par = this.get_node(par.parent);
								tmp = this.get_rules(par);
								d++;
							} while(par);
						}
						break;
				}
				return true;
			};
			/**
			 * used to retrieve the type settings object for a node
			 * @name get_rules(obj)
			 * @param {mixed} obj the node to find the rules for
			 * @return {Object}
			 * @plugin types
			 */
			this.get_rules = function (obj) {
				obj = this.get_node(obj);
				if(!obj) { return false; }
				var tmp = this.get_type(obj, true);
				if(tmp.max_depth === undefined) { tmp.max_depth = -1; }
				if(tmp.max_children === undefined) { tmp.max_children = -1; }
				if(tmp.valid_children === undefined) { tmp.valid_children = -1; }
				return tmp;
			};
			/**
			 * used to retrieve the type string or settings object for a node
			 * @name get_type(obj [, rules])
			 * @param {mixed} obj the node to find the rules for
			 * @param {Boolean} rules if set to `true` instead of a string the settings object will be returned
			 * @return {String|Object}
			 * @plugin types
			 */
			this.get_type = function (obj, rules) {
				obj = this.get_node(obj);
				return (!obj) ? false : ( rules ? $.extend({ 'type' : obj.type }, this.settings.types[obj.type]) : obj.type);
			};
			/**
			 * used to change a node's type
			 * @name set_type(obj, type)
			 * @param {mixed} obj the node to change
			 * @param {String} type the new type
			 * @plugin types
			 */
			this.set_type = function (obj, type) {
				var m = this._model.data, t, t1, t2, old_type, old_icon, k, d, a;
				if($.isArray(obj)) {
					obj = obj.slice();
					for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
						this.set_type(obj[t1], type);
					}
					return true;
				}
				t = this.settings.types;
				obj = this.get_node(obj);
				if(!t[type] || !obj) { return false; }
				d = this.get_node(obj, true);
				if (d && d.length) {
					a = d.children('.jstree-anchor');
				}
				old_type = obj.type;
				old_icon = this.get_icon(obj);
				obj.type = type;
				if(old_icon === true || (t[old_type] && t[old_type].icon !== undefined && old_icon === t[old_type].icon)) {
					this.set_icon(obj, t[type].icon !== undefined ? t[type].icon : true);
				}

				// remove old type props
				if(t[old_type].li_attr !== undefined && typeof t[old_type].li_attr === 'object') {
					for (k in t[old_type].li_attr) {
						if (t[old_type].li_attr.hasOwnProperty(k)) {
							if (k === 'id') {
								continue;
							}
							else if (k === 'class') {
								m[obj.id].li_attr['class'] = (m[obj.id].li_attr['class'] || '').replace(t[old_type].li_attr[k], '');
								if (d) { d.removeClass(t[old_type].li_attr[k]); }
							}
							else if (m[obj.id].li_attr[k] === t[old_type].li_attr[k]) {
								m[obj.id].li_attr[k] = null;
								if (d) { d.removeAttr(k); }
							}
						}
					}
				}
				if(t[old_type].a_attr !== undefined && typeof t[old_type].a_attr === 'object') {
					for (k in t[old_type].a_attr) {
						if (t[old_type].a_attr.hasOwnProperty(k)) {
							if (k === 'id') {
								continue;
							}
							else if (k === 'class') {
								m[obj.id].a_attr['class'] = (m[obj.id].a_attr['class'] || '').replace(t[old_type].a_attr[k], '');
								if (a) { a.removeClass(t[old_type].a_attr[k]); }
							}
							else if (m[obj.id].a_attr[k] === t[old_type].a_attr[k]) {
								if (k === 'href') {
									m[obj.id].a_attr[k] = '#';
									if (a) { a.attr('href', '#'); }
								}
								else {
									delete m[obj.id].a_attr[k];
									if (a) { a.removeAttr(k); }
								}
							}
						}
					}
				}

				// add new props
				if(t[type].li_attr !== undefined && typeof t[type].li_attr === 'object') {
					for (k in t[type].li_attr) {
						if (t[type].li_attr.hasOwnProperty(k)) {
							if (k === 'id') {
								continue;
							}
							else if (m[obj.id].li_attr[k] === undefined) {
								m[obj.id].li_attr[k] = t[type].li_attr[k];
								if (d) {
									if (k === 'class') {
										d.addClass(t[type].li_attr[k]);
									}
									else {
										d.attr(k, t[type].li_attr[k]);
									}
								}
							}
							else if (k === 'class') {
								m[obj.id].li_attr['class'] = t[type].li_attr[k] + ' ' + m[obj.id].li_attr['class'];
								if (d) { d.addClass(t[type].li_attr[k]); }
							}
						}
					}
				}
				if(t[type].a_attr !== undefined && typeof t[type].a_attr === 'object') {
					for (k in t[type].a_attr) {
						if (t[type].a_attr.hasOwnProperty(k)) {
							if (k === 'id') {
								continue;
							}
							else if (m[obj.id].a_attr[k] === undefined) {
								m[obj.id].a_attr[k] = t[type].a_attr[k];
								if (a) {
									if (k === 'class') {
										a.addClass(t[type].a_attr[k]);
									}
									else {
										a.attr(k, t[type].a_attr[k]);
									}
								}
							}
							else if (k === 'href' && m[obj.id].a_attr[k] === '#') {
								m[obj.id].a_attr['href'] = t[type].a_attr['href'];
								if (a) { a.attr('href', t[type].a_attr['href']); }
							}
							else if (k === 'class') {
								m[obj.id].a_attr['class'] = t[type].a_attr['class'] + ' ' + m[obj.id].a_attr['class'];
								if (a) { a.addClass(t[type].a_attr[k]); }
							}
						}
					}
				}

				return true;
			};
		};
		// include the types plugin by default
		// $.jstree.defaults.plugins.push("types");


	/**
	 * ### Unique plugin
	 *
	 * Enforces that no nodes with the same name can coexist as siblings.
	 */

		/**
		 * stores all defaults for the unique plugin
		 * @name $.jstree.defaults.unique
		 * @plugin unique
		 */
		$.jstree.defaults.unique = {
			/**
			 * Indicates if the comparison should be case sensitive. Default is `false`.
			 * @name $.jstree.defaults.unique.case_sensitive
			 * @plugin unique
			 */
			case_sensitive : false,
			/**
			 * A callback executed in the instance's scope when a new node is created and the name is already taken, the two arguments are the conflicting name and the counter. The default will produce results like `New node (2)`.
			 * @name $.jstree.defaults.unique.duplicate
			 * @plugin unique
			 */
			duplicate : function (name, counter) {
				return name + ' (' + counter + ')';
			}
		};

		$.jstree.plugins.unique = function (options, parent) {
			this.check = function (chk, obj, par, pos, more) {
				if(parent.check.call(this, chk, obj, par, pos, more) === false) { return false; }
				obj = obj && obj.id ? obj : this.get_node(obj);
				par = par && par.id ? par : this.get_node(par);
				if(!par || !par.children) { return true; }
				var n = chk === "rename_node" ? pos : obj.text,
					c = [],
					s = this.settings.unique.case_sensitive,
					m = this._model.data, i, j;
				for(i = 0, j = par.children.length; i < j; i++) {
					c.push(s ? m[par.children[i]].text : m[par.children[i]].text.toLowerCase());
				}
				if(!s) { n = n.toLowerCase(); }
				switch(chk) {
					case "delete_node":
						return true;
					case "rename_node":
						i = ($.inArray(n, c) === -1 || (obj.text && obj.text[ s ? 'toString' : 'toLowerCase']() === n));
						if(!i) {
							this._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_01', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };
						}
						return i;
					case "create_node":
						i = ($.inArray(n, c) === -1);
						if(!i) {
							this._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_04', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };
						}
						return i;
					case "copy_node":
						i = ($.inArray(n, c) === -1);
						if(!i) {
							this._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_02', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };
						}
						return i;
					case "move_node":
						i = ( (obj.parent === par.id && (!more || !more.is_multi)) || $.inArray(n, c) === -1);
						if(!i) {
							this._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_03', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };
						}
						return i;
				}
				return true;
			};
			this.create_node = function (par, node, pos, callback, is_loaded) {
				if(!node || node.text === undefined) {
					if(par === null) {
						par = $.jstree.root;
					}
					par = this.get_node(par);
					if(!par) {
						return parent.create_node.call(this, par, node, pos, callback, is_loaded);
					}
					pos = pos === undefined ? "last" : pos;
					if(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {
						return parent.create_node.call(this, par, node, pos, callback, is_loaded);
					}
					if(!node) { node = {}; }
					var tmp, n, dpc, i, j, m = this._model.data, s = this.settings.unique.case_sensitive, cb = this.settings.unique.duplicate;
					n = tmp = this.get_string('New node');
					dpc = [];
					for(i = 0, j = par.children.length; i < j; i++) {
						dpc.push(s ? m[par.children[i]].text : m[par.children[i]].text.toLowerCase());
					}
					i = 1;
					while($.inArray(s ? n : n.toLowerCase(), dpc) !== -1) {
						n = cb.call(this, tmp, (++i)).toString();
					}
					node.text = n;
				}
				return parent.create_node.call(this, par, node, pos, callback, is_loaded);
			};
		};

		// include the unique plugin by default
		// $.jstree.defaults.plugins.push("unique");


	/**
	 * ### Wholerow plugin
	 *
	 * Makes each node appear block level. Making selection easier. May cause slow down for large trees in old browsers.
	 */

		var div = document.createElement('DIV');
		div.setAttribute('unselectable','on');
		div.setAttribute('role','presentation');
		div.className = 'jstree-wholerow';
		div.innerHTML = '&#160;';
		$.jstree.plugins.wholerow = function (options, parent) {
			this.bind = function () {
				parent.bind.call(this);

				this.element
					.on('ready.jstree set_state.jstree', $.proxy(function () {
							this.hide_dots();
						}, this))
					.on("init.jstree loading.jstree ready.jstree", $.proxy(function () {
							//div.style.height = this._data.core.li_height + 'px';
							this.get_container_ul().addClass('jstree-wholerow-ul');
						}, this))
					.on("deselect_all.jstree", $.proxy(function (e, data) {
							this.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');
						}, this))
					.on("changed.jstree", $.proxy(function (e, data) {
							this.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');
							var tmp = false, i, j;
							for(i = 0, j = data.selected.length; i < j; i++) {
								tmp = this.get_node(data.selected[i], true);
								if(tmp && tmp.length) {
									tmp.children('.jstree-wholerow').addClass('jstree-wholerow-clicked');
								}
							}
						}, this))
					.on("open_node.jstree", $.proxy(function (e, data) {
							this.get_node(data.node, true).find('.jstree-clicked').parent().children('.jstree-wholerow').addClass('jstree-wholerow-clicked');
						}, this))
					.on("hover_node.jstree dehover_node.jstree", $.proxy(function (e, data) {
							if(e.type === "hover_node" && this.is_disabled(data.node)) { return; }
							this.get_node(data.node, true).children('.jstree-wholerow')[e.type === "hover_node"?"addClass":"removeClass"]('jstree-wholerow-hovered');
						}, this))
					.on("contextmenu.jstree", ".jstree-wholerow", $.proxy(function (e) {
							if (this._data.contextmenu) {
								e.preventDefault();
								var tmp = $.Event('contextmenu', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey, pageX : e.pageX, pageY : e.pageY });
								$(e.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(tmp);
							}
						}, this))
					/*!
					.on("mousedown.jstree touchstart.jstree", ".jstree-wholerow", function (e) {
							if(e.target === e.currentTarget) {
								var a = $(e.currentTarget).closest(".jstree-node").children(".jstree-anchor");
								e.target = a[0];
								a.trigger(e);
							}
						})
					*/
					.on("click.jstree", ".jstree-wholerow", function (e) {
							e.stopImmediatePropagation();
							var tmp = $.Event('click', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });
							$(e.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(tmp).focus();
						})
					.on("click.jstree", ".jstree-leaf > .jstree-ocl", $.proxy(function (e) {
							e.stopImmediatePropagation();
							var tmp = $.Event('click', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });
							$(e.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(tmp).focus();
						}, this))
					.on("mouseover.jstree", ".jstree-wholerow, .jstree-icon", $.proxy(function (e) {
							e.stopImmediatePropagation();
							if(!this.is_disabled(e.currentTarget)) {
								this.hover_node(e.currentTarget);
							}
							return false;
						}, this))
					.on("mouseleave.jstree", ".jstree-node", $.proxy(function (e) {
							this.dehover_node(e.currentTarget);
						}, this));
			};
			this.teardown = function () {
				if(this.settings.wholerow) {
					this.element.find(".jstree-wholerow").remove();
				}
				parent.teardown.call(this);
			};
			this.redraw_node = function(obj, deep, callback, force_render) {
				obj = parent.redraw_node.apply(this, arguments);
				if(obj) {
					var tmp = div.cloneNode(true);
					//tmp.style.height = this._data.core.li_height + 'px';
					if($.inArray(obj.id, this._data.core.selected) !== -1) { tmp.className += ' jstree-wholerow-clicked'; }
					if(this._data.core.focused && this._data.core.focused === obj.id) { tmp.className += ' jstree-wholerow-hovered'; }
					obj.insertBefore(tmp, obj.childNodes[0]);
				}
				return obj;
			};
		};
		// include the wholerow plugin by default
		// $.jstree.defaults.plugins.push("wholerow");
		if(document.registerElement && Object && Object.create) {
			var proto = Object.create(HTMLElement.prototype);
			proto.createdCallback = function () {
				var c = { core : {}, plugins : [] }, i;
				for(i in $.jstree.plugins) {
					if($.jstree.plugins.hasOwnProperty(i) && this.attributes[i]) {
						c.plugins.push(i);
						if(this.getAttribute(i) && JSON.parse(this.getAttribute(i))) {
							c[i] = JSON.parse(this.getAttribute(i));
						}
					}
				}
				for(i in $.jstree.defaults.core) {
					if($.jstree.defaults.core.hasOwnProperty(i) && this.attributes[i]) {
						c.core[i] = JSON.parse(this.getAttribute(i)) || this.getAttribute(i);
					}
				}
				$(this).jstree(c);
			};
			// proto.attributeChangedCallback = function (name, previous, value) { };
			try {
				document.registerElement("vakata-jstree", { prototype: proto });
			} catch(ignore) { }
		}

	}));

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2016, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};

	var cytoscape = __webpack_require__(70);
	var ph_sp = __webpack_require__(32);
	var pw = __webpack_require__(20);
	var menu = __webpack_require__(180).headerExtension
	var cd_app = {};

	exports.provGraphExtension = {
	    id: 'cadets.prov.graph',
	    activate: activateProvGraph,
	    addGraph: addProvGraph,
	    aboutpanel: {},
	    opened: {}
	};

	function activateProvGraph(app) {
	    cd_app = app;

	    var panel = new ph_sp.SplitPanel();
	    panel.orientation = ph_sp.SplitPanel.Horizontal;
	    panel.id = 'opus-header';

	    var logo = new pw.Widget();
	    logo.id = 'logo';
	    logo.title.text = 'cadets-logo';
	    logo.addClass('cadets-logo');

	    var graph = createAboutPanel();
	    exports.provGraphExtension.aboutpanel = graph

	    panel.addChild(logo);
	    panel.addChild(graph);

	    app.shell.addToMainArea(graph);
	    return Promise.resolve();
	}

	function to_cytoscape(graph){
	    return graph.nodes.map(function(node){
	            return {group: 'nodes', data: node};
	        }).concat(graph.edges.map(function(edge){
	            return {group: 'edges', data: {id: edge.src+"-"+edge.dest,
	                           source: edge.src,
	                           target: edge.dest,
	                           type: edge.type,
	                           chg: edge.chg}};
	        }));
	}

	function addProvGraph(node) {
	  $.ajax({url: "../provgraph?gnode_id="+node.original.gnode_id,
	          type: "GET",
	          async: true,
	          success: function(data){
	              data = $.parseJSON(data)
	              var options = {
	                  name: 'breadthfirst',

	                  fit: true, // whether to fit the viewport to the graph
	                  directed: false, // whether the tree is directed downwards (or edges can point in any direction if false)
	                  padding: 30, // padding on fit
	                  circle: false, // put depths in concentric circles if true, put depths top down if false
	                  spacingFactor: 1, // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
	                  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	                  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
	                  roots: [data.root], // the roots of the trees
	                  maximalAdjustments: 0, // how many times to try to position the nodes in a maximal way (i.e. no backtracking)
	                  animate: true, // whether to transition the node positions
	                  animationDuration: 500, // duration of animation in ms if enabled
	                  animationEasing: undefined, // easing of animation if enabled
	                  ready: undefined, // callback on layoutready
	                  stop: undefined // callback on layoutstop
	              };
	              var id = 'gr-'+node.original.gnode_id
	              var graph = new GraphWidget(data, options, id);
	              graph.id = id;
	              var bin = node.original.binary.split('/').reverse()[0]
	              graph.title.text = "["+ node.original.pid +"] "+bin
	              graph.title.closable = true;
	              menu.diffAdd(node.original.gnode_id);
	              cd_app.shell.addToMainArea(graph)
	          }});
	}

	var GraphWidget = (function (_super) {
	  __extends(GraphWidget, _super);
	  function GraphWidget(graph, cylayout, id, style) {
	    _super.call(this);
	    this.addClass('provgraph');
	    this._cylayout = cylayout;
	    this._cyid = id;
	    this._graph = to_cytoscape(graph);
	    if(style === undefined) {
	      style = [ // the stylesheet for the graph
	            {
	                selector: 'node',
	                style: {
	                    'font-size': 'large',
	                    'label': 'data(name)',
	                }
	            },
	            {
	                selector: 'node[type = "file"]',
	                style: {
	                    'background-color': '#0f0',
	                }
	            },
	            {
	                selector: 'node[type = "proc"]',
	                style: {
	                    'background-color': '#ff0000',
	                }
	            },
	            {
	                selector: 'node[name *= "crt1.o"]',
	                style: {
	                    'overlay-color': '#f00',
	                    'overlay-padding': 10,
	                    'overlay-opacity': 0.3,
	                }
	            },
	            {
	                selector: 'edge',
	                style: {
	                    'width': 5,
	                    'curve-style': 'bezier',
	                    'target-arrow-shape': 'triangle'
	                }
	            },
	            {
	                selector: 'edge[type = "r"]',
	                style: {
	                    'line-color': '#5a5',
	                    'target-arrow-color': '#5a5',
	                }
	            },
	            {
	                selector: 'edge[type = "w"]',
	                style: {
	                    'line-color': '#a55',
	                    'target-arrow-color': '#a55',
	                }
	            },
	            {
	                selector: 'edge[type = "rw"]',
	                style: {
	                    'line-color': '#ccc',
	                    'target-arrow-color': '#ccc',
	                    'source-arrow-shape': 'triangle',
	                    'source-arrow-color': '#ccc',
	                }
	            }
	        ];
	    }
	    this._style = style;
	    this._cy = {};
	  }

	  Object.defineProperty(GraphWidget.prototype, "cylayout", {
	    get: function () {
	      return this._cylayout;
	    },
	    set: function(cylayout) {
	      this._cylayout = cylayout;
	    },
	    enumerable: true,
	    configurable: true
	  });
	  Object.defineProperty(GraphWidget.prototype, "graph", {
	    get: function () {
	      return this._cy;
	    },
	    enumerable: true,
	    configurable: true
	  });

	  GraphWidget.prototype.onAfterAttach = function (msg) {
	    var cont = document.getElementById(this._cyid);
	    this._cy =  cytoscape({
	        container: cont,
	        elements: this._graph,
	        style: this._style,
	        autoungrabify: false,
	        autolock: false,
	        layout: this._cylayout
	    });
	    this._cy.on('tap', 'node', function(evt){
	      var node = evt.cyTarget;
	      var gnode_id = node._private.data.gnode_id;
	      console.log("Clicked on: " + gnode_id);
	      $.ajax({url: "../fwdgraph?gnode_id="+gnode_id,
	              type: "GET",
	              async: true,
	              success: function(data){
	                  data = $.parseJSON(data)
	                  var options = {
	                    name: 'breadthfirst',

	                    fit: true, // whether to fit the viewport to the graph
	                    directed: false, // whether the tree is directed downwards (or edges can point in any direction if false)
	                    padding: 30, // padding on fit
	                    circle: false, // put depths in concentric circles if true, put depths top down if false
	                    spacingFactor: 1.5, // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
	                    boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	                    avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
	                    maximalAdjustments: 0, // how many times to try to position the nodes in a maximal way (i.e. no backtracking)
	                    animate: true, // whether to transition the node positions
	                    animationDuration: 500, // duration of animation in ms if enabled
	                    animationEasing: undefined, // easing of animation if enabled
	                    ready: undefined, // callback on layoutready
	                    stop: undefined // callback on layoutstop
	                  };
	                  var id = 'gnf-'+gnode_id
	                  var graph = new GraphWidget(data, options, id);
	                  graph.id = id;
	                  var bin = node._private.data.name.split('/').reverse()[0]
	                  graph.title.text = "[fwd:] " + bin;
	                  graph.title.closable = true;
	                  cd_app.shell.addToMainArea(graph)
	            }});
	    //console.log("GraphWidget attach");
	    });
	  }

	  GraphWidget.prototype.onResize = function(msg) {
	    this._cy.layout(this.cylayout);
	    //console.log("GraphWidget resize");
	  };
	  GraphWidget.prototype.onAfterShow = function(msg) {
	    this._cy.layout(this.cylayout);
	    //console.log("GraphWidget show");
	  };
	  return GraphWidget;
	}(pw.Widget));
	exports.GraphWidget = GraphWidget;

	function createAboutPanel() {
	    var widget = new pw.Widget();
	    widget.id = 'proctree';
	    widget.title.text = 'About Demo';
	    widget.title.closable = true;
	    widget.addClass('no-content');
	    return widget;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(67)))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(71);

	var window = __webpack_require__( 72 );
	var is = __webpack_require__( 73 );
	var Core = __webpack_require__( 74 );
	var extension = __webpack_require__( 138 );
	var registerJquery = __webpack_require__( 175 );
	var Stylesheet = __webpack_require__( 176 );
	var Thread = __webpack_require__( 145 );
	var Fabric = __webpack_require__( 177 );

	var cytoscape = function( options ){ // jshint ignore:line
	  // if no options specified, use default
	  if( options === undefined ){
	    options = {};
	  }

	  // create instance
	  if( is.plainObject( options ) ){
	    return new Core( options );
	  }

	  // allow for registration of extensions
	  else if( is.string( options ) ){
	    return extension.apply( extension, arguments );
	  }
	};

	// replaced by build system
	cytoscape.version = __webpack_require__(179);

	// try to register w/ jquery
	if( window && window.jQuery ){
	  registerJquery( window.jQuery, cytoscape );
	}

	// expose register api
	cytoscape.registerJquery = function( jQuery ){
	  registerJquery( jQuery, cytoscape );
	};

	// expose public apis (mostly for extensions)
	cytoscape.stylesheet = cytoscape.Stylesheet = Stylesheet;
	cytoscape.thread = cytoscape.Thread = Thread;
	cytoscape.fabric = cytoscape.Fabric = Fabric;

	module.exports = cytoscape;


/***/ },
/* 71 */
/***/ function(module, exports) {

	
	/*!

	Cytoscape.js {{VERSION}} (MIT licensed)

	Copyright (c) The Cytoscape Consortium

	Permission is hereby granted, free of charge, to any person obtaining a copy of
	this software and associated documentation files (the “Software”), to deal in
	the Software without restriction, including without limitation the rights to
	use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
	of the Software, and to permit persons to whom the Software is furnished to do
	so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.

	*/

	'use strict';


/***/ },
/* 72 */
/***/ function(module, exports) {

	module.exports = ( typeof window === 'undefined' ? null : window );


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var window = __webpack_require__( 72 );
	var navigator = window ? window.navigator : null;

	var typeofstr = typeof '';
	var typeofobj = typeof {};
	var typeoffn = typeof function(){};
	var typeofhtmlele = typeof HTMLElement;

	var instanceStr = function( obj ){
	  return obj && obj.instanceString && is.fn( obj.instanceString ) ? obj.instanceString() : null;
	};

	var is = {
	  defined: function( obj ){
	    return obj != null; // not undefined or null
	  },

	  string: function( obj ){
	    return obj != null && typeof obj == typeofstr;
	  },

	  fn: function( obj ){
	    return obj != null && typeof obj === typeoffn;
	  },

	  array: function( obj ){
	    return Array.isArray ? Array.isArray( obj ) : obj != null && obj instanceof Array;
	  },

	  plainObject: function( obj ){
	    return obj != null && typeof obj === typeofobj && !is.array( obj ) && obj.constructor === Object;
	  },

	  object: function( obj ){
	    return obj != null && typeof obj === typeofobj;
	  },

	  number: function( obj ){
	    return obj != null && typeof obj === typeof 1 && !isNaN( obj );
	  },

	  integer: function( obj ){
	    return is.number( obj ) && Math.floor( obj ) === obj;
	  },

	  bool: function( obj ){
	    return obj != null && typeof obj === typeof true;
	  },

	  htmlElement: function( obj ){
	    if( 'undefined' === typeofhtmlele ){
	      return undefined;
	    } else {
	      return null != obj && obj instanceof HTMLElement;
	    }
	  },

	  elementOrCollection: function( obj ){
	    return is.element( obj ) || is.collection( obj );
	  },

	  element: function( obj ){
	    return instanceStr( obj ) === 'collection' && obj._private.single;
	  },

	  collection: function( obj ){
	    return instanceStr( obj ) === 'collection' && !obj._private.single;
	  },

	  core: function( obj ){
	    return instanceStr( obj ) === 'core';
	  },

	  style: function( obj ){
	    return instanceStr( obj ) === 'style';
	  },

	  stylesheet: function( obj ){
	    return instanceStr( obj ) === 'stylesheet';
	  },

	  event: function( obj ){
	    return instanceStr( obj ) === 'event';
	  },

	  thread: function( obj ){
	    return instanceStr( obj ) === 'thread';
	  },

	  fabric: function( obj ){
	    return instanceStr( obj ) === 'fabric';
	  },

	  emptyString: function( obj ){
	    if( obj === undefined || obj === null ){ // null is empty
	      return true;
	    } else if( obj === '' || obj.match( /^\s+$/ ) ){
	      return true; // empty string is empty
	    }

	    return false; // otherwise, we don't know what we've got
	  },

	  nonemptyString: function( obj ){
	    if( obj && is.string( obj ) && obj !== '' && !obj.match( /^\s+$/ ) ){
	      return true;
	    }

	    return false;
	  },

	  domElement: function( obj ){
	    if( typeof HTMLElement === 'undefined' ){
	      return false; // we're not in a browser so it doesn't matter
	    } else {
	      return obj instanceof HTMLElement;
	    }
	  },

	  boundingBox: function( obj ){
	    return is.plainObject( obj ) &&
	      is.number( obj.x1 ) && is.number( obj.x2 ) &&
	      is.number( obj.y1 ) && is.number( obj.y2 )
	    ;
	  },

	  promise: function( obj ){
	    return is.object( obj ) && is.fn( obj.then );
	  },

	  touch: function(){
	    return window && ( ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch );
	  },

	  gecko: function(){
	    return typeof InstallTrigger !== 'undefined' || ('MozAppearance' in document.documentElement.style);
	  },

	  webkit: function(){
	    return typeof webkitURL !== 'undefined' || ('WebkitAppearance' in document.documentElement.style);
	  },

	  chromium: function(){
	    return typeof chrome !== 'undefined';
	  },

	  khtml: function(){
	    return navigator && navigator.vendor.match( /kde/i ); // probably a better way to detect this...
	  },

	  khtmlEtc: function(){
	    return is.khtml() || is.webkit() || is.chromium();
	  },

	  ms: function(){
	    return navigator && navigator.userAgent.match( /msie|trident|edge/i ); // probably a better way to detect this...
	  },

	  windows: function(){
	    return navigator && navigator.appVersion.match( /Win/i );
	  },

	  mac: function(){
	    return navigator && navigator.appVersion.match( /Mac/i );
	  },

	  linux: function(){
	    return navigator && navigator.appVersion.match( /Linux/i );
	  },

	  unix: function(){
	    return navigator && navigator.appVersion.match( /X11/i );
	  }
	};

	module.exports = is;


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var window = __webpack_require__( 72 );
	var util = __webpack_require__( 75 );
	var Collection = __webpack_require__( 83 );
	var is = __webpack_require__( 73 );
	var Promise = __webpack_require__( 101 );
	var define = __webpack_require__( 99 );

	var Core = function( opts ){
	  var cy = this;

	  opts = util.extend( {}, opts );

	  var container = opts.container;

	  // allow for passing a wrapped jquery object
	  // e.g. cytoscape({ container: $('#cy') })
	  if( container && !is.htmlElement( container ) && is.htmlElement( container[0] ) ){
	    container = container[0];
	  }

	  var reg = container ? container._cyreg : null; // e.g. already registered some info (e.g. readies) via jquery
	  reg = reg || {};

	  if( reg && reg.cy ){
	    reg.cy.destroy();

	    reg = {}; // old instance => replace reg completely
	  }

	  var readies = reg.readies = reg.readies || [];

	  if( container ){ container._cyreg = reg; } // make sure container assoc'd reg points to this cy
	  reg.cy = cy;

	  var head = window !== undefined && container !== undefined && !opts.headless;
	  var options = opts;
	  options.layout = util.extend( { name: head ? 'grid' : 'null' }, options.layout );
	  options.renderer = util.extend( { name: head ? 'canvas' : 'null' }, options.renderer );

	  var defVal = function( def, val, altVal ){
	    if( val !== undefined ){
	      return val;
	    } else if( altVal !== undefined ){
	      return altVal;
	    } else {
	      return def;
	    }
	  };

	  var _p = this._private = {
	    container: container, // html dom ele container
	    ready: false, // whether ready has been triggered
	    initrender: false, // has initrender has been triggered
	    options: options, // cached options
	    elements: new Collection( this ), // elements in the graph
	    listeners: [], // list of listeners
	    aniEles: new Collection( this ), // elements being animated
	    scratch: {}, // scratch object for core
	    layout: null,
	    renderer: null,
	    notificationsEnabled: true, // whether notifications are sent to the renderer
	    minZoom: 1e-50,
	    maxZoom: 1e50,
	    zoomingEnabled: defVal( true, options.zoomingEnabled ),
	    userZoomingEnabled: defVal( true, options.userZoomingEnabled ),
	    panningEnabled: defVal( true, options.panningEnabled ),
	    userPanningEnabled: defVal( true, options.userPanningEnabled ),
	    boxSelectionEnabled: defVal( true, options.boxSelectionEnabled ),
	    autolock: defVal( false, options.autolock, options.autolockNodes ),
	    autoungrabify: defVal( false, options.autoungrabify, options.autoungrabifyNodes ),
	    autounselectify: defVal( false, options.autounselectify ),
	    styleEnabled: options.styleEnabled === undefined ? head : options.styleEnabled,
	    zoom: is.number( options.zoom ) ? options.zoom : 1,
	    pan: {
	      x: is.plainObject( options.pan ) && is.number( options.pan.x ) ? options.pan.x : 0,
	      y: is.plainObject( options.pan ) && is.number( options.pan.y ) ? options.pan.y : 0
	    },
	    animation: { // object for currently-running animations
	      current: [],
	      queue: []
	    },
	    hasCompoundNodes: false
	  };

	  // set selection type
	  var selType = options.selectionType;
	  if( selType === undefined || (selType !== 'additive' && selType !== 'single') ){
	    // then set default

	    _p.selectionType = 'single';
	  } else {
	    _p.selectionType = selType;
	  }

	  // init zoom bounds
	  if( is.number( options.minZoom ) && is.number( options.maxZoom ) && options.minZoom < options.maxZoom ){
	    _p.minZoom = options.minZoom;
	    _p.maxZoom = options.maxZoom;
	  } else if( is.number( options.minZoom ) && options.maxZoom === undefined ){
	    _p.minZoom = options.minZoom;
	  } else if( is.number( options.maxZoom ) && options.minZoom === undefined ){
	    _p.maxZoom = options.maxZoom;
	  }

	  var loadExtData = function( extData, next ){
	    var anyIsPromise = extData.some( is.promise );

	    if( anyIsPromise ){
	      return Promise.all( extData ).then( next ); // load all data asynchronously, then exec rest of init
	    } else {
	      next( extData ); // exec synchronously for convenience
	    }
	  };

	  // create the renderer
	  cy.initRenderer( util.extend( {
	    hideEdgesOnViewport: options.hideEdgesOnViewport,
	    textureOnViewport: options.textureOnViewport,
	    wheelSensitivity: is.number( options.wheelSensitivity ) && options.wheelSensitivity > 0 ? options.wheelSensitivity : 1,
	    motionBlur: options.motionBlur === undefined ? false : options.motionBlur, // off by default
	    motionBlurOpacity: options.motionBlurOpacity === undefined ? 0.05 : options.motionBlurOpacity,
	    pixelRatio: is.number( options.pixelRatio ) && options.pixelRatio > 0 ? options.pixelRatio : undefined,
	    desktopTapThreshold: options.desktopTapThreshold === undefined ? 4 : options.desktopTapThreshold,
	    touchTapThreshold: options.touchTapThreshold === undefined ? 8 : options.touchTapThreshold
	  }, options.renderer ) );

	  loadExtData([ options.style, options.elements ], function( thens ){
	    var initStyle = thens[0];
	    var initEles = thens[1];

	    // init style
	    if( _p.styleEnabled ){
	      cy.setStyle( initStyle );
	    }

	    // trigger the passed function for the `initrender` event
	    if( options.initrender ){
	      cy.on( 'initrender', options.initrender );
	      cy.on( 'initrender', function(){
	        _p.initrender = true;
	      } );
	    }

	    // initial load
	    cy.load( initEles, function(){ // onready
	      cy.startAnimationLoop();
	      _p.ready = true;

	      // if a ready callback is specified as an option, the bind it
	      if( is.fn( options.ready ) ){
	        cy.on( 'ready', options.ready );
	      }

	      // bind all the ready handlers registered before creating this instance
	      for( var i = 0; i < readies.length; i++ ){
	        var fn = readies[ i ];
	        cy.on( 'ready', fn );
	      }
	      if( reg ){ reg.readies = []; } // clear b/c we've bound them all and don't want to keep it around in case a new core uses the same div etc

	      cy.trigger( 'ready' );
	    }, options.done );

	  } );
	};

	var corefn = Core.prototype; // short alias

	util.extend( corefn, {
	  instanceString: function(){
	    return 'core';
	  },

	  isReady: function(){
	    return this._private.ready;
	  },

	  ready: function( fn ){
	    if( this.isReady() ){
	      this.trigger( 'ready', [], fn ); // just calls fn as though triggered via ready event
	    } else {
	      this.on( 'ready', fn );
	    }

	    return this;
	  },

	  initrender: function(){
	    return this._private.initrender;
	  },

	  destroy: function(){
	    var cy = this;

	    cy.stopAnimationLoop();

	    cy.notify( { type: 'destroy' } ); // destroy the renderer

	    var domEle = cy.container();
	    if( domEle ){
	      domEle._cyreg = null;

	      while( domEle.childNodes.length > 0 ){
	        domEle.removeChild( domEle.childNodes[0] );
	      }
	    }

	    return cy;
	  },

	  hasElementWithId: function( id ){
	    return this._private.elements.hasElementWithId( id );
	  },

	  getElementById: function( id ){
	    return this._private.elements.getElementById( id );
	  },

	  selectionType: function(){
	    return this._private.selectionType;
	  },

	  hasCompoundNodes: function(){
	    return this._private.hasCompoundNodes;
	  },

	  headless: function(){
	    return this._private.options.renderer.name === 'null';
	  },

	  styleEnabled: function(){
	    return this._private.styleEnabled;
	  },

	  addToPool: function( eles ){
	    this._private.elements.merge( eles );

	    return this; // chaining
	  },

	  removeFromPool: function( eles ){
	    this._private.elements.unmerge( eles );

	    return this;
	  },

	  container: function(){
	    return this._private.container;
	  },

	  options: function(){
	    return util.copy( this._private.options );
	  },

	  json: function( obj ){
	    var cy = this;
	    var _p = cy._private;
	    var eles = cy.mutableElements();

	    if( is.plainObject( obj ) ){ // set

	      cy.startBatch();

	      if( obj.elements ){
	        var idInJson = {};

	        var updateEles = function( jsons, gr ){
	          for( var i = 0; i < jsons.length; i++ ){
	            var json = jsons[ i ];
	            var id = json.data.id;
	            var ele = cy.getElementById( id );

	            idInJson[ id ] = true;

	            if( ele.length !== 0 ){ // existing element should be updated
	              ele.json( json );
	            } else { // otherwise should be added
	              if( gr ){
	                cy.add( util.extend( { group: gr }, json ) );
	              } else {
	                cy.add( json );
	              }
	            }
	          }
	        };

	        if( is.array( obj.elements ) ){ // elements: []
	          updateEles( obj.elements );

	        } else { // elements: { nodes: [], edges: [] }
	          var grs = [ 'nodes', 'edges' ];
	          for( var i = 0; i < grs.length; i++ ){
	            var gr = grs[ i ];
	            var elements = obj.elements[ gr ];

	            if( is.array( elements ) ){
	              updateEles( elements, gr );
	            }
	          }
	        }

	        // elements not specified in json should be removed
	        eles.stdFilter( function( ele ){
	          return !idInJson[ ele.id() ];
	        } ).remove();
	      }

	      if( obj.style ){
	        cy.style( obj.style );
	      }

	      if( obj.zoom != null && obj.zoom !== _p.zoom ){
	        cy.zoom( obj.zoom );
	      }

	      if( obj.pan ){
	        if( obj.pan.x !== _p.pan.x || obj.pan.y !== _p.pan.y ){
	          cy.pan( obj.pan );
	        }
	      }

	      var fields = [
	        'minZoom', 'maxZoom', 'zoomingEnabled', 'userZoomingEnabled',
	        'panningEnabled', 'userPanningEnabled',
	        'boxSelectionEnabled',
	        'autolock', 'autoungrabify', 'autounselectify'
	      ];

	      for( var i = 0; i < fields.length; i++ ){
	        var f = fields[ i ];

	        if( obj[ f ] != null ){
	          cy[ f ]( obj[ f ] );
	        }
	      }

	      cy.endBatch();

	      return this; // chaining
	    } else if( obj === undefined ){ // get
	      var json = {};

	      json.elements = {};
	      eles.forEach( function( ele ){
	        var group = ele.group();

	        if( !json.elements[ group ] ){
	          json.elements[ group ] = [];
	        }

	        json.elements[ group ].push( ele.json() );
	      } );

	      if( this._private.styleEnabled ){
	        json.style = cy.style().json();
	      }

	      json.zoomingEnabled = cy._private.zoomingEnabled;
	      json.userZoomingEnabled = cy._private.userZoomingEnabled;
	      json.zoom = cy._private.zoom;
	      json.minZoom = cy._private.minZoom;
	      json.maxZoom = cy._private.maxZoom;
	      json.panningEnabled = cy._private.panningEnabled;
	      json.userPanningEnabled = cy._private.userPanningEnabled;
	      json.pan = util.copy( cy._private.pan );
	      json.boxSelectionEnabled = cy._private.boxSelectionEnabled;
	      json.renderer = util.copy( cy._private.options.renderer );
	      json.hideEdgesOnViewport = cy._private.options.hideEdgesOnViewport;
	      json.textureOnViewport = cy._private.options.textureOnViewport;
	      json.wheelSensitivity = cy._private.options.wheelSensitivity;
	      json.motionBlur = cy._private.options.motionBlur;

	      return json;
	    }
	  },

	  scratch: define.data( {
	    field: 'scratch',
	    bindingEvent: 'scratch',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'scratch',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true
	  } ),

	  removeScratch: define.removeData( {
	    field: 'scratch',
	    event: 'scratch',
	    triggerFnName: 'trigger',
	    triggerEvent: true
	  } )

	} );

	[
	  __webpack_require__( 119 ),
	  __webpack_require__( 120 ),
	  __webpack_require__( 121 ),
	  __webpack_require__( 122 ),
	  __webpack_require__( 123 ),
	  __webpack_require__( 124 ),
	  __webpack_require__( 125 ),
	  __webpack_require__( 126 ),
	  __webpack_require__( 127 ),
	  __webpack_require__( 137 )
	].forEach( function( props ){
	  util.extend( corefn, props );
	} );

	module.exports = Core;


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );
	var math = __webpack_require__( 76 );

	var util = {

	  trueify: function(){ return true; },

	  falsify: function(){ return false; },

	  zeroify: function(){ return 0; },

	  noop: function(){},

	  /* jshint ignore:start */
	  error: function( msg ){
	    if( console.error ){
	      console.error.apply( console, arguments );

	      if( console.trace ){ console.trace(); }
	    } else {
	      console.log.apply( console, arguments );

	      if( console.trace ){ console.trace(); }
	    }
	  },
	  /* jshint ignore:end */

	  clone: function( obj ){
	    return this.extend( {}, obj );
	  },

	  // gets a shallow copy of the argument
	  copy: function( obj ){
	    if( obj == null ){
	      return obj;
	    } if( is.array( obj ) ){
	      return obj.slice();
	    } else if( is.plainObject( obj ) ){
	      return this.clone( obj );
	    } else {
	      return obj;
	    }
	  },

	  uuid: function(
	      a,b                // placeholders
	  ){
	      for(               // loop :)
	          b=a='';        // b - result , a - numeric variable
	          a++<36;        //
	          b+=a*51&52  // if "a" is not 9 or 14 or 19 or 24
	                      ?  //  return a random number or 4
	             (
	               a^15      // if "a" is not 15
	                  ?      // genetate a random number from 0 to 15
	               8^Math.random()*
	               (a^20?16:4)  // unless "a" is 20, in which case a random number from 8 to 11
	                  :
	               4            //  otherwise 4
	               ).toString(16)
	                      :
	             '-'            //  in other cases (if "a" is 9,14,19,24) insert "-"
	          );
	      return b;
	  }

	};

	util.makeBoundingBox = math.makeBoundingBox.bind( math );

	util._staticEmptyObject = {};

	util.staticEmptyObject = function(){
	  return util._staticEmptyObject;
	};

	util.extend = Object.assign != null ? Object.assign : function( tgt ){
	  var args = arguments;

	  for( var i = 1; i < args.length; i++ ){
	    var obj = args[ i ];

	    if( !obj ){ continue; }

	    var keys = Object.keys( obj );

	    for( var j = 0; j < keys.length; j++ ){
	      var k = keys[j];

	      tgt[ k ] = obj[ k ];
	    }
	  }

	  return tgt;
	};

	util.default = function( val, def ){
	  if( val === undefined ){
	    return def;
	  } else {
	    return val;
	  }
	};

	util.removeFromArray = function( arr, ele, manyCopies ){
	  for( var i = arr.length; i >= 0; i-- ){
	    if( arr[i] === ele ){
	      arr.splice( i, 1 );

	      if( !manyCopies ){ break; }
	    }
	  }
	};

	util.clearArray = function( arr ){
	  arr.splice( 0, arr.length );
	};

	util.getPrefixedProperty = function( obj, propName, prefix ){
	  if( prefix ){
	    propName = this.prependCamel( prefix, propName ); // e.g. (labelWidth, source) => sourceLabelWidth
	  }

	  return obj[ propName ];
	};

	util.setPrefixedProperty = function( obj, propName, prefix, value ){
	  if( prefix ){
	    propName = this.prependCamel( prefix, propName ); // e.g. (labelWidth, source) => sourceLabelWidth
	  }

	  obj[ propName ] = value;
	};

	[
	  __webpack_require__( 77 ),
	  __webpack_require__( 78 ),
	  { memoize: __webpack_require__( 79 ) },
	  __webpack_require__( 80 ),
	  __webpack_require__( 81 ),
	  __webpack_require__( 82 )
	].forEach( function( req ){
	  util.extend( util, req );
	} );

	module.exports = util;


/***/ },
/* 76 */
/***/ function(module, exports) {

	'use strict';

	var math = {};

	math.arePositionsSame = function( p1, p2 ){
	  return p1.x === p2.x && p1.y === p2.y;
	};

	math.copyPosition = function( p ){
	  return { x: p.x, y: p.y };
	};

	math.array2point = function( arr ){
	  return {
	    x: arr[0],
	    y: arr[1]
	  };
	};

	math.deg2rad = function( deg ){
	  return Math.PI * deg / 180;
	};

	math.log2 = Math.log2 || function( n ){
	  return Math.log( n ) / Math.log( 2 );
	};

	math.signum = function( x ){
	  if( x > 0 ){
	    return 1;
	  } else if( x < 0 ){
	    return -1;
	  } else {
	    return 0;
	  }
	};

	math.dist = function( p1, p2 ){
	  return Math.sqrt( math.sqdist( p1, p2 ) );
	};

	math.sqdist = function( p1, p2 ){
	  var dx = p2.x - p1.x;
	  var dy = p2.y - p1.y;

	  return dx * dx + dy * dy;
	};

	// from http://en.wikipedia.org/wiki/Bézier_curve#Quadratic_curves
	math.qbezierAt = function( p0, p1, p2, t ){
	  return (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p2;
	};

	math.qbezierPtAt = function( p0, p1, p2, t ){
	  return {
	    x: math.qbezierAt( p0.x, p1.x, p2.x, t ),
	    y: math.qbezierAt( p0.y, p1.y, p2.y, t )
	  };
	};

	math.lineAt = function( p0, p1, t, d ){
	  var vec = {
	    x: p1.x - p0.x,
	    y: p1.y - p0.y
	  };

	  var vecDist = math.dist( p0, p1 );

	  var normVec = {
	    x: vec.x / vecDist,
	    y: vec.y / vecDist
	  };

	  t = t == null ? 0 : t;

	  var d = d != null ? d : t * vecDist;

	  return {
	    x: p0.x + normVec.x * d,
	    y: p0.y + normVec.y * d
	  };
	};

	math.lineAtDist = function( p0, p1, d ){
	  return math.lineAt( p0, p1, undefined, d );
	};

	// get angle at A via cosine law
	math.triangleAngle = function( A, B, C ){
	  var a = math.dist( B, C );
	  var b = math.dist( A, C );
	  var c = math.dist( A, B );

	  return Math.acos( (a*a + b*b - c*c)/(2*a*b) );
	};

	math.bound = function( min, val, max ){
	  return Math.max( min, Math.min( max, val ) );
	};

	// makes a full bb (x1, y1, x2, y2, w, h) from implicit params
	math.makeBoundingBox = function( bb ){
	  if( bb == null ){
	    return {
	      x1: Infinity,
	      y1: Infinity,
	      x2: -Infinity,
	      y2: -Infinity,
	      w: 0,
	      h: 0
	    };
	  } else if( bb.x1 != null && bb.y1 != null ){
	    if( bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1 ){
	      return {
	        x1: bb.x1,
	        y1: bb.y1,
	        x2: bb.x2,
	        y2: bb.y2,
	        w: bb.x2 - bb.x1,
	        h: bb.y2 - bb.y1
	      };
	    } else if( bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0 ){
	      return {
	        x1: bb.x1,
	        y1: bb.y1,
	        x2: bb.x1 + bb.w,
	        y2: bb.y1 + bb.h,
	        w: bb.w,
	        h: bb.h
	      };
	    }
	  }
	};

	math.updateBoundingBox = function( bb1, bb2 ){
	  // update bb1 with bb2 bounds

	  bb1.x1 = Math.min( bb1.x1, bb2.x1 );
	  bb1.x2 = Math.max( bb1.x2, bb2.x2 );
	  bb1.w = bb1.x2 - bb1.x1;

	  bb1.y1 = Math.min( bb1.y1, bb2.y1 );
	  bb1.y2 = Math.max( bb1.y2, bb2.y2 );
	  bb1.h = bb1.y2 - bb1.y1;
	};

	math.expandBoundingBox = function( bb, padding ){
	  bb.x1 -= padding;
	  bb.x2 += padding;
	  bb.y1 -= padding;
	  bb.y2 += padding;
	  bb.w = bb.x2 - bb.x1;
	  bb.h = bb.y2 - bb.y1;

	  return bb;
	};

	math.boundingBoxesIntersect = function( bb1, bb2 ){
	  // case: one bb to right of other
	  if( bb1.x1 > bb2.x2 ){ return false; }
	  if( bb2.x1 > bb1.x2 ){ return false; }

	  // case: one bb to left of other
	  if( bb1.x2 < bb2.x1 ){ return false; }
	  if( bb2.x2 < bb1.x1 ){ return false; }

	  // case: one bb above other
	  if( bb1.y2 < bb2.y1 ){ return false; }
	  if( bb2.y2 < bb1.y1 ){ return false; }

	  // case: one bb below other
	  if( bb1.y1 > bb2.y2 ){ return false; }
	  if( bb2.y1 > bb1.y2 ){ return false; }

	  // otherwise, must have some overlap
	  return true;
	};

	math.inBoundingBox = function( bb, x, y ){
	  return bb.x1 <= x && x <= bb.x2 && bb.y1 <= y && y <= bb.y2;
	};

	math.pointInBoundingBox = function( bb, pt ){
	  return this.inBoundingBox( bb, pt.x, pt.y );
	};

	math.boundingBoxInBoundingBox = function( bb1, bb2 ){
	  return (
	       math.inBoundingBox( bb1, bb2.x1, bb2.y1 )
	    && math.inBoundingBox( bb1, bb2.x2, bb2.y2 )
	  );
	};

	math.roundRectangleIntersectLine = function(
	  x, y, nodeX, nodeY, width, height, padding ){

	  var cornerRadius = this.getRoundRectangleRadius( width, height );

	  var halfWidth = width / 2;
	  var halfHeight = height / 2;

	  // Check intersections with straight line segments
	  var straightLineIntersections;

	  // Top segment, left to right
	  {
	    var topStartX = nodeX - halfWidth + cornerRadius - padding;
	    var topStartY = nodeY - halfHeight - padding;
	    var topEndX = nodeX + halfWidth - cornerRadius + padding;
	    var topEndY = topStartY;

	    straightLineIntersections = this.finiteLinesIntersect(
	      x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false );

	    if( straightLineIntersections.length > 0 ){
	      return straightLineIntersections;
	    }
	  }

	  // Right segment, top to bottom
	  {
	    var rightStartX = nodeX + halfWidth + padding;
	    var rightStartY = nodeY - halfHeight + cornerRadius - padding;
	    var rightEndX = rightStartX;
	    var rightEndY = nodeY + halfHeight - cornerRadius + padding;

	    straightLineIntersections = this.finiteLinesIntersect(
	      x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false );

	    if( straightLineIntersections.length > 0 ){
	      return straightLineIntersections;
	    }
	  }

	  // Bottom segment, left to right
	  {
	    var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
	    var bottomStartY = nodeY + halfHeight + padding;
	    var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
	    var bottomEndY = bottomStartY;

	    straightLineIntersections = this.finiteLinesIntersect(
	      x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false );

	    if( straightLineIntersections.length > 0 ){
	      return straightLineIntersections;
	    }
	  }

	  // Left segment, top to bottom
	  {
	    var leftStartX = nodeX - halfWidth - padding;
	    var leftStartY = nodeY - halfHeight + cornerRadius - padding;
	    var leftEndX = leftStartX;
	    var leftEndY = nodeY + halfHeight - cornerRadius + padding;

	    straightLineIntersections = this.finiteLinesIntersect(
	      x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false );

	    if( straightLineIntersections.length > 0 ){
	      return straightLineIntersections;
	    }
	  }

	  // Check intersections with arc segments
	  var arcIntersections;

	  // Top Left
	  {
	    var topLeftCenterX = nodeX - halfWidth + cornerRadius;
	    var topLeftCenterY = nodeY - halfHeight + cornerRadius;
	    arcIntersections = this.intersectLineCircle(
	      x, y, nodeX, nodeY,
	      topLeftCenterX, topLeftCenterY, cornerRadius + padding );

	    // Ensure the intersection is on the desired quarter of the circle
	    if( arcIntersections.length > 0
	      && arcIntersections[0] <= topLeftCenterX
	      && arcIntersections[1] <= topLeftCenterY ){
	      return [ arcIntersections[0], arcIntersections[1] ];
	    }
	  }

	  // Top Right
	  {
	    var topRightCenterX = nodeX + halfWidth - cornerRadius;
	    var topRightCenterY = nodeY - halfHeight + cornerRadius;
	    arcIntersections = this.intersectLineCircle(
	      x, y, nodeX, nodeY,
	      topRightCenterX, topRightCenterY, cornerRadius + padding );

	    // Ensure the intersection is on the desired quarter of the circle
	    if( arcIntersections.length > 0
	      && arcIntersections[0] >= topRightCenterX
	      && arcIntersections[1] <= topRightCenterY ){
	      return [ arcIntersections[0], arcIntersections[1] ];
	    }
	  }

	  // Bottom Right
	  {
	    var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
	    var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
	    arcIntersections = this.intersectLineCircle(
	      x, y, nodeX, nodeY,
	      bottomRightCenterX, bottomRightCenterY, cornerRadius + padding );

	    // Ensure the intersection is on the desired quarter of the circle
	    if( arcIntersections.length > 0
	      && arcIntersections[0] >= bottomRightCenterX
	      && arcIntersections[1] >= bottomRightCenterY ){
	      return [ arcIntersections[0], arcIntersections[1] ];
	    }
	  }

	  // Bottom Left
	  {
	    var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
	    var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
	    arcIntersections = this.intersectLineCircle(
	      x, y, nodeX, nodeY,
	      bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding );

	    // Ensure the intersection is on the desired quarter of the circle
	    if( arcIntersections.length > 0
	      && arcIntersections[0] <= bottomLeftCenterX
	      && arcIntersections[1] >= bottomLeftCenterY ){
	      return [ arcIntersections[0], arcIntersections[1] ];
	    }
	  }

	  return []; // if nothing
	};

	math.inLineVicinity = function( x, y, lx1, ly1, lx2, ly2, tolerance ){
	  var t = tolerance;

	  var x1 = Math.min( lx1, lx2 );
	  var x2 = Math.max( lx1, lx2 );
	  var y1 = Math.min( ly1, ly2 );
	  var y2 = Math.max( ly1, ly2 );

	  return x1 - t <= x && x <= x2 + t
	    && y1 - t <= y && y <= y2 + t;
	};

	math.inBezierVicinity = function(
	  x, y, x1, y1, x2, y2, x3, y3, tolerance ){

	  var bb = {
	    x1: Math.min( x1, x3, x2 ) - tolerance,
	    x2: Math.max( x1, x3, x2 ) + tolerance,
	    y1: Math.min( y1, y3, y2 ) - tolerance,
	    y2: Math.max( y1, y3, y2 ) + tolerance
	  };

	  // if outside the rough bounding box for the bezier, then it can't be a hit
	  if( x < bb.x1 || x > bb.x2 || y < bb.y1 || y > bb.y2 ){
	    // console.log('bezier out of rough bb')
	    return false;
	  } else {
	    // console.log('do more expensive check');
	    return true;
	  }

	};

	math.solveCubic = function( a, b, c, d, result ){

	  // Solves a cubic function, returns root in form [r1, i1, r2, i2, r3, i3], where
	  // r is the real component, i is the imaginary component

	  // An implementation of the Cardano method from the year 1545
	  // http://en.wikipedia.org/wiki/Cubic_function#The_nature_of_the_roots

	  b /= a;
	  c /= a;
	  d /= a;

	  var discriminant, q, r, dum1, s, t, term1, r13;

	  q = (3.0 * c - (b * b)) / 9.0;
	  r = -(27.0 * d) + b * (9.0 * c - 2.0 * (b * b));
	  r /= 54.0;

	  discriminant = q * q * q + r * r;
	  result[1] = 0;
	  term1 = (b / 3.0);

	  if( discriminant > 0 ){
	    s = r + Math.sqrt( discriminant );
	    s = ((s < 0) ? -Math.pow( -s, (1.0 / 3.0) ) : Math.pow( s, (1.0 / 3.0) ));
	    t = r - Math.sqrt( discriminant );
	    t = ((t < 0) ? -Math.pow( -t, (1.0 / 3.0) ) : Math.pow( t, (1.0 / 3.0) ));
	    result[0] = -term1 + s + t;
	    term1 += (s + t) / 2.0;
	    result[4] = result[2] = -term1;
	    term1 = Math.sqrt( 3.0 ) * (-t + s) / 2;
	    result[3] = term1;
	    result[5] = -term1;
	    return;
	  }

	  result[5] = result[3] = 0;

	  if( discriminant === 0 ){
	    r13 = ((r < 0) ? -Math.pow( -r, (1.0 / 3.0) ) : Math.pow( r, (1.0 / 3.0) ));
	    result[0] = -term1 + 2.0 * r13;
	    result[4] = result[2] = -(r13 + term1);
	    return;
	  }

	  q = -q;
	  dum1 = q * q * q;
	  dum1 = Math.acos( r / Math.sqrt( dum1 ) );
	  r13 = 2.0 * Math.sqrt( q );
	  result[0] = -term1 + r13 * Math.cos( dum1 / 3.0 );
	  result[2] = -term1 + r13 * Math.cos( (dum1 + 2.0 * Math.PI) / 3.0 );
	  result[4] = -term1 + r13 * Math.cos( (dum1 + 4.0 * Math.PI) / 3.0 );

	  return;
	};

	math.sqdistToQuadraticBezier = function(
	  x, y, x1, y1, x2, y2, x3, y3 ){

	  // Find minimum distance by using the minimum of the distance
	  // function between the given point and the curve

	  // This gives the coefficients of the resulting cubic equation
	  // whose roots tell us where a possible minimum is
	  // (Coefficients are divided by 4)

	  var a = 1.0 * x1 * x1 - 4 * x1 * x2 + 2 * x1 * x3 + 4 * x2 * x2 - 4 * x2 * x3 + x3 * x3
	    + y1 * y1 - 4 * y1 * y2 + 2 * y1 * y3 + 4 * y2 * y2 - 4 * y2 * y3 + y3 * y3;

	  var b = 1.0 * 9 * x1 * x2 - 3 * x1 * x1 - 3 * x1 * x3 - 6 * x2 * x2 + 3 * x2 * x3
	    + 9 * y1 * y2 - 3 * y1 * y1 - 3 * y1 * y3 - 6 * y2 * y2 + 3 * y2 * y3;

	  var c = 1.0 * 3 * x1 * x1 - 6 * x1 * x2 + x1 * x3 - x1 * x + 2 * x2 * x2 + 2 * x2 * x - x3 * x
	    + 3 * y1 * y1 - 6 * y1 * y2 + y1 * y3 - y1 * y + 2 * y2 * y2 + 2 * y2 * y - y3 * y;

	  var d = 1.0 * x1 * x2 - x1 * x1 + x1 * x - x2 * x
	    + y1 * y2 - y1 * y1 + y1 * y - y2 * y;

	  // debug("coefficients: " + a / a + ", " + b / a + ", " + c / a + ", " + d / a);

	  var roots = [];

	  // Use the cubic solving algorithm
	  this.solveCubic( a, b, c, d, roots );

	  var zeroThreshold = 0.0000001;

	  var params = [];

	  for( var index = 0; index < 6; index += 2 ){
	    if( Math.abs( roots[ index + 1] ) < zeroThreshold
	        && roots[ index ] >= 0
	        && roots[ index ] <= 1.0 ){
	      params.push( roots[ index ] );
	    }
	  }

	  params.push( 1.0 );
	  params.push( 0.0 );

	  var minDistanceSquared = -1;
	  var closestParam;

	  var curX, curY, distSquared;
	  for( var i = 0; i < params.length; i++ ){
	    curX = Math.pow( 1.0 - params[ i ], 2.0 ) * x1
	      + 2.0 * (1 - params[ i ]) * params[ i ] * x2
	      + params[ i ] * params[ i ] * x3;

	    curY = Math.pow( 1 - params[ i ], 2.0 ) * y1
	      + 2 * (1.0 - params[ i ]) * params[ i ] * y2
	      + params[ i ] * params[ i ] * y3;

	    distSquared = Math.pow( curX - x, 2 ) + Math.pow( curY - y, 2 );
	    // debug('distance for param ' + params[i] + ": " + Math.sqrt(distSquared));
	    if( minDistanceSquared >= 0 ){
	      if( distSquared < minDistanceSquared ){
	        minDistanceSquared = distSquared;
	        closestParam = params[ i ];
	      }
	    } else {
	      minDistanceSquared = distSquared;
	      closestParam = params[ i ];
	    }
	  }

	  return minDistanceSquared;
	};

	math.sqdistToFiniteLine = function( x, y, x1, y1, x2, y2 ){
	  var offset = [ x - x1, y - y1 ];
	  var line = [ x2 - x1, y2 - y1 ];

	  var lineSq = line[0] * line[0] + line[1] * line[1];
	  var hypSq = offset[0] * offset[0] + offset[1] * offset[1];

	  var dotProduct = offset[0] * line[0] + offset[1] * line[1];
	  var adjSq = dotProduct * dotProduct / lineSq;

	  if( dotProduct < 0 ){
	    return hypSq;
	  }

	  if( adjSq > lineSq ){
	    return (x - x2) * (x - x2) + (y - y2) * (y - y2);
	  }

	  return hypSq - adjSq;
	};

	math.pointInsidePolygonPoints = function( x, y, points ){
	  var x1, y1, x2, y2;
	  var y3;

	  // Intersect with vertical line through (x, y)
	  var up = 0;
	  var down = 0;
	  for( var i = 0; i < points.length / 2; i++ ){

	    x1 = points[ i * 2];
	    y1 = points[ i * 2 + 1];

	    if( i + 1 < points.length / 2 ){
	      x2 = points[ (i + 1) * 2];
	      y2 = points[ (i + 1) * 2 + 1];
	    } else {
	      x2 = points[ (i + 1 - points.length / 2) * 2];
	      y2 = points[ (i + 1 - points.length / 2) * 2 + 1];
	    }

	    if( x1 == x && x2 == x ){

	    } else if( (x1 >= x && x >= x2)
	      || (x1 <= x && x <= x2) ){

	      y3 = (x - x1) / (x2 - x1) * (y2 - y1) + y1;

	      if( y3 > y ){
	        up++;
	      }

	      if( y3 < y ){
	        down++;
	      }

	    } else {
	      continue;
	    }

	  }

	  if( up % 2 === 0 ){
	    return false;
	  } else {
	    return true;
	  }
	};

	math.pointInsidePolygon = function(
	  x, y, basePoints, centerX, centerY, width, height, direction, padding ){

	  //var direction = arguments[6];
	  var transformedPoints = new Array( basePoints.length );

	  // Gives negative angle
	  var angle;

	  if( direction[0] != null ){
	    angle = Math.atan( direction[1] / direction[0] );

	    if( direction[0] < 0 ){
	      angle = angle + Math.PI / 2;
	    } else {
	      angle = -angle - Math.PI / 2;
	    }
	  } else {
	    angle = direction;
	  }

	  var cos = Math.cos( -angle );
	  var sin = Math.sin( -angle );

	  //    console.log("base: " + basePoints);
	  for( var i = 0; i < transformedPoints.length / 2; i++ ){
	    transformedPoints[ i * 2] =
	      width / 2 * (basePoints[ i * 2] * cos
	        - basePoints[ i * 2 + 1] * sin);

	    transformedPoints[ i * 2 + 1] =
	      height / 2 * (basePoints[ i * 2 + 1] * cos
	        + basePoints[ i * 2] * sin);

	    transformedPoints[ i * 2] += centerX;
	    transformedPoints[ i * 2 + 1] += centerY;
	  }

	  var points;

	  if( padding > 0 ){
	    var expandedLineSet = this.expandPolygon(
	      transformedPoints,
	      -padding );

	    points = this.joinLines( expandedLineSet );
	  } else {
	    points = transformedPoints;
	  }

	  return math.pointInsidePolygonPoints( x, y, points );
	};

	math.joinLines = function( lineSet ){

	  var vertices = new Array( lineSet.length / 2 );

	  var currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY;
	  var nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY;

	  for( var i = 0; i < lineSet.length / 4; i++ ){
	    currentLineStartX = lineSet[ i * 4];
	    currentLineStartY = lineSet[ i * 4 + 1];
	    currentLineEndX = lineSet[ i * 4 + 2];
	    currentLineEndY = lineSet[ i * 4 + 3];

	    if( i < lineSet.length / 4 - 1 ){
	      nextLineStartX = lineSet[ (i + 1) * 4];
	      nextLineStartY = lineSet[ (i + 1) * 4 + 1];
	      nextLineEndX = lineSet[ (i + 1) * 4 + 2];
	      nextLineEndY = lineSet[ (i + 1) * 4 + 3];
	    } else {
	      nextLineStartX = lineSet[0];
	      nextLineStartY = lineSet[1];
	      nextLineEndX = lineSet[2];
	      nextLineEndY = lineSet[3];
	    }

	    var intersection = this.finiteLinesIntersect(
	      currentLineStartX, currentLineStartY,
	      currentLineEndX, currentLineEndY,
	      nextLineStartX, nextLineStartY,
	      nextLineEndX, nextLineEndY,
	      true );

	    vertices[ i * 2] = intersection[0];
	    vertices[ i * 2 + 1] = intersection[1];
	  }

	  return vertices;
	};

	math.expandPolygon = function( points, pad ){

	  var expandedLineSet = new Array( points.length * 2 );

	  var currentPointX, currentPointY, nextPointX, nextPointY;

	  for( var i = 0; i < points.length / 2; i++ ){
	    currentPointX = points[ i * 2];
	    currentPointY = points[ i * 2 + 1];

	    if( i < points.length / 2 - 1 ){
	      nextPointX = points[ (i + 1) * 2];
	      nextPointY = points[ (i + 1) * 2 + 1];
	    } else {
	      nextPointX = points[0];
	      nextPointY = points[1];
	    }

	    // Current line: [currentPointX, currentPointY] to [nextPointX, nextPointY]

	    // Assume CCW polygon winding

	    var offsetX = (nextPointY - currentPointY);
	    var offsetY = -(nextPointX - currentPointX);

	    // Normalize
	    var offsetLength = Math.sqrt( offsetX * offsetX + offsetY * offsetY );
	    var normalizedOffsetX = offsetX / offsetLength;
	    var normalizedOffsetY = offsetY / offsetLength;

	    expandedLineSet[ i * 4] = currentPointX + normalizedOffsetX * pad;
	    expandedLineSet[ i * 4 + 1] = currentPointY + normalizedOffsetY * pad;
	    expandedLineSet[ i * 4 + 2] = nextPointX + normalizedOffsetX * pad;
	    expandedLineSet[ i * 4 + 3] = nextPointY + normalizedOffsetY * pad;
	  }

	  return expandedLineSet;
	};

	math.intersectLineEllipse = function(
	  x, y, centerX, centerY, ellipseWradius, ellipseHradius ){

	  var dispX = centerX - x;
	  var dispY = centerY - y;

	  dispX /= ellipseWradius;
	  dispY /= ellipseHradius;

	  var len = Math.sqrt( dispX * dispX + dispY * dispY );

	  var newLength = len - 1;

	  if( newLength < 0 ){
	    return [];
	  }

	  var lenProportion = newLength / len;

	  return [ (centerX - x) * lenProportion + x, (centerY - y) * lenProportion + y ];
	};

	// Returns intersections of increasing distance from line's start point
	math.intersectLineCircle = function(
	  x1, y1, x2, y2, centerX, centerY, radius ){

	  // Calculate d, direction vector of line
	  var d = [ x2 - x1, y2 - y1 ]; // Direction vector of line
	  var c = [ centerX, centerY ]; // Center of circle
	  var f = [ x1 - centerX, y1 - centerY ];

	  var a = d[0] * d[0] + d[1] * d[1];
	  var b = 2 * (f[0] * d[0] + f[1] * d[1]);
	  var c = (f[0] * f[0] + f[1] * f[1]) - radius * radius ;

	  var discriminant = b * b - 4 * a * c;

	  if( discriminant < 0 ){
	    return [];
	  }

	  var t1 = (-b + Math.sqrt( discriminant )) / (2 * a);
	  var t2 = (-b - Math.sqrt( discriminant )) / (2 * a);

	  var tMin = Math.min( t1, t2 );
	  var tMax = Math.max( t1, t2 );
	  var inRangeParams = [];

	  if( tMin >= 0 && tMin <= 1 ){
	    inRangeParams.push( tMin );
	  }

	  if( tMax >= 0 && tMax <= 1 ){
	    inRangeParams.push( tMax );
	  }

	  if( inRangeParams.length === 0 ){
	    return [];
	  }

	  var nearIntersectionX = inRangeParams[0] * d[0] + x1;
	  var nearIntersectionY = inRangeParams[0] * d[1] + y1;

	  if( inRangeParams.length > 1 ){

	    if( inRangeParams[0] == inRangeParams[1] ){
	      return [ nearIntersectionX, nearIntersectionY ];
	    } else {

	      var farIntersectionX = inRangeParams[1] * d[0] + x1;
	      var farIntersectionY = inRangeParams[1] * d[1] + y1;

	      return [ nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY ];
	    }

	  } else {
	    return [ nearIntersectionX, nearIntersectionY ];
	  }

	};

	math.findCircleNearPoint = function( centerX, centerY,
	  radius, farX, farY ){

	  var displacementX = farX - centerX;
	  var displacementY = farY - centerY;
	  var distance = Math.sqrt( displacementX * displacementX
	    + displacementY * displacementY );

	  var unitDisplacementX = displacementX / distance;
	  var unitDisplacementY = displacementY / distance;

	  return [ centerX + unitDisplacementX * radius,
	    centerY + unitDisplacementY * radius ];
	};

	math.findMaxSqDistanceToOrigin = function( points ){
	  var maxSqDistance = 0.000001;
	  var sqDistance;

	  for( var i = 0; i < points.length / 2; i++ ){

	    sqDistance = points[ i * 2] * points[ i * 2]
	      + points[ i * 2 + 1] * points[ i * 2 + 1];

	    if( sqDistance > maxSqDistance ){
	      maxSqDistance = sqDistance;
	    }
	  }

	  return maxSqDistance;
	};

	math.finiteLinesIntersect = function(
	  x1, y1, x2, y2, x3, y3, x4, y4, infiniteLines ){

	  var ua_t = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
	  var ub_t = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
	  var u_b = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);

	  if( u_b !== 0 ){
	    var ua = ua_t / u_b;
	    var ub = ub_t / u_b;

	    if( 0 <= ua && ua <= 1 && 0 <= ub && ub <= 1 ){
	      return [ x1 + ua * (x2 - x1), y1 + ua * (y2 - y1) ];

	    } else {
	      if( !infiniteLines ){
	        return [];
	      } else {
	        return [ x1 + ua * (x2 - x1), y1 + ua * (y2 - y1) ];
	      }
	    }
	  } else {
	    if( ua_t === 0 || ub_t === 0 ){

	      // Parallel, coincident lines. Check if overlap

	      // Check endpoint of second line
	      if( [ x1, x2, x4 ].sort()[1] === x4 ){
	        return [ x4, y4 ];
	      }

	      // Check start point of second line
	      if( [ x1, x2, x3 ].sort()[1] === x3 ){
	        return [ x3, y3 ];
	      }

	      // Endpoint of first line
	      if( [ x3, x4, x2 ].sort()[1] === x2 ){
	        return [ x2, y2 ];
	      }

	      return [];
	    } else {

	      // Parallel, non-coincident
	      return [];
	    }
	  }
	};

	math.polygonIntersectLine = function(
	  x, y, basePoints, centerX, centerY, width, height, padding ){

	  var intersections = [];
	  var intersection;

	  var transformedPoints = new Array( basePoints.length );

	  for( var i = 0; i < transformedPoints.length / 2; i++ ){
	    transformedPoints[ i * 2] = basePoints[ i * 2] * width + centerX;
	    transformedPoints[ i * 2 + 1] = basePoints[ i * 2 + 1] * height + centerY;
	  }

	  var points;

	  if( padding > 0 ){
	    var expandedLineSet = math.expandPolygon(
	      transformedPoints,
	      -padding );

	    points = math.joinLines( expandedLineSet );
	  } else {
	    points = transformedPoints;
	  }
	  // var points = transformedPoints;

	  var currentX, currentY, nextX, nextY;

	  for( var i = 0; i < points.length / 2; i++ ){

	    currentX = points[ i * 2];
	    currentY = points[ i * 2 + 1];

	    if( i < points.length / 2 - 1 ){
	      nextX = points[ (i + 1) * 2];
	      nextY = points[ (i + 1) * 2 + 1];
	    } else {
	      nextX = points[0];
	      nextY = points[1];
	    }

	    intersection = this.finiteLinesIntersect(
	      x, y, centerX, centerY,
	      currentX, currentY,
	      nextX, nextY );

	    if( intersection.length !== 0 ){
	      intersections.push( intersection[0], intersection[1] );
	    }
	  }

	  return intersections;
	};

	math.shortenIntersection = function(
	  intersection, offset, amount ){

	  var disp = [ intersection[0] - offset[0], intersection[1] - offset[1] ];

	  var length = Math.sqrt( disp[0] * disp[0] + disp[1] * disp[1] );

	  var lenRatio = (length - amount) / length;

	  if( lenRatio < 0 ){
	    lenRatio = 0.00001;
	  }

	  return [ offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1] ];
	};

	math.generateUnitNgonPointsFitToSquare = function( sides, rotationRadians ){
	  var points = math.generateUnitNgonPoints( sides, rotationRadians );
	  points = math.fitPolygonToSquare( points );

	  return points;
	};

	math.fitPolygonToSquare = function( points ){
	  var x, y;
	  var sides = points.length / 2;
	  var minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;

	  for( var i = 0; i < sides; i++ ){
	    x = points[2 * i ];
	    y = points[2 * i + 1];

	    minX = Math.min( minX, x );
	    maxX = Math.max( maxX, x );
	    minY = Math.min( minY, y );
	    maxY = Math.max( maxY, y );
	  }

	  // stretch factors
	  var sx = 2 / (maxX - minX);
	  var sy = 2 / (maxY - minY);

	  for( var i = 0; i < sides; i++ ){
	    x = points[2 * i ] = points[2 * i ] * sx;
	    y = points[2 * i + 1] = points[2 * i + 1] * sy;

	    minX = Math.min( minX, x );
	    maxX = Math.max( maxX, x );
	    minY = Math.min( minY, y );
	    maxY = Math.max( maxY, y );
	  }

	  if( minY < -1 ){
	    for( var i = 0; i < sides; i++ ){
	      y = points[2 * i + 1] = points[2 * i + 1] + (-1 - minY);
	    }
	  }

	  return points;
	};

	math.generateUnitNgonPoints = function( sides, rotationRadians ){

	  var increment = 1.0 / sides * 2 * Math.PI;
	  var startAngle = sides % 2 === 0 ?
	    Math.PI / 2.0 + increment / 2.0 : Math.PI / 2.0;
	  //    console.log(nodeShapes['square']);
	  startAngle += rotationRadians;

	  var points = new Array( sides * 2 );

	  var currentAngle, x, y;
	  for( var i = 0; i < sides; i++ ){
	    currentAngle = i * increment + startAngle;

	    x = points[2 * i ] = Math.cos( currentAngle );// * (1 + i/2);
	    y = points[2 * i + 1] = Math.sin( -currentAngle );//  * (1 + i/2);
	  }

	  return points;
	};

	math.getRoundRectangleRadius = function( width, height ){

	  // Set the default radius, unless half of width or height is smaller than default
	  return Math.min( width / 4, height / 4, 8 );
	};

	module.exports = math;


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );

	module.exports = {
	  // get [r, g, b] from #abc or #aabbcc
	  hex2tuple: function( hex ){
	    if( !(hex.length === 4 || hex.length === 7) || hex[0] !== '#' ){ return; }

	    var shortHex = hex.length === 4;
	    var r, g, b;
	    var base = 16;

	    if( shortHex ){
	      r = parseInt( hex[1] + hex[1], base );
	      g = parseInt( hex[2] + hex[2], base );
	      b = parseInt( hex[3] + hex[3], base );
	    } else {
	      r = parseInt( hex[1] + hex[2], base );
	      g = parseInt( hex[3] + hex[4], base );
	      b = parseInt( hex[5] + hex[6], base );
	    }

	    return [ r, g, b ];
	  },

	  // get [r, g, b, a] from hsl(0, 0, 0) or hsla(0, 0, 0, 0)
	  hsl2tuple: function( hsl ){
	    var ret;
	    var h, s, l, a, r, g, b;
	    function hue2rgb( p, q, t ){
	      if( t < 0 ) t += 1;
	      if( t > 1 ) t -= 1;
	      if( t < 1 / 6 ) return p + (q - p) * 6 * t;
	      if( t < 1 / 2 ) return q;
	      if( t < 2 / 3 ) return p + (q - p) * (2 / 3 - t) * 6;
	      return p;
	    }

	    var m = new RegExp( '^' + this.regex.hsla + '$' ).exec( hsl );
	    if( m ){

	      // get hue
	      h = parseInt( m[1] );
	      if( h < 0 ){
	        h = ( 360 - (-1 * h % 360) ) % 360;
	      } else if( h > 360 ){
	        h = h % 360;
	      }
	      h /= 360; // normalise on [0, 1]

	      s = parseFloat( m[2] );
	      if( s < 0 || s > 100 ){ return; } // saturation is [0, 100]
	      s = s / 100; // normalise on [0, 1]

	      l = parseFloat( m[3] );
	      if( l < 0 || l > 100 ){ return; } // lightness is [0, 100]
	      l = l / 100; // normalise on [0, 1]

	      a = m[4];
	      if( a !== undefined ){
	        a = parseFloat( a );

	        if( a < 0 || a > 1 ){ return; } // alpha is [0, 1]
	      }

	      // now, convert to rgb
	      // code from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript
	      if( s === 0 ){
	        r = g = b = Math.round( l * 255 ); // achromatic
	      } else {
	        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	        var p = 2 * l - q;
	        r = Math.round( 255 * hue2rgb( p, q, h + 1 / 3 ) );
	        g = Math.round( 255 * hue2rgb( p, q, h ) );
	        b = Math.round( 255 * hue2rgb( p, q, h - 1 / 3 ) );
	      }

	      ret = [ r, g, b, a ];
	    }

	    return ret;
	  },

	  // get [r, g, b, a] from rgb(0, 0, 0) or rgba(0, 0, 0, 0)
	  rgb2tuple: function( rgb ){
	    var ret;

	    var m = new RegExp( '^' + this.regex.rgba + '$' ).exec( rgb );
	    if( m ){
	      ret = [];

	      var isPct = [];
	      for( var i = 1; i <= 3; i++ ){
	        var channel = m[ i ];

	        if( channel[ channel.length - 1 ] === '%' ){
	          isPct[ i ] = true;
	        }
	        channel = parseFloat( channel );

	        if( isPct[ i ] ){
	          channel = channel / 100 * 255; // normalise to [0, 255]
	        }

	        if( channel < 0 || channel > 255 ){ return; } // invalid channel value

	        ret.push( Math.floor( channel ) );
	      }

	      var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];
	      var allArePct = isPct[1] && isPct[2] && isPct[3];
	      if( atLeastOneIsPct && !allArePct ){ return; } // must all be percent values if one is

	      var alpha = m[4];
	      if( alpha !== undefined ){
	        alpha = parseFloat( alpha );

	        if( alpha < 0 || alpha > 1 ){ return; } // invalid alpha value

	        ret.push( alpha );
	      }
	    }

	    return ret;
	  },

	  colorname2tuple: function( color ){
	    return this.colors[ color.toLowerCase() ];
	  },

	  color2tuple: function( color ){
	    return ( is.array( color ) ? color : null )
	      || this.colorname2tuple( color )
	      || this.hex2tuple( color )
	      || this.rgb2tuple( color )
	      || this.hsl2tuple( color );
	  },

	  colors: {
	    // special colour names
	    transparent: [0, 0, 0, 0], // NB alpha === 0

	    // regular colours
	    aliceblue: [ 240, 248, 255 ],
	    antiquewhite: [ 250, 235, 215 ],
	    aqua: [0, 255, 255 ],
	    aquamarine: [ 127, 255, 212 ],
	    azure: [ 240, 255, 255 ],
	    beige: [ 245, 245, 220 ],
	    bisque: [ 255, 228, 196 ],
	    black: [0, 0, 0],
	    blanchedalmond: [ 255, 235, 205 ],
	    blue: [0, 0, 255 ],
	    blueviolet: [ 138, 43, 226 ],
	    brown: [ 165, 42, 42 ],
	    burlywood: [ 222, 184, 135 ],
	    cadetblue: [ 95, 158, 160 ],
	    chartreuse: [ 127, 255, 0],
	    chocolate: [ 210, 105, 30 ],
	    coral: [ 255, 127, 80 ],
	    cornflowerblue: [ 100, 149, 237 ],
	    cornsilk: [ 255, 248, 220 ],
	    crimson: [ 220, 20, 60 ],
	    cyan: [0, 255, 255 ],
	    darkblue: [0, 0, 139 ],
	    darkcyan: [0, 139, 139 ],
	    darkgoldenrod: [ 184, 134, 11 ],
	    darkgray: [ 169, 169, 169 ],
	    darkgreen: [0, 100, 0],
	    darkgrey: [ 169, 169, 169 ],
	    darkkhaki: [ 189, 183, 107 ],
	    darkmagenta: [ 139, 0, 139 ],
	    darkolivegreen: [ 85, 107, 47 ],
	    darkorange: [ 255, 140, 0],
	    darkorchid: [ 153, 50, 204 ],
	    darkred: [ 139, 0, 0],
	    darksalmon: [ 233, 150, 122 ],
	    darkseagreen: [ 143, 188, 143 ],
	    darkslateblue: [ 72, 61, 139 ],
	    darkslategray: [ 47, 79, 79 ],
	    darkslategrey: [ 47, 79, 79 ],
	    darkturquoise: [0, 206, 209 ],
	    darkviolet: [ 148, 0, 211 ],
	    deeppink: [ 255, 20, 147 ],
	    deepskyblue: [0, 191, 255 ],
	    dimgray: [ 105, 105, 105 ],
	    dimgrey: [ 105, 105, 105 ],
	    dodgerblue: [ 30, 144, 255 ],
	    firebrick: [ 178, 34, 34 ],
	    floralwhite: [ 255, 250, 240 ],
	    forestgreen: [ 34, 139, 34 ],
	    fuchsia: [ 255, 0, 255 ],
	    gainsboro: [ 220, 220, 220 ],
	    ghostwhite: [ 248, 248, 255 ],
	    gold: [ 255, 215, 0],
	    goldenrod: [ 218, 165, 32 ],
	    gray: [ 128, 128, 128 ],
	    grey: [ 128, 128, 128 ],
	    green: [0, 128, 0],
	    greenyellow: [ 173, 255, 47 ],
	    honeydew: [ 240, 255, 240 ],
	    hotpink: [ 255, 105, 180 ],
	    indianred: [ 205, 92, 92 ],
	    indigo: [ 75, 0, 130 ],
	    ivory: [ 255, 255, 240 ],
	    khaki: [ 240, 230, 140 ],
	    lavender: [ 230, 230, 250 ],
	    lavenderblush: [ 255, 240, 245 ],
	    lawngreen: [ 124, 252, 0],
	    lemonchiffon: [ 255, 250, 205 ],
	    lightblue: [ 173, 216, 230 ],
	    lightcoral: [ 240, 128, 128 ],
	    lightcyan: [ 224, 255, 255 ],
	    lightgoldenrodyellow: [ 250, 250, 210 ],
	    lightgray: [ 211, 211, 211 ],
	    lightgreen: [ 144, 238, 144 ],
	    lightgrey: [ 211, 211, 211 ],
	    lightpink: [ 255, 182, 193 ],
	    lightsalmon: [ 255, 160, 122 ],
	    lightseagreen: [ 32, 178, 170 ],
	    lightskyblue: [ 135, 206, 250 ],
	    lightslategray: [ 119, 136, 153 ],
	    lightslategrey: [ 119, 136, 153 ],
	    lightsteelblue: [ 176, 196, 222 ],
	    lightyellow: [ 255, 255, 224 ],
	    lime: [0, 255, 0],
	    limegreen: [ 50, 205, 50 ],
	    linen: [ 250, 240, 230 ],
	    magenta: [ 255, 0, 255 ],
	    maroon: [ 128, 0, 0],
	    mediumaquamarine: [ 102, 205, 170 ],
	    mediumblue: [0, 0, 205 ],
	    mediumorchid: [ 186, 85, 211 ],
	    mediumpurple: [ 147, 112, 219 ],
	    mediumseagreen: [ 60, 179, 113 ],
	    mediumslateblue: [ 123, 104, 238 ],
	    mediumspringgreen: [0, 250, 154 ],
	    mediumturquoise: [ 72, 209, 204 ],
	    mediumvioletred: [ 199, 21, 133 ],
	    midnightblue: [ 25, 25, 112 ],
	    mintcream: [ 245, 255, 250 ],
	    mistyrose: [ 255, 228, 225 ],
	    moccasin: [ 255, 228, 181 ],
	    navajowhite: [ 255, 222, 173 ],
	    navy: [0, 0, 128 ],
	    oldlace: [ 253, 245, 230 ],
	    olive: [ 128, 128, 0],
	    olivedrab: [ 107, 142, 35 ],
	    orange: [ 255, 165, 0],
	    orangered: [ 255, 69, 0],
	    orchid: [ 218, 112, 214 ],
	    palegoldenrod: [ 238, 232, 170 ],
	    palegreen: [ 152, 251, 152 ],
	    paleturquoise: [ 175, 238, 238 ],
	    palevioletred: [ 219, 112, 147 ],
	    papayawhip: [ 255, 239, 213 ],
	    peachpuff: [ 255, 218, 185 ],
	    peru: [ 205, 133, 63 ],
	    pink: [ 255, 192, 203 ],
	    plum: [ 221, 160, 221 ],
	    powderblue: [ 176, 224, 230 ],
	    purple: [ 128, 0, 128 ],
	    red: [ 255, 0, 0],
	    rosybrown: [ 188, 143, 143 ],
	    royalblue: [ 65, 105, 225 ],
	    saddlebrown: [ 139, 69, 19 ],
	    salmon: [ 250, 128, 114 ],
	    sandybrown: [ 244, 164, 96 ],
	    seagreen: [ 46, 139, 87 ],
	    seashell: [ 255, 245, 238 ],
	    sienna: [ 160, 82, 45 ],
	    silver: [ 192, 192, 192 ],
	    skyblue: [ 135, 206, 235 ],
	    slateblue: [ 106, 90, 205 ],
	    slategray: [ 112, 128, 144 ],
	    slategrey: [ 112, 128, 144 ],
	    snow: [ 255, 250, 250 ],
	    springgreen: [0, 255, 127 ],
	    steelblue: [ 70, 130, 180 ],
	    tan: [ 210, 180, 140 ],
	    teal: [0, 128, 128 ],
	    thistle: [ 216, 191, 216 ],
	    tomato: [ 255, 99, 71 ],
	    turquoise: [ 64, 224, 208 ],
	    violet: [ 238, 130, 238 ],
	    wheat: [ 245, 222, 179 ],
	    white: [ 255, 255, 255 ],
	    whitesmoke: [ 245, 245, 245 ],
	    yellow: [ 255, 255, 0],
	    yellowgreen: [ 154, 205, 50 ]
	  }
	};


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );

	module.exports = {
	  // has anything been set in the map
	  mapEmpty: function( map ){
	    var empty = true;

	    if( map != null ){
	      return Object.keys( map ).length === 0;
	    }

	    return empty;
	  },

	  // pushes to the array at the end of a map (map may not be built)
	  pushMap: function( options ){
	    var array = this.getMap( options );

	    if( array == null ){ // if empty, put initial array
	      this.setMap( this.extend( {}, options, {
	        value: [ options.value ]
	      } ) );
	    } else {
	      array.push( options.value );
	    }
	  },

	  // sets the value in a map (map may not be built)
	  setMap: function( options ){
	    var obj = options.map;
	    var key;
	    var keys = options.keys;
	    var l = keys.length;

	    for( var i = 0; i < l; i++ ){
	      var key = keys[ i ];

	      if( is.plainObject( key ) ){
	        this.error( 'Tried to set map with object key' );
	      }

	      if( i < keys.length - 1 ){

	        // extend the map if necessary
	        if( obj[ key ] == null ){
	          obj[ key ] = {};
	        }

	        obj = obj[ key ];
	      } else {
	        // set the value
	        obj[ key ] = options.value;
	      }
	    }
	  },

	  // gets the value in a map even if it's not built in places
	  getMap: function( options ){
	    var obj = options.map;
	    var keys = options.keys;
	    var l = keys.length;

	    for( var i = 0; i < l; i++ ){
	      var key = keys[ i ];

	      if( is.plainObject( key ) ){
	        this.error( 'Tried to get map with object key' );
	      }

	      obj = obj[ key ];

	      if( obj == null ){
	        return obj;
	      }
	    }

	    return obj;
	  },

	  // deletes the entry in the map
	  deleteMap: function( options ){
	    var obj = options.map;
	    var keys = options.keys;
	    var l = keys.length;
	    var keepChildren = options.keepChildren;

	    for( var i = 0; i < l; i++ ){
	      var key = keys[ i ];

	      if( is.plainObject( key ) ){
	        this.error( 'Tried to delete map with object key' );
	      }

	      var lastKey = i === options.keys.length - 1;
	      if( lastKey ){

	        if( keepChildren ){ // then only delete child fields not in keepChildren
	          var children = Object.keys( obj );

	          for( var j = 0; j < children.length; j++ ){
	            var child = children[j];

	            if( !keepChildren[ child ] ){
	              obj[ child ] = undefined;
	            }
	          }
	        } else {
	          obj[ key ] = undefined;
	        }

	      } else {
	        obj = obj[ key ];
	      }
	    }
	  }
	};


/***/ },
/* 79 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function memoize( fn, keyFn ){
	  var cache = {};

	  if( !keyFn ){
	    keyFn = function(){
	      if( arguments.length === 1 ){
	        return arguments[0];
	      } else if( arguments.length === 0 ){
	        return 'undefined';
	      }

	      var args = [];

	      for( var i = 0; i < arguments.length; i++ ){
	        args.push( arguments[ i ] );
	      }

	      return args.join( '$' );
	    };
	  }

	  return function memoizedFn(){
	    var self = this;
	    var args = arguments;
	    var ret;
	    var k = keyFn.apply( self, args );

	    if( !(ret = cache[ k ]) ){
	      ret = cache[ k ] = fn.apply( self, args );
	    }

	    return ret;
	  };
	};


/***/ },
/* 80 */
/***/ function(module, exports) {

	'use strict';

	var number = '(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))';

	var rgba = 'rgb[a]?\\((' + number + '[%]?)\\s*,\\s*(' + number + '[%]?)\\s*,\\s*(' + number + '[%]?)(?:\\s*,\\s*(' + number + '))?\\)';
	var rgbaNoBackRefs = 'rgb[a]?\\((?:' + number + '[%]?)\\s*,\\s*(?:' + number + '[%]?)\\s*,\\s*(?:' + number + '[%]?)(?:\\s*,\\s*(?:' + number + '))?\\)';

	var hsla = 'hsl[a]?\\((' + number + ')\\s*,\\s*(' + number + '[%])\\s*,\\s*(' + number + '[%])(?:\\s*,\\s*(' + number + '))?\\)';
	var hslaNoBackRefs = 'hsl[a]?\\((?:' + number + ')\\s*,\\s*(?:' + number + '[%])\\s*,\\s*(?:' + number + '[%])(?:\\s*,\\s*(?:' + number + '))?\\)';

	var hex3 = '\\#[0-9a-fA-F]{3}';
	var hex6 = '\\#[0-9a-fA-F]{6}';

	module.exports = {
	  regex: {
	    number: number,
	    rgba: rgba,
	    rgbaNoBackRefs: rgbaNoBackRefs,
	    hsla: hsla,
	    hslaNoBackRefs: hslaNoBackRefs,
	    hex3: hex3,
	    hex6: hex6
	  }
	};


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var memoize = __webpack_require__( 79 );
	var is = __webpack_require__( 73 );

	module.exports = {

	  camel2dash: memoize( function( str ){
	    return str.replace( /([A-Z])/g, function( v ){
	      return '-' + v.toLowerCase();
	    } );
	  } ),

	  dash2camel: memoize( function( str ){
	    return str.replace( /(-\w)/g, function( v ){
	      return v[1].toUpperCase();
	    } );
	  } ),

	  prependCamel: memoize( function( prefix, str ){
	    return prefix + str[0].toUpperCase() + str.substring(1);
	  }, function( prefix, str ){
	    return prefix + '$' + str;
	  } ),

	  capitalize: function( str ){
	    if( is.emptyString( str ) ){
	      return str;
	    }

	    return str.charAt( 0 ).toUpperCase() + str.substring( 1 );
	  }

	};


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var window = __webpack_require__( 72 );
	var is = __webpack_require__( 73 );
	var performance = window ? window.performance : null;

	var util = {};

	var raf = !window ? null : ( window.requestAnimationFrame || window.mozRequestAnimationFrame ||
	      window.webkitRequestAnimationFrame || window.msRequestAnimationFrame );

	raf = raf || function( fn ){
	  if( fn ){
	    setTimeout( function(){
	      fn( pnow() );
	    }, 1000 / 60 );
	  }
	};

	util.requestAnimationFrame = function( fn ){
	  raf( fn );
	};

	var pnow = performance && performance.now ? function(){ return performance.now(); } : function(){ return Date.now(); };

	util.performanceNow = pnow;

	// ported lodash throttle function
	util.throttle = function( func, wait, options ){
	  var leading = true,
	      trailing = true;

	  if( options === false ){
	    leading = false;
	  } else if( is.plainObject( options ) ){
	    leading = 'leading' in options ? options.leading : leading;
	    trailing = 'trailing' in options ? options.trailing : trailing;
	  }
	  options = options || {};
	  options.leading = leading;
	  options.maxWait = wait;
	  options.trailing = trailing;

	  return util.debounce( func, wait, options );
	};

	util.now = function(){
	  return Date.now();
	};

	util.debounce = function( func, wait, options ){ // ported lodash debounce function
	  var util = this;
	  var args,
	      maxTimeoutId,
	      result,
	      stamp,
	      thisArg,
	      timeoutId,
	      trailingCall,
	      lastCalled = 0,
	      maxWait = false,
	      trailing = true;

	  if( !is.fn( func ) ){
	    return;
	  }
	  wait = Math.max( 0, wait ) || 0;
	  if( options === true ){
	    var leading = true;
	    trailing = false;
	  } else if( is.plainObject( options ) ){
	    leading = options.leading;
	    maxWait = 'maxWait' in options && (Math.max( wait, options.maxWait ) || 0);
	    trailing = 'trailing' in options ? options.trailing : trailing;
	  }
	  var delayed = function(){
	    var remaining = wait - (util.now() - stamp);
	    if( remaining <= 0 ){
	      if( maxTimeoutId ){
	        clearTimeout( maxTimeoutId );
	      }
	      var isCalled = trailingCall;
	      maxTimeoutId = timeoutId = trailingCall = undefined;
	      if( isCalled ){
	        lastCalled = util.now();
	        result = func.apply( thisArg, args );
	        if( !timeoutId && !maxTimeoutId ){
	          args = thisArg = null;
	        }
	      }
	    } else {
	      timeoutId = setTimeout( delayed, remaining );
	    }
	  };

	  var maxDelayed = function(){
	    if( timeoutId ){
	      clearTimeout( timeoutId );
	    }
	    maxTimeoutId = timeoutId = trailingCall = undefined;
	    if( trailing || (maxWait !== wait) ){
	      lastCalled = util.now();
	      result = func.apply( thisArg, args );
	      if( !timeoutId && !maxTimeoutId ){
	        args = thisArg = null;
	      }
	    }
	  };

	  return function(){
	    args = arguments;
	    stamp = util.now();
	    thisArg = this;
	    trailingCall = trailing && (timeoutId || !leading);

	    if( maxWait === false ){
	      var leadingCall = leading && !timeoutId;
	    } else {
	      if( !maxTimeoutId && !leading ){
	        lastCalled = stamp;
	      }
	      var remaining = maxWait - (stamp - lastCalled),
	          isCalled = remaining <= 0;

	      if( isCalled ){
	        if( maxTimeoutId ){
	          maxTimeoutId = clearTimeout( maxTimeoutId );
	        }
	        lastCalled = stamp;
	        result = func.apply( thisArg, args );
	      }
	      else if( !maxTimeoutId ){
	        maxTimeoutId = setTimeout( maxDelayed, remaining );
	      }
	    }
	    if( isCalled && timeoutId ){
	      timeoutId = clearTimeout( timeoutId );
	    }
	    else if( !timeoutId && wait !== maxWait ){
	      timeoutId = setTimeout( delayed, wait );
	    }
	    if( leadingCall ){
	      isCalled = true;
	      result = func.apply( thisArg, args );
	    }
	    if( isCalled && !timeoutId && !maxTimeoutId ){
	      args = thisArg = null;
	    }
	    return result;
	  };
	};

	module.exports = util;


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var is = __webpack_require__( 73 );

	var Element = __webpack_require__( 84 );

	// factory for generating edge ids when no id is specified for a new element
	var idFactory = {
	  generate: function( cy, element, tryThisId ){
	    var id = tryThisId != null ? tryThisId : util.uuid();

	    while( cy.hasElementWithId( id ) ){
	      id = util.uuid();
	    }

	    return id;
	  }
	};

	// represents a set of nodes, edges, or both together
	var Collection = function( cy, elements, options ){
	  if( cy === undefined || !is.core( cy ) ){
	    util.error( 'A collection must have a reference to the core' );
	    return;
	  }

	  var ids = {};
	  var indexes = {};
	  var createdElements = false;

	  if( !elements ){
	    elements = [];
	  } else if( elements.length > 0 && is.plainObject( elements[0] ) && !is.element( elements[0] ) ){
	    createdElements = true;

	    // make elements from json and restore all at once later
	    var eles = [];
	    var elesIds = {};

	    for( var i = 0, l = elements.length; i < l; i++ ){
	      var json = elements[ i ];

	      if( json.data == null ){
	        json.data = {};
	      }

	      var data = json.data;

	      // make sure newly created elements have valid ids
	      if( data.id == null ){
	        data.id = idFactory.generate( cy, json );
	      } else if( cy.hasElementWithId( data.id ) || elesIds[ data.id ] ){
	        continue; // can't create element if prior id already exists
	      }

	      var ele = new Element( cy, json, false );
	      eles.push( ele );
	      elesIds[ data.id ] = true;
	    }

	    elements = eles;
	  }

	  this.length = 0;

	  for( var i = 0, l = elements.length; i < l; i++ ){
	    var element = elements[ i ];
	    if( !element ){  continue; }

	    var id = element._private.data.id;

	    if( !options || (options.unique && !ids[ id ] ) ){
	      ids[ id ] = element;
	      indexes[ id ] = this.length;

	      this[ this.length ] = element;
	      this.length++;
	    }
	  }

	  this._private = {
	    cy: cy,
	    ids: ids,
	    indexes: indexes
	  };

	  // restore the elements if we created them from json
	  if( createdElements ){
	    this.restore();
	  }
	};

	// Functions
	////////////////////////////////////////////////////////////////////////////////////////////////////

	// keep the prototypes in sync (an element has the same functions as a collection)
	// and use elefn and elesfn as shorthands to the prototypes
	var elesfn = Element.prototype = Collection.prototype;

	elesfn.instanceString = function(){
	  return 'collection';
	};

	elesfn.spawn = function( cy, eles, opts ){
	  if( !is.core( cy ) ){ // cy is optional
	    opts = eles;
	    eles = cy;
	    cy = this.cy();
	  }

	  return new Collection( cy, eles, opts );
	};

	elesfn.spawnSelf = function(){
	  return this.spawn( this );
	};

	elesfn.cy = function(){
	  return this._private.cy;
	};

	elesfn.element = function(){
	  return this[0];
	};

	elesfn.collection = function(){
	  if( is.collection( this ) ){
	    return this;
	  } else { // an element
	    return new Collection( this._private.cy, [ this ] );
	  }
	};

	elesfn.unique = function(){
	  return new Collection( this._private.cy, this, { unique: true } );
	};

	elesfn.hasElementWithId = function( id ){
	  return !!this._private.ids[ id ];
	};

	elesfn.getElementById = function( id ){
	  var cy = this._private.cy;
	  var ele = this._private.ids[ id ];

	  return ele ? ele : new Collection( cy ); // get ele or empty collection
	};

	elesfn.poolIndex = function(){
	  var cy = this._private.cy;
	  var eles = cy._private.elements;
	  var id = this._private.data.id;

	  return eles._private.indexes[ id ];
	},

	elesfn.json = function( obj ){
	  var ele = this.element();
	  var cy = this.cy();

	  if( ele == null && obj ){ return this; } // can't set to no eles

	  if( ele == null ){ return undefined; } // can't get from no eles

	  var p = ele._private;

	  if( is.plainObject( obj ) ){ // set

	    cy.startBatch();

	    if( obj.data ){
	      ele.data( obj.data );
	    }

	    if( obj.position ){
	      ele.position( obj.position );
	    }

	    // ignore group -- immutable

	    var checkSwitch = function( k, trueFnName, falseFnName ){
	      var obj_k = obj[ k ];

	      if( obj_k != null && obj_k !== p[ k ] ){
	        if( obj_k ){
	          ele[ trueFnName ]();
	        } else {
	          ele[ falseFnName ]();
	        }
	      }
	    };

	    checkSwitch( 'removed', 'remove', 'restore' );

	    checkSwitch( 'selected', 'select', 'unselect' );

	    checkSwitch( 'selectable', 'selectify', 'unselectify' );

	    checkSwitch( 'locked', 'lock', 'unlock' );

	    checkSwitch( 'grabbable', 'grabify', 'ungrabify' );

	    if( obj.classes != null ){
	      ele.classes( obj.classes );
	    }

	    cy.endBatch();

	    return this;

	  } else if( obj === undefined ){ // get

	    var json = {
	      data: util.copy( p.data ),
	      position: util.copy( p.position ),
	      group: p.group,
	      removed: p.removed,
	      selected: p.selected,
	      selectable: p.selectable,
	      locked: p.locked,
	      grabbable: p.grabbable,
	      classes: null
	    };

	    json.classes = Object.keys( p.classes ).filter(function( cls ){
	      return p.classes[cls];
	    }).join(' ');

	    return json;
	  }
	};

	elesfn.jsons = function(){
	  var jsons = [];

	  for( var i = 0; i < this.length; i++ ){
	    var ele = this[ i ];
	    var json = ele.json();

	    jsons.push( json );
	  }

	  return jsons;
	};

	elesfn.clone = function(){
	  var cy = this.cy();
	  var elesArr = [];

	  for( var i = 0; i < this.length; i++ ){
	    var ele = this[ i ];
	    var json = ele.json();
	    var clone = new Element( cy, json, false ); // NB no restore

	    elesArr.push( clone );
	  }

	  return new Collection( cy, elesArr );
	};
	elesfn.copy = elesfn.clone;

	elesfn.restore = function( notifyRenderer ){
	  var self = this;
	  var cy = self.cy();
	  var cy_p = cy._private;

	  if( notifyRenderer === undefined ){
	    notifyRenderer = true;
	  }

	  // create arrays of nodes and edges, since we need to
	  // restore the nodes first
	  var nodes = [];
	  var edges = [];
	  var elements;
	  for( var i = 0, l = self.length; i < l; i++ ){
	    var ele = self[ i ];

	    if( !ele.removed() ){
	      // don't need to handle this ele
	      continue;
	    }

	    // keep nodes first in the array and edges after
	    if( ele.isNode() ){ // put to front of array if node
	      nodes.push( ele );
	    } else { // put to end of array if edge
	      edges.push( ele );
	    }
	  }

	  elements = nodes.concat( edges );

	  var i;
	  var removeFromElements = function(i){
	    elements.splice( i, 1 );
	    i--;
	  };

	  // now, restore each element
	  for( i = 0, l = elements.length; i < l; i++ ){
	    var ele = elements[ i ];

	    var _private = ele._private;
	    var data = _private.data;

	    // the traversal cache should start fresh when ele is added
	    _private.traversalCache = null;

	    // set id and validate
	    if( data.id === undefined ){
	      data.id = idFactory.generate( cy, ele );

	    } else if( is.number( data.id ) ){
	      data.id = '' + data.id; // now it's a string

	    } else if( is.emptyString( data.id ) || !is.string( data.id ) ){
	      util.error( 'Can not create element with invalid string ID `' + data.id + '`' );

	      // can't create element if it has empty string as id or non-string id
	      removeFromElements(i);
	      continue;
	    } else if( cy.hasElementWithId( data.id ) ){
	      util.error( 'Can not create second element with ID `' + data.id + '`' );

	      // can't create element if one already has that id
	      removeFromElements(i);
	      continue;
	    }

	    var id = data.id; // id is finalised, now let's keep a ref

	    if( ele.isNode() ){ // extra checks for nodes
	      var node = ele;
	      var pos = _private.position;

	      // make sure the nodes have a defined position

	      if( pos.x == null ){
	        pos.x = 0;
	      }

	      if( pos.y == null ){
	        pos.y = 0;
	      }
	    }

	    if( ele.isEdge() ){ // extra checks for edges

	      var edge = ele;
	      var fields = [ 'source', 'target' ];
	      var fieldsLength = fields.length;
	      var badSourceOrTarget = false;
	      for( var j = 0; j < fieldsLength; j++ ){

	        var field = fields[ j ];
	        var val = data[ field ];

	        if( is.number( val ) ){
	          val = data[ field ] = '' + data[ field ]; // now string
	        }

	        if( val == null || val === '' ){
	          // can't create if source or target is not defined properly
	          util.error( 'Can not create edge `' + id + '` with unspecified ' + field );
	          badSourceOrTarget = true;
	        } else if( !cy.hasElementWithId( val ) ){
	          // can't create edge if one of its nodes doesn't exist
	          util.error( 'Can not create edge `' + id + '` with nonexistant ' + field + ' `' + val + '`' );
	          badSourceOrTarget = true;
	        }
	      }

	      if( badSourceOrTarget ){ removeFromElements(i); continue; } // can't create this

	      var src = cy.getElementById( data.source );
	      var tgt = cy.getElementById( data.target );

	      src._private.edges.push( edge );
	      tgt._private.edges.push( edge );

	      edge._private.source = src;
	      edge._private.target = tgt;
	    } // if is edge

	    // create mock ids / indexes maps for element so it can be used like collections
	    _private.ids = {};
	    _private.ids[ id ] = ele;
	    _private.indexes = {};
	    _private.indexes[ id ] = ele;

	    _private.removed = false;
	    cy.addToPool( ele );
	  } // for each element

	  // do compound node sanity checks
	  for( var i = 0; i < nodes.length; i++ ){ // each node
	    var node = nodes[ i ];
	    var data = node._private.data;

	    if( is.number( data.parent ) ){ // then automake string
	      data.parent = '' + data.parent;
	    }

	    var parentId = data.parent;

	    var specifiedParent = parentId != null;

	    if( specifiedParent ){
	      var parent = cy.getElementById( parentId );

	      if( parent.empty() ){
	        // non-existant parent; just remove it
	        data.parent = undefined;
	      } else {
	        var selfAsParent = false;
	        var ancestor = parent;
	        while( !ancestor.empty() ){
	          if( node.same( ancestor ) ){
	            // mark self as parent and remove from data
	            selfAsParent = true;
	            data.parent = undefined; // remove parent reference

	            // exit or we loop forever
	            break;
	          }

	          ancestor = ancestor.parent();
	        }

	        if( !selfAsParent ){
	          // connect with children
	          parent[0]._private.children.push( node );
	          node._private.parent = parent[0];

	          // let the core know we have a compound graph
	          cy_p.hasCompoundNodes = true;
	        }
	      } // else
	    } // if specified parent
	  } // for each node

	  if( elements.length > 0 ){
	    var restored = new Collection( cy, elements );

	    for( var i = 0; i < restored.length; i++ ){
	      var ele = restored[i];

	      if( ele.isNode() ){ continue; }

	      // adding an edge invalidates the traversal caches for the parallel edges
	      var pedges = ele.parallelEdges();
	      for( var j = 0; j < pedges.length; j++ ){
	        pedges[j]._private.traversalCache = null;
	      }

	      // adding an edge invalidates the traversal cache for the connected nodes
	      ele.source()[0]._private.traversalCache = null;
	      ele.target()[0]._private.traversalCache = null;
	    }

	    var toUpdateStyle;

	    if( cy_p.hasCompoundNodes ){
	      toUpdateStyle = restored.add( restored.connectedNodes() ).add( restored.parent() );
	    } else {
	      toUpdateStyle = restored;
	    }

	    toUpdateStyle.updateStyle( notifyRenderer );

	    if( notifyRenderer ){
	      restored.rtrigger( 'add' );
	    } else {
	      restored.trigger( 'add' );
	    }
	  }

	  return self; // chainability
	};

	elesfn.removed = function(){
	  var ele = this[0];
	  return ele && ele._private.removed;
	};

	elesfn.inside = function(){
	  var ele = this[0];
	  return ele && !ele._private.removed;
	};

	elesfn.remove = function( notifyRenderer ){
	  var self = this;
	  var removed = [];
	  var elesToRemove = [];
	  var elesToRemoveIds = {};
	  var cy = self._private.cy;

	  if( notifyRenderer === undefined ){
	    notifyRenderer = true;
	  }

	  // add connected edges
	  function addConnectedEdges( node ){
	    var edges = node._private.edges;
	    for( var i = 0; i < edges.length; i++ ){
	      add( edges[ i ] );
	    }
	  }


	  // add descendant nodes
	  function addChildren( node ){
	    var children = node._private.children;

	    for( var i = 0; i < children.length; i++ ){
	      add( children[ i ] );
	    }
	  }

	  function add( ele ){
	    var alreadyAdded =  elesToRemoveIds[ ele.id() ];
	    if( alreadyAdded ){
	      return;
	    } else {
	      elesToRemoveIds[ ele.id() ] = true;
	    }

	    if( ele.isNode() ){
	      elesToRemove.push( ele ); // nodes are removed last

	      addConnectedEdges( ele );
	      addChildren( ele );
	    } else {
	      elesToRemove.unshift( ele ); // edges are removed first
	    }
	  }

	  // make the list of elements to remove
	  // (may be removing more than specified due to connected edges etc)

	  for( var i = 0, l = self.length; i < l; i++ ){
	    var ele = self[ i ];

	    add( ele );
	  }

	  function removeEdgeRef( node, edge ){
	    var connectedEdges = node._private.edges;

	    util.removeFromArray( connectedEdges, edge );

	    // removing an edges invalidates the traversal cache for its nodes
	    node._private.traversalCache = null;
	  }

	  function removeParallelRefs( edge ){
	    // removing an edge invalidates the traversal caches for the parallel edges
	    var pedges = edge.parallelEdges();
	    for( var j = 0; j < pedges.length; j++ ){
	      pedges[j]._private.traversalCache = null;
	    }
	  }

	  var alteredParents = [];
	  alteredParents.ids = {};

	  function removeChildRef( parent, ele ){
	    ele = ele[0];
	    parent = parent[0];

	    var children = parent._private.children;
	    var pid = parent.id();

	    util.removeFromArray( children, ele );

	    if( !alteredParents.ids[ pid ] ){
	      alteredParents.ids[ pid ] = true;
	      alteredParents.push( parent );
	    }
	  }

	  // remove from core pool
	  cy.removeFromPool( elesToRemove );

	  for( var i = 0; i < elesToRemove.length; i++ ){
	    var ele = elesToRemove[ i ];

	    // mark as removed
	    ele._private.removed = true;

	    // add to list of removed elements
	    removed.push( ele );

	    if( ele.isEdge() ){ // remove references to this edge in its connected nodes
	      var src = ele.source()[0];
	      var tgt = ele.target()[0];

	      removeEdgeRef( src, ele );
	      removeEdgeRef( tgt, ele );
	      removeParallelRefs( ele );

	    } else { // remove reference to parent
	      var parent = ele.parent();

	      if( parent.length !== 0 ){
	        removeChildRef( parent, ele );
	      }
	    }
	  }

	  // check to see if we have a compound graph or not
	  var elesStillInside = cy._private.elements;
	  cy._private.hasCompoundNodes = false;
	  for( var i = 0; i < elesStillInside.length; i++ ){
	    var ele = elesStillInside[ i ];

	    if( ele.isParent() ){
	      cy._private.hasCompoundNodes = true;
	      break;
	    }
	  }

	  var removedElements = new Collection( this.cy(), removed );
	  if( removedElements.size() > 0 ){
	    // must manually notify since trigger won't do this automatically once removed

	    if( notifyRenderer ){
	      this.cy().notify( {
	        type: 'remove',
	        eles: removedElements
	      } );
	    }

	    removedElements.trigger( 'remove' );
	  }

	  // the parents who were modified by the removal need their style updated
	  for( var i = 0; i < alteredParents.length; i++ ){
	    var ele = alteredParents[ i ];

	    if( !ele.removed() ){
	      ele.updateStyle();
	    }
	  }

	  return new Collection( cy, removed );
	};

	elesfn.move = function( struct ){
	  var cy = this._private.cy;

	  if( struct.source !== undefined || struct.target !== undefined ){
	    var srcId = struct.source;
	    var tgtId = struct.target;
	    var srcExists = cy.hasElementWithId( srcId );
	    var tgtExists = cy.hasElementWithId( tgtId );

	    if( srcExists || tgtExists ){
	      var jsons = this.jsons();

	      this.remove();

	      for( var i = 0; i < jsons.length; i++ ){
	        var json = jsons[ i ];

	        if( json.group === 'edges' ){
	          if( srcExists ){ json.data.source = srcId; }
	          if( tgtExists ){ json.data.target = tgtId; }
	        }
	      }

	      return cy.add( jsons );
	    }

	  } else if( struct.parent !== undefined ){ // move node to new parent
	    var parentId = struct.parent;
	    var parentExists = parentId === null || cy.hasElementWithId( parentId );

	    if( parentExists ){
	      var jsons = this.jsons();
	      var descs = this.descendants();
	      var descsEtc = descs.union( descs.union( this ).connectedEdges() );

	      this.remove(); // NB: also removes descendants and their connected edges

	      for( var i = 0; i < this.length; i++ ){
	        var json = jsons[ i ];

	        if( json.group === 'nodes' ){
	          json.data.parent = parentId === null ? undefined : parentId;
	        }
	      }

	      return cy.add( jsons ).union( descsEtc.restore() );
	    }
	  }

	  return this; // if nothing done
	};

	[
	  __webpack_require__( 85 ),
	  __webpack_require__( 98 ),
	  __webpack_require__( 104 ),
	  __webpack_require__( 105 ),
	  __webpack_require__( 106 ),
	  __webpack_require__( 107 ),
	  __webpack_require__( 108 ),
	  __webpack_require__( 109 ),
	  __webpack_require__( 110 ),
	  __webpack_require__( 111 ),
	  __webpack_require__( 112 ),
	  __webpack_require__( 83 ),
	  __webpack_require__( 113 ),
	  __webpack_require__( 115 ),
	  __webpack_require__( 116 ),
	  __webpack_require__( 117 ),
	  __webpack_require__( 118 )
	].forEach( function( props ){
	  util.extend( elesfn, props );
	} );

	module.exports = Collection;


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var is = __webpack_require__( 73 );

	// represents a node or an edge
	var Element = function( cy, params, restore ){
	  var self = this;
	  restore = (restore === undefined || restore ? true : false);

	  if( cy === undefined || params === undefined || !is.core( cy ) ){
	    util.error( 'An element must have a core reference and parameters set' );
	    return;
	  }

	  var group = params.group;

	  // try to automatically infer the group if unspecified
	  if( group == null ){
	    if( params.data && params.data.source != null && params.data.target != null ){
	      group = 'edges';
	    } else {
	      group = 'nodes';
	    }
	  }

	  // validate group
	  if( group !== 'nodes' && group !== 'edges' ){
	    util.error( 'An element must be of type `nodes` or `edges`; you specified `' + group + '`' );
	    return;
	  }

	  // make the element array-like, just like a collection
	  this.length = 1;
	  this[0] = this;

	  // NOTE: when something is added here, add also to ele.json()
	  this._private = {
	    cy: cy,
	    single: true, // indicates this is an element
	    data: params.data || {}, // data object
	    position: params.position || {}, // (x, y) position pair
	    autoWidth: undefined, // width and height of nodes calculated by the renderer when set to special 'auto' value
	    autoHeight: undefined,
	    listeners: [], // array of bound listeners
	    group: group, // string; 'nodes' or 'edges'
	    style: {}, // properties as set by the style
	    rstyle: {}, // properties for style sent from the renderer to the core
	    styleCxts: [], // applied style contexts from the styler
	    removed: true, // whether it's inside the vis; true if removed (set true here since we call restore)
	    selected: params.selected ? true : false, // whether it's selected
	    selectable: params.selectable === undefined ? true : ( params.selectable ? true : false ), // whether it's selectable
	    locked: params.locked ? true : false, // whether the element is locked (cannot be moved)
	    grabbed: false, // whether the element is grabbed by the mouse; renderer sets this privately
	    grabbable: params.grabbable === undefined ? true : ( params.grabbable ? true : false ), // whether the element can be grabbed
	    active: false, // whether the element is active from user interaction
	    classes: {}, // map ( className => true )
	    animation: { // object for currently-running animations
	      current: [],
	      queue: []
	    },
	    rscratch: {}, // object in which the renderer can store information
	    scratch: params.scratch || {}, // scratch objects
	    edges: [], // array of connected edges
	    children: [], // array of children
	    traversalCache: {} // cache of output of traversal functions
	  };

	  // renderedPosition overrides if specified
	  if( params.renderedPosition ){
	    var rpos = params.renderedPosition;
	    var pan = cy.pan();
	    var zoom = cy.zoom();

	    this._private.position = {
	      x: (rpos.x - pan.x) / zoom,
	      y: (rpos.y - pan.y) / zoom
	    };
	  }

	  if( is.string( params.classes ) ){
	    var classes = params.classes.split( /\s+/ );
	    for( var i = 0, l = classes.length; i < l; i++ ){
	      var cls = classes[ i ];
	      if( !cls || cls === '' ){ continue; }

	      self._private.classes[ cls ] = true;
	    }
	  }

	  if( params.style || params.css ){
	    cy.style().applyBypass( this, params.style || params.css );
	  }

	  if( restore === undefined || restore ){
	    this.restore();
	  }

	};

	module.exports = Element;


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );

	var elesfn = {};

	[
	  __webpack_require__( 86 ),
	  __webpack_require__( 87 ),
	  __webpack_require__( 89 ),
	  __webpack_require__( 90 ),
	  __webpack_require__( 91 ),
	  __webpack_require__( 92 ),
	  __webpack_require__( 93 ),
	  __webpack_require__( 94 ),
	  __webpack_require__( 95 ),
	  __webpack_require__( 96 ),
	  __webpack_require__( 97 )
	].forEach( function( props ){
	  util.extend( elesfn, props );
	} );

	module.exports = elesfn;


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );

	var defineSearch = function( params ){
	  params = {
	    bfs: params.bfs || !params.dfs,
	    dfs: params.dfs || !params.bfs
	  };

	  // from pseudocode on wikipedia
	  return function searchFn( roots, fn, directed ){
	    var options;
	    var std;
	    var thisArg;
	    if( is.plainObject( roots ) && !is.elementOrCollection( roots ) ){
	      options = roots;
	      roots = options.roots || options.root;
	      fn = options.visit;
	      directed = options.directed;
	      std = options.std;
	      thisArg = options.thisArg;
	    }

	    directed = arguments.length === 2 && !is.fn( fn ) ? fn : directed;
	    fn = is.fn( fn ) ? fn : function(){};

	    var cy = this._private.cy;
	    var v = roots = is.string( roots ) ? this.filter( roots ) : roots;
	    var Q = [];
	    var connectedNodes = [];
	    var connectedBy = {};
	    var id2depth = {};
	    var V = {};
	    var j = 0;
	    var found;
	    var nodes = this.nodes();
	    var edges = this.edges();

	    // enqueue v
	    for( var i = 0; i < v.length; i++ ){
	      if( v[ i ].isNode() ){
	        Q.unshift( v[ i ] );

	        if( params.bfs ){
	          V[ v[ i ].id() ] = true;

	          connectedNodes.push( v[ i ] );
	        }

	        id2depth[ v[ i ].id() ] = 0;
	      }
	    }

	    while( Q.length !== 0 ){
	      var v = params.bfs ? Q.shift() : Q.pop();

	      if( params.dfs ){
	        if( V[ v.id() ] ){ continue; }

	        V[ v.id() ] = true;

	        connectedNodes.push( v );
	      }

	      var depth = id2depth[ v.id() ];
	      var prevEdge = connectedBy[ v.id() ];
	      var prevNode = prevEdge == null ? undefined : prevEdge.connectedNodes().not( v )[0];
	      var ret;

	      if( std ){
	        ret = fn.call( thisArg, v, prevEdge, prevNode, j++, depth );
	      } else {
	        ret = fn.call( v, j++, depth, v, prevEdge, prevNode );
	      }

	      if( ret === true ){
	        found = v;
	        break;
	      }

	      if( ret === false ){
	        break;
	      }

	      var vwEdges = v.connectedEdges( directed ? function(){ return this.data( 'source' ) === v.id(); } : undefined ).intersect( edges );
	      for( var i = 0; i < vwEdges.length; i++ ){
	        var e = vwEdges[ i ];
	        var w = e.connectedNodes( function(){ return this.id() !== v.id(); } ).intersect( nodes );

	        if( w.length !== 0 && !V[ w.id() ] ){
	          w = w[0];

	          Q.push( w );

	          if( params.bfs ){
	            V[ w.id() ] = true;

	            connectedNodes.push( w );
	          }

	          connectedBy[ w.id() ] = e;

	          id2depth[ w.id() ] = id2depth[ v.id() ] + 1;
	        }
	      }

	    }

	    var connectedEles = [];

	    for( var i = 0; i < connectedNodes.length; i++ ){
	      var node = connectedNodes[ i ];
	      var edge = connectedBy[ node.id() ];

	      if( edge ){
	        connectedEles.push( edge );
	      }

	      connectedEles.push( node );
	    }

	    return {
	      path: cy.collection( connectedEles, { unique: true } ),
	      found: cy.collection( found )
	    };
	  };
	};

	// search, spanning trees, etc
	var elesfn = ({
	  breadthFirstSearch: defineSearch( { bfs: true } ),
	  depthFirstSearch: defineSearch( { dfs: true } )
	});

	// nice, short mathemathical alias
	elesfn.bfs = elesfn.breadthFirstSearch;
	elesfn.dfs = elesfn.depthFirstSearch;

	module.exports = elesfn;


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );
	var Heap = __webpack_require__( 88 );

	var elesfn = ({

	  dijkstra: function( root, weightFn, directed ){
	    var options;
	    if( is.plainObject( root ) && !is.elementOrCollection( root ) ){
	      options = root;
	      root = options.root;
	      weightFn = options.weight;
	      directed = options.directed;
	    }

	    var cy = this._private.cy;
	    weightFn = is.fn( weightFn ) ? weightFn : function(){ return 1; }; // if not specified, assume each edge has equal weight (1)

	    var source = is.string( root ) ? this.filter( root )[0] : root[0];
	    var dist = {};
	    var prev = {};
	    var knownDist = {};

	    var edges = this.edges().filter( function(){ return !this.isLoop(); } );
	    var nodes = this.nodes();

	    var getDist = function( node ){
	      return dist[ node.id() ];
	    };

	    var setDist = function( node, d ){
	      dist[ node.id() ] = d;

	      Q.updateItem( node );
	    };

	    var Q = new Heap( function( a, b ){
	      return getDist( a ) - getDist( b );
	    } );

	    for( var i = 0; i < nodes.length; i++ ){
	      var node = nodes[ i ];

	      dist[ node.id() ] = node.same( source ) ? 0 : Infinity;
	      Q.push( node );
	    }

	    var distBetween = function( u, v ){
	      var uvs = ( directed ? u.edgesTo( v ) : u.edgesWith( v ) ).intersect( edges );
	      var smallestDistance = Infinity;
	      var smallestEdge;

	      for( var i = 0; i < uvs.length; i++ ){
	        var edge = uvs[ i ];
	        var weight = weightFn.apply( edge, [ edge ] );

	        if( weight < smallestDistance || !smallestEdge ){
	          smallestDistance = weight;
	          smallestEdge = edge;
	        }
	      }

	      return {
	        edge: smallestEdge,
	        dist: smallestDistance
	      };
	    };

	    while( Q.size() > 0 ){
	      var u = Q.pop();
	      var smalletsDist = getDist( u );
	      var uid = u.id();

	      knownDist[ uid ] = smalletsDist;

	      if( smalletsDist === Math.Infinite ){
	        break;
	      }

	      var neighbors = u.neighborhood().intersect( nodes );
	      for( var i = 0; i < neighbors.length; i++ ){
	        var v = neighbors[ i ];
	        var vid = v.id();
	        var vDist = distBetween( u, v );

	        var alt = smalletsDist + vDist.dist;

	        if( alt < getDist( v ) ){
	          setDist( v, alt );

	          prev[ vid ] = {
	            node: u,
	            edge: vDist.edge
	          };
	        }
	      } // for
	    } // while

	    return {
	      distanceTo: function( node ){
	        var target = is.string( node ) ? nodes.filter( node )[0] : node[0];

	        return knownDist[ target.id() ];
	      },

	      pathTo: function( node ){
	        var target = is.string( node ) ? nodes.filter( node )[0] : node[0];
	        var S = [];
	        var u = target;

	        if( target.length > 0 ){
	          S.unshift( target );

	          while( prev[ u.id() ] ){
	            var p = prev[ u.id() ];

	            S.unshift( p.edge );
	            S.unshift( p.node );

	            u = p.node;
	          }
	        }

	        return cy.collection( S );
	      }
	    };
	  }
	});

	module.exports = elesfn;


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	Ported by Xueqiao Xu <xueqiaoxu@gmail.com>;

	PSF LICENSE AGREEMENT FOR PYTHON 2.7.2

	1. This LICENSE AGREEMENT is between the Python Software Foundation (“PSF”), and the Individual or Organization (“Licensee”) accessing and otherwise using Python 2.7.2 software in source or binary form and its associated documentation.
	2. Subject to the terms and conditions of this License Agreement, PSF hereby grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce, analyze, test, perform and/or display publicly, prepare derivative works, distribute, and otherwise use Python 2.7.2 alone or in any derivative version, provided, however, that PSF’s License Agreement and PSF’s notice of copyright, i.e., “Copyright © 2001-2012 Python Software Foundation; All Rights Reserved” are retained in Python 2.7.2 alone or in any derivative version prepared by Licensee.
	3. In the event Licensee prepares a derivative work that is based on or incorporates Python 2.7.2 or any part thereof, and wants to make the derivative work available to others as provided herein, then Licensee hereby agrees to include in any such work a brief summary of the changes made to Python 2.7.2.
	4. PSF is making Python 2.7.2 available to Licensee on an “AS IS” basis. PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 2.7.2 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
	5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 2.7.2 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 2.7.2, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
	6. This License Agreement will automatically terminate upon a material breach of its terms and conditions.
	7. Nothing in this License Agreement shall be deemed to create any relationship of agency, partnership, or joint venture between PSF and Licensee. This License Agreement does not grant permission to use PSF trademarks or trade name in a trademark sense to endorse or promote products or services of Licensee, or any third party.
	8. By copying, installing or otherwise using Python 2.7.2, Licensee agrees to be bound by the terms and conditions of this License Agreement.
	*/

	'use strict';
	/* jshint ignore:start */

	// Generated by CoffeeScript 1.8.0
	(function(){
	  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;

	  floor = Math.floor, min = Math.min;


	  /*
	  Default comparison function to be used
	   */

	  defaultCmp = function( x, y ){
	    if( x < y ){
	      return -1;
	    }
	    if( x > y ){
	      return 1;
	    }
	    return 0;
	  };


	  /*
	  Insert item x in list a, and keep it sorted assuming a is sorted.

	  If x is already in a, insert it to the right of the rightmost x.

	  Optional args lo (default 0) and hi (default a.length) bound the slice
	  of a to be searched.
	   */

	  insort = function( a, x, lo, hi, cmp ){
	    var mid;
	    if( lo == null ){
	      lo = 0;
	    }
	    if( cmp == null ){
	      cmp = defaultCmp;
	    }
	    if( lo < 0 ){
	      throw new Error( 'lo must be non-negative' );
	    }
	    if( hi == null ){
	      hi = a.length;
	    }
	    while( lo < hi ){
	      mid = floor( (lo + hi) / 2 );
	      if( cmp( x, a[ mid ] ) < 0 ){
	        hi = mid;
	      } else {
	        lo = mid + 1;
	      }
	    }
	    return ([].splice.apply( a, [ lo, lo - lo ].concat( x ) ), x);
	  };


	  /*
	  Push item onto heap, maintaining the heap invariant.
	   */

	  heappush = function( array, item, cmp ){
	    if( cmp == null ){
	      cmp = defaultCmp;
	    }
	    array.push( item );
	    return _siftdown( array, 0, array.length - 1, cmp );
	  };


	  /*
	  Pop the smallest item off the heap, maintaining the heap invariant.
	   */

	  heappop = function( array, cmp ){
	    var lastelt, returnitem;
	    if( cmp == null ){
	      cmp = defaultCmp;
	    }
	    lastelt = array.pop();
	    if( array.length ){
	      returnitem = array[0];
	      array[0] = lastelt;
	      _siftup( array, 0, cmp );
	    } else {
	      returnitem = lastelt;
	    }
	    return returnitem;
	  };


	  /*
	  Pop and return the current smallest value, and add the new item.

	  This is more efficient than heappop() followed by heappush(), and can be
	  more appropriate when using a fixed size heap. Note that the value
	  returned may be larger than item! That constrains reasonable use of
	  this routine unless written as part of a conditional replacement:
	      if item > array[0]
	        item = heapreplace(array, item)
	   */

	  heapreplace = function( array, item, cmp ){
	    var returnitem;
	    if( cmp == null ){
	      cmp = defaultCmp;
	    }
	    returnitem = array[0];
	    array[0] = item;
	    _siftup( array, 0, cmp );
	    return returnitem;
	  };


	  /*
	  Fast version of a heappush followed by a heappop.
	   */

	  heappushpop = function( array, item, cmp ){
	    var _ref;
	    if( cmp == null ){
	      cmp = defaultCmp;
	    }
	    if( array.length && cmp( array[0], item ) < 0 ){
	      _ref = [ array[0], item ], item = _ref[0], array[0] = _ref[1];
	      _siftup( array, 0, cmp );
	    }
	    return item;
	  };


	  /*
	  Transform list into a heap, in-place, in O(array.length) time.
	   */

	  heapify = function( array, cmp ){
	    var i, _i, _j, _len, _ref, _ref1, _results, _results1;
	    if( cmp == null ){
	      cmp = defaultCmp;
	    }
	    _ref1 = (function(){
	      _results1 = [];
	      for( var _j = 0, _ref = floor( array.length / 2 ); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j-- ){ _results1.push( _j ); }
	      return _results1;
	    }).apply( this ).reverse();
	    _results = [];
	    for( _i = 0, _len = _ref1.length; _i < _len; _i++ ){
	      i = _ref1[ _i ];
	      _results.push( _siftup( array, i, cmp ) );
	    }
	    return _results;
	  };


	  /*
	  Update the position of the given item in the heap.
	  This function should be called every time the item is being modified.
	   */

	  updateItem = function( array, item, cmp ){
	    var pos;
	    if( cmp == null ){
	      cmp = defaultCmp;
	    }
	    pos = array.indexOf( item );
	    if( pos === -1 ){
	      return;
	    }
	    _siftdown( array, 0, pos, cmp );
	    return _siftup( array, pos, cmp );
	  };


	  /*
	  Find the n largest elements in a dataset.
	   */

	  nlargest = function( array, n, cmp ){
	    var elem, result, _i, _len, _ref;
	    if( cmp == null ){
	      cmp = defaultCmp;
	    }
	    result = array.slice( 0, n );
	    if( !result.length ){
	      return result;
	    }
	    heapify( result, cmp );
	    _ref = array.slice( n );
	    for( _i = 0, _len = _ref.length; _i < _len; _i++ ){
	      elem = _ref[ _i ];
	      heappushpop( result, elem, cmp );
	    }
	    return result.sort( cmp ).reverse();
	  };


	  /*
	  Find the n smallest elements in a dataset.
	   */

	  nsmallest = function( array, n, cmp ){
	    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;
	    if( cmp == null ){
	      cmp = defaultCmp;
	    }
	    if( n * 10 <= array.length ){
	      result = array.slice( 0, n ).sort( cmp );
	      if( !result.length ){
	        return result;
	      }
	      los = result[ result.length - 1];
	      _ref = array.slice( n );
	      for( _i = 0, _len = _ref.length; _i < _len; _i++ ){
	        elem = _ref[ _i ];
	        if( cmp( elem, los ) < 0 ){
	          insort( result, elem, 0, null, cmp );
	          result.pop();
	          los = result[ result.length - 1];
	        }
	      }
	      return result;
	    }
	    heapify( array, cmp );
	    _results = [];
	    for( i = _j = 0, _ref1 = min( n, array.length ); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j ){
	      _results.push( heappop( array, cmp ) );
	    }
	    return _results;
	  };

	  _siftdown = function( array, startpos, pos, cmp ){
	    var newitem, parent, parentpos;
	    if( cmp == null ){
	      cmp = defaultCmp;
	    }
	    newitem = array[ pos ];
	    while( pos > startpos ){
	      parentpos = (pos - 1) >> 1;
	      parent = array[ parentpos ];
	      if( cmp( newitem, parent ) < 0 ){
	        array[ pos ] = parent;
	        pos = parentpos;
	        continue;
	      }
	      break;
	    }
	    return array[ pos ] = newitem;
	  };

	  _siftup = function( array, pos, cmp ){
	    var childpos, endpos, newitem, rightpos, startpos;
	    if( cmp == null ){
	      cmp = defaultCmp;
	    }
	    endpos = array.length;
	    startpos = pos;
	    newitem = array[ pos ];
	    childpos = 2 * pos + 1;
	    while( childpos < endpos ){
	      rightpos = childpos + 1;
	      if( rightpos < endpos && !(cmp( array[ childpos ], array[ rightpos ] ) < 0) ){
	        childpos = rightpos;
	      }
	      array[ pos ] = array[ childpos ];
	      pos = childpos;
	      childpos = 2 * pos + 1;
	    }
	    array[ pos ] = newitem;
	    return _siftdown( array, startpos, pos, cmp );
	  };

	  Heap = (function(){
	    Heap.push = heappush;

	    Heap.pop = heappop;

	    Heap.replace = heapreplace;

	    Heap.pushpop = heappushpop;

	    Heap.heapify = heapify;

	    Heap.updateItem = updateItem;

	    Heap.nlargest = nlargest;

	    Heap.nsmallest = nsmallest;

	    function Heap( cmp ){
	      this.cmp = cmp != null ? cmp : defaultCmp;
	      this.nodes = [];
	    }

	    Heap.prototype.push = function( x ){
	      return heappush( this.nodes, x, this.cmp );
	    };

	    Heap.prototype.pop = function(){
	      return heappop( this.nodes, this.cmp );
	    };

	    Heap.prototype.peek = function(){
	      return this.nodes[0];
	    };

	    Heap.prototype.contains = function( x ){
	      return this.nodes.indexOf( x ) !== -1;
	    };

	    Heap.prototype.replace = function( x ){
	      return heapreplace( this.nodes, x, this.cmp );
	    };

	    Heap.prototype.pushpop = function( x ){
	      return heappushpop( this.nodes, x, this.cmp );
	    };

	    Heap.prototype.heapify = function(){
	      return heapify( this.nodes, this.cmp );
	    };

	    Heap.prototype.updateItem = function( x ){
	      return updateItem( this.nodes, x, this.cmp );
	    };

	    Heap.prototype.clear = function(){
	      return this.nodes = [];
	    };

	    Heap.prototype.empty = function(){
	      return this.nodes.length === 0;
	    };

	    Heap.prototype.size = function(){
	      return this.nodes.length;
	    };

	    Heap.prototype.clone = function(){
	      var heap;
	      heap = new Heap();
	      heap.nodes = this.nodes.slice( 0 );
	      return heap;
	    };

	    Heap.prototype.toArray = function(){
	      return this.nodes.slice( 0 );
	    };

	    Heap.prototype.insert = Heap.prototype.push;

	    Heap.prototype.top = Heap.prototype.peek;

	    Heap.prototype.front = Heap.prototype.peek;

	    Heap.prototype.has = Heap.prototype.contains;

	    Heap.prototype.copy = Heap.prototype.clone;

	    return Heap;

	  })();

	  (function( root, factory ){
	    if( true ){
	      return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if( typeof exports === 'object' ){
	      return module.exports = factory();
	    } else {
	      return root.Heap = factory();
	    }
	  })( this, function(){
	    return Heap;
	  } );

	}).call( this );

	/* jshint ignore:end */


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );

	// search, spanning trees, etc
	var elesfn = ({

	  // kruskal's algorithm (finds min spanning tree, assuming undirected graph)
	  // implemented from pseudocode from wikipedia
	  kruskal: function( weightFn ){
	    var cy = this.cy();

	    weightFn = is.fn( weightFn ) ? weightFn : function(){ return 1; }; // if not specified, assume each edge has equal weight (1)

	    function findSet( ele ){
	      for( var i = 0; i < forest.length; i++ ){
	        var eles = forest[ i ];

	        if( eles.anySame( ele ) ){
	          return {
	            eles: eles,
	            index: i
	          };
	        }
	      }
	    }

	    var A = cy.collection( cy, [] );
	    var forest = [];
	    var nodes = this.nodes();

	    for( var i = 0; i < nodes.length; i++ ){
	      forest.push( nodes[ i ].collection() );
	    }

	    var edges = this.edges();
	    var S = edges.toArray().sort( function( a, b ){
	      var weightA = weightFn.call( a, a );
	      var weightB = weightFn.call( b, b );

	      return weightA - weightB;
	    } );

	    for( var i = 0; i < S.length; i++ ){
	      var edge = S[ i ];
	      var u = edge.source()[0];
	      var v = edge.target()[0];
	      var setU = findSet( u );
	      var setV = findSet( v );

	      if( setU.index !== setV.index ){
	        A = A.add( edge );

	        // combine forests for u and v
	        forest[ setU.index ] = setU.eles.add( setV.eles );
	        forest.splice( setV.index, 1 );
	      }
	    }

	    return nodes.add( A );
	  }
	});

	module.exports = elesfn;


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );

	var elesfn = ({

	  // Implemented from pseudocode from wikipedia
	  aStar: function( options ){
	    var eles = this;

	    options = options || {};

	    // Reconstructs the path from Start to End, acumulating the result in pathAcum
	    var reconstructPath = function( start, end, cameFromMap, pathAcum ){
	      // Base case
	      if( start == end ){
	        pathAcum.push( cy.getElementById( end ) );
	        return pathAcum;
	      }

	      if( end in cameFromMap ){
	        // We know which node is before the last one
	        var previous = cameFromMap[ end ];
	        var previousEdge = cameFromEdge[ end ];

	        pathAcum.push( cy.getElementById( end ) );
	        pathAcum.push( cy.getElementById( previousEdge ) );


	        return reconstructPath( start,
	                     previous,
	                     cameFromMap,
	                     pathAcum );
	      }

	      // We should not reach here!
	      return undefined;
	    };

	    // Returns the index of the element in openSet which has minimum fScore
	    var findMin = function( openSet, fScore ){
	      if( openSet.length === 0 ){
	        // Should never be the case
	        return undefined;
	      }
	      var minPos = 0;
	      var tempScore = fScore[ openSet[0] ];
	      for( var i = 1; i < openSet.length; i++ ){
	        var s = fScore[ openSet[ i ] ];
	        if( s < tempScore ){
	          tempScore = s;
	          minPos = i;
	        }
	      }
	      return minPos;
	    };

	    var cy = this._private.cy;

	    // root - mandatory!
	    if( options != null && options.root != null ){
	      var source = is.string( options.root ) ?
	        // use it as a selector, e.g. "#rootID
	        this.filter( options.root )[0] :
	        options.root[0];
	    } else {
	      return undefined;
	    }

	    // goal - mandatory!
	    if( options.goal != null ){
	      var target = is.string( options.goal ) ?
	        // use it as a selector, e.g. "#goalID
	        this.filter( options.goal )[0] :
	        options.goal[0];
	    } else {
	      return undefined;
	    }

	    // Heuristic function - optional
	    if( options.heuristic != null && is.fn( options.heuristic ) ){
	      var heuristic = options.heuristic;
	    } else {
	      var heuristic = function(){ return 0; }; // use constant if unspecified
	    }

	    // Weight function - optional
	    if( options.weight != null && is.fn( options.weight ) ){
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function( e ){return 1;};
	    }

	    // directed - optional
	    if( options.directed != null ){
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var closedSet = [];
	    var openSet = [ source.id() ];
	    var cameFrom = {};
	    var cameFromEdge = {};
	    var gScore = {};
	    var fScore = {};

	    gScore[ source.id() ] = 0;
	    fScore[ source.id() ] = heuristic( source );

	    var edges = this.edges().stdFilter( function( e ){ return !e.isLoop(); } );
	    var nodes = this.nodes();

	    // Counter
	    var steps = 0;

	    // Main loop
	    while( openSet.length > 0 ){
	      var minPos = findMin( openSet, fScore );
	      var cMin = cy.getElementById( openSet[ minPos ] );
	      steps++;

	      // If we've found our goal, then we are done
	      if( cMin.id() == target.id() ){
	        var rPath = reconstructPath( source.id(), target.id(), cameFrom, [] );
	        rPath.reverse();
	        return {
	          found: true,
	          distance: gScore[ cMin.id() ],
	          path: eles.spawn( rPath ),
	          steps: steps
	        };
	      }

	      // Add cMin to processed nodes
	      closedSet.push( cMin.id() );
	      // Remove cMin from boundary nodes
	      openSet.splice( minPos, 1 );

	      // Update scores for neighbors of cMin
	      // Take into account if graph is directed or not
	      var vwEdges = cMin.connectedEdges();
	      if( directed ){ vwEdges = vwEdges.stdFilter( function( ele ){ return ele.data( 'source' ) === cMin.id(); } ); }
	      vwEdges = vwEdges.intersect( edges );

	      for( var i = 0; i < vwEdges.length; i++ ){
	        var e = vwEdges[ i ];
	        var w = e.connectedNodes().stdFilter( function( n ){ return n.id() !== cMin.id(); } ).intersect( nodes );

	        // if node is in closedSet, ignore it
	        if( closedSet.indexOf( w.id() ) != -1 ){
	          continue;
	        }

	        // New tentative score for node w
	        var tempScore = gScore[ cMin.id() ] + weightFn.apply( e, [ e ] );

	        // Update gScore for node w if:
	        //   w not present in openSet
	        // OR
	        //   tentative gScore is less than previous value

	        // w not in openSet
	        if( openSet.indexOf( w.id() ) == -1 ){
	          gScore[ w.id() ] = tempScore;
	          fScore[ w.id() ] = tempScore + heuristic( w );
	          openSet.push( w.id() ); // Add node to openSet
	          cameFrom[ w.id() ] = cMin.id();
	          cameFromEdge[ w.id() ] = e.id();
	          continue;
	        }
	        // w already in openSet, but with greater gScore
	        if( tempScore < gScore[ w.id() ] ){
	          gScore[ w.id() ] = tempScore;
	          fScore[ w.id() ] = tempScore + heuristic( w );
	          cameFrom[ w.id() ] = cMin.id();
	        }

	      } // End of neighbors update

	    } // End of main loop

	    // If we've reached here, then we've not reached our goal
	    return {
	      found: false,
	      distance: undefined,
	      path: undefined,
	      steps: steps
	    };
	  }

	}); // elesfn


	module.exports = elesfn;


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );

	var elesfn = ({

	  // Implemented from pseudocode from wikipedia
	  floydWarshall: function( options ){
	    options = options || {};

	    var cy = this.cy();

	    // Weight function - optional
	    if( options.weight != null && is.fn( options.weight ) ){
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function( e ){return 1;};
	    }

	    // directed - optional
	    if( options.directed != null ){
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var edges = this.edges().stdFilter( function( e ){ return !e.isLoop(); } );
	    var nodes = this.nodes();
	    var numNodes = nodes.length;

	    // mapping: node id -> position in nodes array
	    var id2position = {};
	    for( var i = 0; i < numNodes; i++ ){
	      id2position[ nodes[ i ].id() ] = i;
	    }

	    // Initialize distance matrix
	    var dist = [];
	    for( var i = 0; i < numNodes; i++ ){
	      var newRow = new Array( numNodes );
	      for( var j = 0; j < numNodes; j++ ){
	        if( i == j ){
	          newRow[ j ] = 0;
	        } else {
	          newRow[ j ] = Infinity;
	        }
	      }
	      dist.push( newRow );
	    }

	    // Initialize matrix used for path reconstruction
	    // Initialize distance matrix
	    var next = [];
	    var edgeNext = [];

	    var initMatrix = function( next ){
	      for( var i = 0; i < numNodes; i++ ){
	        var newRow = new Array( numNodes );
	        for( var j = 0; j < numNodes; j++ ){
	          newRow[ j ] = undefined;
	        }
	        next.push( newRow );
	      }
	    };

	    initMatrix( next );
	    initMatrix( edgeNext );

	    // Process edges
	    for( var i = 0; i < edges.length ; i++ ){
	      var sourceIndex = id2position[ edges[ i ].source().id() ];
	      var targetIndex = id2position[ edges[ i ].target().id() ];
	      var weight = weightFn.apply( edges[ i ], [ edges[ i ] ] );

	      // Check if already process another edge between same 2 nodes
	      if( dist[ sourceIndex ][ targetIndex ] > weight ){
	        dist[ sourceIndex ][ targetIndex ] = weight;
	        next[ sourceIndex ][ targetIndex ] = targetIndex;
	        edgeNext[ sourceIndex ][ targetIndex ] = edges[ i ];
	      }
	    }

	    // If undirected graph, process 'reversed' edges
	    if( !directed ){
	      for( var i = 0; i < edges.length ; i++ ){
	        var sourceIndex = id2position[ edges[ i ].target().id() ];
	        var targetIndex = id2position[ edges[ i ].source().id() ];
	        var weight = weightFn.apply( edges[ i ], [ edges[ i ] ] );

	        // Check if already process another edge between same 2 nodes
	        if( dist[ sourceIndex ][ targetIndex ] > weight ){
	          dist[ sourceIndex ][ targetIndex ] = weight;
	          next[ sourceIndex ][ targetIndex ] = targetIndex;
	          edgeNext[ sourceIndex ][ targetIndex ] = edges[ i ];
	        }
	      }
	    }

	    // Main loop
	    for( var k = 0; k < numNodes; k++ ){
	      for( var i = 0; i < numNodes; i++ ){
	        for( var j = 0; j < numNodes; j++ ){
	          if( dist[ i ][ k ] + dist[ k ][ j ] < dist[ i ][ j ] ){
	            dist[ i ][ j ] = dist[ i ][ k ] + dist[ k ][ j ];
	            next[ i ][ j ] = next[ i ][ k ];
	          }
	        }
	      }
	    }

	    // Build result object
	    var position2id = [];
	    for( var i = 0; i < numNodes; i++ ){
	      position2id.push( nodes[ i ].id() );
	    }

	    var res = {
	      distance: function( from, to ){
	        if( is.string( from ) ){
	          // from is a selector string
	          var fromId = (cy.filter( from )[0]).id();
	        } else {
	          // from is a node
	          var fromId = from.id();
	        }

	        if( is.string( to ) ){
	          // to is a selector string
	          var toId = (cy.filter( to )[0]).id();
	        } else {
	          // to is a node
	          var toId = to.id();
	        }

	        return dist[ id2position[ fromId ] ][ id2position[ toId ] ];
	      },

	      path: function( from, to ){
	        var reconstructPathAux = function( from, to, next, position2id, edgeNext ){
	          if( from === to ){
	            return cy.getElementById( position2id[ from ] );
	          }
	          if( next[ from ][ to ] === undefined ){
	            return undefined;
	          }

	          var path = [ cy.getElementById( position2id[ from ] ) ];
	          var prev = from;
	          while( from !== to ){
	            prev = from;
	            from = next[ from ][ to ];

	            var edge = edgeNext[ prev ][ from ];
	            path.push( edge );

	            path.push( cy.getElementById( position2id[ from ] ) );
	          }
	          return path;
	        };

	        if( is.string( from ) ){
	          // from is a selector string
	          var fromId = (cy.filter( from )[0]).id();
	        } else {
	          // from is a node
	          var fromId = from.id();
	        }

	        if( is.string( to ) ){
	          // to is a selector string
	          var toId = (cy.filter( to )[0]).id();
	        } else {
	          // to is a node
	          var toId = to.id();
	        }

	        var pathArr = reconstructPathAux( id2position[ fromId ],
	                      id2position[ toId ],
	                      next,
	                      position2id,
	                      edgeNext );

	        return cy.collection( pathArr );
	      }
	    };

	    return res;

	  } // floydWarshall

	}); // elesfn

	module.exports = elesfn;


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );
	var util = __webpack_require__( 75 );

	var elesfn = ({

	  // Implemented from pseudocode from wikipedia
	  bellmanFord: function( options ){
	    var eles = this;

	    options = options || {};

	    // Weight function - optional
	    if( options.weight != null && is.fn( options.weight ) ){
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function( e ){return 1;};
	    }

	    // directed - optional
	    if( options.directed != null ){
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    // root - mandatory!
	    if( options.root != null ){
	      if( is.string( options.root ) ){
	        // use it as a selector, e.g. "#rootID
	        var source = this.filter( options.root )[0];
	      } else {
	        var source = options.root[0];
	      }
	    } else {
	      return undefined;
	    }

	    var cy = this._private.cy;
	    var edges = this.edges().stdFilter( function( e ){ return !e.isLoop(); } );
	    var nodes = this.nodes();
	    var numNodes = nodes.length;

	    // mapping: node id -> position in nodes array
	    var id2position = {};
	    for( var i = 0; i < numNodes; i++ ){
	      id2position[ nodes[ i ].id() ] = i;
	    }

	    // Initializations
	    var cost = [];
	    var predecessor = [];
	    var predEdge = [];

	    for( var i = 0; i < numNodes; i++ ){
	      if( nodes[ i ].id() === source.id() ){
	        cost[ i ] = 0;
	      } else {
	        cost[ i ] = Infinity;
	      }
	      predecessor[ i ] = undefined;
	    }

	    // Edges relaxation
	    var flag = false;
	    for( var i = 1; i < numNodes; i++ ){
	      flag = false;
	      for( var e = 0; e < edges.length; e++ ){
	        var sourceIndex = id2position[ edges[ e ].source().id() ];
	        var targetIndex = id2position[ edges[ e ].target().id() ];
	        var weight = weightFn.apply( edges[ e ], [ edges[ e ] ] );

	        var temp = cost[ sourceIndex ] + weight;
	        if( temp < cost[ targetIndex ] ){
	          cost[ targetIndex ] = temp;
	          predecessor[ targetIndex ] = sourceIndex;
	          predEdge[ targetIndex ] = edges[ e ];
	          flag = true;
	        }

	        // If undirected graph, we need to take into account the 'reverse' edge
	        if( !directed ){
	          var temp = cost[ targetIndex ] + weight;
	          if( temp < cost[ sourceIndex ] ){
	            cost[ sourceIndex ] = temp;
	            predecessor[ sourceIndex ] = targetIndex;
	            predEdge[ sourceIndex ] = edges[ e ];
	            flag = true;
	          }
	        }
	      }

	      if( !flag ){
	        break;
	      }
	    }

	    if( flag ){
	      // Check for negative weight cycles
	      for( var e = 0; e < edges.length; e++ ){
	        var sourceIndex = id2position[ edges[ e ].source().id() ];
	        var targetIndex = id2position[ edges[ e ].target().id() ];
	        var weight = weightFn.apply( edges[ e ], [ edges[ e ] ] );

	        if( cost[ sourceIndex ] + weight < cost[ targetIndex ] ){
	          util.error( 'Graph contains a negative weight cycle for Bellman-Ford' );
	          return { pathTo: undefined,
	               distanceTo: undefined,
	               hasNegativeWeightCycle: true};
	        }
	      }
	    }

	    // Build result object
	    var position2id = [];
	    for( var i = 0; i < numNodes; i++ ){
	      position2id.push( nodes[ i ].id() );
	    }


	    var res = {
	      distanceTo: function( to ){
	        if( is.string( to ) ){
	          // to is a selector string
	          var toId = (cy.filter( to )[0]).id();
	        } else {
	          // to is a node
	          var toId = to.id();
	        }

	        return cost[ id2position[ toId ] ];
	      },

	      pathTo: function( to ){

	        var reconstructPathAux = function( predecessor, fromPos, toPos, position2id, acumPath, predEdge ){
	          for( ;; ){
	            // Add toId to path
	            acumPath.push( cy.getElementById( position2id[ toPos ] ) );
	            acumPath.push( predEdge[ toPos ] );

	            if( fromPos === toPos ){
	              // reached starting node
	              return acumPath;
	            }

	            // If no path exists, discart acumulated path and return undefined
	            var predPos = predecessor[ toPos ];
	            if( typeof predPos === 'undefined' ){
	              return undefined;
	            }

	            toPos = predPos;
	          }

	        };

	        if( is.string( to ) ){
	          // to is a selector string
	          var toId = (cy.filter( to )[0]).id();
	        } else {
	          // to is a node
	          var toId = to.id();
	        }
	        var path = [];

	        // This returns a reversed path
	        var res =  reconstructPathAux( predecessor,
	                      id2position[ source.id() ],
	                      id2position[ toId ],
	                      position2id,
	                      path,
	                      predEdge );

	        // Get it in the correct order and return it
	        if( res != null ){
	          res.reverse();
	        }

	        return eles.spawn( res );
	      },

	      hasNegativeWeightCycle: false
	    };

	    return res;

	  } // bellmanFord

	}); // elesfn

	module.exports = elesfn;


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );

	var elesfn = ({

	  // Computes the minimum cut of an undirected graph
	  // Returns the correct answer with high probability
	  kargerStein: function( options ){
	    var eles = this;

	    options = options || {};

	    // Function which colapses 2 (meta) nodes into one
	    // Updates the remaining edge lists
	    // Receives as a paramater the edge which causes the collapse
	    var colapse = function( edgeIndex, nodeMap, remainingEdges ){
	      var edgeInfo = remainingEdges[ edgeIndex ];
	      var sourceIn = edgeInfo[1];
	      var targetIn = edgeInfo[2];
	      var partition1 = nodeMap[ sourceIn ];
	      var partition2 = nodeMap[ targetIn ];

	      // Delete all edges between partition1 and partition2
	      var newEdges = remainingEdges.filter( function( edge ){
	        if( nodeMap[ edge[1] ] === partition1 && nodeMap[ edge[2] ] === partition2 ){
	          return false;
	        }
	        if( nodeMap[ edge[1] ] === partition2 && nodeMap[ edge[2] ] === partition1 ){
	          return false;
	        }
	        return true;
	      } );

	      // All edges pointing to partition2 should now point to partition1
	      for( var i = 0; i < newEdges.length; i++ ){
	        var edge = newEdges[ i ];
	        if( edge[1] === partition2 ){ // Check source
	          newEdges[ i ] = edge.slice( 0 );
	          newEdges[ i ][1] = partition1;
	        } else if( edge[2] === partition2 ){ // Check target
	          newEdges[ i ] = edge.slice( 0 );
	          newEdges[ i ][2] = partition1;
	        }
	      }

	      // Move all nodes from partition2 to partition1
	      for( var i = 0; i < nodeMap.length; i++ ){
	        if( nodeMap[ i ] === partition2 ){
	          nodeMap[ i ] = partition1;
	        }
	      }

	      return newEdges;
	    };


	    // Contracts a graph until we reach a certain number of meta nodes
	    var contractUntil = function( metaNodeMap,
	                   remainingEdges,
	                   size,
	                   sizeLimit ){
	      // Stop condition
	      if( size <= sizeLimit ){
	        return remainingEdges;
	      }

	      // Choose an edge randomly
	      var edgeIndex = Math.floor( (Math.random() * remainingEdges.length) );

	      // Colapse graph based on edge
	      var newEdges = colapse( edgeIndex, metaNodeMap, remainingEdges );

	      return contractUntil( metaNodeMap,
	                 newEdges,
	                 size - 1,
	                 sizeLimit );
	    };

	    var cy = this._private.cy;
	    var edges = this.edges().stdFilter( function( e ){ return !e.isLoop(); } );
	    var nodes = this.nodes();
	    var numNodes = nodes.length;
	    var numEdges = edges.length;
	    var numIter = Math.ceil( Math.pow( Math.log( numNodes ) / Math.LN2, 2 ) );
	    var stopSize = Math.floor( numNodes / Math.sqrt( 2 ) );

	    if( numNodes < 2 ){
	      util.error( 'At least 2 nodes are required for Karger-Stein algorithm' );
	      return undefined;
	    }

	    // Create numerical identifiers for each node
	    // mapping: node id -> position in nodes array
	    // for reverse mapping, simply use nodes array
	    var id2position = {};
	    for( var i = 0; i < numNodes; i++ ){
	      id2position[ nodes[ i ].id() ] = i;
	    }

	    // Now store edge destination as indexes
	    // Format for each edge (edge index, source node index, target node index)
	    var edgeIndexes = [];
	    for( var i = 0; i < numEdges; i++ ){
	      var e = edges[ i ];
	      edgeIndexes.push( [ i, id2position[ e.source().id() ], id2position[ e.target().id() ] ] );
	    }

	    // We will store the best cut found here
	    var minCutSize = Infinity;
	    var minCut;

	    // Initial meta node partition
	    var originalMetaNode = [];
	    for( var i = 0; i < numNodes; i++ ){
	      originalMetaNode.push( i );
	    }

	    // Main loop
	    for( var iter = 0; iter <= numIter; iter++ ){
	      // Create new meta node partition
	      var metaNodeMap = originalMetaNode.slice( 0 );

	      // Contract until stop point (stopSize nodes)
	      var edgesState = contractUntil( metaNodeMap, edgeIndexes, numNodes, stopSize );

	      // Create a copy of the colapsed nodes state
	      var metaNodeMap2 = metaNodeMap.slice( 0 );

	      // Run 2 iterations starting in the stop state
	      var res1 = contractUntil( metaNodeMap, edgesState, stopSize, 2 );
	      var res2 = contractUntil( metaNodeMap2, edgesState, stopSize, 2 );

	      // Is any of the 2 results the best cut so far?
	      if( res1.length <= res2.length && res1.length < minCutSize ){
	        minCutSize = res1.length;
	        minCut = [ res1, metaNodeMap ];
	      } else if( res2.length <= res1.length && res2.length < minCutSize ){
	        minCutSize = res2.length;
	        minCut = [ res2, metaNodeMap2 ];
	      }
	    } // end of main loop


	    // Construct result
	    var resEdges = (minCut[0]).map( function( e ){ return edges[ e[0] ]; } );
	    var partition1 = [];
	    var partition2 = [];

	    // traverse metaNodeMap for best cut
	    var witnessNodePartition = minCut[1][0];
	    for( var i = 0; i < minCut[1].length; i++ ){
	      var partitionId = minCut[1][ i ];
	      if( partitionId === witnessNodePartition ){
	        partition1.push( nodes[ i ] );
	      } else {
	        partition2.push( nodes[ i ] );
	      }
	    }

	    var ret = {
	      cut: eles.spawn( cy, resEdges ),
	      partition1: eles.spawn( partition1 ),
	      partition2: eles.spawn( partition2 )
	    };

	    return ret;
	  }
	}); // elesfn


	module.exports = elesfn;


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );

	var elesfn = ({

	  pageRank: function( options ){
	    options = options || {};

	    var normalizeVector = function( vector ){
	      var length = vector.length;

	      // First, get sum of all elements
	      var total = 0;
	      for( var i = 0; i < length; i++ ){
	        total += vector[ i ];
	      }

	      // Now, divide each by the sum of all elements
	      for( var i = 0; i < length; i++ ){
	        vector[ i ] = vector[ i ] / total;
	      }
	    };

	    // dampingFactor - optional
	    if( options != null &&
	      options.dampingFactor != null ){
	      var dampingFactor = options.dampingFactor;
	    } else {
	      var dampingFactor = 0.8; // Default damping factor
	    }

	    // desired precision - optional
	    if( options != null &&
	      options.precision != null ){
	      var epsilon = options.precision;
	    } else {
	      var epsilon = 0.000001; // Default precision
	    }

	    // Max number of iterations - optional
	    if( options != null &&
	      options.iterations != null ){
	      var numIter = options.iterations;
	    } else {
	      var numIter = 200; // Default number of iterations
	    }

	    // Weight function - optional
	    if( options != null &&
	      options.weight != null &&
	      is.fn( options.weight ) ){
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function( e ){return 1;};
	    }

	    var cy = this._private.cy;
	    var edges = this.edges().stdFilter( function( e ){ return !e.isLoop(); } );
	    var nodes = this.nodes();
	    var numNodes = nodes.length;
	    var numEdges = edges.length;

	    // Create numerical identifiers for each node
	    // mapping: node id -> position in nodes array
	    // for reverse mapping, simply use nodes array
	    var id2position = {};
	    for( var i = 0; i < numNodes; i++ ){
	      id2position[ nodes[ i ].id() ] = i;
	    }

	    // Construct transposed adjacency matrix
	    // First lets have a zeroed matrix of the right size
	    // We'll also keep track of the sum of each column
	    var matrix = [];
	    var columnSum = [];
	    var additionalProb = (1 - dampingFactor) / numNodes;

	    // Create null matric
	    for( var i = 0; i < numNodes; i++ ){
	      var newRow = [];
	      for( var j = 0; j < numNodes; j++ ){
	        newRow.push( 0.0 );
	      }
	      matrix.push( newRow );
	      columnSum.push( 0.0 );
	    }

	    // Now, process edges
	    for( var i = 0; i < numEdges; i++ ){
	      var edge = edges[ i ];
	      var s = id2position[ edge.source().id() ];
	      var t = id2position[ edge.target().id() ];
	      var w = weightFn.apply( edge, [ edge ] );

	      // Update matrix
	      matrix[ t ][ s ] += w;

	      // Update column sum
	      columnSum[ s ] += w;
	    }

	    // Add additional probability based on damping factor
	    // Also, take into account columns that have sum = 0
	    var p = 1.0 / numNodes + additionalProb; // Shorthand
	    // Traverse matrix, column by column
	    for( var j = 0; j < numNodes; j++ ){
	      if( columnSum[ j ] === 0 ){
	        // No 'links' out from node jth, assume equal probability for each possible node
	        for( var i = 0; i < numNodes; i++ ){
	          matrix[ i ][ j ] = p;
	        }
	      } else {
	        // Node jth has outgoing link, compute normalized probabilities
	        for( var i = 0; i < numNodes; i++ ){
	          matrix[ i ][ j ] = matrix[ i ][ j ] / columnSum[ j ] + additionalProb;
	        }
	      }
	    }

	    // Compute dominant eigenvector using power method
	    var eigenvector = [];
	    var nullVector = [];
	    var previous;

	    // Start with a vector of all 1's
	    // Also, initialize a null vector which will be used as shorthand
	    for( var i = 0; i < numNodes; i++ ){
	      eigenvector.push( 1.0 );
	      nullVector.push( 0.0 );
	    }

	    for( var iter = 0; iter < numIter; iter++ ){
	      // New array with all 0's
	      var temp = nullVector.slice( 0 );

	      // Multiply matrix with previous result
	      for( var i = 0; i < numNodes; i++ ){
	        for( var j = 0; j < numNodes; j++ ){
	          temp[ i ] += matrix[ i ][ j ] * eigenvector[ j ];
	        }
	      }

	      normalizeVector( temp );
	      previous = eigenvector;
	      eigenvector = temp;

	      var diff = 0;
	      // Compute difference (squared module) of both vectors
	      for( var i = 0; i < numNodes; i++ ){
	        diff += Math.pow( previous[ i ] - eigenvector[ i ], 2 );
	      }

	      // If difference is less than the desired threshold, stop iterating
	      if( diff < epsilon ){
	        break;
	      }
	    }

	    // Construct result
	    var res = {
	      rank: function( node ){
	        if( is.string( node ) ){
	          // is a selector string
	          var nodeId = (cy.filter( node )[0]).id();
	        } else {
	          // is a node object
	          var nodeId = node.id();
	        }
	        return eigenvector[ id2position[ nodeId ] ];
	      }
	    };


	    return res;
	  } // pageRank

	}); // elesfn

	module.exports = elesfn;


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );
	var util = __webpack_require__( 75 );

	var elesfn = ({

	  degreeCentralityNormalized: function( options ){
	    options = options || {};

	    var cy = this.cy();

	    // directed - optional
	    if( options.directed != null ){
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var nodes = this.nodes();
	    var numNodes = nodes.length;

	    if( !directed ){
	      var degrees = {};
	      var maxDegree = 0;

	      for( var i = 0; i < numNodes; i++ ){
	        var node = nodes[ i ];
	        // add current node to the current options object and call degreeCentrality
	        var currDegree = this.degreeCentrality( util.extend( {}, options, {root: node} ) );
	        if( maxDegree < currDegree.degree )
	          maxDegree = currDegree.degree;

	        degrees[ node.id() ] = currDegree.degree;
	      }

	      return {
	        degree: function( node ){
	          if( is.string( node ) ){
	            // from is a selector string
	            var node = (cy.filter( node )[0]).id();
	          } else {
	            // from is a node
	            var node = node.id();
	          }

	          return degrees[ node ] / maxDegree;
	        }
	      };
	    } else {
	      var indegrees = {};
	      var outdegrees = {};
	      var maxIndegree = 0;
	      var maxOutdegree = 0;

	      for( var i = 0; i < numNodes; i++ ){
	        var node = nodes[ i ];
	        // add current node to the current options object and call degreeCentrality
	        var currDegree = this.degreeCentrality( util.extend( {}, options, {root: node} ) );

	        if( maxIndegree < currDegree.indegree )
	          maxIndegree = currDegree.indegree;

	        if( maxOutdegree < currDegree.outdegree )
	          maxOutdegree = currDegree.outdegree;

	        indegrees[ node.id() ] = currDegree.indegree;
	        outdegrees[ node.id() ] = currDegree.outdegree;
	      }

	      return {
	        indegree: function( node ){
	          if( is.string( node ) ){
	            // from is a selector string
	            var node = (cy.filter( node )[0]).id();
	          } else {
	            // from is a node
	            var node = node.id();
	          }

	          return indegrees[ node ] / maxIndegree;
	        },
	        outdegree: function( node ){
	          if( is.string( node ) ){
	            // from is a selector string
	            var node = (cy.filter( node )[0]).id();
	          } else {
	            // from is a node
	            var node = node.id();
	          }

	          return outdegrees[ node ] / maxOutdegree;
	        }

	      };
	    }

	  }, // degreeCentralityNormalized

	  // Implemented from the algorithm in Opsahl's paper
	  // "Node centrality in weighted networks: Generalizing degree and shortest paths"
	  // check the heading 2 "Degree"
	  degreeCentrality: function( options ){
	    options = options || {};

	    var callingEles = this;

	    // root - mandatory!
	    if( options != null && options.root != null ){
	      var root = is.string( options.root ) ? this.filter( options.root )[0] : options.root[0];
	    } else {
	      return undefined;
	    }

	    // weight - optional
	    if( options.weight != null && is.fn( options.weight ) ){
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function( e ){
	        return 1;
	      };
	    }

	    // directed - optional
	    if( options.directed != null ){
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    // alpha - optional
	    if( options.alpha != null && is.number( options.alpha ) ){
	      var alpha = options.alpha;
	    } else {
	      alpha = 0;
	    }


	    if( !directed ){
	      var connEdges = root.connectedEdges().intersection( callingEles );
	      var k = connEdges.length;
	      var s = 0;

	      // Now, sum edge weights
	      for( var i = 0; i < connEdges.length; i++ ){
	        var edge = connEdges[ i ];
	        s += weightFn.apply( edge, [ edge ] );
	      }

	      return {
	        degree: Math.pow( k, 1 - alpha ) * Math.pow( s, alpha )
	      };
	    } else {
	      var incoming = root.connectedEdges( 'edge[target = "' + root.id() + '"]' ).intersection( callingEles );
	      var outgoing = root.connectedEdges( 'edge[source = "' + root.id() + '"]' ).intersection( callingEles );
	      var k_in = incoming.length;
	      var k_out = outgoing.length;
	      var s_in = 0;
	      var s_out = 0;

	      // Now, sum incoming edge weights
	      for( var i = 0; i < incoming.length; i++ ){
	        var edge = incoming[ i ];
	        s_in += weightFn.apply( edge, [ edge ] );
	      }

	      // Now, sum outgoing edge weights
	      for( var i = 0; i < outgoing.length; i++ ){
	        var edge = outgoing[ i ];
	        s_out += weightFn.apply( edge, [ edge ] );
	      }

	      return {
	        indegree: Math.pow( k_in, 1 - alpha ) * Math.pow( s_in, alpha ),
	        outdegree: Math.pow( k_out, 1 - alpha ) * Math.pow( s_out, alpha )
	      };
	    }
	  } // degreeCentrality

	}); // elesfn

	// nice, short mathemathical alias
	elesfn.dc = elesfn.degreeCentrality;
	elesfn.dcn = elesfn.degreeCentralityNormalised = elesfn.degreeCentralityNormalized;

	module.exports = elesfn;


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );

	var elesfn = ({

	  closenessCentralityNormalized: function( options ){
	    options = options || {};

	    var cy = this.cy();

	    var harmonic = options.harmonic;
	    if( harmonic === undefined ){
	      harmonic = true;
	    }

	    var closenesses = {};
	    var maxCloseness = 0;
	    var nodes = this.nodes();
	    var fw = this.floydWarshall( { weight: options.weight, directed: options.directed } );

	    // Compute closeness for every node and find the maximum closeness
	    for( var i = 0; i < nodes.length; i++ ){
	      var currCloseness = 0;
	      for( var j = 0; j < nodes.length; j++ ){
	        if( i != j ){
	          var d = fw.distance( nodes[ i ], nodes[ j ] );

	          if( harmonic ){
	            currCloseness += 1 / d;
	          } else {
	            currCloseness += d;
	          }
	        }
	      }

	      if( !harmonic ){
	        currCloseness = 1 / currCloseness;
	      }

	      if( maxCloseness < currCloseness ){
	        maxCloseness = currCloseness;
	      }

	      closenesses[ nodes[ i ].id() ] = currCloseness;
	    }

	    return {
	      closeness: function( node ){
	        if( is.string( node ) ){
	          // from is a selector string
	          var node = (cy.filter( node )[0]).id();
	        } else {
	          // from is a node
	          var node = node.id();
	        }

	        return closenesses[ node ] / maxCloseness;
	      }
	    };
	  },

	  // Implemented from pseudocode from wikipedia
	  closenessCentrality: function( options ){
	    options = options || {};

	    // root - mandatory!
	    if( options.root != null ){
	      if( is.string( options.root ) ){
	        // use it as a selector, e.g. "#rootID
	        var root = this.filter( options.root )[0];
	      } else {
	        var root = options.root[0];
	      }
	    } else {
	      return undefined;
	    }

	    // weight - optional
	    if( options.weight != null && is.fn( options.weight ) ){
	      var weight = options.weight;
	    } else {
	      var weight = function(){return 1;};
	    }

	    // directed - optional
	    if( options.directed != null && is.bool( options.directed ) ){
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var harmonic = options.harmonic;
	    if( harmonic === undefined ){
	      harmonic = true;
	    }

	    // we need distance from this node to every other node
	    var dijkstra = this.dijkstra( {
	      root: root,
	      weight: weight,
	      directed: directed
	    } );
	    var totalDistance = 0;

	    var nodes = this.nodes();
	    for( var i = 0; i < nodes.length; i++ ){
	      if( nodes[ i ].id() != root.id() ){
	        var d = dijkstra.distanceTo( nodes[ i ] );

	        if( harmonic ){
	          totalDistance += 1 / d;
	        } else {
	          totalDistance += d;
	        }
	      }
	    }

	    return harmonic ? totalDistance : 1 / totalDistance;
	  } // closenessCentrality

	}); // elesfn

	// nice, short mathemathical alias
	elesfn.cc = elesfn.closenessCentrality;
	elesfn.ccn = elesfn.closenessCentralityNormalised = elesfn.closenessCentralityNormalized;

	module.exports = elesfn;


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );
	var Heap = __webpack_require__( 88 );

	var elesfn = ({

	  // Implemented from the algorithm in the paper "On Variants of Shortest-Path Betweenness Centrality and their Generic Computation" by Ulrik Brandes
	  betweennessCentrality: function( options ){
	    options = options || {};

	    // Weight - optional
	    var weighted, weightFn;
	    if( is.fn( options.weight ) ){
	      weightFn = options.weight;
	      weighted = true;
	    } else {
	      weighted = false;
	    }

	    // Directed - default false
	    var directed = options.directed != null ? options.directed : false;

	    var cy = this._private.cy;

	    // starting
	    var V = this.nodes();
	    var A = {};
	    var _C = {};
	    var max;
	    var C = {
	      set: function( key, val ){
	        _C[ key ] = val;

	        if( val > max ){ max = val; }
	      },

	      get: function( key ){ return _C[ key ]; }
	    };

	    // A contains the neighborhoods of every node
	    for( var i = 0; i < V.length; i++ ){
	      var v = V[ i ];
	      var vid = v.id();

	      if( directed ){
	        A[ vid ] = v.outgoers().nodes(); // get outgoers of every node
	      } else {
	        A[ vid ] = v.openNeighborhood().nodes(); // get neighbors of every node
	      }

	      C.set( vid, 0 );
	    }

	    for( var s = 0; s < V.length; s++ ){
	      var sid = V[s].id();
	      var S = []; // stack
	      var P = {};
	      var g = {};
	      var d = {};
	      var Q = new Heap(function( a, b ){
	        return d[a] - d[b];
	      }); // queue

	      // init dictionaries
	      for( var i = 0; i < V.length; i++ ){
	        var vid = V[ i ].id();

	        P[ vid ] = [];
	        g[ vid ] = 0;
	        d[ vid ] = Infinity;
	      }

	      g[ sid ] = 1; // sigma
	      d[ sid ] = 0; // distance to s

	      Q.push( sid );

	      while( !Q.empty() ){
	        var v = Q.pop();

	        S.push( v );

	        if( weighted ){
	          for( var j = 0; j < A[v].length; j++ ){
	            var w = A[v][j];
	            var vEle = cy.getElementById( v );

	            var edge;
	            if( vEle.edgesTo( w ).length > 0 ){
	              edge = vEle.edgesTo( w )[0];
	            } else {
	              edge = w.edgesTo( vEle )[0];
	            }

	            var edgeWeight = weightFn.apply( edge, [ edge ] );

	            w = w.id();

	            if( d[w] > d[v] + edgeWeight ){
	              d[w] = d[v] + edgeWeight;

	              if( Q.nodes.indexOf( w ) < 0 ){ //if w is not in Q
	                Q.push( w );
	              } else { // update position if w is in Q
	                Q.updateItem( w );
	              }

	              g[w] = 0;
	              P[w] = [];
	            }

	            if( d[w] == d[v] + edgeWeight ){
	              g[w] = g[w] + g[v];
	              P[w].push( v );
	            }
	          }
	        } else {
	          for( var j = 0; j < A[v].length; j++ ){
	            var w = A[v][j].id();

	            if( d[w] == Infinity ){
	              Q.push( w );

	              d[w] = d[v] + 1;
	            }

	            if( d[w] == d[v] + 1 ){
	              g[w] = g[w] + g[v];
	              P[w].push( v );
	            }
	          }
	        }
	      }

	      var e = {};
	      for( var i = 0; i < V.length; i++ ){
	        e[ V[ i ].id() ] = 0;
	      }

	      while( S.length > 0 ){
	        var w = S.pop();

	        for( var j = 0; j < P[w].length; j++ ){
	          var v = P[w][j];

	          e[v] = e[v] + (g[v] / g[w]) * (1 + e[w]);

	          if( w != V[s].id() ){
	            C.set( w, C.get( w ) + e[w] );
	          }
	        }
	      }
	    }

	    var ret = {
	      betweenness: function( node ){
	        if( is.string( node ) ){
	          var node = cy.filter( node ).id();
	        } else {
	          var node = node.id();
	        }

	        return C.get( node );
	      },

	      betweennessNormalized: function( node ){
	        if( is.string( node ) ){
	          var node = cy.filter( node ).id();
	        } else {
	          var node = node.id();
	        }

	        return C.get( node ) / max;
	      }
	    };

	    // alias
	    ret.betweennessNormalised = ret.betweennessNormalized;

	    return ret;
	  } // betweennessCentrality

	}); // elesfn

	// nice, short mathemathical alias
	elesfn.bc = elesfn.betweennessCentrality;

	module.exports = elesfn;


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var define = __webpack_require__( 99 );

	var elesfn = ({
	  animate: define.animate(),
	  animation: define.animation(),
	  animated: define.animated(),
	  clearQueue: define.clearQueue(),
	  delay: define.delay(),
	  delayAnimation: define.delayAnimation(),
	  stop: define.stop()
	});

	module.exports = elesfn;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// use this module to cherry pick functions into your prototype
	// (useful for functions shared between the core and collections, for example)

	// e.g.
	// var foo = define.foo({ /* params... */ })

	var util = __webpack_require__( 75 );
	var is = __webpack_require__( 73 );
	var Selector = __webpack_require__( 100 );
	var Promise = __webpack_require__( 101 );
	var Event = __webpack_require__( 102 );
	var Animation = __webpack_require__( 103 );

	var define = {

	  // access data field
	  data: function( params ){
	    var defaults = {
	      field: 'data',
	      bindingEvent: 'data',
	      allowBinding: false,
	      allowSetting: false,
	      allowGetting: false,
	      settingEvent: 'data',
	      settingTriggersEvent: false,
	      triggerFnName: 'trigger',
	      immutableKeys: {}, // key => true if immutable
	      updateStyle: false,
	      onSet: function( self ){},
	      canSet: function( self ){ return true; }
	    };
	    params = util.extend( {}, defaults, params );

	    return function dataImpl( name, value ){
	      var p = params;
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
	      var single = selfIsArrayLike ? self[0] : self;

	      // .data('foo', ...)
	      if( is.string( name ) ){ // set or get property

	        // .data('foo')
	        if( p.allowGetting && value === undefined ){ // get

	          var ret;
	          if( single ){
	            ret = single._private[ p.field ][ name ];
	          }
	          return ret;

	        // .data('foo', 'bar')
	        } else if( p.allowSetting && value !== undefined ){ // set
	          var valid = !p.immutableKeys[ name ];
	          if( valid ){
	            for( var i = 0, l = all.length; i < l; i++ ){
	              if( p.canSet( all[ i ] ) ){
	                all[ i ]._private[ p.field ][ name ] = value;
	              }
	            }

	            // update mappers if asked
	            if( p.updateStyle ){ self.updateStyle(); }

	            // call onSet callback
	            p.onSet( self );

	            if( p.settingTriggersEvent ){
	              self[ p.triggerFnName ]( p.settingEvent );
	            }
	          }
	        }

	      // .data({ 'foo': 'bar' })
	      } else if( p.allowSetting && is.plainObject( name ) ){ // extend
	        var obj = name;
	        var k, v;
	        var keys = Object.keys( obj );

	        for( var i = 0; i < keys.length; i++ ){
	          k = keys[ i ];
	          v = obj[ k ];

	          var valid = !p.immutableKeys[ k ];
	          if( valid ){
	            for( var j = 0; j < all.length; j++ ){
	              var ele = all[j];

	              if( p.canSet( ele ) ){
	                ele._private[ p.field ][ k ] = v;
	              }
	            }
	          }
	        }

	        // update mappers if asked
	        if( p.updateStyle ){ self.updateStyle(); }

	        // call onSet callback
	        p.onSet( self );

	        if( p.settingTriggersEvent ){
	          self[ p.triggerFnName ]( p.settingEvent );
	        }

	      // .data(function(){ ... })
	      } else if( p.allowBinding && is.fn( name ) ){ // bind to event
	        var fn = name;
	        self.on( p.bindingEvent, fn );

	      // .data()
	      } else if( p.allowGetting && name === undefined ){ // get whole object
	        var ret;
	        if( single ){
	          ret = single._private[ p.field ];
	        }
	        return ret;
	      }

	      return self; // maintain chainability
	    }; // function
	  }, // data

	  // remove data field
	  removeData: function( params ){
	    var defaults = {
	      field: 'data',
	      event: 'data',
	      triggerFnName: 'trigger',
	      triggerEvent: false,
	      immutableKeys: {} // key => true if immutable
	    };
	    params = util.extend( {}, defaults, params );

	    return function removeDataImpl( names ){
	      var p = params;
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like

	      // .removeData('foo bar')
	      if( is.string( names ) ){ // then get the list of keys, and delete them
	        var keys = names.split( /\s+/ );
	        var l = keys.length;

	        for( var i = 0; i < l; i++ ){ // delete each non-empty key
	          var key = keys[ i ];
	          if( is.emptyString( key ) ){ continue; }

	          var valid = !p.immutableKeys[ key ]; // not valid if immutable
	          if( valid ){
	            for( var i_a = 0, l_a = all.length; i_a < l_a; i_a++ ){
	              all[ i_a ]._private[ p.field ][ key ] = undefined;
	            }
	          }
	        }

	        if( p.triggerEvent ){
	          self[ p.triggerFnName ]( p.event );
	        }

	      // .removeData()
	      } else if( names === undefined ){ // then delete all keys

	        for( var i_a = 0, l_a = all.length; i_a < l_a; i_a++ ){
	          var _privateFields = all[ i_a ]._private[ p.field ];
	          var keys = Object.keys( _privateFields );

	          for( var i = 0; i < keys.length; i++ ){
	            var key = keys[i];
	            var validKeyToDelete = !p.immutableKeys[ key ];

	            if( validKeyToDelete ){
	              _privateFields[ key ] = undefined;
	            }
	          }
	        }

	        if( p.triggerEvent ){
	          self[ p.triggerFnName ]( p.event );
	        }
	      }

	      return self; // maintain chaining
	    }; // function
	  }, // removeData

	  // event function reusable stuff
	  event: {
	    regex: /(\w+)(\.(?:\w+|\*))?/, // regex for matching event strings (e.g. "click.namespace")
	    universalNamespace: '.*', // matches as if no namespace specified and prevents users from unbinding accidentally
	    optionalTypeRegex: /(\w+)?(\.(?:\w+|\*))?/,
	    falseCallback: function(){ return false; }
	  },

	  // event binding
	  on: function( params ){
	    var defaults = {
	      unbindSelfOnTrigger: false,
	      unbindAllBindersOnTrigger: false
	    };
	    params = util.extend( {}, defaults, params );

	    return function onImpl( events, selector, data, callback ){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
	      var eventsIsString = is.string( events );
	      var p = params;

	      if( is.plainObject( selector ) ){ // selector is actually data
	        callback = data;
	        data = selector;
	        selector = undefined;
	      } else if( is.fn( selector ) || selector === false ){ // selector is actually callback
	        callback = selector;
	        data = undefined;
	        selector = undefined;
	      }

	      if( is.fn( data ) || data === false ){ // data is actually callback
	        callback = data;
	        data = undefined;
	      }

	      // if there isn't a callback, we can't really do anything
	      // (can't speak for mapped events arg version)
	      if( !(is.fn( callback ) || callback === false) && eventsIsString ){
	        return self; // maintain chaining
	      }

	      if( eventsIsString ){ // then convert to map
	        var map = {};
	        map[ events ] = callback;
	        events = map;
	      }

	      var keys = Object.keys( events );

	      for( var k = 0; k < keys.length; k++ ){
	        var evts = keys[k];

	        callback = events[ evts ];
	        if( callback === false ){
	          callback = define.event.falseCallback;
	        }

	        if( !is.fn( callback ) ){ continue; }

	        evts = evts.split( /\s+/ );
	        for( var i = 0; i < evts.length; i++ ){
	          var evt = evts[ i ];
	          if( is.emptyString( evt ) ){ continue; }

	          var match = evt.match( define.event.regex ); // type[.namespace]

	          if( match ){
	            var type = match[1];
	            var namespace = match[2] ? match[2] : undefined;

	            var listener = {
	              callback: callback, // callback to run
	              data: data, // extra data in eventObj.data
	              delegated: selector ? true : false, // whether the evt is delegated
	              selector: selector, // the selector to match for delegated events
	              selObj: new Selector( selector ), // cached selector object to save rebuilding
	              type: type, // the event type (e.g. 'click')
	              namespace: namespace, // the event namespace (e.g. ".foo")
	              unbindSelfOnTrigger: p.unbindSelfOnTrigger,
	              unbindAllBindersOnTrigger: p.unbindAllBindersOnTrigger,
	              binders: all // who bound together
	            };

	            for( var j = 0; j < all.length; j++ ){
	              var _p = all[ j ]._private = all[ j ]._private || {};

	              _p.listeners = _p.listeners || [];
	              _p.listeners.push( listener );
	            }
	          }
	        } // for events array
	      } // for events map

	      return self; // maintain chaining
	    }; // function
	  }, // on

	  eventAliasesOn: function( proto ){
	    var p = proto;

	    p.addListener = p.listen = p.bind = p.on;
	    p.removeListener = p.unlisten = p.unbind = p.off;
	    p.emit = p.trigger;

	    // this is just a wrapper alias of .on()
	    p.pon = p.promiseOn = function( events, selector ){
	      var self = this;
	      var args = Array.prototype.slice.call( arguments, 0 );

	      return new Promise( function( resolve, reject ){
	        var callback = function( e ){
	          self.off.apply( self, offArgs );

	          resolve( e );
	        };

	        var onArgs = args.concat( [ callback ] );
	        var offArgs = onArgs.concat( [] );

	        self.on.apply( self, onArgs );
	      } );
	    };
	  },

	  off: function offImpl( params ){
	    var defaults = {
	    };
	    params = util.extend( {}, defaults, params );

	    return function( events, selector, callback ){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
	      var eventsIsString = is.string( events );

	      if( arguments.length === 0 ){ // then unbind all

	        for( var i = 0; i < all.length; i++ ){
	          all[ i ]._private = all[ i ]._private || {};

	          _p.listeners = [];
	        }

	        return self; // maintain chaining
	      }

	      if( is.fn( selector ) || selector === false ){ // selector is actually callback
	        callback = selector;
	        selector = undefined;
	      }

	      if( eventsIsString ){ // then convert to map
	        var map = {};
	        map[ events ] = callback;
	        events = map;
	      }

	      var keys = Object.keys( events );

	      for( var k = 0; k < keys.length; k++ ){
	        var evts = keys[k];

	        callback = events[ evts ];

	        if( callback === false ){
	          callback = define.event.falseCallback;
	        }

	        evts = evts.split( /\s+/ );
	        for( var h = 0; h < evts.length; h++ ){
	          var evt = evts[ h ];
	          if( is.emptyString( evt ) ){ continue; }

	          var match = evt.match( define.event.optionalTypeRegex ); // [type][.namespace]
	          if( match ){
	            var type = match[1] ? match[1] : undefined;
	            var namespace = match[2] ? match[2] : undefined;

	            for( var i = 0; i < all.length; i++ ){ //
	              var _p = all[ i ]._private = all[ i ]._private || {};
	              var listeners = _p.listeners = _p.listeners || [];

	              for( var j = 0; j < listeners.length; j++ ){
	                var listener = listeners[ j ];
	                var nsMatches = !namespace || namespace === listener.namespace;
	                var typeMatches = !type || listener.type === type;
	                var cbMatches = !callback || callback === listener.callback;
	                var listenerMatches = nsMatches && typeMatches && cbMatches;

	                // delete listener if it matches
	                if( listenerMatches ){
	                  listeners.splice( j, 1 );
	                  j--;
	                }
	              } // for listeners
	            } // for all
	          } // if match
	        } // for events array

	      } // for events map

	      return self; // maintain chaining
	    }; // function
	  }, // off

	  trigger: function( params ){
	    var defaults = {};
	    params = util.extend( {}, defaults, params );

	    return function triggerImpl( events, extraParams, fnToTrigger ){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
	      var eventsIsString = is.string( events );
	      var eventsIsObject = is.plainObject( events );
	      var eventsIsEvent = is.event( events );
	      var _p = this._private = this._private || {};
	      var cy = _p.cy || ( is.core( this ) ? this : null );
	      var hasCompounds = cy ? cy.hasCompoundNodes() : false;

	      if( eventsIsString ){ // then make a plain event object for each event name
	        var evts = events.split( /\s+/ );
	        events = [];

	        for( var i = 0; i < evts.length; i++ ){
	          var evt = evts[ i ];
	          if( is.emptyString( evt ) ){ continue; }

	          var match = evt.match( define.event.regex ); // type[.namespace]
	          var type = match[1];
	          var namespace = match[2] ? match[2] : undefined;

	          events.push( {
	            type: type,
	            namespace: namespace
	          } );
	        }
	      } else if( eventsIsObject ){ // put in length 1 array
	        var eventArgObj = events;

	        events = [ eventArgObj ];
	      }

	      if( extraParams ){
	        if( !is.array( extraParams ) ){ // make sure extra params are in an array if specified
	          extraParams = [ extraParams ];
	        }
	      } else { // otherwise, we've got nothing
	        extraParams = [];
	      }

	      for( var i = 0; i < events.length; i++ ){ // trigger each event in order
	        var evtObj = events[ i ];

	        for( var j = 0; j < all.length; j++ ){ // for each
	          var triggerer = all[ j ];
	          var _p = triggerer._private = triggerer._private || {};
	          var listeners = _p.listeners = _p.listeners || [];
	          var triggererIsElement = is.element( triggerer );
	          var bubbleUp = triggererIsElement || params.layout;

	          // create the event for this element from the event object
	          var evt;

	          if( eventsIsEvent ){ // then just get the object
	            evt = evtObj;

	            evt.cyTarget = evt.cyTarget || triggerer;
	            evt.cy = evt.cy || cy;

	          } else { // then we have to make one
	            evt = new Event( evtObj, {
	              cyTarget: triggerer,
	              cy: cy,
	              namespace: evtObj.namespace
	            } );
	          }

	          // if a layout was specified, then put it in the typed event
	          if( evtObj.layout ){
	            evt.layout = evtObj.layout;
	          }

	          // if triggered by layout, put in event
	          if( params.layout ){
	            evt.layout = triggerer;
	          }

	          // create a rendered position based on the passed position
	          if( evt.cyPosition ){
	            var pos = evt.cyPosition;
	            var zoom = cy.zoom();
	            var pan = cy.pan();

	            evt.cyRenderedPosition = {
	              x: pos.x * zoom + pan.x,
	              y: pos.y * zoom + pan.y
	            };
	          }

	          if( fnToTrigger ){ // then override the listeners list with just the one we specified
	            listeners = [ {
	              namespace: evt.namespace,
	              type: evt.type,
	              callback: fnToTrigger
	            } ];
	          }

	          for( var k = 0; k < listeners.length; k++ ){ // check each listener
	            var lis = listeners[ k ];
	            var nsMatches = !lis.namespace || lis.namespace === evt.namespace || lis.namespace === define.event.universalNamespace;
	            var typeMatches = lis.type === evt.type;
	            var targetMatches = lis.delegated ? ( triggerer !== evt.cyTarget && is.element( evt.cyTarget ) && lis.selObj.matches( evt.cyTarget ) ) : (true); // we're not going to validate the hierarchy; that's too expensive
	            var listenerMatches = nsMatches && typeMatches && targetMatches;

	            if( listenerMatches ){ // then trigger it
	              var args = [ evt ];
	              args = args.concat( extraParams ); // add extra params to args list

	              if( lis.data ){ // add on data plugged into binding
	                evt.data = lis.data;
	              } else { // or clear it in case the event obj is reused
	                evt.data = undefined;
	              }

	              if( lis.unbindSelfOnTrigger || lis.unbindAllBindersOnTrigger ){ // then remove listener
	                listeners.splice( k, 1 );
	                k--;
	              }

	              if( lis.unbindAllBindersOnTrigger ){ // then delete the listener for all binders
	                var binders = lis.binders;
	                for( var l = 0; l < binders.length; l++ ){
	                  var binder = binders[ l ];
	                  if( !binder || binder === triggerer ){ continue; } // already handled triggerer or we can't handle it

	                  var binderListeners = binder._private.listeners;
	                  for( var m = 0; m < binderListeners.length; m++ ){
	                    var binderListener = binderListeners[ m ];

	                    if( binderListener === lis ){ // delete listener from list
	                      binderListeners.splice( m, 1 );
	                      m--;
	                    }
	                  }
	                }
	              }

	              // run the callback
	              var context = lis.delegated ? evt.cyTarget : triggerer;
	              var ret = lis.callback.apply( context, args );

	              if( ret === false || evt.isPropagationStopped() ){
	                // then don't bubble
	                bubbleUp = false;

	                if( ret === false ){
	                  // returning false is a shorthand for stopping propagation and preventing the def. action
	                  evt.stopPropagation();
	                  evt.preventDefault();
	                }
	              }
	            } // if listener matches
	          } // for each listener

	          // bubble up event for elements
	          if( bubbleUp ){
	            var parent = hasCompounds ? triggerer._private.parent : null;
	            var hasParent = parent != null && parent.length !== 0;

	            if( hasParent ){ // then bubble up to parent
	              parent = parent[0];
	              parent.trigger( evt );
	            } else { // otherwise, bubble up to the core
	              cy.trigger( evt );
	            }
	          }

	        } // for each of all
	      } // for each event

	      return self; // maintain chaining
	    }; // function
	  }, // trigger

	  animated: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend( {}, defaults, fnParams );

	    return function animatedImpl(){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return false; }

	      var ele = all[0];

	      if( ele ){
	        return ele._private.animation.current.length > 0;
	      }
	    };
	  }, // animated

	  clearQueue: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend( {}, defaults, fnParams );

	    return function clearQueueImpl(){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return this; }

	      for( var i = 0; i < all.length; i++ ){
	        var ele = all[ i ];
	        ele._private.animation.queue = [];
	      }

	      return this;
	    };
	  }, // clearQueue

	  delay: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend( {}, defaults, fnParams );

	    return function delayImpl( time, complete ){
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return this; }

	      return this.animate( {
	        delay: time,
	        duration: time,
	        complete: complete
	      } );
	    };
	  }, // delay

	  delayAnimation: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend( {}, defaults, fnParams );

	    return function delayAnimationImpl( time, complete ){
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return this; }

	      return this.animation( {
	        delay: time,
	        duration: time,
	        complete: complete
	      } );
	    };
	  }, // delay

	  animation: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend( {}, defaults, fnParams );

	    return function animationImpl( properties, params ){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
	      var cy = this._private.cy || this;
	      var isCore = !selfIsArrayLike;
	      var isEles = !isCore;

	      if( !cy.styleEnabled() ){ return this; }

	      var style = cy.style();

	      properties = util.extend( {}, properties, params );

	      if( properties.duration === undefined ){
	        properties.duration = 400;
	      }

	      switch( properties.duration ){
	      case 'slow':
	        properties.duration = 600;
	        break;
	      case 'fast':
	        properties.duration = 200;
	        break;
	      }

	      var propertiesEmpty = Object.keys( properties ).length === 0;

	      if( propertiesEmpty ){
	        return new Animation( all[0], properties ); // nothing to animate
	      }

	      if( isEles ){
	        properties.style = style.getPropsList( properties.style || properties.css );

	        properties.css = undefined;
	      }

	      if( properties.renderedPosition && isEles ){
	        var rpos = properties.renderedPosition;
	        var pan = cy.pan();
	        var zoom = cy.zoom();

	        properties.position = {
	          x: ( rpos.x - pan.x ) / zoom,
	          y: ( rpos.y - pan.y ) / zoom
	        };
	      }

	      // override pan w/ panBy if set
	      if( properties.panBy && isCore ){
	        var panBy = properties.panBy;
	        var cyPan = cy.pan();

	        properties.pan = {
	          x: cyPan.x + panBy.x,
	          y: cyPan.y + panBy.y
	        };
	      }

	      // override pan w/ center if set
	      var center = properties.center || properties.centre;
	      if( center && isCore ){
	        var centerPan = cy.getCenterPan( center.eles, properties.zoom );

	        if( centerPan ){
	          properties.pan = centerPan;
	        }
	      }

	      // override pan & zoom w/ fit if set
	      if( properties.fit && isCore ){
	        var fit = properties.fit;
	        var fitVp = cy.getFitViewport( fit.eles || fit.boundingBox, fit.padding );

	        if( fitVp ){
	          properties.pan = fitVp.pan;
	          properties.zoom = fitVp.zoom;
	        }
	      }

	      return new Animation( all[0], properties );
	    };
	  }, // animate

	  animate: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend( {}, defaults, fnParams );

	    return function animateImpl( properties, params ){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return this; }

	      if( params ){
	        properties = util.extend( {}, properties, params );
	      }

	      // manually hook and run the animation
	      for( var i = 0; i < all.length; i++ ){
	        var ele = all[ i ];
	        var queue = ele.animated() && (properties.queue === undefined || properties.queue);

	        var ani = ele.animation( properties, (queue ? { queue: true } : undefined) );

	        ani.play();
	      }

	      return this; // chaining
	    };
	  }, // animate

	  stop: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend( {}, defaults, fnParams );

	    return function stopImpl( clearQueue, jumpToEnd ){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return this; }

	      for( var i = 0; i < all.length; i++ ){
	        var ele = all[ i ];
	        var _p = ele._private;
	        var anis = _p.animation.current;

	        for( var j = 0; j < anis.length; j++ ){
	          var ani = anis[ j ];
	          var ani_p = ani._private;

	          if( jumpToEnd ){
	            // next iteration of the animation loop, the animation
	            // will go straight to the end and be removed
	            ani_p.duration = 0;
	          }
	        }

	        // clear the queue of future animations
	        if( clearQueue ){
	          _p.animation.queue = [];
	        }

	        if( !jumpToEnd ){
	          _p.animation.current = [];
	        }
	      }

	      // we have to notify (the animation loop doesn't do it for us on `stop`)
	      cy.notify( {
	        eles: this,
	        type: 'draw'
	      } );

	      return this;
	    };
	  } // stop

	}; // define

	module.exports = define;


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );
	var util = __webpack_require__( 75 );

	var Selector = function( selector ){

	  if( !(this instanceof Selector) ){
	    return new Selector( selector );
	  }

	  var self = this;

	  self._private = {
	    selectorText: null,
	    invalid: true
	  };

	  // storage for parsed queries
	  var newQuery = function(){
	    return {
	      classes: [],
	      colonSelectors: [],
	      data: [],
	      group: null,
	      ids: [],
	      meta: [],

	      // fake selectors
	      collection: null, // a collection to match against
	      filter: null, // filter function

	      // these are defined in the upward direction rather than down (e.g. child)
	      // because we need to go up in Selector.filter()
	      parent: null, // parent query obj
	      ancestor: null, // ancestor query obj
	      subject: null, // defines subject in compound query (subject query obj; points to self if subject)

	      // use these only when subject has been defined
	      child: null,
	      descendant: null
	    };
	  };

	  if( !selector || ( is.string( selector ) && selector.match( /^\s*$/ ) ) ){

	    self.length = 0;

	  } else if( selector === '*' || selector === 'edge' || selector === 'node' ){

	    // make single, group-only selectors cheap to make and cheap to filter

	    self[0] = newQuery();
	    self[0].group = selector === '*' ? selector : selector + 's';
	    self[0].groupOnly = true;
	    self._private.invalid = false;
	    self._private.selectorText = selector;
	    self.length = 1;

	  } else if( is.elementOrCollection( selector ) ){

	    var collection = selector.collection();

	    self[0] = newQuery();
	    self[0].collection = collection;
	    self.length = 1;

	  } else if( is.fn( selector ) ){

	    self[0] = newQuery();
	    self[0].filter = selector;
	    self.length = 1;

	  } else if( is.string( selector ) ){

	    // the current subject in the query
	    var currentSubject = null;

	    // tokens in the query language
	    var tokens = {
	      metaChar: '[\\!\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]', // chars we need to escape in var names, etc
	      comparatorOp: '=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=', // binary comparison op (used in data selectors)
	      boolOp: '\\?|\\!|\\^', // boolean (unary) operators (used in data selectors)
	      string: '"(?:\\\\"|[^"])+"' + '|' + "'(?:\\\\'|[^'])+'", // string literals (used in data selectors) -- doublequotes | singlequotes
	      number: util.regex.number, // number literal (used in data selectors) --- e.g. 0.1234, 1234, 12e123
	      meta: 'degree|indegree|outdegree', // allowed metadata fields (i.e. allowed functions to use from Collection)
	      separator: '\\s*,\\s*', // queries are separated by commas, e.g. edge[foo = 'bar'], node.someClass
	      descendant: '\\s+',
	      child: '\\s+>\\s+',
	      subject: '\\$'
	    };
	    tokens.variable = '(?:[\\w-]|(?:\\\\' + tokens.metaChar + '))+'; // a variable name
	    tokens.value = tokens.string + '|' + tokens.number; // a value literal, either a string or number
	    tokens.className = tokens.variable; // a class name (follows variable conventions)
	    tokens.id = tokens.variable; // an element id (follows variable conventions)

	    // when a token like a variable has escaped meta characters, we need to clean the backslashes out
	    // so that values get compared properly in Selector.filter()
	    var cleanMetaChars = function( str ){
	      return str.replace( new RegExp( '\\\\(' + tokens.metaChar + ')', 'g' ), function( match, $1, offset, original ){
	        return $1;
	      } );
	    };

	    // add @ variants to comparatorOp
	    var ops = tokens.comparatorOp.split( '|' );
	    for( var i = 0; i < ops.length; i++ ){
	      var op = ops[ i ];
	      tokens.comparatorOp += '|@' + op;
	    }

	    // add ! variants to comparatorOp
	    var ops = tokens.comparatorOp.split( '|' );
	    for( var i = 0; i < ops.length; i++ ){
	      var op = ops[ i ];

	      if( op.indexOf( '!' ) >= 0 ){ continue; } // skip ops that explicitly contain !
	      if( op === '=' ){ continue; } // skip = b/c != is explicitly defined

	      tokens.comparatorOp += '|\\!' + op;
	    }

	    // NOTE: add new expression syntax here to have it recognised by the parser;
	    // - a query contains all adjacent (i.e. no separator in between) expressions;
	    // - the current query is stored in self[i] --- you can use the reference to `this` in the populate function;
	    // - you need to check the query objects in Selector.filter() for it actually filter properly, but that's pretty straight forward
	    // - when you add something here, also add to Selector.toString()
	    var exprs = [
	      {
	        name: 'group',
	        query: true,
	        regex: '(node|edge|\\*)',
	        populate: function( group ){
	          this.group = group === '*' ? group : group + 's';
	        }
	      },

	      {
	        name: 'state',
	        query: true,
	        // NB: if one colon selector is a substring of another from its start, place the longer one first
	        // e.g. :foobar|:foo
	        regex: '(:selected|:unselected|:locked|:unlocked|:visible|:hidden|:transparent|:grabbed|:free|:removed|:inside|:grabbable|:ungrabbable|:animated|:unanimated|:selectable|:unselectable|:orphan|:nonorphan|:parent|:child|:loop|:simple|:active|:inactive|:touch|:backgrounding|:nonbackgrounding)',
	        populate: function( state ){
	          this.colonSelectors.push( state );
	        }
	      },

	      {
	        name: 'id',
	        query: true,
	        regex: '\\#(' + tokens.id + ')',
	        populate: function( id ){
	          this.ids.push( cleanMetaChars( id ) );
	        }
	      },

	      {
	        name: 'className',
	        query: true,
	        regex: '\\.(' + tokens.className + ')',
	        populate: function( className ){
	          this.classes.push( cleanMetaChars( className ) );
	        }
	      },

	      {
	        name: 'dataExists',
	        query: true,
	        regex: '\\[\\s*(' + tokens.variable + ')\\s*\\]',
	        populate: function( variable ){
	          this.data.push( {
	            field: cleanMetaChars( variable )
	          } );
	        }
	      },

	      {
	        name: 'dataCompare',
	        query: true,
	        regex: '\\[\\s*(' + tokens.variable + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.value + ')\\s*\\]',
	        populate: function( variable, comparatorOp, value ){
	          var valueIsString = new RegExp( '^' + tokens.string + '$' ).exec( value ) != null;

	          if( valueIsString ){
	            value = value.substring( 1, value.length - 1 );
	          } else {
	            value = parseFloat( value );
	          }

	          this.data.push( {
	            field: cleanMetaChars( variable ),
	            operator: comparatorOp,
	            value: value
	          } );
	        }
	      },

	      {
	        name: 'dataBool',
	        query: true,
	        regex: '\\[\\s*(' + tokens.boolOp + ')\\s*(' + tokens.variable + ')\\s*\\]',
	        populate: function( boolOp, variable ){
	          this.data.push( {
	            field: cleanMetaChars( variable ),
	            operator: boolOp
	          } );
	        }
	      },

	      {
	        name: 'metaCompare',
	        query: true,
	        regex: '\\[\\[\\s*(' + tokens.meta + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.number + ')\\s*\\]\\]',
	        populate: function( meta, comparatorOp, number ){
	          this.meta.push( {
	            field: cleanMetaChars( meta ),
	            operator: comparatorOp,
	            value: parseFloat( number )
	          } );
	        }
	      },

	      {
	        name: 'nextQuery',
	        separator: true,
	        regex: tokens.separator,
	        populate: function(){
	          // go on to next query
	          self[ ++i ] = newQuery();
	          currentSubject = null;
	        }
	      },

	      {
	        name: 'child',
	        separator: true,
	        regex: tokens.child,
	        populate: function(){
	          // this query is the parent of the following query
	          var childQuery = newQuery();
	          childQuery.parent = this;
	          childQuery.subject = currentSubject;

	          // we're now populating the child query with expressions that follow
	          self[ i ] = childQuery;
	        }
	      },

	      {
	        name: 'descendant',
	        separator: true,
	        regex: tokens.descendant,
	        populate: function(){
	          // this query is the ancestor of the following query
	          var descendantQuery = newQuery();
	          descendantQuery.ancestor = this;
	          descendantQuery.subject = currentSubject;

	          // we're now populating the descendant query with expressions that follow
	          self[ i ] = descendantQuery;
	        }
	      },

	      {
	        name: 'subject',
	        modifier: true,
	        regex: tokens.subject,
	        populate: function(){
	          if( currentSubject != null && this.subject != this ){
	            util.error( 'Redefinition of subject in selector `' + selector + '`' );
	            return false;
	          }

	          currentSubject = this;
	          this.subject = this;
	        }

	      }
	    ];

	    self._private.selectorText = selector;
	    var remaining = selector;
	    var i = 0;

	    // of all the expressions, find the first match in the remaining text
	    var consumeExpr = function( expectation ){
	      var expr;
	      var match;
	      var name;

	      for( var j = 0; j < exprs.length; j++ ){
	        var e = exprs[ j ];
	        var n = e.name;

	        // ignore this expression if it doesn't meet the expectation function
	        if( is.fn( expectation ) && !expectation( n, e ) ){ continue; }

	        var m = remaining.match( new RegExp( '^' + e.regex ) );

	        if( m != null ){
	          match = m;
	          expr = e;
	          name = n;

	          var consumed = m[0];
	          remaining = remaining.substring( consumed.length );

	          break; // we've consumed one expr, so we can return now
	        }
	      }

	      return {
	        expr: expr,
	        match: match,
	        name: name
	      };
	    };

	    // consume all leading whitespace
	    var consumeWhitespace = function(){
	      var match = remaining.match( /^\s+/ );

	      if( match ){
	        var consumed = match[0];
	        remaining = remaining.substring( consumed.length );
	      }
	    };

	    self[0] = newQuery(); // get started

	    consumeWhitespace(); // get rid of leading whitespace
	    for( ;; ){
	      var check = consumeExpr();

	      if( check.expr == null ){
	        util.error( 'The selector `' + selector + '`is invalid' );
	        return;
	      } else {
	        var args = [];
	        for( var j = 1; j < check.match.length; j++ ){
	          args.push( check.match[ j ] );
	        }

	        // let the token populate the selector object (i.e. in self[i])
	        var ret = check.expr.populate.apply( self[ i ], args );

	        if( ret === false ){ return; } // exit if population failed
	      }

	      // we're done when there's nothing left to parse
	      if( remaining.match( /^\s*$/ ) ){
	        break;
	      }
	    }

	    self.length = i + 1;

	    // adjust references for subject
	    for( var j = 0; j < self.length; j++ ){
	      var query = self[ j ];

	      if( query.subject != null ){
	        // go up the tree until we reach the subject
	        for( ;; ){
	          if( query.subject == query ){ break; } // done if subject is self

	          if( query.parent != null ){ // swap parent/child reference
	            var parent = query.parent;
	            var child = query;

	            child.parent = null;
	            parent.child = child;

	            query = parent; // go up the tree
	          } else if( query.ancestor != null ){ // swap ancestor/descendant
	            var ancestor = query.ancestor;
	            var descendant = query;

	            descendant.ancestor = null;
	            ancestor.descendant = descendant;

	            query = ancestor; // go up the tree
	          } else {
	            util.error( 'When adjusting references for the selector `' + query + '`, neither parent nor ancestor was found' );
	            break;
	          }
	        } // for

	        self[ j ] = query.subject; // subject should be the root query
	      } // if
	    } // for

	  } else {
	    util.error( 'A selector must be created from a string; found ' + selector );
	    return;
	  }

	  self._private.invalid = false;

	};

	var selfn = Selector.prototype;

	selfn.size = function(){
	  return this.length;
	};

	selfn.eq = function( i ){
	  return this[ i ];
	};

	var queryMatches = function( query, ele ){
	  var ele_p = ele._private;

	  // make single group-only selectors really cheap to check since they're the most common ones
	  if( query.groupOnly ){
	    return query.group === '*' || query.group === ele_p.group;
	  }

	  // check group
	  if( query.group != null && query.group != '*' && query.group != ele_p.group ){
	    return false;
	  }

	  var cy = ele.cy();

	  // check colon selectors
	  var allColonSelectorsMatch = true;
	  for( var k = 0; k < query.colonSelectors.length; k++ ){
	    var sel = query.colonSelectors[ k ];

	    switch( sel ){
	      case ':selected':
	        allColonSelectorsMatch = ele.selected();
	        break;
	      case ':unselected':
	        allColonSelectorsMatch = !ele.selected();
	        break;
	      case ':selectable':
	        allColonSelectorsMatch = ele.selectable();
	        break;
	      case ':unselectable':
	        allColonSelectorsMatch = !ele.selectable();
	        break;
	      case ':locked':
	        allColonSelectorsMatch = ele.locked();
	        break;
	      case ':unlocked':
	        allColonSelectorsMatch = !ele.locked();
	        break;
	      case ':visible':
	        allColonSelectorsMatch = ele.visible();
	        break;
	      case ':hidden':
	        allColonSelectorsMatch = !ele.visible();
	        break;
	      case ':transparent':
	        allColonSelectorsMatch = ele.transparent();
	        break;
	      case ':grabbed':
	        allColonSelectorsMatch = ele.grabbed();
	        break;
	      case ':free':
	        allColonSelectorsMatch = !ele.grabbed();
	        break;
	      case ':removed':
	        allColonSelectorsMatch = ele.removed();
	        break;
	      case ':inside':
	        allColonSelectorsMatch = !ele.removed();
	        break;
	      case ':grabbable':
	        allColonSelectorsMatch = ele.grabbable();
	        break;
	      case ':ungrabbable':
	        allColonSelectorsMatch = !ele.grabbable();
	        break;
	      case ':animated':
	        allColonSelectorsMatch = ele.animated();
	        break;
	      case ':unanimated':
	        allColonSelectorsMatch = !ele.animated();
	        break;
	      case ':parent':
	        allColonSelectorsMatch = ele.isNode() && ele.children().nonempty();
	        break;
	      case ':child':
	      case ':nonorphan':
	        allColonSelectorsMatch = ele.isNode() && ele.parent().nonempty();
	        break;
	      case ':orphan':
	        allColonSelectorsMatch = ele.isNode() && ele.parent().empty();
	        break;
	      case ':loop':
	        allColonSelectorsMatch = ele.isEdge() && ele.data( 'source' ) === ele.data( 'target' );
	        break;
	      case ':simple':
	        allColonSelectorsMatch = ele.isEdge() && ele.data( 'source' ) !== ele.data( 'target' );
	        break;
	      case ':active':
	        allColonSelectorsMatch = ele.active();
	        break;
	      case ':inactive':
	        allColonSelectorsMatch = !ele.active();
	        break;
	      case ':touch':
	        allColonSelectorsMatch = is.touch();
	        break;
	      case ':backgrounding':
	        allColonSelectorsMatch = ele.backgrounding();
	        break;
	      case ':nonbackgrounding':
	        allColonSelectorsMatch = !ele.backgrounding();
	        break;
	    }

	    if( !allColonSelectorsMatch ) break;
	  }
	  if( !allColonSelectorsMatch ) return false;

	  // check id
	  var allIdsMatch = true;
	  for( var k = 0; k < query.ids.length; k++ ){
	    var id = query.ids[ k ];
	    var actualId = ele_p.data.id;

	    allIdsMatch = allIdsMatch && (id == actualId);

	    if( !allIdsMatch ) break;
	  }
	  if( !allIdsMatch ) return false;

	  // check classes
	  var allClassesMatch = true;
	  for( var k = 0; k < query.classes.length; k++ ){
	    var cls = query.classes[ k ];

	    allClassesMatch = allClassesMatch && ele.hasClass( cls );

	    if( !allClassesMatch ) break;
	  }
	  if( !allClassesMatch ) return false;

	  // generic checking for data/metadata
	  var operandsMatch = function( params ){
	    var allDataMatches = true;
	    for( var k = 0; k < query[ params.name ].length; k++ ){
	      var data = query[ params.name ][ k ];
	      var operator = data.operator;
	      var value = data.value;
	      var field = data.field;
	      var matches;

	      if( operator != null && value != null ){

	        var fieldVal = params.fieldValue( field );
	        var fieldStr = !is.string( fieldVal ) && !is.number( fieldVal ) ? '' : '' + fieldVal;
	        var valStr = '' + value;

	        var caseInsensitive = false;
	        if( operator.indexOf( '@' ) >= 0 ){
	          fieldStr = fieldStr.toLowerCase();
	          valStr = valStr.toLowerCase();

	          operator = operator.replace( '@', '' );
	          caseInsensitive = true;
	        }

	        var notExpr = false;
	        if( operator.indexOf( '!' ) >= 0 ){
	          operator = operator.replace( '!', '' );
	          notExpr = true;
	        }

	        // if we're doing a case insensitive comparison, then we're using a STRING comparison
	        // even if we're comparing numbers
	        if( caseInsensitive ){
	          value = valStr.toLowerCase();
	          fieldVal = fieldStr.toLowerCase();
	        }

	        var isIneqCmp = false;

	        switch( operator ){
	        case '*=':
	          matches = fieldStr.indexOf( valStr ) >= 0;
	          break;
	        case '$=':
	          matches = fieldStr.indexOf( valStr, fieldStr.length - valStr.length ) >= 0;
	          break;
	        case '^=':
	          matches = fieldStr.indexOf( valStr ) === 0;
	          break;
	        case '=':
	          matches = fieldVal === value;
	          break;
	        case '>':
	          isIneqCmp = true;
	          matches = fieldVal > value;
	          break;
	        case '>=':
	          isIneqCmp = true;
	          matches = fieldVal >= value;
	          break;
	        case '<':
	          isIneqCmp = true;
	          matches = fieldVal < value;
	          break;
	        case '<=':
	          isIneqCmp = true;
	          matches = fieldVal <= value;
	          break;
	        default:
	          matches = false;
	          break;
	        }

	        // apply the not op, but null vals for inequalities should always stay non-matching
	        if( notExpr && ( fieldVal != null || !isIneqCmp ) ){
	          matches = !matches;
	        }
	      } else if( operator != null ){
	        switch( operator ){
	        case '?':
	          matches = params.fieldTruthy( field );
	          break;
	        case '!':
	          matches = !params.fieldTruthy( field );
	          break;
	        case '^':
	          matches = params.fieldUndefined( field );
	          break;
	        }
	      } else {
	        matches = !params.fieldUndefined( field );
	      }

	      if( !matches ){
	        allDataMatches = false;
	        break;
	      }
	    } // for

	    return allDataMatches;
	  }; // operandsMatch

	  // check data matches
	  var allDataMatches = operandsMatch( {
	    name: 'data',
	    fieldValue: function( field ){
	      return ele_p.data[ field ];
	    },
	    fieldUndefined: function( field ){
	      return ele_p.data[ field ] === undefined;
	    },
	    fieldTruthy: function( field ){
	      if( ele_p.data[ field ] ){
	        return true;
	      }
	      return false;
	    }
	  } );

	  if( !allDataMatches ){
	    return false;
	  }

	  // check metadata matches
	  var allMetaMatches = operandsMatch( {
	    name: 'meta',
	    fieldValue: function( field ){
	      return ele[ field ]();
	    },
	    fieldUndefined: function( field ){
	      return ele[ field ]() == null;
	    },
	    fieldTruthy: function( field ){
	      if( ele[ field ]() ){
	        return true;
	      }
	      return false;
	    }
	  } );

	  if( !allMetaMatches ){
	    return false;
	  }

	  // check collection
	  if( query.collection != null ){
	    var matchesAny = query.collection.hasElementWithId( ele.id() );

	    if( !matchesAny ){
	      return false;
	    }
	  }

	  // check filter function
	  if( query.filter != null && ele.collection().filter( query.filter ).size() === 0 ){
	    return false;
	  }

	  // check parent/child relations
	  var confirmRelations = function( query, eles ){
	    if( query != null ){
	      var matches = false;

	      if( !cy.hasCompoundNodes() ){
	        return false;
	      }

	      eles = eles(); // save cycles if query == null

	      // query must match for at least one element (may be recursive)
	      for( var i = 0; i < eles.length; i++ ){
	        if( queryMatches( query, eles[ i ] ) ){
	          matches = true;
	          break;
	        }
	      }

	      return matches;
	    } else {
	      return true;
	    }
	  };

	  if( !confirmRelations( query.parent, function(){
	    return ele.parent();
	  } ) ){ return false; }

	  if( !confirmRelations( query.ancestor, function(){
	    return ele.parents();
	  } ) ){ return false; }

	  if( !confirmRelations( query.child, function(){
	    return ele.children();
	  } ) ){ return false; }

	  if( !confirmRelations( query.descendant, function(){
	    return ele.descendants();
	  } ) ){ return false; }

	  // we've reached the end, so we've matched everything for this query
	  return true;
	}; // queryMatches

	// filter an existing collection
	selfn.filter = function( collection ){
	  var self = this;
	  var cy = collection.cy();

	  // don't bother trying if it's invalid
	  if( self._private.invalid ){
	    return cy.collection();
	  }

	  var selectorFunction = function( i, element ){
	    for( var j = 0; j < self.length; j++ ){
	      var query = self[ j ];

	      if( queryMatches( query, element ) ){
	        return true;
	      }
	    }

	    return false;
	  };

	  if( self._private.selectorText == null ){
	    selectorFunction = function(){ return true; };
	  }

	  var filteredCollection = collection.filter( selectorFunction );

	  return filteredCollection;
	}; // filter

	// does selector match a single element?
	selfn.matches = function( ele ){
	  var self = this;

	  // don't bother trying if it's invalid
	  if( self._private.invalid ){
	    return false;
	  }

	  for( var j = 0; j < self.length; j++ ){
	    var query = self[ j ];

	    if( queryMatches( query, ele ) ){
	      return true;
	    }
	  }

	  return false;
	}; // filter

	// ith query to string
	selfn.toString = selfn.selector = function(){

	  var str = '';

	  var clean = function( obj, isValue ){
	    if( is.string( obj ) ){
	      return isValue ? '"' + obj + '"' : obj;
	    }
	    return '';
	  };

	  var queryToString = function( query ){
	    var str = '';

	    if( query.subject === query ){
	      str += '$';
	    }

	    var group = clean( query.group );
	    str += group.substring( 0, group.length - 1 );

	    for( var j = 0; j < query.data.length; j++ ){
	      var data = query.data[ j ];

	      if( data.value ){
	        str += '[' + data.field + clean( data.operator ) + clean( data.value, true ) + ']';
	      } else {
	        str += '[' + clean( data.operator ) + data.field + ']';
	      }
	    }

	    for( var j = 0; j < query.meta.length; j++ ){
	      var meta = query.meta[ j ];
	      str += '[[' + meta.field + clean( meta.operator ) + clean( meta.value, true ) + ']]';
	    }

	    for( var j = 0; j < query.colonSelectors.length; j++ ){
	      var sel = query.colonSelectors[ i ];
	      str += sel;
	    }

	    for( var j = 0; j < query.ids.length; j++ ){
	      var sel = '#' + query.ids[ i ];
	      str += sel;
	    }

	    for( var j = 0; j < query.classes.length; j++ ){
	      var sel = '.' + query.classes[ j ];
	      str += sel;
	    }

	    if( query.parent != null ){
	      str = queryToString( query.parent ) + ' > ' + str;
	    }

	    if( query.ancestor != null ){
	      str = queryToString( query.ancestor ) + ' ' + str;
	    }

	    if( query.child != null ){
	      str += ' > ' + queryToString( query.child );
	    }

	    if( query.descendant != null ){
	      str += ' ' + queryToString( query.descendant );
	    }

	    return str;
	  };

	  for( var i = 0; i < this.length; i++ ){
	    var query = this[ i ];

	    str += queryToString( query );

	    if( this.length > 1 && i < this.length - 1 ){
	      str += ', ';
	    }
	  }

	  return str;
	};

	module.exports = Selector;


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {/*!
	Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
	Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)
	Licensed under The MIT License (http://opensource.org/licenses/MIT)
	*/

	'use strict';

	/*  promise states [Promises/A+ 2.1]  */
	var STATE_PENDING   = 0;                                         /*  [Promises/A+ 2.1.1]  */
	var STATE_FULFILLED = 1;                                         /*  [Promises/A+ 2.1.2]  */
	var STATE_REJECTED  = 2;                                         /*  [Promises/A+ 2.1.3]  */

	/*  promise object constructor  */
	var api = function( executor ){
	  /*  optionally support non-constructor/plain-function call  */
	  if( !(this instanceof api) )
	    return new api( executor );

	  /*  initialize object  */
	  this.id           = 'Thenable/1.0.7';
	  this.state        = STATE_PENDING; /*  initial state  */
	  this.fulfillValue = undefined;     /*  initial value  */     /*  [Promises/A+ 1.3, 2.1.2.2]  */
	  this.rejectReason = undefined;     /*  initial reason */     /*  [Promises/A+ 1.5, 2.1.3.2]  */
	  this.onFulfilled  = [];            /*  initial handlers  */
	  this.onRejected   = [];            /*  initial handlers  */

	  /*  provide optional information-hiding proxy  */
	  this.proxy = {
	    then: this.then.bind( this )
	  };

	  /*  support optional executor function  */
	  if( typeof executor === 'function' )
	    executor.call( this, this.fulfill.bind( this ), this.reject.bind( this ) );
	};

	/*  promise API methods  */
	api.prototype = {
	  /*  promise resolving methods  */
	  fulfill: function( value ){ return deliver( this, STATE_FULFILLED, 'fulfillValue', value ); },
	  reject:  function( value ){ return deliver( this, STATE_REJECTED,  'rejectReason', value ); },

	  /*  "The then Method" [Promises/A+ 1.1, 1.2, 2.2]  */
	  then: function( onFulfilled, onRejected ){
	    var curr = this;
	    var next = new api();                                    /*  [Promises/A+ 2.2.7]  */
	    curr.onFulfilled.push(
	      resolver( onFulfilled, next, 'fulfill' ) );             /*  [Promises/A+ 2.2.2/2.2.6]  */
	    curr.onRejected.push(
	      resolver( onRejected,  next, 'reject' ) );             /*  [Promises/A+ 2.2.3/2.2.6]  */
	    execute( curr );
	    return next.proxy;                                       /*  [Promises/A+ 2.2.7, 3.3]  */
	  }
	};

	/*  deliver an action  */
	var deliver = function( curr, state, name, value ){
	  if( curr.state === STATE_PENDING ){
	    curr.state = state;                                      /*  [Promises/A+ 2.1.2.1, 2.1.3.1]  */
	    curr[ name ] = value;                                      /*  [Promises/A+ 2.1.2.2, 2.1.3.2]  */
	    execute( curr );
	  }
	  return curr;
	};

	/*  execute all handlers  */
	var execute = function( curr ){
	  if( curr.state === STATE_FULFILLED )
	    execute_handlers( curr, 'onFulfilled', curr.fulfillValue );
	  else if( curr.state === STATE_REJECTED )
	    execute_handlers( curr, 'onRejected',  curr.rejectReason );
	};

	/*  execute particular set of handlers  */
	var execute_handlers = function( curr, name, value ){
	  /* global setImmediate: true */
	  /* global setTimeout: true */

	  /*  short-circuit processing  */
	  if( curr[ name ].length === 0 )
	    return;

	  /*  iterate over all handlers, exactly once  */
	  var handlers = curr[ name ];
	  curr[ name ] = [];                                             /*  [Promises/A+ 2.2.2.3, 2.2.3.3]  */
	  var func = function(){
	    for( var i = 0; i < handlers.length; i++ )
	      handlers[ i ]( value );                                  /*  [Promises/A+ 2.2.5]  */
	  };

	  /*  execute procedure asynchronously  */                     /*  [Promises/A+ 2.2.4, 3.1]  */
	  if( typeof setImmediate === 'function' )
	    setImmediate( func );
	  else
	    setTimeout( func, 0 );
	};

	/*  generate a resolver function  */
	var resolver = function( cb, next, method ){
	  return function( value ){
	    if( typeof cb !== 'function' )                            /*  [Promises/A+ 2.2.1, 2.2.7.3, 2.2.7.4]  */
	      next[ method ].call( next, value );                      /*  [Promises/A+ 2.2.7.3, 2.2.7.4]  */
	    else {
	      var result;
	      try { result = cb( value ); }                          /*  [Promises/A+ 2.2.2.1, 2.2.3.1, 2.2.5, 3.2]  */
	      catch( e ){
	        next.reject( e );                                  /*  [Promises/A+ 2.2.7.2]  */
	        return;
	      }
	      resolve( next, result );                               /*  [Promises/A+ 2.2.7.1]  */
	    }
	  };
	};

	/*  "Promise Resolution Procedure"  */                           /*  [Promises/A+ 2.3]  */
	var resolve = function( promise, x ){
	  /*  sanity check arguments  */                               /*  [Promises/A+ 2.3.1]  */
	  if( promise === x || promise.proxy === x ){
	    promise.reject( new TypeError( 'cannot resolve promise with itself' ) );
	    return;
	  }

	  /*  surgically check for a "then" method
	    (mainly to just call the "getter" of "then" only once)  */
	  var then;
	  if( (typeof x === 'object' && x !== null) || typeof x === 'function' ){
	    try { then = x.then; }                                   /*  [Promises/A+ 2.3.3.1, 3.5]  */
	    catch( e ){
	      promise.reject( e );                                   /*  [Promises/A+ 2.3.3.2]  */
	      return;
	    }
	  }

	  /*  handle own Thenables    [Promises/A+ 2.3.2]
	    and similar "thenables" [Promises/A+ 2.3.3]  */
	  if( typeof then === 'function' ){
	    var resolved = false;
	    try {
	      /*  call retrieved "then" method */                  /*  [Promises/A+ 2.3.3.3]  */
	      then.call( x,
	        /*  resolvePromise  */                           /*  [Promises/A+ 2.3.3.3.1]  */
	        function( y ){
	          if( resolved ) return; resolved = true;       /*  [Promises/A+ 2.3.3.3.3]  */
	          if( y === x )                                 /*  [Promises/A+ 3.6]  */
	            promise.reject( new TypeError( 'circular thenable chain' ) );
	          else
	            resolve( promise, y );
	        },

	        /*  rejectPromise  */                            /*  [Promises/A+ 2.3.3.3.2]  */
	        function( r ){
	          if( resolved ) return; resolved = true;       /*  [Promises/A+ 2.3.3.3.3]  */
	          promise.reject( r );
	        }
	      );
	    }
	    catch( e ){
	      if( !resolved )                                       /*  [Promises/A+ 2.3.3.3.3]  */
	        promise.reject( e );                               /*  [Promises/A+ 2.3.3.3.4]  */
	    }
	    return;
	  }

	  /*  handle other values  */
	  promise.fulfill( x );                                          /*  [Promises/A+ 2.3.4, 2.3.3.4]  */
	};

	// so we always have Promise.all()
	api.all = function( ps ){
	  return new api(function( resolveAll, rejectAll ){
	    var vals = new Array( ps.length );
	    var doneCount = 0;

	    var fulfill = function( i, val ){
	      vals[ i ] = val;
	      doneCount++;

	      if( doneCount === ps.length ){
	        resolveAll( vals );
	      }
	    };

	    for( var i = 0; i < ps.length; i++ ){
	      (function( i ){
	        var p = ps[i];
	        var isPromise = p != null && p.then != null;

	        if( isPromise ){
	          p.then( function( val ){
	            fulfill( i, val );
	          }, function( err ){
	            rejectAll( err );
	          } );
	        } else {
	          var val = p;
	          fulfill( i, val );
	        }
	      })( i );
	    }

	  } );
	};

	api.resolve = function( val ){
	  return new api(function( resolve, reject ){ resolve( val ); });
	};

	api.reject = function( val ){
	  return new api(function( resolve, reject ){ reject( val ); });
	};

	module.exports = typeof Promise !== 'undefined' ? Promise : api;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14).setImmediate))

/***/ },
/* 102 */
/***/ function(module, exports) {

	'use strict';

	/*!
	Event object based on jQuery events, MIT license

	https://jquery.org/license/
	https://tldrlegal.com/license/mit-license
	https://github.com/jquery/jquery/blob/master/src/event.js
	*/

	var Event = function( src, props ){
	  // Allow instantiation without the 'new' keyword
	  if( !(this instanceof Event) ){
	    return new Event( src, props );
	  }

	  // Event object
	  if( src && src.type ){
	    this.originalEvent = src;
	    this.type = src.type;

	    // Events bubbling up the document may have been marked as prevented
	    // by a handler lower down the tree; reflect the correct value.
	    this.isDefaultPrevented = ( src.defaultPrevented ) ? returnTrue : returnFalse;

	  // Event type
	  } else {
	    this.type = src;
	  }

	  // Put explicitly provided properties onto the event object
	  if( props ){
	    // util.extend( this, props );

	    // more efficient to manually copy fields we use
	    this.type = props.type !== undefined ? props.type : this.type;
	    this.cy = props.cy;
	    this.cyTarget = props.cyTarget;
	    this.cyPosition = props.cyPosition;
	    this.cyRenderedPosition = props.cyRenderedPosition;
	    this.namespace = props.namespace;
	    this.layout = props.layout;
	    this.data = props.data;
	    this.message = props.message;
	  }

	  // Create a timestamp if incoming event doesn't have one
	  this.timeStamp = src && src.timeStamp || Date.now();
	};

	function returnFalse(){
	  return false;
	}

	function returnTrue(){
	  return true;
	}

	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	Event.prototype = {
	  instanceString: function(){
	    return 'event';
	  },

	  preventDefault: function(){
	    this.isDefaultPrevented = returnTrue;

	    var e = this.originalEvent;
	    if( !e ){
	      return;
	    }

	    // if preventDefault exists run it on the original event
	    if( e.preventDefault ){
	      e.preventDefault();
	    }
	  },

	  stopPropagation: function(){
	    this.isPropagationStopped = returnTrue;

	    var e = this.originalEvent;
	    if( !e ){
	      return;
	    }

	    // if stopPropagation exists run it on the original event
	    if( e.stopPropagation ){
	      e.stopPropagation();
	    }
	  },

	  stopImmediatePropagation: function(){
	    this.isImmediatePropagationStopped = returnTrue;
	    this.stopPropagation();
	  },

	  isDefaultPrevented: returnFalse,
	  isPropagationStopped: returnFalse,
	  isImmediatePropagationStopped: returnFalse
	};

	module.exports = Event;


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var is = __webpack_require__( 73 );
	var Promise = __webpack_require__( 101 );

	var Animation = function( target, opts, opts2 ){
	  if( !(this instanceof Animation) ){
	    return new Animation( target, opts, opts2 );
	  }

	  var _p = this._private = util.extend( {
	    duration: 1000
	  }, opts, opts2 );

	  _p.target = target;
	  _p.style = _p.style || _p.css;
	  _p.started = false;
	  _p.playing = false;
	  _p.hooked = false;
	  _p.applying = false;
	  _p.progress = 0;
	  _p.completes = [];
	  _p.frames = [];

	  if( _p.complete && is.fn( _p.complete ) ){
	    _p.completes.push( _p.complete );
	  }

	  // for future timeline/animations impl
	  this.length = 1;
	  this[0] = this;
	};

	var anifn = Animation.prototype;

	util.extend( anifn, {

	  instanceString: function(){ return 'animation'; },

	  hook: function(){
	    var _p = this._private;

	    if( !_p.hooked ){
	      // add to target's animation queue
	      var q;
	      var tAni = _p.target._private.animation;
	      if( _p.queue ){
	        q = tAni.queue;
	      } else {
	        q = tAni.current;
	      }
	      q.push( this );

	      // add to the animation loop pool
	      if( is.elementOrCollection( _p.target ) ){
	        _p.target.cy().addToAnimationPool( _p.target );
	      }

	      _p.hooked = true;
	    }

	    return this;
	  },

	  play: function(){
	    var _p = this._private;

	    // autorewind
	    if( _p.progress === 1 ){
	      _p.progress = 0;
	    }

	    _p.playing = true;
	    _p.started = false; // needs to be started by animation loop
	    _p.stopped = false;

	    this.hook();

	    // the animation loop will start the animation...

	    return this;
	  },

	  playing: function(){
	    return this._private.playing;
	  },

	  apply: function(){
	    var _p = this._private;

	    _p.applying = true;
	    _p.started = false; // needs to be started by animation loop
	    _p.stopped = false;

	    this.hook();

	    // the animation loop will apply the animation at this progress

	    return this;
	  },

	  applying: function(){
	    return this._private.applying;
	  },

	  pause: function(){
	    var _p = this._private;

	    _p.playing = false;
	    _p.started = false;

	    return this;
	  },

	  stop: function(){
	    var _p = this._private;

	    _p.playing = false;
	    _p.started = false;
	    _p.stopped = true; // to be removed from animation queues

	    return this;
	  },

	  rewind: function(){
	    return this.progress( 0 );
	  },

	  fastforward: function(){
	    return this.progress( 1 );
	  },

	  time: function( t ){
	    var _p = this._private;

	    if( t === undefined ){
	      return _p.progress * _p.duration;
	    } else {
	      return this.progress( t / _p.duration );
	    }
	  },

	  progress: function( p ){
	    var _p = this._private;
	    var wasPlaying = _p.playing;

	    if( p === undefined ){
	      return _p.progress;
	    } else {
	      if( wasPlaying ){
	        this.pause();
	      }

	      _p.progress = p;
	      _p.started = false;

	      if( wasPlaying ){
	        this.play();
	      }
	    }

	    return this;
	  },

	  completed: function(){
	    return this._private.progress === 1;
	  },

	  reverse: function(){
	    var _p = this._private;
	    var wasPlaying = _p.playing;

	    if( wasPlaying ){
	      this.pause();
	    }

	    _p.progress = 1 - _p.progress;
	    _p.started = false;

	    var swap = function( a, b ){
	      var _pa = _p[ a ];

	      _p[ a ] = _p[ b ];
	      _p[ b ] = _pa;
	    };

	    swap( 'zoom', 'startZoom' );
	    swap( 'pan', 'startPan' );
	    swap( 'position', 'startPosition' );

	    // swap styles
	    for( var i = 0; i < _p.style.length; i++ ){
	      var prop = _p.style[ i ];
	      var name = prop.name;
	      var startStyleProp = _p.startStyle[ name ];

	      _p.startStyle[ name ] = prop;
	      _p.style[ i ] = startStyleProp;
	    }

	    if( wasPlaying ){
	      this.play();
	    }

	    return this;
	  },

	  promise: function( type ){
	    var _p = this._private;

	    var arr;

	    switch( type ){
	      case 'frame':
	        arr = _p.frames;
	        break;
	      default:
	      case 'complete':
	      case 'completed':
	        arr = _p.completes;
	    }

	    return new Promise( function( resolve, reject ){
	      arr.push( function(){
	        resolve();
	      } );
	    } );
	  }

	} );

	anifn.complete = anifn.completed;

	module.exports = Animation;


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );

	var elesfn = ({
	  classes: function( classes ){
	    classes = classes.match( /\S+/g ) || [];
	    var self = this;
	    var changed = [];
	    var classesMap = {};

	    // fill in classes map
	    for( var i = 0; i < classes.length; i++ ){
	      var cls = classes[ i ];

	      classesMap[ cls ] = true;
	    }

	    // check and update each ele
	    for( var j = 0; j < self.length; j++ ){
	      var ele = self[ j ];
	      var _p = ele._private;
	      var eleClasses = _p.classes;
	      var changedEle = false;

	      // check if ele has all of the passed classes
	      for( var i = 0; i < classes.length; i++ ){
	        var cls = classes[ i ];
	        var eleHasClass = eleClasses[ cls ];

	        if( !eleHasClass ){
	          changedEle = true;
	          break;
	        }
	      }

	      // check if ele has classes outside of those passed
	      if( !changedEle ){
	        var classes = Object.keys( eleClasses );

	        for( var i = 0; i < classes.length; i++ ){
	          var eleCls = classes[i];
	          var eleHasClass = eleClasses[ eleCls ];
	          var specdClass = classesMap[ eleCls ]; // i.e. this class is passed to the function

	          if( eleHasClass && !specdClass ){
	            changedEle = true;
	            break;
	          }
	        }
	      }

	      if( changedEle ){
	        _p.classes = util.copy( classesMap );

	        changed.push( ele );
	      }
	    }

	    // trigger update style on those eles that had class changes
	    if( changed.length > 0 ){
	      this.spawn( changed )
	        .updateStyle()
	        .trigger( 'class' )
	      ;
	    }

	    return self;
	  },

	  addClass: function( classes ){
	    return this.toggleClass( classes, true );
	  },

	  hasClass: function( className ){
	    var ele = this[0];
	    return ( ele != null && ele._private.classes[ className ] ) ? true : false;
	  },

	  toggleClass: function( classesStr, toggle ){
	    var classes = classesStr.match( /\S+/g ) || [];
	    var self = this;
	    var changed = []; // eles who had classes changed

	    for( var i = 0, il = self.length; i < il; i++ ){
	      var ele = self[ i ];
	      var changedEle = false;

	      for( var j = 0; j < classes.length; j++ ){
	        var cls = classes[ j ];
	        var eleClasses = ele._private.classes;
	        var hasClass = eleClasses[ cls ];
	        var shouldAdd = toggle || (toggle === undefined && !hasClass);

	        if( shouldAdd ){
	          eleClasses[ cls ] = true;

	          if( !hasClass && !changedEle ){
	            changed.push( ele );
	            changedEle = true;
	          }
	        } else { // then remove
	          eleClasses[ cls ] = false;

	          if( hasClass && !changedEle ){
	            changed.push( ele );
	            changedEle = true;
	          }
	        }

	      } // for j classes
	    } // for i eles

	    // trigger update style on those eles that had class changes
	    if( changed.length > 0 ){
	      this.spawn( changed )
	        .updateStyle()
	        .trigger( 'class' )
	      ;
	    }

	    return self;
	  },

	  removeClass: function( classes ){
	    return this.toggleClass( classes, false );
	  },

	  flashClass: function( classes, duration ){
	    var self = this;

	    if( duration == null ){
	      duration = 250;
	    } else if( duration === 0 ){
	      return self; // nothing to do really
	    }

	    self.addClass( classes );
	    setTimeout( function(){
	      self.removeClass( classes );
	    }, duration );

	    return self;
	  }
	});

	module.exports = elesfn;


/***/ },
/* 105 */
/***/ function(module, exports) {

	'use strict';

	var elesfn = ({
	  allAre: function( selector ){
	    return this.filter( selector ).length === this.length;
	  },

	  is: function( selector ){
	    return this.filter( selector ).length > 0;
	  },

	  some: function( fn, thisArg ){
	    for( var i = 0; i < this.length; i++ ){
	      var ret = !thisArg ? fn( this[ i ], i, this ) : fn.apply( thisArg, [ this[ i ], i, this ] );

	      if( ret ){
	        return true;
	      }
	    }

	    return false;
	  },

	  every: function( fn, thisArg ){
	    for( var i = 0; i < this.length; i++ ){
	      var ret = !thisArg ? fn( this[ i ], i, this ) : fn.apply( thisArg, [ this[ i ], i, this ] );

	      if( !ret ){
	        return false;
	      }
	    }

	    return true;
	  },

	  same: function( collection ){
	    collection = this.cy().collection( collection );

	    // cheap extra check
	    if( this.length !== collection.length ){
	      return false;
	    }

	    return this.intersect( collection ).length === this.length;
	  },

	  anySame: function( collection ){
	    collection = this.cy().collection( collection );

	    return this.intersect( collection ).length > 0;
	  },

	  allAreNeighbors: function( collection ){
	    collection = this.cy().collection( collection );

	    return this.neighborhood().intersect( collection ).length === collection.length;
	  }
	});

	elesfn.allAreNeighbours = elesfn.allAreNeighbors;

	module.exports = elesfn;


/***/ },
/* 106 */
/***/ function(module, exports) {

	'use strict';

	var elesfn = ({
	  parent: function( selector ){
	    var parents = [];
	    var cy = this._private.cy;

	    for( var i = 0; i < this.length; i++ ){
	      var ele = this[ i ];
	      var parent = cy.getElementById( ele._private.data.parent );

	      if( parent.size() > 0 ){
	        parents.push( parent );
	      }
	    }

	    return this.spawn( parents, { unique: true } ).filter( selector );
	  },

	  parents: function( selector ){
	    var parents = [];

	    var eles = this.parent();
	    while( eles.nonempty() ){
	      for( var i = 0; i < eles.length; i++ ){
	        var ele = eles[ i ];
	        parents.push( ele );
	      }

	      eles = eles.parent();
	    }

	    return this.spawn( parents, { unique: true } ).filter( selector );
	  },

	  commonAncestors: function( selector ){
	    var ancestors;

	    for( var i = 0; i < this.length; i++ ){
	      var ele = this[ i ];
	      var parents = ele.parents();

	      ancestors = ancestors || parents;

	      ancestors = ancestors.intersect( parents ); // current list must be common with current ele parents set
	    }

	    return ancestors.filter( selector );
	  },

	  orphans: function( selector ){
	    return this.stdFilter( function( ele ){
	      return ele.isNode() && ele.parent().empty();
	    } ).filter( selector );
	  },

	  nonorphans: function( selector ){
	    return this.stdFilter( function( ele ){
	      return ele.isNode() && ele.parent().nonempty();
	    } ).filter( selector );
	  },

	  children: function( selector ){
	    var children = [];

	    for( var i = 0; i < this.length; i++ ){
	      var ele = this[ i ];
	      children = children.concat( ele._private.children );
	    }

	    return this.spawn( children, { unique: true } ).filter( selector );
	  },

	  siblings: function( selector ){
	    return this.parent().children().not( this ).filter( selector );
	  },

	  isParent: function(){
	    var ele = this[0];

	    if( ele ){
	      return ele._private.children.length !== 0;
	    }
	  },

	  isChild: function(){
	    var ele = this[0];

	    if( ele ){
	      return ele._private.data.parent !== undefined && ele.parent().length !== 0;
	    }
	  },

	  descendants: function( selector ){
	    var elements = [];

	    function add( eles ){
	      for( var i = 0; i < eles.length; i++ ){
	        var ele = eles[ i ];

	        elements.push( ele );

	        if( ele.children().nonempty() ){
	          add( ele.children() );
	        }
	      }
	    }

	    add( this.children() );

	    return this.spawn( elements, { unique: true } ).filter( selector );
	  }
	});

	// aliases
	elesfn.ancestors = elesfn.parents;

	module.exports = elesfn;


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var define = __webpack_require__( 99 );
	var fn, elesfn;

	fn = elesfn = ({

	  data: define.data( {
	    field: 'data',
	    bindingEvent: 'data',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'data',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true,
	    immutableKeys: {
	      'id': true,
	      'source': true,
	      'target': true,
	      'parent': true
	    },
	    updateStyle: true
	  } ),

	  removeData: define.removeData( {
	    field: 'data',
	    event: 'data',
	    triggerFnName: 'trigger',
	    triggerEvent: true,
	    immutableKeys: {
	      'id': true,
	      'source': true,
	      'target': true,
	      'parent': true
	    },
	    updateStyle: true
	  } ),

	  scratch: define.data( {
	    field: 'scratch',
	    bindingEvent: 'scratch',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'scratch',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true,
	    updateStyle: true
	  } ),

	  removeScratch: define.removeData( {
	    field: 'scratch',
	    event: 'scratch',
	    triggerFnName: 'trigger',
	    triggerEvent: true,
	    updateStyle: true
	  } ),

	  rscratch: define.data( {
	    field: 'rscratch',
	    allowBinding: false,
	    allowSetting: true,
	    settingTriggersEvent: false,
	    allowGetting: true
	  } ),

	  removeRscratch: define.removeData( {
	    field: 'rscratch',
	    triggerEvent: false
	  } ),

	  id: function(){
	    var ele = this[0];

	    if( ele ){
	      return ele._private.data.id;
	    }
	  }

	});

	// aliases
	fn.attr = fn.data;
	fn.removeAttr = fn.removeData;

	module.exports = elesfn;


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );

	var elesfn = {};

	function defineDegreeFunction( callback ){
	  return function( includeLoops ){
	    var self = this;

	    if( includeLoops === undefined ){
	      includeLoops = true;
	    }

	    if( self.length === 0 ){ return; }

	    if( self.isNode() && !self.removed() ){
	      var degree = 0;
	      var node = self[0];
	      var connectedEdges = node._private.edges;

	      for( var i = 0; i < connectedEdges.length; i++ ){
	        var edge = connectedEdges[ i ];

	        if( !includeLoops && edge.isLoop() ){
	          continue;
	        }

	        degree += callback( node, edge );
	      }

	      return degree;
	    } else {
	      return;
	    }
	  };
	}

	util.extend( elesfn, {
	  degree: defineDegreeFunction( function( node, edge ){
	    if( edge.source().same( edge.target() ) ){
	      return 2;
	    } else {
	      return 1;
	    }
	  } ),

	  indegree: defineDegreeFunction( function( node, edge ){
	    if( edge.target().same( node ) ){
	      return 1;
	    } else {
	      return 0;
	    }
	  } ),

	  outdegree: defineDegreeFunction( function( node, edge ){
	    if( edge.source().same( node ) ){
	      return 1;
	    } else {
	      return 0;
	    }
	  } )
	} );

	function defineDegreeBoundsFunction( degreeFn, callback ){
	  return function( includeLoops ){
	    var ret;
	    var nodes = this.nodes();

	    for( var i = 0; i < nodes.length; i++ ){
	      var ele = nodes[ i ];
	      var degree = ele[ degreeFn ]( includeLoops );
	      if( degree !== undefined && (ret === undefined || callback( degree, ret )) ){
	        ret = degree;
	      }
	    }

	    return ret;
	  };
	}

	util.extend( elesfn, {
	  minDegree: defineDegreeBoundsFunction( 'degree', function( degree, min ){
	    return degree < min;
	  } ),

	  maxDegree: defineDegreeBoundsFunction( 'degree', function( degree, max ){
	    return degree > max;
	  } ),

	  minIndegree: defineDegreeBoundsFunction( 'indegree', function( degree, min ){
	    return degree < min;
	  } ),

	  maxIndegree: defineDegreeBoundsFunction( 'indegree', function( degree, max ){
	    return degree > max;
	  } ),

	  minOutdegree: defineDegreeBoundsFunction( 'outdegree', function( degree, min ){
	    return degree < min;
	  } ),

	  maxOutdegree: defineDegreeBoundsFunction( 'outdegree', function( degree, max ){
	    return degree > max;
	  } )
	} );

	util.extend( elesfn, {
	  totalDegree: function( includeLoops ){
	    var total = 0;
	    var nodes = this.nodes();

	    for( var i = 0; i < nodes.length; i++ ){
	      total += nodes[ i ].degree( includeLoops );
	    }

	    return total;
	  }
	} );

	module.exports = elesfn;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var define = __webpack_require__( 99 );
	var is = __webpack_require__( 73 );
	var util = __webpack_require__( 75 );
	var math = __webpack_require__( 76 );
	var fn, elesfn;

	fn = elesfn = ({

	  position: define.data( {
	    field: 'position',
	    bindingEvent: 'position',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'position',
	    settingTriggersEvent: true,
	    triggerFnName: 'rtrigger',
	    allowGetting: true,
	    validKeys: [ 'x', 'y' ],
	    onSet: function( eles ){
	      var updatedEles = eles.updateCompoundBounds();
	      updatedEles.rtrigger( 'position' );
	    },
	    canSet: function( ele ){
	      return !ele.locked() && !ele.isParent();
	    }
	  } ),

	  // position but no notification to renderer
	  silentPosition: define.data( {
	    field: 'position',
	    bindingEvent: 'position',
	    allowBinding: false,
	    allowSetting: true,
	    settingEvent: 'position',
	    settingTriggersEvent: false,
	    triggerFnName: 'trigger',
	    allowGetting: true,
	    validKeys: [ 'x', 'y' ],
	    onSet: function( eles ){
	      eles.updateCompoundBounds();
	    },
	    canSet: function( ele ){
	      return !ele.locked() && !ele.isParent();
	    }
	  } ),

	  positions: function( pos, silent ){
	    if( is.plainObject( pos ) ){
	      this.position( pos );

	    } else if( is.fn( pos ) ){
	      var fn = pos;

	      for( var i = 0; i < this.length; i++ ){
	        var ele = this[ i ];

	        var pos = fn.apply( ele, [ i, ele ] );

	        if( pos && !ele.locked() && !ele.isParent() ){
	          var elePos = ele._private.position;
	          elePos.x = pos.x;
	          elePos.y = pos.y;
	        }
	      }

	      var updatedEles = this.updateCompoundBounds();
	      var toTrigger = updatedEles.length > 0 ? this.add( updatedEles ) : this;

	      if( silent ){
	        toTrigger.trigger( 'position' );
	      } else {
	        toTrigger.rtrigger( 'position' );
	      }
	    }

	    return this; // chaining
	  },

	  silentPositions: function( pos ){
	    return this.positions( pos, true );
	  },

	  // get/set the rendered (i.e. on screen) positon of the element
	  renderedPosition: function( dim, val ){
	    var ele = this[0];
	    var cy = this.cy();
	    var zoom = cy.zoom();
	    var pan = cy.pan();
	    var rpos = is.plainObject( dim ) ? dim : undefined;
	    var setting = rpos !== undefined || ( val !== undefined && is.string( dim ) );

	    if( ele && ele.isNode() ){ // must have an element and must be a node to return position
	      if( setting ){
	        for( var i = 0; i < this.length; i++ ){
	          var ele = this[ i ];

	          if( val !== undefined ){ // set one dimension
	            ele._private.position[ dim ] = ( val - pan[ dim ] ) / zoom;
	          } else if( rpos !== undefined ){ // set whole position
	            ele._private.position = {
	              x: ( rpos.x - pan.x ) / zoom,
	              y: ( rpos.y - pan.y ) / zoom
	            };
	          }
	        }

	        this.rtrigger( 'position' );
	      } else { // getting
	        var pos = ele._private.position;
	        rpos = {
	          x: pos.x * zoom + pan.x,
	          y: pos.y * zoom + pan.y
	        };

	        if( dim === undefined ){ // then return the whole rendered position
	          return rpos;
	        } else { // then return the specified dimension
	          return rpos[ dim ];
	        }
	      }
	    } else if( !setting ){
	      return undefined; // for empty collection case
	    }

	    return this; // chaining
	  },

	  // get/set the position relative to the parent
	  relativePosition: function( dim, val ){
	    var ele = this[0];
	    var cy = this.cy();
	    var ppos = is.plainObject( dim ) ? dim : undefined;
	    var setting = ppos !== undefined || ( val !== undefined && is.string( dim ) );
	    var hasCompoundNodes = cy.hasCompoundNodes();

	    if( ele && ele.isNode() ){ // must have an element and must be a node to return position
	      if( setting ){
	        for( var i = 0; i < this.length; i++ ){
	          var ele = this[ i ];
	          var parent = hasCompoundNodes ? ele.parent() : null;
	          var hasParent = parent && parent.length > 0;
	          var relativeToParent = hasParent;

	          if( hasParent ){
	            parent = parent[0];
	          }

	          var origin = relativeToParent ? parent._private.position : { x: 0, y: 0 };

	          if( val !== undefined ){ // set one dimension
	            ele._private.position[ dim ] = val + origin[ dim ];
	          } else if( ppos !== undefined ){ // set whole position
	            ele._private.position = {
	              x: ppos.x + origin.x,
	              y: ppos.y + origin.y
	            };
	          }
	        }

	        this.rtrigger( 'position' );

	      } else { // getting
	        var pos = ele._private.position;
	        var parent = hasCompoundNodes ? ele.parent() : null;
	        var hasParent = parent && parent.length > 0;
	        var relativeToParent = hasParent;

	        if( hasParent ){
	          parent = parent[0];
	        }

	        var origin = relativeToParent ? parent._private.position : { x: 0, y: 0 };

	        ppos = {
	          x: pos.x - origin.x,
	          y: pos.y - origin.y
	        };

	        if( dim === undefined ){ // then return the whole rendered position
	          return ppos;
	        } else { // then return the specified dimension
	          return ppos[ dim ];
	        }
	      }
	    } else if( !setting ){
	      return undefined; // for empty collection case
	    }

	    return this; // chaining
	  },

	  renderedBoundingBox: function( options ){
	    var bb = this.boundingBox( options );
	    var cy = this.cy();
	    var zoom = cy.zoom();
	    var pan = cy.pan();

	    var x1 = bb.x1 * zoom + pan.x;
	    var x2 = bb.x2 * zoom + pan.x;
	    var y1 = bb.y1 * zoom + pan.y;
	    var y2 = bb.y2 * zoom + pan.y;

	    return {
	      x1: x1,
	      x2: x2,
	      y1: y1,
	      y2: y2,
	      w: x2 - x1,
	      h: y2 - y1
	    };
	  },

	  updateCompoundBounds: function(){
	    var cy = this.cy();

	    // save cycles for non compound graphs or when style disabled
	    if( !cy.styleEnabled() || !cy.hasCompoundNodes() ){ return cy.collection(); }

	    var updated = [];

	    function update( parent ){
	      if( !parent.isParent() ){ return; }

	      var _p = parent._private;
	      var children = parent.children();
	      var includeLabels = parent.pstyle( 'compound-sizing-wrt-labels' ).value === 'include';
	      var bb = children.boundingBox( {
	        includeLabels: includeLabels,
	        includeShadows: false,
	        includeOverlays: false,

	        // updating the compound bounds happens outside of the regular
	        // cache cycle (i.e. before fired events)
	        useCache: false
	      } );
	      var padding = {
	        top: parent.pstyle( 'padding-top' ).pfValue,
	        bottom: parent.pstyle( 'padding-bottom' ).pfValue,
	        left: parent.pstyle( 'padding-left' ).pfValue,
	        right: parent.pstyle( 'padding-right' ).pfValue
	      };
	      var pos = _p.position;
	      var didUpdate = false;

	      if( parent.pstyle( 'width' ).value === 'auto' ){
	        _p.autoWidth = bb.w;
	        pos.x = (bb.x1 + bb.x2 - padding.left + padding.right) / 2;
	        didUpdate = true;
	      }

	      if( parent.pstyle( 'height' ).value === 'auto' ){
	        _p.autoHeight = bb.h;
	        pos.y = (bb.y1 + bb.y2 - padding.top + padding.bottom) / 2;
	        didUpdate = true;
	      }

	      if( didUpdate ){
	        updated.push( parent );
	      }
	    }

	    // go up, level by level
	    var eles = this;
	    while( eles.nonempty() ){

	      // update each parent node in this level
	      for( var i = 0; i < eles.length; i++ ){
	        var ele = eles[ i ];

	        update( ele );
	      }

	      // next level
	      eles = eles.parent();
	    }

	    // return changed
	    return this.spawn( updated );
	  }
	});

	var noninf = function( x ){
	  if( x === Infinity || x === -Infinity ){
	    return 0;
	  }

	  return x;
	};

	var updateBounds = function( b, x1, y1, x2, y2 ){
	  // don't update with zero area boxes
	  if( x2 - x1 === 0 || y2 - y1 === 0 ){ return; }

	  b.x1 = x1 < b.x1 ? x1 : b.x1;
	  b.x2 = x2 > b.x2 ? x2 : b.x2;
	  b.y1 = y1 < b.y1 ? y1 : b.y1;
	  b.y2 = y2 > b.y2 ? y2 : b.y2;
	};

	var updateBoundsFromBox = function( b, b2 ){
	  return updateBounds( b, b2.x1, b2.y1, b2.x2, b2.y2 );
	};

	var prefixedProperty = function( obj, field, prefix ){
	  return util.getPrefixedProperty( obj, field, prefix );
	};

	var updateBoundsFromArrow = function( bounds, ele, prefix, options ){
	  var _p = ele._private;
	  var rstyle = _p.rstyle;
	  var halfArW = rstyle.arrowWidth / 2;
	  var arrowType = ele.pstyle( prefix + '-arrow-shape' ).value;
	  var x;
	  var y;

	  if( arrowType !== 'none' ){
	    if( prefix === 'source' ){
	      x = rstyle.srcX;
	      y = rstyle.srcY;
	    } else if( prefix === 'target' ){
	      x = rstyle.tgtX;
	      y = rstyle.tgtY;
	    } else {
	      x = rstyle.midX;
	      y = rstyle.midY;
	    }

	    updateBounds( bounds, x - halfArW, y - halfArW, x + halfArW, y + halfArW );
	  }
	};

	var updateBoundsFromLabel = function( bounds, ele, prefix, options ){
	  var prefixDash;

	  if( prefix ){
	    prefixDash = prefix + '-';
	  } else {
	    prefixDash = '';
	  }

	  var _p = ele._private;
	  var rstyle = _p.rstyle;
	  var label = ele.pstyle( prefixDash + 'label' ).strValue;

	  if( label ){
	    var halign = ele.pstyle( 'text-halign' );
	    var valign = ele.pstyle( 'text-valign' );
	    var labelWidth = prefixedProperty( rstyle, 'labelWidth', prefix );
	    var labelHeight = prefixedProperty( rstyle, 'labelHeight', prefix );
	    var labelX = prefixedProperty( rstyle, 'labelX', prefix );
	    var labelY = prefixedProperty( rstyle, 'labelY', prefix );
	    var marginX = ele.pstyle( prefixDash + 'text-margin-x' ).pfValue;
	    var marginY = ele.pstyle( prefixDash + 'text-margin-y' ).pfValue;
	    var isEdge = ele.isEdge();
	    var rotation = ele.pstyle( prefixDash + 'text-rotation' );
	    var shadowR = ele.pstyle( 'text-shadow-blur' ).pfValue / 2;
	    var shadowX = ele.pstyle( 'text-shadow-offset-x' ).pfValue;
	    var shadowY = ele.pstyle( 'text-shadow-offset-y' ).pfValue;
	    var shadowOpacity = ele.pstyle( 'text-shadow-opacity' ).value;
	    var outlineWidth = ele.pstyle( 'text-outline-width' ).pfValue;

	    var lh = labelHeight;
	    var lw = labelWidth;
	    var lx1, lx2, ly1, ly2;

	    if( isEdge ){
	      lx1 = labelX - lw / 2;
	      lx2 = labelX + lw / 2;
	      ly1 = labelY - lh / 2;
	      ly2 = labelY + lh / 2;
	    } else {
	      switch( halign.value ){
	        case 'left':
	          lx1 = labelX - lw;
	          lx2 = labelX;
	          break;

	        case 'center':
	          lx1 = labelX - lw / 2;
	          lx2 = labelX + lw / 2;
	          break;

	        case 'right':
	          lx1 = labelX;
	          lx2 = labelX + lw;
	          break;
	      }

	      switch( valign.value ){
	        case 'top':
	          ly1 = labelY - lh;
	          ly2 = labelY;
	          break;

	        case 'center':
	          ly1 = labelY - lh / 2;
	          ly2 = labelY + lh / 2;
	          break;

	        case 'bottom':
	          ly1 = labelY;
	          ly2 = labelY + lh;
	          break;
	      }
	    }

	    var isAutorotate = ( isEdge && rotation.strValue === 'autorotate' );
	    var isPfValue = ( rotation.pfValue != null && rotation.pfValue !== 0 );

	    if( isAutorotate || isPfValue ){
	      var theta = isAutorotate ? prefixedProperty( _p.rstyle, 'labelAngle', prefix ) : rotation.pfValue;
	      var cos = Math.cos( theta );
	      var sin = Math.sin( theta );

	      var rotate = function( x, y ){
	        x = x - labelX;
	        y = y - labelY;

	        return {
	          x: x * cos - y * sin + labelX,
	          y: x * sin + y * cos + labelY
	        };
	      };

	      var px1y1 = rotate( lx1, ly1 );
	      var px1y2 = rotate( lx1, ly2 );
	      var px2y1 = rotate( lx2, ly1 );
	      var px2y2 = rotate( lx2, ly2 );

	      lx1 = Math.min( px1y1.x, px1y2.x, px2y1.x, px2y2.x );
	      lx2 = Math.max( px1y1.x, px1y2.x, px2y1.x, px2y2.x );
	      ly1 = Math.min( px1y1.y, px1y2.y, px2y1.y, px2y2.y );
	      ly2 = Math.max( px1y1.y, px1y2.y, px2y1.y, px2y2.y );
	    }

	    lx1 += marginX - outlineWidth;
	    lx2 += marginX + outlineWidth;
	    ly1 += marginY - outlineWidth;
	    ly2 += marginY + outlineWidth;

	    updateBounds( bounds, lx1, ly1, lx2, ly2 );

	    if( options.includeShadows && shadowOpacity > 0 ){
	      lx1 += - shadowR + shadowX;
	      lx2 += + shadowR + shadowX;
	      ly1 += - shadowR + shadowY;
	      ly2 += + shadowR + shadowY;

	      updateBounds( bounds, lx1, ly1, lx2, ly2 );
	    }
	  }

	  return bounds;
	};

	// get the bounding box of the elements (in raw model position)
	var boundingBoxImpl = function( ele, options ){
	  var cy = ele._private.cy;
	  var cy_p = cy._private;
	  var styleEnabled = cy_p.styleEnabled;

	  var bounds = {
	    x1: Infinity,
	    y1: Infinity,
	    x2: -Infinity,
	    y2: -Infinity
	  };

	  var _p = ele._private;
	  var display = styleEnabled ? ele.pstyle( 'display' ).value : 'element';
	  var isNode = ele.isNode();
	  var isEdge = ele.isEdge();
	  var ex1, ex2, ey1, ey2, x, y;
	  var displayed = display !== 'none';

	  if( displayed ){
	    var overlayOpacity = 0;
	    var overlayPadding = 0;

	    if( styleEnabled && options.includeOverlays ){
	      overlayOpacity = ele.pstyle( 'overlay-opacity' ).value;

	      if( overlayOpacity !== 0 ){
	        overlayPadding = ele.pstyle( 'overlay-padding' ).value;
	      }
	    }

	    var w = 0;
	    var wHalf = 0;

	    if( styleEnabled ){
	      w = ele.pstyle( 'width' ).pfValue;
	      wHalf = w / 2;
	    }

	    if( isNode && options.includeNodes ){
	      var pos = _p.position;
	      x = pos.x;
	      y = pos.y;
	      var w = ele.outerWidth();
	      var halfW = w / 2;
	      var h = ele.outerHeight();
	      var halfH = h / 2;

	      // handle node dimensions
	      /////////////////////////

	      ex1 = x - halfW - overlayPadding;
	      ex2 = x + halfW + overlayPadding;
	      ey1 = y - halfH - overlayPadding;
	      ey2 = y + halfH + overlayPadding;

	      updateBounds( bounds, ex1, ey1, ex2, ey2 );

	    } else if( isEdge && options.includeEdges ){
	      var rstyle = _p.rstyle || {};

	      // handle edge dimensions (rough box estimate)
	      //////////////////////////////////////////////
	      if( styleEnabled ){
	        ex1 = Math.min( rstyle.srcX, rstyle.midX, rstyle.tgtX );
	        ex2 = Math.max( rstyle.srcX, rstyle.midX, rstyle.tgtX );
	        ey1 = Math.min( rstyle.srcY, rstyle.midY, rstyle.tgtY );
	        ey2 = Math.max( rstyle.srcY, rstyle.midY, rstyle.tgtY );

	        // take into account edge width
	        ex1 -= wHalf;
	        ex2 += wHalf;
	        ey1 -= wHalf;
	        ey2 += wHalf;

	        updateBounds( bounds, ex1, ey1, ex2, ey2 );
	      }

	      // precise haystacks
	      ////////////////////
	      if( styleEnabled && ele.pstyle( 'curve-style' ).strValue === 'haystack' ){
	        var hpts = rstyle.haystackPts;

	        ex1 = hpts[0].x;
	        ey1 = hpts[0].y;
	        ex2 = hpts[1].x;
	        ey2 = hpts[1].y;

	        if( ex1 > ex2 ){
	          var temp = ex1;
	          ex1 = ex2;
	          ex2 = temp;
	        }

	        if( ey1 > ey2 ){
	          var temp = ey1;
	          ey1 = ey2;
	          ey2 = temp;
	        }

	        updateBounds( bounds, ex1 - wHalf, ey1 - wHalf, ex2 + wHalf, ey2 + wHalf );

	      // handle points along edge
	      ///////////////////////////
	      } else {
	        var pts = rstyle.bezierPts || rstyle.linePts || [];

	        for( var j = 0; j < pts.length; j++ ){
	          var pt = pts[ j ];

	          ex1 = pt.x - wHalf;
	          ex2 = pt.x + wHalf;
	          ey1 = pt.y - wHalf;
	          ey2 = pt.y + wHalf;

	          updateBounds( bounds, ex1, ey1, ex2, ey2 );
	        }

	        // fallback on source and target positions
	        //////////////////////////////////////////
	        if( pts.length === 0 ){
	          var n1 = _p.source;
	          var n1_p = n1._private;
	          var n1pos = n1_p.position;

	          var n2 = _p.target;
	          var n2_p = n2._private;
	          var n2pos = n2_p.position;

	          ex1 = n1pos.x;
	          ex2 = n2pos.x;
	          ey1 = n1pos.y;
	          ey2 = n2pos.y;

	          if( ex1 > ex2 ){
	            var temp = ex1;
	            ex1 = ex2;
	            ex2 = temp;
	          }

	          if( ey1 > ey2 ){
	            var temp = ey1;
	            ey1 = ey2;
	            ey2 = temp;
	          }

	          // take into account edge width
	          ex1 -= wHalf;
	          ex2 += wHalf;
	          ey1 -= wHalf;
	          ey2 += wHalf;

	          updateBounds( bounds, ex1, ey1, ex2, ey2 );
	        }
	      }

	    } // edges

	    // shadow and overlay
	    /////////////////////

	    if( styleEnabled ){

	      ex1 = bounds.x1;
	      ex2 = bounds.x2;
	      ey1 = bounds.y1;
	      ey2 = bounds.y2;

	      if( options.includeShadows && ele.pstyle('shadow-opacity').value > 0 ){
	        var r = ele.pstyle('shadow-blur').pfValue / 2;
	        var ox = ele.pstyle('shadow-offset-x').pfValue;
	        var oy = ele.pstyle('shadow-offset-y').pfValue;

	        updateBounds( bounds, ex1 - r + ox, ey1 - r + oy, ex2 + r + ox, ey2 + r + oy );
	      }

	      updateBounds( bounds, ex1 - overlayPadding, ey1 - overlayPadding, ex2 + overlayPadding, ey2 + overlayPadding );
	    }

	    // handle edge arrow size
	    /////////////////////////

	    if( styleEnabled && options.includeEdges && isEdge ){
	      updateBoundsFromArrow( bounds, ele, 'mid-source', options );
	      updateBoundsFromArrow( bounds, ele, 'mid-target', options );
	      updateBoundsFromArrow( bounds, ele, 'source', options );
	      updateBoundsFromArrow( bounds, ele, 'target', options );
	    }

	    // handle label dimensions
	    //////////////////////////

	    if( styleEnabled && options.includeLabels ){
	      updateBoundsFromLabel( bounds, ele, null, options );

	      if( isEdge ){
	        updateBoundsFromLabel( bounds, ele, 'source', options );
	        updateBoundsFromLabel( bounds, ele, 'target', options );
	      }
	    } // style enabled for labels
	  } // if displayed

	  bounds.x1 = noninf( bounds.x1 );
	  bounds.y1 = noninf( bounds.y1 );
	  bounds.x2 = noninf( bounds.x2 );
	  bounds.y2 = noninf( bounds.y2 );
	  bounds.w = noninf( bounds.x2 - bounds.x1 );
	  bounds.h = noninf( bounds.y2 - bounds.y1 );

	  // expand bounds by 1 because antialiasing can increase the visual/effective size by 1 on all sides
	  if( bounds.w > 0 && bounds.h > 0 && displayed ){
	    math.expandBoundingBox( bounds, 1 );
	  }

	  return bounds;
	};

	var tf = function( val ){
	  if( val ){
	    return 't';
	  } else {
	    return 'f';
	  }
	};

	var getKey = function( opts ){
	  var key = '';

	  key += tf( opts.incudeNodes );
	  key += tf( opts.includeEdges );
	  key += tf( opts.includeLabels );
	  key += tf( opts.includeShadows );
	  key += tf( opts.includeOverlays );

	  return key;
	};

	var cachedBoundingBoxImpl = function( ele, opts ){
	  var _p = ele._private;
	  var bb;
	  var headless = ele.cy().headless();
	  var key = opts === defBbOpts ? defBbOptsKey : getKey( opts );

	  if( !opts.useCache || headless || !_p.bbCache || !_p.bbCache[key] ){
	    bb = boundingBoxImpl( ele, opts );

	    if( !headless ){
	      _p.bbCache = _p.bbCache || {};
	      _p.bbCache[key] = bb;
	    }
	  } else {
	    bb = _p.bbCache[key];
	  }

	  return bb;
	};

	var defBbOpts = {
	  includeNodes: true,
	  includeEdges: true,
	  includeLabels: true,
	  includeShadows: true,
	  includeOverlays: true,
	  useCache: true
	};

	var defBbOptsKey = getKey( defBbOpts );

	elesfn.boundingBox = function( options ){
	  // the main usecase is ele.boundingBox() for a single element with no/def options
	  // specified s.t. the cache is used, so check for this case to make it faster by
	  // avoiding the overhead of the rest of the function
	  if( this.length === 1 && this[0]._private.bbCache && (options === undefined || options.useCache === undefined || options.useCache === true) ){
	    if( options === undefined ){
	      options = defBbOpts;
	    }

	    return cachedBoundingBoxImpl( this[0], options );
	  }

	  var bounds = {
	    x1: Infinity,
	    y1: Infinity,
	    x2: -Infinity,
	    y2: -Infinity
	  };

	  options = options || util.staticEmptyObject();

	  var opts = {
	    includeNodes: util.default( options.includeNodes, defBbOpts.includeNodes ),
	    includeEdges: util.default( options.includeEdges, defBbOpts.includeEdges ),
	    includeLabels: util.default( options.includeLabels, defBbOpts.includeLabels ),
	    includeShadows: util.default( options.includeShadows, defBbOpts.includeShadows ),
	    includeOverlays: util.default( options.includeOverlays, defBbOpts.includeOverlays ),
	    useCache: util.default( options.useCache, defBbOpts.useCache )
	  };

	  var eles = this;
	  var cy = eles.cy();
	  var renderer = eles.cy().renderer();
	  var styleEnabled = cy.styleEnabled();

	  if( styleEnabled ){
	    renderer.recalculateRenderedStyle( eles, opts.useCache );
	  }

	  for( var i = 0; i < eles.length; i++ ){
	    var ele = eles[i];

	    if( styleEnabled && ele.isEdge() && ele.pstyle('curve-style').strValue === 'bezier' ){
	      renderer.recalculateRenderedStyle( ele.parallelEdges(), opts.useCache ); // n.b. ele.parallelEdges() single is cached
	    }

	    updateBoundsFromBox( bounds, cachedBoundingBoxImpl( ele, opts ) );
	  }

	  bounds.x1 = noninf( bounds.x1 );
	  bounds.y1 = noninf( bounds.y1 );
	  bounds.x2 = noninf( bounds.x2 );
	  bounds.y2 = noninf( bounds.y2 );
	  bounds.w = noninf( bounds.x2 - bounds.x1 );
	  bounds.h = noninf( bounds.y2 - bounds.y1 );

	  return bounds;
	};

	var defineDimFns = function( opts ){
	  opts.uppercaseName = util.capitalize( opts.name );
	  opts.autoName = 'auto' + opts.uppercaseName;
	  opts.labelName = 'label' + opts.uppercaseName;
	  opts.outerName = 'outer' + opts.uppercaseName;
	  opts.uppercaseOuterName = util.capitalize( opts.outerName );

	  fn[ opts.name ] = function dimImpl(){
	    var ele = this[0];
	    var _p = ele._private;
	    var cy = _p.cy;
	    var styleEnabled = cy._private.styleEnabled;

	    if( ele ){
	      if( styleEnabled ){
	        var d = ele.pstyle( opts.name );

	        switch( d.strValue ){
	          case 'auto':
	            return _p[ opts.autoName ] || 0;
	          case 'label':
	            return _p.rstyle[ opts.labelName ] || 0;
	          default:
	            return d.pfValue;
	        }
	      } else {
	        return 1;
	      }
	    }
	  };

	  fn[ 'outer' + opts.uppercaseName ] = function outerDimImpl(){
	    var ele = this[0];
	    var _p = ele._private;
	    var cy = _p.cy;
	    var styleEnabled = cy._private.styleEnabled;

	    if( ele ){
	      if( styleEnabled ){
	        var dim = ele[ opts.name ]();
	        var border = ele.pstyle( 'border-width' ).pfValue;
	        var padding = ele.pstyle( opts.paddings[0] ).pfValue + ele.pstyle( opts.paddings[1] ).pfValue;

	        return dim + border + padding;
	      } else {
	        return 1;
	      }
	    }
	  };

	  fn[ 'rendered' + opts.uppercaseName ] = function renderedDimImpl(){
	    var ele = this[0];

	    if( ele ){
	      var d = ele[ opts.name ]();
	      return d * this.cy().zoom();
	    }
	  };

	  fn[ 'rendered' + opts.uppercaseOuterName ] = function renderedOuterDimImpl(){
	    var ele = this[0];

	    if( ele ){
	      var od = ele[ opts.outerName ]();
	      return od * this.cy().zoom();
	    }
	  };
	};

	defineDimFns( {
	  name: 'width',
	  paddings: [ 'padding-left', 'padding-right' ]
	} );

	defineDimFns( {
	  name: 'height',
	  paddings: [ 'padding-top', 'padding-bottom' ]
	} );

	// aliases
	fn.modelPosition = fn.point = fn.position;
	fn.modelPositions = fn.points = fn.positions;
	fn.renderedPoint = fn.renderedPosition;
	fn.relativePoint = fn.relativePosition;
	fn.boundingbox = fn.boundingBox;
	fn.renderedBoundingbox = fn.renderedBoundingBox;

	module.exports = elesfn;


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var define = __webpack_require__( 99 );

	var elesfn = ({
	  on: define.on(), // .on( events [, selector] [, data], handler)
	  one: define.on( { unbindSelfOnTrigger: true } ),
	  once: define.on( { unbindAllBindersOnTrigger: true } ),
	  off: define.off(), // .off( events [, selector] [, handler] )
	  trigger: define.trigger(), // .trigger( events [, extraParams] )

	  rtrigger: function( event, extraParams ){ // for internal use only
	    if( this.length === 0 ){ return; } // empty collections don't need to notify anything

	    // notify renderer
	    this.cy().notify( {
	      type: event,
	      eles: this
	    } );

	    this.trigger( event, extraParams );
	    return this;
	  }
	});

	// aliases:
	define.eventAliasesOn( elesfn );

	module.exports = elesfn;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );
	var Selector = __webpack_require__( 100 );

	var elesfn = ({
	  nodes: function( selector ){
	    return this.filter( function( i, element ){
	      return element.isNode();
	    } ).filter( selector );
	  },

	  edges: function( selector ){
	    return this.filter( function( i, element ){
	      return element.isEdge();
	    } ).filter( selector );
	  },

	  filter: function( filter ){
	    if( filter === undefined ){ // check this first b/c it's the most common/performant case
	      return this;
	    } else if( is.string( filter ) || is.elementOrCollection( filter ) ){
	      return Selector( filter ).filter( this );
	    } else if( is.fn( filter ) ){
	      var elements = [];

	      for( var i = 0; i < this.length; i++ ){
	        var ele = this[ i ];

	        if( filter.apply( ele, [ i, ele ] ) ){
	          elements.push( ele );
	        }
	      }

	      return this.spawn( elements );
	    }

	    return this.spawn(); // if not handled by above, give 'em an empty collection
	  },

	  not: function( toRemove ){
	    if( !toRemove ){
	      return this;
	    } else {

	      if( is.string( toRemove ) ){
	        toRemove = this.filter( toRemove );
	      }

	      var elements = [];

	      for( var i = 0; i < this.length; i++ ){
	        var element = this[ i ];

	        var remove = toRemove._private.ids[ element.id() ];
	        if( !remove ){
	          elements.push( element );
	        }
	      }

	      return this.spawn( elements );
	    }

	  },

	  absoluteComplement: function(){
	    var cy = this._private.cy;

	    return cy.mutableElements().not( this );
	  },

	  intersect: function( other ){
	    // if a selector is specified, then filter by it instead
	    if( is.string( other ) ){
	      var selector = other;
	      return this.filter( selector );
	    }

	    var elements = [];
	    var col1 = this;
	    var col2 = other;
	    var col1Smaller = this.length < other.length;
	    // var ids1 = col1Smaller ? col1._private.ids : col2._private.ids;
	    var ids2 = col1Smaller ? col2._private.ids : col1._private.ids;
	    var col = col1Smaller ? col1 : col2;

	    for( var i = 0; i < col.length; i++ ){
	      var id = col[ i ]._private.data.id;
	      var ele = ids2[ id ];

	      if( ele ){
	        elements.push( ele );
	      }
	    }

	    return this.spawn( elements );
	  },

	  xor: function( other ){
	    var cy = this._private.cy;

	    if( is.string( other ) ){
	      other = cy.$( other );
	    }

	    var elements = [];
	    var col1 = this;
	    var col2 = other;

	    var add = function( col, other ){

	      for( var i = 0; i < col.length; i++ ){
	        var ele = col[ i ];
	        var id = ele._private.data.id;
	        var inOther = other._private.ids[ id ];

	        if( !inOther ){
	          elements.push( ele );
	        }
	      }

	    };

	    add( col1, col2 );
	    add( col2, col1 );

	    return this.spawn( elements );
	  },

	  diff: function( other ){
	    var cy = this._private.cy;

	    if( is.string( other ) ){
	      other = cy.$( other );
	    }

	    var left = [];
	    var right = [];
	    var both = [];
	    var col1 = this;
	    var col2 = other;

	    var add = function( col, other, retEles ){

	      for( var i = 0; i < col.length; i++ ){
	        var ele = col[ i ];
	        var id = ele._private.data.id;
	        var inOther = other._private.ids[ id ];

	        if( inOther ){
	          both.push( ele );
	        } else {
	          retEles.push( ele );
	        }
	      }

	    };

	    add( col1, col2, left );
	    add( col2, col1, right );

	    return {
	      left: this.spawn( left, { unique: true } ),
	      right: this.spawn( right, { unique: true } ),
	      both: this.spawn( both, { unique: true } )
	    };
	  },

	  add: function( toAdd ){
	    var cy = this._private.cy;

	    if( !toAdd ){
	      return this;
	    }

	    if( is.string( toAdd ) ){
	      var selector = toAdd;
	      toAdd = cy.mutableElements().filter( selector );
	    }

	    var elements = [];

	    for( var i = 0; i < this.length; i++ ){
	      elements.push( this[ i ] );
	    }

	    for( var i = 0; i < toAdd.length; i++ ){

	      var add = !this._private.ids[ toAdd[ i ].id() ];
	      if( add ){
	        elements.push( toAdd[ i ] );
	      }
	    }

	    return this.spawn( elements );
	  },

	  // in place merge on calling collection
	  merge: function( toAdd ){
	    var _p = this._private;
	    var cy = _p.cy;

	    if( !toAdd ){
	      return this;
	    }

	    if( toAdd && is.string( toAdd ) ){
	      var selector = toAdd;
	      toAdd = cy.mutableElements().filter( selector );
	    }

	    for( var i = 0; i < toAdd.length; i++ ){
	      var toAddEle = toAdd[ i ];
	      var id = toAddEle._private.data.id;
	      var add = !_p.ids[ id ];

	      if( add ){
	        var index = this.length++;

	        this[ index ] = toAddEle;
	        _p.ids[ id ] = toAddEle;
	        _p.indexes[ id ] = index;
	      } else { // replace
	        var index = _p.indexes[ id ];

	        this[ index ] = toAddEle;
	        _p.ids[ id ] = toAddEle;
	      }
	    }

	    return this; // chaining
	  },

	  // remove single ele in place in calling collection
	  unmergeOne: function( ele ){
	    ele = ele[0];

	    var _p = this._private;
	    var id = ele._private.data.id;
	    var i = _p.indexes[ id ];

	    if( i == null ){
	      return this; // no need to remove
	    }

	    // remove ele
	    this[ i ] = undefined;
	    _p.ids[ id ] = undefined;
	    _p.indexes[ id ] = undefined;

	    var unmergedLastEle = i === this.length - 1;

	    // replace empty spot with last ele in collection
	    if( this.length > 1 && !unmergedLastEle ){
	      var lastEleI = this.length - 1;
	      var lastEle = this[ lastEleI ];
	      var lastEleId = lastEle._private.data.id;

	      this[ lastEleI ] = undefined;
	      this[ i ] = lastEle;
	      _p.indexes[ lastEleId ] = i;
	    }

	    // the collection is now 1 ele smaller
	    this.length--;

	    return this;
	  },

	  // remove eles in place on calling collection
	  unmerge: function( toRemove ){
	    var cy = this._private.cy;

	    if( !toRemove ){
	      return this;
	    }

	    if( toRemove && is.string( toRemove ) ){
	      var selector = toRemove;
	      toRemove = cy.mutableElements().filter( selector );
	    }

	    for( var i = 0; i < toRemove.length; i++ ){
	      this.unmergeOne( toRemove[ i ] );
	    }

	    return this; // chaining
	  },

	  map: function( mapFn, thisArg ){
	    var arr = [];
	    var eles = this;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[ i ];
	      var ret = thisArg ? mapFn.apply( thisArg, [ ele, i, eles ] ) : mapFn( ele, i, eles );

	      arr.push( ret );
	    }

	    return arr;
	  },

	  stdFilter: function( fn, thisArg ){
	    var filterEles = [];
	    var eles = this;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[ i ];
	      var include = thisArg ? fn.apply( thisArg, [ ele, i, eles ] ) : fn( ele, i, eles );

	      if( include ){
	        filterEles.push( ele );
	      }
	    }

	    return this.spawn( filterEles );
	  },

	  max: function( valFn, thisArg ){
	    var max = -Infinity;
	    var maxEle;
	    var eles = this;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[ i ];
	      var val = thisArg ? valFn.apply( thisArg, [ ele, i, eles ] ) : valFn( ele, i, eles );

	      if( val > max ){
	        max = val;
	        maxEle = ele;
	      }
	    }

	    return {
	      value: max,
	      ele: maxEle
	    };
	  },

	  min: function( valFn, thisArg ){
	    var min = Infinity;
	    var minEle;
	    var eles = this;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[ i ];
	      var val = thisArg ? valFn.apply( thisArg, [ ele, i, eles ] ) : valFn( ele, i, eles );

	      if( val < min ){
	        min = val;
	        minEle = ele;
	      }
	    }

	    return {
	      value: min,
	      ele: minEle
	    };
	  }
	});

	// aliases
	var fn = elesfn;
	fn[ 'u' ] = fn[ '|' ] = fn[ '+' ] = fn.union = fn.or = fn.add;
	fn[ '\\' ] = fn[ '!' ] = fn[ '-' ] = fn.difference = fn.relativeComplement = fn.subtract = fn.not;
	fn[ 'n' ] = fn[ '&' ] = fn[ '.' ] = fn.and = fn.intersection = fn.intersect;
	fn[ '^' ] = fn[ '(+)' ] = fn[ '(-)' ] = fn.symmetricDifference = fn.symdiff = fn.xor;
	fn.fnFilter = fn.filterFn = fn.stdFilter;
	fn.complement = fn.abscomp = fn.absoluteComplement;

	module.exports = elesfn;


/***/ },
/* 112 */
/***/ function(module, exports) {

	'use strict';

	var elesfn = ({
	  isNode: function(){
	    return this.group() === 'nodes';
	  },

	  isEdge: function(){
	    return this.group() === 'edges';
	  },

	  isLoop: function(){
	    return this.isEdge() && this.source().id() === this.target().id();
	  },

	  isSimple: function(){
	    return this.isEdge() && this.source().id() !== this.target().id();
	  },

	  group: function(){
	    var ele = this[0];

	    if( ele ){
	      return ele._private.group;
	    }
	  }
	});


	module.exports = elesfn;


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );
	var zIndexSort = __webpack_require__( 114 );

	var elesfn = ({
	  each: function( fn ){
	    if( is.fn( fn ) ){
	      for( var i = 0; i < this.length; i++ ){
	        var ele = this[ i ];
	        var ret = fn.apply( ele, [ i, ele ] );

	        if( ret === false ){ break; } // exit each early on return false
	      }
	    }
	    return this;
	  },

	  forEach: function( fn, thisArg ){
	    if( is.fn( fn ) ){

	      for( var i = 0; i < this.length; i++ ){
	        var ele = this[ i ];
	        var ret = thisArg ? fn.apply( thisArg, [ ele, i, this ] ) : fn( ele, i, this );

	        if( ret === false ){ break; } // exit each early on return false
	      }
	    }

	    return this;
	  },

	  toArray: function(){
	    var array = [];

	    for( var i = 0; i < this.length; i++ ){
	      array.push( this[ i ] );
	    }

	    return array;
	  },

	  slice: function( start, end ){
	    var array = [];
	    var thisSize = this.length;

	    if( end == null ){
	      end = thisSize;
	    }

	    if( start == null ){
	      start = 0;
	    }

	    if( start < 0 ){
	      start = thisSize + start;
	    }

	    if( end < 0 ){
	      end = thisSize + end;
	    }

	    for( var i = start; i >= 0 && i < end && i < thisSize; i++ ){
	      array.push( this[ i ] );
	    }

	    return this.spawn( array );
	  },

	  size: function(){
	    return this.length;
	  },

	  eq: function( i ){
	    return this[ i ] || this.spawn();
	  },

	  first: function(){
	    return this[0] || this.spawn();
	  },

	  last: function(){
	    return this[ this.length - 1 ] || this.spawn();
	  },

	  empty: function(){
	    return this.length === 0;
	  },

	  nonempty: function(){
	    return !this.empty();
	  },

	  sort: function( sortFn ){
	    if( !is.fn( sortFn ) ){
	      return this;
	    }

	    var sorted = this.toArray().sort( sortFn );

	    return this.spawn( sorted );
	  },

	  sortByZIndex: function(){
	    return this.sort( zIndexSort );
	  },

	  zDepth: function(){
	    var ele = this[0];
	    if( !ele ){ return undefined; }

	    // var cy = ele.cy();
	    var _p = ele._private;
	    var group = _p.group;

	    if( group === 'nodes' ){
	      var depth = _p.data.parent ? ele.parents().size() : 0;

	      if( !ele.isParent() ){
	        return Number.MAX_VALUE; // childless nodes always on top
	      }

	      return depth;
	    } else {
	      var src = _p.source;
	      var tgt = _p.target;
	      var srcDepth = src.zDepth();
	      var tgtDepth = tgt.zDepth();

	      return Math.max( srcDepth, tgtDepth, 0 ); // depth of deepest parent
	    }
	  }
	});

	module.exports = elesfn;


/***/ },
/* 114 */
/***/ function(module, exports) {

	'use strict';

	var zIndexSort = function( a, b ){
	  var cy = a.cy();
	  var zDiff = a.pstyle( 'z-index' ).value - b.pstyle( 'z-index' ).value;
	  var depthA = 0;
	  var depthB = 0;
	  var hasCompoundNodes = cy.hasCompoundNodes();
	  var aIsNode = a.isNode();
	  var aIsEdge = !aIsNode;
	  var bIsNode = b.isNode();
	  var bIsEdge = !bIsNode;

	  // no need to calculate element depth if there is no compound node
	  if( hasCompoundNodes ){
	    depthA = a.zDepth();
	    depthB = b.zDepth();
	  }

	  var depthDiff = depthA - depthB;
	  var sameDepth = depthDiff === 0;

	  if( sameDepth ){

	    if( aIsNode && bIsEdge ){
	      return 1; // 'a' is a node, it should be drawn later

	    } else if( aIsEdge && bIsNode ){
	      return -1; // 'a' is an edge, it should be drawn first

	    } else { // both nodes or both edges
	      if( zDiff === 0 ){ // same z-index => compare indices in the core (order added to graph w/ last on top)
	        return a.poolIndex() - b.poolIndex();
	      } else {
	        return zDiff;
	      }
	    }

	  // elements on different level
	  } else {
	    return depthDiff; // deeper element should be drawn later
	  }

	};

	module.exports = zIndexSort;


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );
	var util = __webpack_require__( 75 );
	var Promise = __webpack_require__(101);

	var elesfn = ({

	  // using standard layout options, apply position function (w/ or w/o animation)
	  layoutPositions: function( layout, options, fn ){
	    var nodes = this.nodes();
	    var cy = this.cy();

	    layout.trigger( { type: 'layoutstart', layout: layout } );

	    layout.animations = [];

	    if( options.animate ){
	      for( var i = 0; i < nodes.length; i++ ){
	        var node = nodes[ i ];
	        var lastNode = i === nodes.length - 1;

	        var newPos = fn.call( node, i, node );
	        var pos = node.position();

	        if( !is.number( pos.x ) || !is.number( pos.y ) ){
	          node.silentPosition( { x: 0, y: 0 } );
	        }

	        var ani = node.animation( {
	          position: newPos,
	          duration: options.animationDuration,
	          easing: options.animationEasing
	        } );

	        layout.animations.push( ani );

	        ani.play();
	      }

	      var onStep;
	      cy.on( 'step.*', ( onStep = function(){
	        if( options.fit ){
	          cy.fit( options.eles, options.padding );
	        }
	      }) );

	      layout.one('layoutstop', function(){
	        cy.off('step.*', onStep);
	      });

	      layout.one( 'layoutready', options.ready );
	      layout.trigger( { type: 'layoutready', layout: layout } );

	      Promise.all( layout.animations.map(function( ani ){
	        return ani.promise();
	      }) ).then(function(){
	        cy.off('step.*', onStep);

	        if( options.zoom != null ){
	          cy.zoom( options.zoom );
	        }

	        if( options.pan ){
	          cy.pan( options.pan );
	        }

	        if( options.fit ){
	          cy.fit( options.eles, options.padding );
	        }

	        layout.one( 'layoutstop', options.stop );
	        layout.trigger( { type: 'layoutstop', layout: layout } );
	      });
	    } else {
	      nodes.positions( fn );

	      if( options.fit ){
	        cy.fit( options.eles, options.padding );
	      }

	      if( options.zoom != null ){
	        cy.zoom( options.zoom );
	      }

	      if( options.pan ){
	        cy.pan( options.pan );
	      }

	      layout.one( 'layoutready', options.ready );
	      layout.trigger( { type: 'layoutready', layout: layout } );

	      layout.one( 'layoutstop', options.stop );
	      layout.trigger( { type: 'layoutstop', layout: layout } );
	    }

	    return this; // chaining
	  },

	  layout: function( options ){
	    var cy = this.cy();

	    cy.layout( util.extend( {}, options, {
	      eles: this
	    } ) );

	    return this;
	  },

	  makeLayout: function( options ){
	    var cy = this.cy();

	    return cy.makeLayout( util.extend( {}, options, {
	      eles: this
	    } ) );
	  }

	});

	// aliases:
	elesfn.createLayout = elesfn.makeLayout;

	module.exports = elesfn;


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );

	var elesfn = ({

	  // fully updates (recalculates) the style for the elements
	  updateStyle: function( notifyRenderer ){
	    var cy = this._private.cy;

	    if( !cy.styleEnabled() ){ return this; }

	    if( cy._private.batchingStyle ){
	      var bEles = cy._private.batchStyleEles;

	      bEles.merge( this );

	      return this; // chaining and exit early when batching
	    }

	    var style = cy.style();
	    notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;

	    style.apply( this );

	    var updatedCompounds = this.updateCompoundBounds();
	    var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;

	    if( notifyRenderer ){
	      toNotify.rtrigger( 'style' ); // let renderer know we changed style
	    } else {
	      toNotify.trigger( 'style' ); // just fire the event
	    }
	    return this; // chaining
	  },

	  // just update the mappers in the elements' styles; cheaper than eles.updateStyle()
	  updateMappers: function( notifyRenderer ){
	    var cy = this._private.cy;
	    var style = cy.style();
	    notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;

	    if( !cy.styleEnabled() ){ return this; }

	    style.updateMappers( this );

	    var updatedCompounds = this.updateCompoundBounds();
	    var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;

	    if( notifyRenderer ){
	      toNotify.rtrigger( 'style' ); // let renderer know we changed style
	    } else {
	      toNotify.trigger( 'style' ); // just fire the event
	    }
	    return this; // chaining
	  },

	  // get the internal parsed style object for the specified property
	  parsedStyle: function( property ){
	    var ele = this[0];
	    if( !ele.cy().styleEnabled() ){ return; }

	    if( ele ){
	      return ele._private.style[ property ] || ele.cy().style().getDefaultProperty( property );
	    }
	  },

	  // get the specified css property as a rendered value (i.e. on-screen value)
	  // or get the whole rendered style if no property specified (NB doesn't allow setting)
	  renderedStyle: function( property ){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return this; }

	    var ele = this[0];

	    if( ele ){
	      var renstyle = ele.cy().style().getRenderedStyle( ele );

	      if( property === undefined ){
	        return renstyle;
	      } else {
	        return renstyle[ property ];
	      }
	    }
	  },

	  // read the calculated css style of the element or override the style (via a bypass)
	  style: function( name, value ){
	    var cy = this.cy();

	    if( !cy.styleEnabled() ){ return this; }

	    var updateTransitions = false;
	    var style = cy.style();

	    if( is.plainObject( name ) ){ // then extend the bypass
	      var props = name;
	      style.applyBypass( this, props, updateTransitions );

	      var updatedCompounds = this.updateCompoundBounds();
	      var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;
	      toNotify.rtrigger( 'style' ); // let the renderer know we've updated style

	    } else if( is.string( name ) ){

	      if( value === undefined ){ // then get the property from the style
	        var ele = this[0];

	        if( ele ){
	          return style.getStylePropertyValue( ele, name );
	        } else { // empty collection => can't get any value
	          return;
	        }

	      } else { // then set the bypass with the property value
	        style.applyBypass( this, name, value, updateTransitions );

	        var updatedCompounds = this.updateCompoundBounds();
	        var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;
	        toNotify.rtrigger( 'style' ); // let the renderer know we've updated style
	      }

	    } else if( name === undefined ){
	      var ele = this[0];

	      if( ele ){
	        return style.getRawStyle( ele );
	      } else { // empty collection => can't get any value
	        return;
	      }
	    }

	    return this; // chaining
	  },

	  removeStyle: function( names ){
	    var cy = this.cy();

	    if( !cy.styleEnabled() ){ return this; }

	    var updateTransitions = false;
	    var style = cy.style();
	    var eles = this;

	    if( names === undefined ){
	      for( var i = 0; i < eles.length; i++ ){
	        var ele = eles[ i ];

	        style.removeAllBypasses( ele, updateTransitions );
	      }
	    } else {
	      names = names.split( /\s+/ );

	      for( var i = 0; i < eles.length; i++ ){
	        var ele = eles[ i ];

	        style.removeBypasses( ele, names, updateTransitions );
	      }
	    }

	    var updatedCompounds = this.updateCompoundBounds();
	    var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;
	    toNotify.rtrigger( 'style' ); // let the renderer know we've updated style

	    return this; // chaining
	  },

	  show: function(){
	    this.css( 'display', 'element' );
	    return this; // chaining
	  },

	  hide: function(){
	    this.css( 'display', 'none' );
	    return this; // chaining
	  },

	  visible: function(){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return true; }

	    var ele = this[0];
	    var hasCompoundNodes = cy.hasCompoundNodes();

	    if( ele ){
	      if(
	        ele.pstyle( 'visibility' ).value !== 'visible'
	        || ele.pstyle( 'display' ).value !== 'element'
	      ){
	        return false;
	      }

	      if( ele._private.group === 'nodes' ){
	        if( !hasCompoundNodes ){ return true; }

	        var parents = ele._private.data.parent ? ele.parents() : null;

	        if( parents ){
	          for( var i = 0; i < parents.length; i++ ){
	            var parent = parents[ i ];
	            var pVis = parent.pstyle( 'visibility' ).value;
	            var pDis = parent.pstyle( 'display' ).value;

	            if( pVis !== 'visible' || pDis !== 'element' ){
	              return false;
	            }
	          }
	        }

	        return true;
	      } else {
	        var src = ele._private.source;
	        var tgt = ele._private.target;

	        return src.visible() && tgt.visible();
	      }

	    }
	  },

	  hidden: function(){
	    var ele = this[0];

	    if( ele ){
	      return !ele.visible();
	    }
	  },

	  effectiveOpacity: function(){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return 1; }

	    var hasCompoundNodes = cy.hasCompoundNodes();
	    var ele = this[0];

	    if( ele ){
	      var _p = ele._private;
	      var parentOpacity = ele.pstyle( 'opacity' ).value;

	      if( !hasCompoundNodes ){ return parentOpacity; }

	      var parents = !_p.data.parent ? null : ele.parents();

	      if( parents ){
	        for( var i = 0; i < parents.length; i++ ){
	          var parent = parents[ i ];
	          var opacity = parent.pstyle( 'opacity' ).value;

	          parentOpacity = opacity * parentOpacity;
	        }
	      }

	      return parentOpacity;
	    }
	  },

	  transparent: function(){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return false; }

	    var ele = this[0];
	    var hasCompoundNodes = ele.cy().hasCompoundNodes();

	    if( ele ){
	      if( !hasCompoundNodes ){
	        return ele.pstyle( 'opacity' ).value === 0;
	      } else {
	        return ele.effectiveOpacity() === 0;
	      }
	    }
	  },

	  isFullAutoParent: function(){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return false; }

	    var ele = this[0];

	    if( ele ){
	      var autoW = ele.pstyle( 'width' ).value === 'auto';
	      var autoH = ele.pstyle( 'height' ).value === 'auto';

	      return ele.isParent() && autoW && autoH;
	    }
	  },

	  backgrounding: function(){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return false; }

	    var ele = this[0];

	    return ele._private.backgrounding ? true : false;
	  }

	});


	elesfn.bypass = elesfn.css = elesfn.style;
	elesfn.renderedCss = elesfn.renderedStyle;
	elesfn.removeBypass = elesfn.removeCss = elesfn.removeStyle;
	elesfn.pstyle = elesfn.parsedStyle;

	module.exports = elesfn;


/***/ },
/* 117 */
/***/ function(module, exports) {

	'use strict';

	var elesfn = {};

	function defineSwitchFunction( params ){
	  return function(){
	    var args = arguments;
	    var changedEles = [];

	    // e.g. cy.nodes().select( data, handler )
	    if( args.length === 2 ){
	      var data = args[0];
	      var handler = args[1];
	      this.on( params.event, data, handler );
	    }

	    // e.g. cy.nodes().select( handler )
	    else if( args.length === 1 ){
	      var handler = args[0];
	      this.on( params.event, handler );
	    }

	    // e.g. cy.nodes().select()
	    else if( args.length === 0 ){
	      for( var i = 0; i < this.length; i++ ){
	        var ele = this[ i ];
	        var able = !params.ableField || ele._private[ params.ableField ];
	        var changed = ele._private[ params.field ] != params.value;

	        if( params.overrideAble ){
	          var overrideAble = params.overrideAble( ele );

	          if( overrideAble !== undefined ){
	            able = overrideAble;

	            if( !overrideAble ){ return this; } // to save cycles assume not able for all on override
	          }
	        }

	        if( able ){
	          ele._private[ params.field ] = params.value;

	          if( changed ){
	            changedEles.push( ele );
	          }
	        }
	      }

	      var changedColl = this.spawn( changedEles );
	      changedColl.updateStyle(); // change of state => possible change of style
	      changedColl.trigger( params.event );
	    }

	    return this;
	  };
	}

	function defineSwitchSet( params ){
	  elesfn[ params.field ] = function(){
	    var ele = this[0];

	    if( ele ){
	      if( params.overrideField ){
	        var val = params.overrideField( ele );

	        if( val !== undefined ){
	          return val;
	        }
	      }

	      return ele._private[ params.field ];
	    }
	  };

	  elesfn[ params.on ] = defineSwitchFunction( {
	    event: params.on,
	    field: params.field,
	    ableField: params.ableField,
	    overrideAble: params.overrideAble,
	    value: true
	  } );

	  elesfn[ params.off ] = defineSwitchFunction( {
	    event: params.off,
	    field: params.field,
	    ableField: params.ableField,
	    overrideAble: params.overrideAble,
	    value: false
	  } );
	}

	defineSwitchSet( {
	  field: 'locked',
	  overrideField: function( ele ){
	    return ele.cy().autolock() ? true : undefined;
	  },
	  on: 'lock',
	  off: 'unlock'
	} );

	defineSwitchSet( {
	  field: 'grabbable',
	  overrideField: function( ele ){
	    return ele.cy().autoungrabify() ? false : undefined;
	  },
	  on: 'grabify',
	  off: 'ungrabify'
	} );

	defineSwitchSet( {
	  field: 'selected',
	  ableField: 'selectable',
	  overrideAble: function( ele ){
	    return ele.cy().autounselectify() ? false : undefined;
	  },
	  on: 'select',
	  off: 'unselect'
	} );

	defineSwitchSet( {
	  field: 'selectable',
	  overrideField: function( ele ){
	    return ele.cy().autounselectify() ? false : undefined;
	  },
	  on: 'selectify',
	  off: 'unselectify'
	} );

	elesfn.deselect = elesfn.unselect;

	elesfn.grabbed = function(){
	  var ele = this[0];
	  if( ele ){
	    return ele._private.grabbed;
	  }
	};

	defineSwitchSet( {
	  field: 'active',
	  on: 'activate',
	  off: 'unactivate'
	} );

	elesfn.inactive = function(){
	  var ele = this[0];
	  if( ele ){
	    return !ele._private.active;
	  }
	};

	module.exports = elesfn;


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var is = __webpack_require__( 73 );

	var elesfn = {};

	var cache = function( fn, name ){
	  return function traversalCache( arg1, arg2, arg3, arg4 ){
	    var selectorOrEles = arg1;
	    var eles = this;
	    var key;

	    if( selectorOrEles == null ){
	      key = 'null';
	    } else if( is.elementOrCollection( selectorOrEles ) && selectorOrEles.length === 1 ){
	      key = '#' + selectorOrEles.id();
	    }

	    if( eles.length === 1 && key ){
	      var _p = eles[0]._private;
	      var tch = _p.traversalCache = _p.traversalCache || {};
	      var ch = tch[ name ] = tch[ name ] || {};
	      var cacheHit = ch[ key ];

	      if( cacheHit ){
	        return cacheHit;
	      } else {
	        return ( ch[ key ] = fn.call( eles, arg1, arg2, arg3, arg4 ) );
	      }
	    } else {
	      return fn.call( eles, arg1, arg2, arg3, arg4 );
	    }
	  };
	};

	// DAG functions
	////////////////

	var defineDagExtremity = function( params ){
	  return function dagExtremityImpl( selector ){
	    var eles = this;
	    var ret = [];

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[ i ];
	      if( !ele.isNode() ){
	        continue;
	      }

	      var disqualified = false;
	      var edges = ele.connectedEdges();

	      for( var j = 0; j < edges.length; j++ ){
	        var edge = edges[j];
	        var src = edge.source();
	        var tgt = edge.target();

	        if(
	             ( params.noIncomingEdges && tgt === ele && src !== ele )
	          || ( params.noOutgoingEdges && src === ele && tgt !== ele )
	        ){
	          disqualified = true;
	          break;
	        }
	      }

	      if( !disqualified ){
	        ret.push( ele );
	      }
	    }

	    return this.spawn( ret, { unique: true } ).filter( selector );
	  };
	};

	var defineDagOneHop = function( params ){
	  return function( selector ){
	    var eles = this;
	    var oEles = [];

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[ i ];

	      if( !ele.isNode() ){ continue; }

	      var edges = ele.connectedEdges();
	      for( var j = 0; j < edges.length; j++ ){
	        var edge = edges[ j ];
	        var src = edge.source();
	        var tgt = edge.target();

	        if( params.outgoing && src === ele ){
	          oEles.push( edge );
	          oEles.push( tgt );
	        } else if( params.incoming && tgt === ele ){
	          oEles.push( edge );
	          oEles.push( src );
	        }
	      }
	    }

	    return this.spawn( oEles, { unique: true } ).filter( selector );
	  };
	};

	var defineDagAllHops = function( params ){
	  return function( selector ){
	    var eles = this;
	    var sEles = [];
	    var sElesIds = {};

	    for( ;; ){
	      var next = params.outgoing ? eles.outgoers() : eles.incomers();

	      if( next.length === 0 ){ break; } // done if none left

	      var newNext = false;
	      for( var i = 0; i < next.length; i++ ){
	        var n = next[ i ];
	        var nid = n.id();

	        if( !sElesIds[ nid ] ){
	          sElesIds[ nid ] = true;
	          sEles.push( n );
	          newNext = true;
	        }
	      }

	      if( !newNext ){ break; } // done if touched all outgoers already

	      eles = next;
	    }

	    return this.spawn( sEles, { unique: true } ).filter( selector );
	  };
	};

	util.extend( elesfn, {
	  // get the root nodes in the DAG
	  roots: defineDagExtremity({ noIncomingEdges: true }),

	  // get the leaf nodes in the DAG
	  leaves: defineDagExtremity({ noOutgoingEdges: true }),

	  // normally called children in graph theory
	  // these nodes =edges=> outgoing nodes
	  outgoers: cache( defineDagOneHop({ outgoing: true }) , 'outgoers' ),

	  // aka DAG descendants
	  successors: defineDagAllHops({ outgoing: true }),

	  // normally called parents in graph theory
	  // these nodes <=edges= incoming nodes
	  incomers: cache( defineDagOneHop({ incoming: true }), 'incomers' ),

	  // aka DAG ancestors
	  predecessors: defineDagAllHops({ incoming: true })
	} );


	// Neighbourhood functions
	//////////////////////////

	util.extend( elesfn, {
	  neighborhood: cache(function( selector ){
	    var elements = [];
	    var nodes = this.nodes();

	    for( var i = 0; i < nodes.length; i++ ){ // for all nodes
	      var node = nodes[ i ];
	      var connectedEdges = node.connectedEdges();

	      // for each connected edge, add the edge and the other node
	      for( var j = 0; j < connectedEdges.length; j++ ){
	        var edge = connectedEdges[ j ];
	        var src = edge.source();
	        var tgt = edge.target();
	        var otherNode = node === src ? tgt : src;

	        // need check in case of loop
	        if( otherNode.length > 0 ){
	          elements.push( otherNode[0] ); // add node 1 hop away
	        }

	        // add connected edge
	        elements.push( edge[0] );
	      }

	    }

	    return ( this.spawn( elements, { unique: true } ) ).filter( selector );
	  }, 'neighborhood'),

	  closedNeighborhood: function( selector ){
	    return this.neighborhood().add( this ).filter( selector );
	  },

	  openNeighborhood: function( selector ){
	    return this.neighborhood( selector );
	  }
	} );

	// aliases
	elesfn.neighbourhood = elesfn.neighborhood;
	elesfn.closedNeighbourhood = elesfn.closedNeighborhood;
	elesfn.openNeighbourhood = elesfn.openNeighborhood;

	// Edge functions
	/////////////////

	util.extend( elesfn, {
	  source: cache(function sourceImpl( selector ){
	    var ele = this[0];
	    var src;

	    if( ele ){
	      src = ele._private.source || ele.cy().collection();
	    }

	    return src && selector ? src.filter( selector ) : src;
	  }, 'source'),

	  target: cache(function targetImpl( selector ){
	    var ele = this[0];
	    var tgt;

	    if( ele ){
	      tgt = ele._private.target || ele.cy().collection();
	    }

	    return tgt && selector ? tgt.filter( selector ) : tgt;
	  }, 'target'),

	  sources: defineSourceFunction( {
	    attr: 'source'
	  } ),

	  targets: defineSourceFunction( {
	    attr: 'target'
	  } )
	} );

	function defineSourceFunction( params ){
	  return function sourceImpl( selector ){
	    var sources = [];

	    for( var i = 0; i < this.length; i++ ){
	      var ele = this[ i ];
	      var src = ele._private[ params.attr ];

	      if( src ){
	        sources.push( src );
	      }
	    }

	    return this.spawn( sources, { unique: true } ).filter( selector );
	  };
	}

	util.extend( elesfn, {
	  edgesWith: cache( defineEdgesWithFunction(), 'edgesWith', true ),

	  edgesTo: cache( defineEdgesWithFunction( {
	    thisIsSrc: true
	  } ), 'edgesTo', true )
	} );

	function defineEdgesWithFunction( params ){

	  return function edgesWithImpl( otherNodes ){
	    var elements = [];
	    var cy = this._private.cy;
	    var p = params || {};

	    // get elements if a selector is specified
	    if( is.string( otherNodes ) ){
	      otherNodes = cy.$( otherNodes );
	    }

	    var thisIds = this._private.ids;
	    var otherIds = otherNodes._private.ids;

	    for( var h = 0; h < otherNodes.length; h++ ){
	      var edges = otherNodes[ h ]._private.edges;

	      for( var i = 0; i < edges.length; i++ ){
	        var edge = edges[ i ];
	        var edgeData = edge._private.data;
	        var thisToOther = thisIds[ edgeData.source ] && otherIds[ edgeData.target ];
	        var otherToThis = otherIds[ edgeData.source ] && thisIds[ edgeData.target ];
	        var edgeConnectsThisAndOther = thisToOther || otherToThis;

	        if( !edgeConnectsThisAndOther ){ continue; }

	        if( p.thisIsSrc || p.thisIsTgt ){
	          if( p.thisIsSrc && !thisToOther ){ continue; }

	          if( p.thisIsTgt && !otherToThis ){ continue; }
	        }

	        elements.push( edge );
	      }
	    }

	    return this.spawn( elements, { unique: true } );
	  };
	}

	util.extend( elesfn, {
	  connectedEdges: cache(function( selector ){
	    var retEles = [];

	    var eles = this;
	    for( var i = 0; i < eles.length; i++ ){
	      var node = eles[ i ];
	      if( !node.isNode() ){ continue; }

	      var edges = node._private.edges;

	      for( var j = 0; j < edges.length; j++ ){
	        var edge = edges[ j ];
	        retEles.push( edge );
	      }
	    }

	    return this.spawn( retEles, { unique: true } ).filter( selector );
	  }, 'connectedEdges'),

	  connectedNodes: cache(function( selector ){
	    var retEles = [];

	    var eles = this;
	    for( var i = 0; i < eles.length; i++ ){
	      var edge = eles[ i ];
	      if( !edge.isEdge() ){ continue; }

	      retEles.push( edge.source()[0] );
	      retEles.push( edge.target()[0] );
	    }

	    return this.spawn( retEles, { unique: true } ).filter( selector );
	  }, 'connectedNodes'),

	  parallelEdges: cache( defineParallelEdgesFunction(), 'parallelEdges' ),

	  codirectedEdges: cache( defineParallelEdgesFunction( {
	    codirected: true
	  } ), 'codirectedEdges' )
	} );

	function defineParallelEdgesFunction( params ){
	  var defaults = {
	    codirected: false
	  };
	  params = util.extend( {}, defaults, params );

	  return function parallelEdgesImpl( selector ){ // micro-optimised for renderer
	    var elements = [];
	    var edges = this.edges();
	    var p = params;

	    // look at all the edges in the collection
	    for( var i = 0; i < edges.length; i++ ){
	      var edge1 = edges[ i ];
	      var edge1_p = edge1._private;
	      var src1 = edge1_p.source;
	      var srcid1 = src1._private.data.id;
	      var tgtid1 = edge1_p.data.target;
	      var srcEdges1 = src1._private.edges;

	      // look at edges connected to the src node of this edge
	      for( var j = 0; j < srcEdges1.length; j++ ){
	        var edge2 = srcEdges1[ j ];
	        var edge2data = edge2._private.data;
	        var tgtid2 = edge2data.target;
	        var srcid2 = edge2data.source;

	        var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;
	        var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;

	        if( (p.codirected && codirected) || (!p.codirected && (codirected || oppdirected)) ){
	          elements.push( edge2 );
	        }
	      }
	    }

	    return this.spawn( elements, { unique: true } ).filter( selector );
	  };

	}

	// Misc functions
	/////////////////

	util.extend( elesfn, {
	  components: function(){
	    var self = this;
	    var cy = self.cy();
	    var visited = self.spawn();
	    var unvisited = self.nodes().spawnSelf();
	    var components = [];

	    var visitInComponent = function( node, component ){
	      visited.merge( node );
	      unvisited.unmerge( node );
	      component.merge( node );
	    };

	    if( unvisited.empty() ){ return self.spawn(); }

	    do {
	      var component = cy.collection();
	      components.push( component );

	      var root = unvisited[0];
	      visitInComponent( root, component );

	      self.bfs({
	        directed: false,
	        roots: root,
	        visit: function( i, depth, v, e, u ){
	          visitInComponent( v, component );
	        }
	      } );

	    } while( unvisited.length > 0 );

	    return components.map(function( component ){
	      var connectedEdges = component.connectedEdges().stdFilter(function( edge ){
	        return component.anySame( edge.source() ) && component.anySame( edge.target() );
	      });

	      return component.union( connectedEdges );
	    });
	  }
	} );

	module.exports = elesfn;


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );
	var util = __webpack_require__( 75 );
	var Collection = __webpack_require__( 83 );
	var Element = __webpack_require__( 84 );

	var corefn = {
	  add: function( opts ){

	    var elements;
	    var cy = this;

	    // add the elements
	    if( is.elementOrCollection( opts ) ){
	      var eles = opts;

	      if( eles._private.cy === cy ){ // same instance => just restore
	        elements = eles.restore();

	      } else { // otherwise, copy from json
	        var jsons = [];

	        for( var i = 0; i < eles.length; i++ ){
	          var ele = eles[ i ];
	          jsons.push( ele.json() );
	        }

	        elements = new Collection( cy, jsons );
	      }
	    }

	    // specify an array of options
	    else if( is.array( opts ) ){
	      var jsons = opts;

	      elements = new Collection( cy, jsons );
	    }

	    // specify via opts.nodes and opts.edges
	    else if( is.plainObject( opts ) && (is.array( opts.nodes ) || is.array( opts.edges )) ){
	      var elesByGroup = opts;
	      var jsons = [];

	      var grs = [ 'nodes', 'edges' ];
	      for( var i = 0, il = grs.length; i < il; i++ ){
	        var group = grs[ i ];
	        var elesArray = elesByGroup[ group ];

	        if( is.array( elesArray ) ){

	          for( var j = 0, jl = elesArray.length; j < jl; j++ ){
	            var json = util.extend( { group: group }, elesArray[ j ] );

	            jsons.push( json );
	          }
	        }
	      }

	      elements = new Collection( cy, jsons );
	    }

	    // specify options for one element
	    else {
	      var json = opts;
	      elements = (new Element( cy, json )).collection();
	    }

	    return elements;
	  },

	  remove: function( collection ){
	    if( is.elementOrCollection( collection ) ){
	      collection = collection;
	    } else if( is.string( collection ) ){
	      var selector = collection;
	      collection = this.$( selector );
	    }

	    return collection.remove();
	  },

	  load: function( elements, onload, ondone ){
	    var cy = this;

	    cy.notifications( false );

	    // remove old elements
	    var oldEles = cy.mutableElements();
	    if( oldEles.length > 0 ){
	      oldEles.remove();
	    }

	    if( elements != null ){
	      if( is.plainObject( elements ) || is.array( elements ) ){
	        cy.add( elements );
	      }
	    }

	    cy.one( 'layoutready', function( e ){
	      cy.notifications( true );
	      cy.trigger( e ); // we missed this event by turning notifications off, so pass it on

	      cy.notify( {
	        type: 'load',
	        eles: cy.mutableElements()
	      } );

	      cy.one( 'load', onload );
	      cy.trigger( 'load' );
	    } ).one( 'layoutstop', function(){
	      cy.one( 'done', ondone );
	      cy.trigger( 'done' );
	    } );

	    var layoutOpts = util.extend( {}, cy._private.options.layout );
	    layoutOpts.eles = cy.elements();

	    cy.layout( layoutOpts );

	    return this;
	  }
	};

	module.exports = corefn;


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var define = __webpack_require__( 99 );
	var util = __webpack_require__( 75 );
	var is = __webpack_require__( 73 );

	var corefn = ({

	  // pull in animation functions
	  animate: define.animate(),
	  animation: define.animation(),
	  animated: define.animated(),
	  clearQueue: define.clearQueue(),
	  delay: define.delay(),
	  delayAnimation: define.delayAnimation(),
	  stop: define.stop(),

	  addToAnimationPool: function( eles ){
	    var cy = this;

	    if( !cy.styleEnabled() ){ return; } // save cycles when no style used

	    cy._private.aniEles.merge( eles );
	  },

	  stopAnimationLoop: function(){
	    this._private.animationsRunning = false;
	  },

	  startAnimationLoop: function(){
	    var cy = this;

	    cy._private.animationsRunning = true;

	    if( !cy.styleEnabled() ){ return; } // save cycles when no style used

	    // NB the animation loop will exec in headless environments if style enabled
	    // and explicit cy.destroy() is necessary to stop the loop

	    function globalAnimationStep(){
	      if( !cy._private.animationsRunning ){ return; }

	      util.requestAnimationFrame( function animationStep( now ){
	        handleElements( now );
	        globalAnimationStep();
	      } );
	    }

	    var renderer = cy.renderer();

	    if( renderer && renderer.beforeRender ){ // let the renderer schedule animations
	      renderer.beforeRender( function rendererAnimationStep( willDraw, now ){
	        handleElements( now );
	      }, renderer.beforeRenderPriorities.animations );
	    } else { // manage the animation loop ourselves
	      globalAnimationStep(); // first call
	    }

	    function handleElements( now ){
	      var eles = cy._private.aniEles;
	      var doneEles = [];

	      function handleElement( ele, isCore ){
	        var _p = ele._private;
	        var current = _p.animation.current;
	        var queue = _p.animation.queue;
	        var ranAnis = false;

	        // if nothing currently animating, get something from the queue
	        if( current.length === 0 ){
	          var next = queue.shift();

	          if( next ){
	            current.push( next );
	          }
	        }

	        var callbacks = function( callbacks ){
	          for( var j = callbacks.length - 1; j >= 0; j-- ){
	            var cb = callbacks[ j ];

	            cb();
	          }

	          callbacks.splice( 0, callbacks.length );
	        };

	        // step and remove if done
	        for( var i = current.length - 1; i >= 0; i-- ){
	          var ani = current[ i ];
	          var ani_p = ani._private;

	          if( ani_p.stopped ){
	            current.splice( i, 1 );

	            ani_p.hooked = false;
	            ani_p.playing = false;
	            ani_p.started = false;

	            callbacks( ani_p.frames );

	            continue;
	          }

	          if( !ani_p.playing && !ani_p.applying ){ continue; }

	          // an apply() while playing shouldn't do anything
	          if( ani_p.playing && ani_p.applying ){
	            ani_p.applying = false;
	          }

	          if( !ani_p.started ){
	            startAnimation( ele, ani, now );
	          }

	          step( ele, ani, now, isCore );

	          if( is.fn( ani_p.step ) ){
	            ani_p.step.call( ele, now );
	          }

	          if( ani_p.applying ){
	            ani_p.applying = false;
	          }

	          callbacks( ani_p.frames );

	          if( ani.completed() ){
	            current.splice( i, 1 );

	            ani_p.hooked = false;
	            ani_p.playing = false;
	            ani_p.started = false;

	            callbacks( ani_p.completes );
	          }

	          ranAnis = true;
	        }

	        if( !isCore && current.length === 0 && queue.length === 0 ){
	          doneEles.push( ele );
	        }

	        return ranAnis;
	      } // handleElement

	      // handle all eles
	      var ranEleAni = false;
	      for( var e = 0; e < eles.length; e++ ){
	        var ele = eles[ e ];
	        var handledThisEle = handleElement( ele );

	        ranEleAni = ranEleAni || handledThisEle;
	      } // each element

	      var ranCoreAni = handleElement( cy, true );

	      // notify renderer
	      if( ranEleAni || ranCoreAni ){
	        if( eles.length > 0 ){
	          var updatedEles = eles.updateCompoundBounds().spawnSelf().merge( eles );

	          cy.notify({
	            type: 'draw',
	            eles: updatedEles
	          });
	        } else {
	          cy.notify({
	            type: 'draw'
	          });
	        }
	      }

	      // remove elements from list of currently animating if its queues are empty
	      eles.unmerge( doneEles );

	      cy.trigger('step');

	    } // handleElements

	    function startAnimation( self, ani, now ){
	      var isCore = is.core( self );
	      var isEles = !isCore;
	      var ele = self;
	      var style = cy._private.style;
	      var ani_p = ani._private;

	      if( isEles ){
	        var pos = ele._private.position;

	        ani_p.startPosition = ani_p.startPosition || {
	          x: pos.x,
	          y: pos.y
	        };

	        ani_p.startStyle = ani_p.startStyle || style.getAnimationStartStyle( ele, ani_p.style );
	      }

	      if( isCore ){
	        var pan = cy._private.pan;

	        ani_p.startPan = ani_p.startPan || {
	          x: pan.x,
	          y: pan.y
	        };

	        ani_p.startZoom = ani_p.startZoom != null ? ani_p.startZoom : cy._private.zoom;
	      }

	      ani_p.started = true;
	      ani_p.startTime = now - ani_p.progress * ani_p.duration;
	    }

	    function step( self, ani, now, isCore ){
	      var style = cy._private.style;
	      var isEles = !isCore;
	      var _p = self._private;
	      var ani_p = ani._private;
	      var pEasing = ani_p.easing;
	      var startTime = ani_p.startTime;

	      if( !ani_p.easingImpl ){

	        if( pEasing == null ){ // use default
	          ani_p.easingImpl = easings[ 'linear' ];

	        } else { // then define w/ name
	          var easingVals;

	          if( is.string( pEasing ) ){
	            var easingProp = style.parse( 'transition-timing-function', pEasing );

	            easingVals = easingProp.value;

	          } else { // then assume preparsed array
	            easingVals = pEasing;
	          }

	          var name, args;

	          if( is.string( easingVals ) ){
	            name = easingVals;
	            args = [];
	          } else {
	            name = easingVals[1];
	            args = easingVals.slice( 2 ).map( function( n ){ return +n; } );
	          }

	          if( args.length > 0 ){ // create with args
	            if( name === 'spring' ){
	              args.push( ani_p.duration ); // need duration to generate spring
	            }

	            ani_p.easingImpl = easings[ name ].apply( null, args );
	          } else { // static impl by name
	            ani_p.easingImpl = easings[ name ];
	          }
	        }

	      }

	      var easing = ani_p.easingImpl;
	      var percent;

	      if( ani_p.duration === 0 ){
	        percent = 1;
	      } else {
	        percent = (now - startTime) / ani_p.duration;
	      }

	      if( ani_p.applying ){
	        percent = ani_p.progress;
	      }

	      if( percent < 0 ){
	        percent = 0;
	      } else if( percent > 1 ){
	        percent = 1;
	      }

	      if( ani_p.delay == null ){ // then update

	        var startPos = ani_p.startPosition;
	        var endPos = ani_p.position;
	        var pos = _p.position;
	        if( endPos && isEles ){
	          if( valid( startPos.x, endPos.x ) ){
	            pos.x = ease( startPos.x, endPos.x, percent, easing );
	          }

	          if( valid( startPos.y, endPos.y ) ){
	            pos.y = ease( startPos.y, endPos.y, percent, easing );
	          }

	          self.trigger('position');
	        }

	        var startPan = ani_p.startPan;
	        var endPan = ani_p.pan;
	        var pan = _p.pan;
	        var animatingPan = endPan != null && isCore;
	        if( animatingPan ){
	          if( valid( startPan.x, endPan.x ) ){
	            pan.x = ease( startPan.x, endPan.x, percent, easing );
	          }

	          if( valid( startPan.y, endPan.y ) ){
	            pan.y = ease( startPan.y, endPan.y, percent, easing );
	          }

	          self.trigger( 'pan' );
	        }

	        var startZoom = ani_p.startZoom;
	        var endZoom = ani_p.zoom;
	        var animatingZoom = endZoom != null && isCore;
	        if( animatingZoom ){
	          if( valid( startZoom, endZoom ) ){
	            _p.zoom = ease( startZoom, endZoom, percent, easing );
	          }

	          self.trigger( 'zoom' );
	        }

	        if( animatingPan || animatingZoom ){
	          self.trigger( 'viewport' );
	        }

	        var props = ani_p.style;
	        if( props && props.length > 0 && isEles ){
	          for( var i = 0; i < props.length; i++ ){
	            var prop = props[ i ];
	            var name = prop.name;
	            var end = prop;

	            var start = ani_p.startStyle[ name ];
	            var easedVal = ease( start, end, percent, easing );

	            style.overrideBypass( self, name, easedVal );
	          } // for props

	          self.trigger('style');

	        } // if

	      }

	      ani_p.progress = percent;

	      return percent;
	    }

	    function valid( start, end ){
	      if( start == null || end == null ){
	        return false;
	      }

	      if( is.number( start ) && is.number( end ) ){
	        return true;
	      } else if( (start) && (end) ){
	        return true;
	      }

	      return false;
	    }

	    // assumes p0 = 0, p3 = 1
	    function evalCubicBezier( p1, p2, t ){
	      var one_t = 1 - t;
	      var tsq = t * t;

	      return ( 3 * one_t * one_t * t * p1 ) + ( 3 * one_t * tsq * p2 ) + tsq * t;
	    }

	    function cubicBezier( p1, p2 ){
	      return function( start, end, percent ){
	        return start + (end - start) * evalCubicBezier( p1, p2, percent );
	      };
	    }

	    /*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */
	    /* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
	       then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */
	    var generateSpringRK4 = (function(){
	      function springAccelerationForState( state ){
	        return (-state.tension * state.x) - (state.friction * state.v);
	      }

	      function springEvaluateStateWithDerivative( initialState, dt, derivative ){
	        var state = {
	          x: initialState.x + derivative.dx * dt,
	          v: initialState.v + derivative.dv * dt,
	          tension: initialState.tension,
	          friction: initialState.friction
	        };

	        return { dx: state.v, dv: springAccelerationForState( state ) };
	      }

	      function springIntegrateState( state, dt ){
	        var a = {
	          dx: state.v,
	          dv: springAccelerationForState( state )
	        },
	        b = springEvaluateStateWithDerivative( state, dt * 0.5, a ),
	        c = springEvaluateStateWithDerivative( state, dt * 0.5, b ),
	        d = springEvaluateStateWithDerivative( state, dt, c ),
	        dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),
	        dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);

	        state.x = state.x + dxdt * dt;
	        state.v = state.v + dvdt * dt;

	        return state;
	      }

	      return function springRK4Factory( tension, friction, duration ){

	        var initState = {
	          x: -1,
	          v: 0,
	          tension: null,
	          friction: null
	        },
	        path = [0],
	        time_lapsed = 0,
	        tolerance = 1 / 10000,
	        DT = 16 / 1000,
	        have_duration, dt, last_state;

	        tension = parseFloat( tension ) || 500;
	        friction = parseFloat( friction ) || 20;
	        duration = duration || null;

	        initState.tension = tension;
	        initState.friction = friction;

	        have_duration = duration !== null;

	        /* Calculate the actual time it takes for this animation to complete with the provided conditions. */
	        if( have_duration ){
	          /* Run the simulation without a duration. */
	          time_lapsed = springRK4Factory( tension, friction );
	          /* Compute the adjusted time delta. */
	          dt = time_lapsed / duration * DT;
	        } else {
	          dt = DT;
	        }

	        while( true ){
	          /* Next/step function .*/
	          last_state = springIntegrateState( last_state || initState, dt );
	          /* Store the position. */
	          path.push( 1 + last_state.x );
	          time_lapsed += 16;
	          /* If the change threshold is reached, break. */
	          if( !(Math.abs( last_state.x ) > tolerance && Math.abs( last_state.v ) > tolerance) ){
	            break;
	          }
	        }

	        /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
	           computed path and returns a snapshot of the position according to a given percentComplete. */
	        return !have_duration ? time_lapsed : function( percentComplete ){ return path[ (percentComplete * (path.length - 1)) | 0 ]; };
	      };
	    }());

	    var easings = {
	      'linear': function( start, end, percent ){
	        return start + (end - start) * percent;
	      },

	      // default easings
	      'ease': cubicBezier( 0.25, 0.1, 0.25, 1 ),
	      'ease-in': cubicBezier( 0.42, 0, 1, 1 ),
	      'ease-out': cubicBezier( 0, 0, 0.58, 1 ),
	      'ease-in-out': cubicBezier( 0.42, 0, 0.58, 1 ),

	      // sine
	      'ease-in-sine': cubicBezier( 0.47, 0, 0.745, 0.715 ),
	      'ease-out-sine': cubicBezier( 0.39, 0.575, 0.565, 1 ),
	      'ease-in-out-sine': cubicBezier( 0.445, 0.05, 0.55, 0.95 ),

	      // quad
	      'ease-in-quad': cubicBezier( 0.55, 0.085, 0.68, 0.53 ),
	      'ease-out-quad': cubicBezier( 0.25, 0.46, 0.45, 0.94 ),
	      'ease-in-out-quad': cubicBezier( 0.455, 0.03, 0.515, 0.955 ),

	      // cubic
	      'ease-in-cubic': cubicBezier( 0.55, 0.055, 0.675, 0.19 ),
	      'ease-out-cubic': cubicBezier( 0.215, 0.61, 0.355, 1 ),
	      'ease-in-out-cubic': cubicBezier( 0.645, 0.045, 0.355, 1 ),

	      // quart
	      'ease-in-quart': cubicBezier( 0.895, 0.03, 0.685, 0.22 ),
	      'ease-out-quart': cubicBezier( 0.165, 0.84, 0.44, 1 ),
	      'ease-in-out-quart': cubicBezier( 0.77, 0, 0.175, 1 ),

	      // quint
	      'ease-in-quint': cubicBezier( 0.755, 0.05, 0.855, 0.06 ),
	      'ease-out-quint': cubicBezier( 0.23, 1, 0.32, 1 ),
	      'ease-in-out-quint': cubicBezier( 0.86, 0, 0.07, 1 ),

	      // expo
	      'ease-in-expo': cubicBezier( 0.95, 0.05, 0.795, 0.035 ),
	      'ease-out-expo': cubicBezier( 0.19, 1, 0.22, 1 ),
	      'ease-in-out-expo': cubicBezier( 1, 0, 0, 1 ),

	      // circ
	      'ease-in-circ': cubicBezier( 0.6, 0.04, 0.98, 0.335 ),
	      'ease-out-circ': cubicBezier( 0.075, 0.82, 0.165, 1 ),
	      'ease-in-out-circ': cubicBezier( 0.785, 0.135, 0.15, 0.86 ),


	      // user param easings...

	      'spring': function( tension, friction, duration ){
	        if( duration === 0 ){ // can't get a spring w/ duration 0
	          return easings.linear; // duration 0 => jump to end so impl doesn't matter
	        }

	        var spring = generateSpringRK4( tension, friction, duration );

	        return function( start, end, percent ){
	          return start + (end - start) * spring( percent );
	        };
	      },

	      'cubic-bezier': function( x1, y1, x2, y2 ){
	        return cubicBezier( x1, y1, x2, y2 );
	      }
	    };

	    function ease( startProp, endProp, percent, easingFn ){
	      if( percent < 0 ){
	        percent = 0;
	      } else if( percent > 1 ){
	        percent = 1;
	      }

	      var start, end;

	      if( startProp.pfValue != null || startProp.value != null ){
	        start = startProp.pfValue != null ? startProp.pfValue : startProp.value;
	      } else {
	        start = startProp;
	      }

	      if( endProp.pfValue != null || endProp.value != null ){
	        end = endProp.pfValue != null ? endProp.pfValue : endProp.value;
	      } else {
	        end = endProp;
	      }

	      if( is.number( start ) && is.number( end ) ){
	        return easingFn( start, end, percent );

	      } else if( is.array( start ) && is.array( end ) ){
	        var easedArr = [];

	        for( var i = 0; i < end.length; i++ ){
	          var si = start[ i ];
	          var ei = end[ i ];

	          if( si != null && ei != null ){
	            var val = easingFn( si, ei, percent );

	            if( startProp.roundValue ){ val = Math.round( val ); }

	            easedArr.push( val );
	          } else {
	            easedArr.push( ei );
	          }
	        }

	        return easedArr;
	      }

	      return undefined;
	    }

	  }

	});

	module.exports = corefn;


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var define = __webpack_require__( 99 );

	var corefn = ({
	  on: define.on(), // .on( events [, selector] [, data], handler)
	  one: define.on( { unbindSelfOnTrigger: true } ),
	  once: define.on( { unbindAllBindersOnTrigger: true } ),
	  off: define.off(), // .off( events [, selector] [, handler] )
	  trigger: define.trigger() // .trigger( events [, extraParams] )
	});

	define.eventAliasesOn( corefn );

	module.exports = corefn;


/***/ },
/* 122 */
/***/ function(module, exports) {

	'use strict';

	var corefn = ({

	  png: function( options ){
	    var renderer = this._private.renderer;
	    options = options || {};

	    return renderer.png( options );
	  },

	  jpg: function( options ){
	    var renderer = this._private.renderer;
	    options = options || {};

	    options.bg = options.bg || '#fff';

	    return renderer.jpg( options );
	  }

	});

	corefn.jpeg = corefn.jpg;

	module.exports = corefn;


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var is = __webpack_require__( 73 );

	var corefn = ({

	  layout: function( params ){
	    var layout = this._private.prevLayout = ( params == null ? this._private.prevLayout : this.makeLayout( params ) );

	    layout.run();

	    return this; // chaining
	  },

	  makeLayout: function( options ){
	    var cy = this;

	    if( options == null ){
	      util.error( 'Layout options must be specified to make a layout' );
	      return;
	    }

	    if( options.name == null ){
	      util.error( 'A `name` must be specified to make a layout' );
	      return;
	    }

	    var name = options.name;
	    var Layout = cy.extension( 'layout', name );

	    if( Layout == null ){
	      util.error( 'Can not apply layout: No such layout `' + name + '` found; did you include its JS file?' );
	      return;
	    }

	    var eles;
	    if( is.string( options.eles ) ){
	      eles = cy.$( options.eles );
	    } else {
	      eles = options.eles != null ? options.eles : cy.$();
	    }

	    var layout = new Layout( util.extend( {}, options, {
	      cy: cy,
	      eles: eles
	    } ) );

	    return layout;
	  }

	});

	corefn.createLayout = corefn.makeLayout;

	module.exports = corefn;


/***/ },
/* 124 */
/***/ function(module, exports) {

	'use strict';

	var corefn = ({
	  notify: function( params ){
	    var _p = this._private;

	    if( _p.batchingNotify ){
	      var bEles = _p.batchNotifyEles;
	      var bTypes = _p.batchNotifyTypes;

	      if( params.eles ){
	        bEles.merge( params.eles );
	      }

	      if( !bTypes.ids[ params.type ] ){
	        bTypes.push( params.type );
	        bTypes.ids[ params.type ] = true;
	      }

	      return; // notifications are disabled during batching
	    }

	    if( !_p.notificationsEnabled ){ return; } // exit on disabled

	    var renderer = this.renderer();

	    renderer.notify( params );
	  },

	  notifications: function( bool ){
	    var p = this._private;

	    if( bool === undefined ){
	      return p.notificationsEnabled;
	    } else {
	      p.notificationsEnabled = bool ? true : false;
	    }
	  },

	  noNotifications: function( callback ){
	    this.notifications( false );
	    callback();
	    this.notifications( true );
	  },

	  startBatch: function(){
	    var _p = this._private;

	    if( _p.batchCount == null ){
	      _p.batchCount = 0;
	    }

	    if( _p.batchCount === 0 ){
	      _p.batchingStyle = _p.batchingNotify = true;
	      _p.batchStyleEles = this.collection();
	      _p.batchNotifyEles = this.collection();
	      _p.batchNotifyTypes = [];
	      _p.batchNotifyTypes.ids = {};
	    }

	    _p.batchCount++;

	    return this;
	  },

	  endBatch: function(){
	    var _p = this._private;

	    _p.batchCount--;

	    if( _p.batchCount === 0 ){
	      // update style for dirty eles
	      _p.batchingStyle = false;
	      _p.batchStyleEles.updateStyle();

	      // notify the renderer of queued eles and event types
	      _p.batchingNotify = false;
	      this.notify( {
	        type: _p.batchNotifyTypes,
	        eles: _p.batchNotifyEles
	      } );
	    }

	    return this;
	  },

	  batch: function( callback ){
	    this.startBatch();
	    callback();
	    this.endBatch();

	    return this;
	  },

	  // for backwards compatibility
	  batchData: function( map ){
	    var cy = this;

	    return this.batch( function(){
	      var ids = Object.keys( map );

	      for( var i = 0; i < ids.length; i++ ){
	        var ids = id[i];
	        var data = map[ id ];
	        var ele = cy.getElementById( id );

	        ele.data( data );
	      }
	    } );
	  }
	});

	module.exports = corefn;


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );

	var corefn = ({

	  renderTo: function( context, zoom, pan, pxRatio ){
	    var r = this._private.renderer;

	    r.renderTo( context, zoom, pan, pxRatio );
	    return this;
	  },

	  renderer: function(){
	    return this._private.renderer;
	  },

	  forceRender: function(){
	    this.notify( {
	      type: 'draw'
	    } );

	    return this;
	  },

	  resize: function(){
	    this.invalidateSize();

	    this.notify( {
	      type: 'resize'
	    } );

	    this.trigger( 'resize' );

	    return this;
	  },

	  initRenderer: function( options ){
	    var cy = this;

	    var RendererProto = cy.extension( 'renderer', options.name );
	    if( RendererProto == null ){
	      util.error( 'Can not initialise: No such renderer `%s` found; did you include its JS file?', options.name );
	      return;
	    }

	    var rOpts = util.extend( {}, options, {
	      cy: cy
	    } );

	    cy._private.renderer = new RendererProto( rOpts );
	  },

	  onRender: function( fn ){
	    return this.on('render', fn);
	  },

	  offRender: function( fn ){
	    return this.off('render', fn);
	  }

	});

	corefn.invalidateDimensions = corefn.resize;

	module.exports = corefn;


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );
	var Collection = __webpack_require__( 83 );

	var corefn = ({

	  // get a collection
	  // - empty collection on no args
	  // - collection of elements in the graph on selector arg
	  // - guarantee a returned collection when elements or collection specified
	  collection: function( eles, opts ){

	    if( is.string( eles ) ){
	      return this.$( eles );

	    } else if( is.elementOrCollection( eles ) ){
	      return eles.collection();

	    } else if( is.array( eles ) ){
	      return new Collection( this, eles, opts );
	    }

	    return new Collection( this );
	  },

	  nodes: function( selector ){
	    var nodes = this.$( function(){
	      return this.isNode();
	    } );

	    if( selector ){
	      return nodes.filter( selector );
	    }

	    return nodes;
	  },

	  edges: function( selector ){
	    var edges = this.$( function(){
	      return this.isEdge();
	    } );

	    if( selector ){
	      return edges.filter( selector );
	    }

	    return edges;
	  },

	  // search the graph like jQuery
	  $: function( selector ){
	    var eles = this._private.elements;

	    if( selector ){
	      return eles.filter( selector );
	    } else {
	      return eles.spawnSelf();
	    }
	  },

	  mutableElements: function(){
	    return this._private.elements;
	  }

	});

	// aliases
	corefn.elements = corefn.filter = corefn.$;

	module.exports = corefn;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );
	var Style = __webpack_require__( 128 );

	var corefn = ({

	  style: function( newStyle ){
	    if( newStyle ){
	      var s = this.setStyle( newStyle );

	      s.update();
	    }

	    return this._private.style;
	  },

	  setStyle: function( style ){
	    var _p = this._private;

	    if( is.stylesheet( style ) ){
	      _p.style = style.generateStyle( this );

	    } else if( is.array( style ) ){
	      _p.style = Style.fromJson( this, style );

	    } else if( is.string( style ) ){
	      _p.style = Style.fromString( this, style );

	    } else {
	      _p.style = Style( this );
	    }

	    return _p.style;
	  }
	});

	module.exports = corefn;


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );
	var util = __webpack_require__( 75 );
	var Selector = __webpack_require__( 100 );

	var Style = function( cy ){

	  if( !(this instanceof Style) ){
	    return new Style( cy );
	  }

	  if( !is.core( cy ) ){
	    util.error( 'A style must have a core reference' );
	    return;
	  }

	  this._private = {
	    cy: cy,
	    coreStyle: {}
	  };

	  this.length = 0;

	  this.resetToDefault();
	};

	var styfn = Style.prototype;

	styfn.instanceString = function(){
	  return 'style';
	};

	// remove all contexts
	styfn.clear = function(){
	  for( var i = 0; i < this.length; i++ ){
	    this[ i ] = undefined;
	  }
	  this.length = 0;

	  var _p = this._private;

	  _p.newStyle = true;

	  return this; // chaining
	};

	styfn.resetToDefault = function(){
	  this.clear();
	  this.addDefaultStylesheet();

	  return this;
	};

	// builds a style object for the 'core' selector
	styfn.core = function(){
	  return this._private.coreStyle;
	};

	// create a new context from the specified selector string and switch to that context
	styfn.selector = function( selectorStr ){
	  // 'core' is a special case and does not need a selector
	  var selector = selectorStr === 'core' ? null : new Selector( selectorStr );

	  var i = this.length++; // new context means new index
	  this[ i ] = {
	    selector: selector,
	    properties: [],
	    mappedProperties: [],
	    index: i
	  };

	  return this; // chaining
	};

	// add one or many css rules to the current context
	styfn.css = function(){
	  var self = this;
	  var args = arguments;

	  switch( args.length ){
	  case 1:
	    var map = args[0];

	    for( var i = 0; i < self.properties.length; i++ ){
	      var prop = self.properties[ i ];
	      var mapVal = map[ prop.name ];

	      if( mapVal === undefined ){
	        mapVal = map[ util.dash2camel( prop.name ) ];
	      }

	      if( mapVal !== undefined ){
	        this.cssRule( prop.name, mapVal );
	      }
	    }

	    break;

	  case 2:
	    this.cssRule( args[0], args[1] );
	    break;

	  default:
	    break; // do nothing if args are invalid
	  }

	  return this; // chaining
	};
	styfn.style = styfn.css;

	// add a single css rule to the current context
	styfn.cssRule = function( name, value ){
	  // name-value pair
	  var property = this.parse( name, value );

	  // add property to current context if valid
	  if( property ){
	    var i = this.length - 1;
	    this[ i ].properties.push( property );
	    this[ i ].properties[ property.name ] = property; // allow access by name as well

	    if( property.name.match( /pie-(\d+)-background-size/ ) && property.value ){
	      this._private.hasPie = true;
	    }

	    if( property.mapped ){
	      this[ i ].mappedProperties.push( property );
	    }

	    // add to core style if necessary
	    var currentSelectorIsCore = !this[ i ].selector;
	    if( currentSelectorIsCore ){
	      this._private.coreStyle[ property.name ] = property;
	    }
	  }

	  return this; // chaining
	};

	// static function
	Style.fromJson = function( cy, json ){
	  var style = new Style( cy );

	  style.fromJson( json );

	  return style;
	};

	Style.fromString = function( cy, string ){
	  return new Style( cy ).fromString( string );
	};

	[
	  __webpack_require__( 129 ),
	  __webpack_require__( 130 ),
	  __webpack_require__( 131 ),
	  __webpack_require__( 132 ),
	  __webpack_require__( 133 ),
	  __webpack_require__( 134 ),
	  __webpack_require__( 135 ),
	  __webpack_require__( 136 )
	].forEach( function( props ){
	  util.extend( styfn, props );
	} );


	Style.types = styfn.types;
	Style.properties = styfn.properties;

	module.exports = Style;


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var is = __webpack_require__( 73 );

	var styfn = {};

	// (potentially expensive calculation)
	// apply the style to the element based on
	// - its bypass
	// - what selectors match it
	styfn.apply = function( eles ){
	  var self = this;
	  var _p = self._private;

	  if( _p.newStyle ){ // clear style caches
	    _p.contextStyles = {};
	    _p.propDiffs = {};

	    self.cleanElements( eles, true );
	  }

	  for( var ie = 0; ie < eles.length; ie++ ){
	    var ele = eles[ ie ];

	    var cxtMeta = self.getContextMeta( ele );
	    var cxtStyle = self.getContextStyle( cxtMeta );
	    var app = self.applyContextStyle( cxtMeta, cxtStyle, ele );

	    self.enforceCompoundSizing( ele );
	    self.updateTransitions( ele, app.diffProps );
	    self.updateStyleHints( ele );

	  } // for elements

	  _p.newStyle = false;
	};

	styfn.getPropertiesDiff = function( oldCxtKey, newCxtKey ){
	  var self = this;
	  var cache = self._private.propDiffs = self._private.propDiffs || {};
	  var dualCxtKey = oldCxtKey + '-' + newCxtKey;
	  var cachedVal = cache[ dualCxtKey ];

	  if( cachedVal ){
	    return cachedVal;
	  }

	  var diffProps = [];
	  var addedProp = {};

	  for( var i = 0; i < self.length; i++ ){
	    var cxt = self[ i ];
	    var oldHasCxt = oldCxtKey[ i ] === 't';
	    var newHasCxt = newCxtKey[ i ] === 't';
	    var cxtHasDiffed = oldHasCxt !== newHasCxt;
	    var cxtHasMappedProps = cxt.mappedProperties.length > 0;

	    if( cxtHasDiffed || cxtHasMappedProps ){
	      var props;

	      if( cxtHasDiffed && cxtHasMappedProps ){
	        props = cxt.properties; // suffices b/c mappedProperties is a subset of properties
	      } else if( cxtHasDiffed ){
	        props = cxt.properties; // need to check them all
	      } else if( cxtHasMappedProps ){
	        props = cxt.mappedProperties; // only need to check mapped
	      }

	      for( var j = 0; j < props.length; j++ ){
	        var prop = props[ j ];
	        var name = prop.name;

	        // if a later context overrides this property, then the fact that this context has switched/diffed doesn't matter
	        // (semi expensive check since it makes this function O(n^2) on context length, but worth it since overall result
	        // is cached)
	        var laterCxtOverrides = false;
	        for( var k = i + 1; k < self.length; k++ ){
	          var laterCxt = self[ k ];
	          var hasLaterCxt = newCxtKey[ k ] === 't';

	          if( !hasLaterCxt ){ continue; } // can't override unless the context is active

	          laterCxtOverrides = laterCxt.properties[ prop.name ] != null;

	          if( laterCxtOverrides ){ break; } // exit early as long as one later context overrides
	        }

	        if( !addedProp[ name ] && !laterCxtOverrides ){
	          addedProp[ name ] = true;
	          diffProps.push( name );
	        }
	      } // for props
	    } // if

	  } // for contexts

	  cache[ dualCxtKey ] = diffProps;
	  return diffProps;
	};

	styfn.getContextMeta = function( ele ){
	  var self = this;
	  var cxtKey = '';
	  var diffProps;
	  var prevKey = ele._private.styleCxtKey || '';

	  if( self._private.newStyle ){
	    prevKey = ''; // since we need to apply all style if a fresh stylesheet
	  }

	  // get the cxt key
	  for( var i = 0; i < self.length; i++ ){
	    var context = self[ i ];
	    var contextSelectorMatches = context.selector && context.selector.matches( ele ); // NB: context.selector may be null for 'core'

	    if( contextSelectorMatches ){
	      cxtKey += 't';
	    } else {
	      cxtKey += 'f';
	    }
	  } // for context

	  diffProps = self.getPropertiesDiff( prevKey, cxtKey );

	  ele._private.styleCxtKey = cxtKey;

	  return {
	    key: cxtKey,
	    diffPropNames: diffProps
	  };
	};

	// gets a computed ele style object based on matched contexts
	styfn.getContextStyle = function( cxtMeta ){
	  var cxtKey = cxtMeta.key;
	  var self = this;
	  var cxtStyles = this._private.contextStyles = this._private.contextStyles || {};

	  // if already computed style, returned cached copy
	  if( cxtStyles[ cxtKey ] ){ return cxtStyles[ cxtKey ]; }

	  var style = {
	    _private: {
	      key: cxtKey
	    }
	  };

	  for( var i = 0; i < self.length; i++ ){
	    var cxt = self[ i ];
	    var hasCxt = cxtKey[ i ] === 't';

	    if( !hasCxt ){ continue; }

	    for( var j = 0; j < cxt.properties.length; j++ ){
	      var prop = cxt.properties[ j ];
	      var styProp = style[ prop.name ] = prop;

	      styProp.context = cxt;
	    }
	  }

	  cxtStyles[ cxtKey ] = style;
	  return style;
	};

	styfn.applyContextStyle = function( cxtMeta, cxtStyle, ele ){
	  var self = this;
	  var diffProps = cxtMeta.diffPropNames;
	  var retDiffProps = {};

	  for( var i = 0; i < diffProps.length; i++ ){
	    var diffPropName = diffProps[ i ];
	    var cxtProp = cxtStyle[ diffPropName ];
	    var eleProp = ele.pstyle( diffPropName );

	    if( !cxtProp ){ // no context prop means delete
	      if( eleProp.bypass ){
	        cxtProp = { name: diffPropName, deleteBypassed: true };
	      } else {
	        cxtProp = { name: diffPropName, delete: true };
	      }
	    }

	    // save cycles when the context prop doesn't need to be applied
	    if( eleProp === cxtProp ){ continue; }

	    var retDiffProp = retDiffProps[ diffPropName ] = {
	      prev: eleProp
	    };

	    self.applyParsedProperty( ele, cxtProp );

	    retDiffProp.next = ele.pstyle( diffPropName );

	    if( retDiffProp.next && retDiffProp.next.bypass ){
	      retDiffProp.next = retDiffProp.next.bypassed;
	    }
	  }

	  return {
	    diffProps: retDiffProps
	  };
	};

	// because a node can become and unbecome a parent, it's safer to enforce auto sizing manually
	// (i.e. the style context diff could be empty, meaning the autosizing is stale)
	styfn.enforceCompoundSizing = function(ele){
	  var self = this;

	  if( ele.isParent() ){
	    self.applyParsedProperty( ele, self.parse('width', 'auto') );
	    self.applyParsedProperty( ele, self.parse('height', 'auto') );
	  }
	};

	styfn.updateStyleHints = function(ele){
	  var _p = ele._private;
	  var self = this;

	  if( ele.removed() ){ return; }

	  // set whether has pie or not; for greater efficiency
	  var hasPie = false;
	  if( _p.group === 'nodes' ){
	    for( var i = 1; i <= self.pieBackgroundN; i++ ){ // 1..N
	      var size = ele.pstyle( 'pie-' + i + '-background-size' ).value;

	      if( size > 0 ){
	        hasPie = true;
	        break;
	      }
	    }
	  }

	  _p.hasPie = hasPie;

	  var transform = ele.pstyle( 'text-transform' ).strValue;
	  var content = ele.pstyle( 'label' ).strValue;
	  var srcContent = ele.pstyle( 'source-label' ).strValue;
	  var tgtContent = ele.pstyle( 'target-label' ).strValue;
	  var fStyle = ele.pstyle( 'font-style' ).strValue;
	  var size = ele.pstyle( 'font-size' ).pfValue + 'px';
	  var family = ele.pstyle( 'font-family' ).strValue;
	  // var variant = style['font-variant'].strValue;
	  var weight = ele.pstyle( 'font-weight' ).strValue;
	  var valign = ele.pstyle( 'text-valign' ).strValue;
	  var halign = ele.pstyle( 'text-valign' ).strValue;
	  var oWidth = ele.pstyle( 'text-outline-width' ).pfValue;
	  var wrap = ele.pstyle( 'text-wrap' ).strValue;
	  var wrapW = ele.pstyle( 'text-max-width' ).pfValue;
	  var labelStyleKey = fStyle + '$' + size + '$' + family + '$' + weight + '$' + transform + '$' + valign + '$' + halign + '$' + oWidth + '$' + wrap + '$' + wrapW;
	  _p.labelStyleKey = labelStyleKey;
	  _p.sourceLabelKey = labelStyleKey + '$' + srcContent;
	  _p.targetLabelKey = labelStyleKey + '$' + tgtContent;
	  _p.labelKey = labelStyleKey + '$' + content;
	  _p.fontKey = fStyle + '$' + weight + '$' + size + '$' + family;

	  _p.styleKey = Date.now();
	};

	// apply a property to the style (for internal use)
	// returns whether application was successful
	//
	// now, this function flattens the property, and here's how:
	//
	// for parsedProp:{ bypass: true, deleteBypass: true }
	// no property is generated, instead the bypass property in the
	// element's style is replaced by what's pointed to by the `bypassed`
	// field in the bypass property (i.e. restoring the property the
	// bypass was overriding)
	//
	// for parsedProp:{ mapped: truthy }
	// the generated flattenedProp:{ mapping: prop }
	//
	// for parsedProp:{ bypass: true }
	// the generated flattenedProp:{ bypassed: parsedProp }
	styfn.applyParsedProperty = function( ele, parsedProp ){
	  var self = this;
	  var prop = parsedProp;
	  var style = ele._private.style;
	  var fieldVal, flatProp;
	  var types = self.types;
	  var type = self.properties[ prop.name ].type;
	  var propIsBypass = prop.bypass;
	  var origProp = style[ prop.name ];
	  var origPropIsBypass = origProp && origProp.bypass;
	  var _p = ele._private;

	  // can't apply auto to width or height unless it's a parent node
	  if( (parsedProp.name === 'height' || parsedProp.name === 'width') && ele.isNode() ){
	    if( parsedProp.value === 'auto' && !ele.isParent() ){
	      return false;
	    } else if( parsedProp.value !== 'auto' && ele.isParent() ){
	      prop = parsedProp = this.parse( parsedProp.name, 'auto', propIsBypass );
	    }
	  }

	  // edges connected to compound nodes can not be haystacks
	  if(
	    parsedProp.name === 'curve-style'
	    && parsedProp.value === 'haystack'
	    && ele.isEdge()
	    && ( ele.isLoop() || ele.source().isParent() || ele.target().isParent() )
	  ){
	    prop = parsedProp = this.parse( parsedProp.name, 'bezier', propIsBypass );
	  }

	  if( prop.delete ){ // delete the property and use the default value on falsey value
	    style[ prop.name ] = undefined;

	    return true;
	  }

	  if( prop.deleteBypassed ){ // delete the property that the
	    if( !origProp ){
	      return true; // can't delete if no prop

	    } else if( origProp.bypass ){ // delete bypassed
	      origProp.bypassed = undefined;
	      return true;

	    } else {
	      return false; // we're unsuccessful deleting the bypassed
	    }
	  }

	  // check if we need to delete the current bypass
	  if( prop.deleteBypass ){ // then this property is just here to indicate we need to delete
	    if( !origProp ){
	      return true; // property is already not defined

	    } else if( origProp.bypass ){ // then replace the bypass property with the original
	      // because the bypassed property was already applied (and therefore parsed), we can just replace it (no reapplying necessary)
	      style[ prop.name ] = origProp.bypassed;
	      return true;

	    } else {
	      return false; // we're unsuccessful deleting the bypass
	    }
	  }

	  var printMappingErr = function(){
	    util.error( 'Do not assign mappings to elements without corresponding data (e.g. ele `' + ele.id() + '` for property `' + prop.name + '` with data field `' + prop.field + '`); try a `[' + prop.field + ']` selector to limit scope to elements with `' + prop.field + '` defined' );
	  };

	  // put the property in the style objects
	  switch( prop.mapped ){ // flatten the property if mapped
	  case types.mapData:
	  case types.mapLayoutData:
	  case types.mapScratch:

	    var isLayout = prop.mapped === types.mapLayoutData;
	    var isScratch = prop.mapped === types.mapScratch;

	    // flatten the field (e.g. data.foo.bar)
	    var fields = prop.field.split( '.' );
	    var fieldVal;

	    if( isScratch || isLayout ){
	      fieldVal = _p.scratch;
	    } else {
	      fieldVal = _p.data;
	    }

	    for( var i = 0; i < fields.length && fieldVal; i++ ){
	      var field = fields[ i ];
	      fieldVal = fieldVal[ field ];
	    }

	    var percent;
	    if( !is.number( fieldVal ) ){ // then keep the mapping but assume 0% for now
	      percent = 0;
	    } else {
	      percent = (fieldVal - prop.fieldMin) / (prop.fieldMax - prop.fieldMin);
	    }

	    // make sure to bound percent value
	    if( percent < 0 ){
	      percent = 0;
	    } else if( percent > 1 ){
	      percent = 1;
	    }

	    if( type.color ){
	      var r1 = prop.valueMin[0];
	      var r2 = prop.valueMax[0];
	      var g1 = prop.valueMin[1];
	      var g2 = prop.valueMax[1];
	      var b1 = prop.valueMin[2];
	      var b2 = prop.valueMax[2];
	      var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];
	      var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];

	      var clr = [
	        Math.round( r1 + (r2 - r1) * percent ),
	        Math.round( g1 + (g2 - g1) * percent ),
	        Math.round( b1 + (b2 - b1) * percent ),
	        Math.round( a1 + (a2 - a1) * percent )
	      ];

	      flatProp = { // colours are simple, so just create the flat property instead of expensive string parsing
	        bypass: prop.bypass, // we're a bypass if the mapping property is a bypass
	        name: prop.name,
	        value: clr,
	        strValue: 'rgb(' + clr[0] + ', ' + clr[1] + ', ' + clr[2] + ')'
	      };

	    } else if( type.number ){
	      var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;
	      flatProp = this.parse( prop.name, calcValue, prop.bypass, true );

	    } else {
	      return false; // can only map to colours and numbers
	    }

	    if( !flatProp ){ // if we can't flatten the property, then use the origProp so we still keep the mapping itself
	      flatProp = this.parse( prop.name, origProp.strValue, prop.bypass, true );
	    }

	    if( !flatProp ){ printMappingErr(); }
	    flatProp.mapping = prop; // keep a reference to the mapping
	    prop = flatProp; // the flattened (mapped) property is the one we want

	    break;

	  // direct mapping
	  case types.data:
	  case types.layoutData:
	  case types.scratch:
	    var isLayout = prop.mapped === types.layoutData;
	    var isScratch = prop.mapped === types.scratch;

	    // flatten the field (e.g. data.foo.bar)
	    var fields = prop.field.split( '.' );
	    var fieldVal;

	    if( isScratch || isLayout ){
	      fieldVal = _p.scratch;
	    } else {
	      fieldVal = _p.data;
	    }

	    if( fieldVal ){ for( var i = 0; i < fields.length; i++ ){
	      var field = fields[ i ];
	      fieldVal = fieldVal[ field ];
	    } }

	    flatProp = this.parse( prop.name, fieldVal, prop.bypass, true );

	    if( !flatProp ){ // if we can't flatten the property, then use the origProp so we still keep the mapping itself
	      var flatPropVal = origProp ? origProp.strValue : '';

	      flatProp = this.parse( prop.name, flatPropVal, prop.bypass, true );
	    }

	    if( !flatProp ){ printMappingErr(); }
	    flatProp.mapping = prop; // keep a reference to the mapping
	    prop = flatProp; // the flattened (mapped) property is the one we want

	    break;

	  case types.fn:
	    var fn = prop.value;
	    var fnRetVal = fn( ele );

	    flatProp = this.parse( prop.name, fnRetVal, prop.bypass, true );
	    flatProp.mapping = prop; // keep a reference to the mapping
	    prop = flatProp; // the flattened (mapped) property is the one we want

	    break;

	  case undefined:
	    break; // just set the property

	  default:
	    return false; // not a valid mapping
	  }

	  // if the property is a bypass property, then link the resultant property to the original one
	  if( propIsBypass ){
	    if( origPropIsBypass ){ // then this bypass overrides the existing one
	      prop.bypassed = origProp.bypassed; // steal bypassed prop from old bypass
	    } else { // then link the orig prop to the new bypass
	      prop.bypassed = origProp;
	    }

	    style[ prop.name ] = prop; // and set

	  } else { // prop is not bypass
	    if( origPropIsBypass ){ // then keep the orig prop (since it's a bypass) and link to the new prop
	      origProp.bypassed = prop;
	    } else { // then just replace the old prop with the new one
	      style[ prop.name ] = prop;
	    }
	  }

	  return true;
	};

	styfn.cleanElements = function( eles, keepBypasses ){
	  var self = this;
	  var props = self.properties;

	  for( var i = 0; i < eles.length; i++ ){
	    var ele = eles[i];

	    if( !keepBypasses ){
	      ele._private.style = {};
	    } else {
	      var style = ele._private.style;

	      for( var j = 0; j < props.length; j++ ){
	        var prop = props[j];
	        var eleProp = style[ prop.name ];

	        if( eleProp ){
	          if( eleProp.bypass ){
	            eleProp.bypassed = null;
	          } else {
	            style[ prop.name ] = null;
	          }
	        }
	      }
	    }
	  }
	};

	// updates the visual style for all elements (useful for manual style modification after init)
	styfn.update = function(){
	  var cy = this._private.cy;
	  var eles = cy.mutableElements();

	  eles.updateStyle();
	};

	// just update the functional properties (i.e. mappings) in the elements'
	// styles (less expensive than recalculation)
	styfn.updateMappers = function( eles ){
	  var self = this;

	  for( var i = 0; i < eles.length; i++ ){ // for each ele
	    var ele = eles[ i ];
	    var style = ele._private.style;

	    for( var j = 0; j < self.properties.length; j++ ){ // for each prop
	      var prop = self.properties[ j ];
	      var propInStyle = style[ prop.name ];

	      if( propInStyle && propInStyle.mapping ){
	        var mapping = propInStyle.mapping;
	        this.applyParsedProperty( ele, mapping ); // reapply the mapping property
	      }
	    }

	    this.updateStyleHints( ele );
	  }
	};

	// diffProps : { name => { prev, next } }
	styfn.updateTransitions = function( ele, diffProps, isBypass ){
	  var self = this;
	  var _p = ele._private;
	  var props = ele.pstyle( 'transition-property' ).value;
	  var duration = ele.pstyle( 'transition-duration' ).pfValue;
	  var delay = ele.pstyle( 'transition-delay' ).pfValue;

	  if( props.length > 0 && duration > 0 ){

	    var css = {};

	    // build up the style to animate towards
	    var anyPrev = false;
	    for( var i = 0; i < props.length; i++ ){
	      var prop = props[ i ];
	      var styProp = ele.pstyle( prop );
	      var diffProp = diffProps[ prop ];

	      if( !diffProp ){ continue; }

	      var prevProp = diffProp.prev;
	      var fromProp = prevProp;
	      var toProp = diffProp.next != null ? diffProp.next : styProp;
	      var diff = false;
	      var initVal;
	      var initDt = 0.000001; // delta time % value for initVal (allows animating out of init zero opacity)

	      if( !fromProp ){ continue; }

	      // consider px values
	      if( is.number( fromProp.pfValue ) && is.number( toProp.pfValue ) ){
	        diff = toProp.pfValue - fromProp.pfValue; // nonzero is truthy
	        initVal = fromProp.pfValue + initDt * diff;

	      // consider numerical values
	      } else if( is.number( fromProp.value ) && is.number( toProp.value ) ){
	        diff = toProp.value - fromProp.value; // nonzero is truthy
	        initVal = fromProp.value + initDt * diff;

	      // consider colour values
	      } else if( is.array( fromProp.value ) && is.array( toProp.value ) ){
	        diff = fromProp.value[0] !== toProp.value[0]
	          || fromProp.value[1] !== toProp.value[1]
	          || fromProp.value[2] !== toProp.value[2]
	        ;

	        initVal = fromProp.strValue;
	      }

	      // the previous value is good for an animation only if it's different
	      if( diff ){
	        css[ prop ] = toProp.strValue; // to val
	        this.applyBypass( ele, prop, initVal ); // from val
	        anyPrev = true;
	      }

	    } // end if props allow ani

	    // can't transition if there's nothing previous to transition from
	    if( !anyPrev ){ return; }

	    _p.transitioning = true;

	    ele.stop();

	    if( delay > 0 ){
	      ele.delay( delay );
	    }

	    ele.animate( {
	      css: css
	    }, {
	      duration: duration,
	      easing: ele.pstyle( 'transition-timing-function' ).value,
	      queue: false,
	      complete: function(){
	        if( !isBypass ){
	          self.removeBypasses( ele, props );
	        }

	        _p.transitioning = false;
	      }
	    } );

	  } else if( _p.transitioning ){
	    ele.stop();

	    this.removeBypasses( ele, props );

	    _p.transitioning = false;
	  }
	};

	module.exports = styfn;


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );
	var util = __webpack_require__( 75 );

	var styfn = {};

	// bypasses are applied to an existing style on an element, and just tacked on temporarily
	// returns true iff application was successful for at least 1 specified property
	styfn.applyBypass = function( eles, name, value, updateTransitions ){
	  var self = this;
	  var props = [];
	  var isBypass = true;

	  // put all the properties (can specify one or many) in an array after parsing them
	  if( name === '*' || name === '**' ){ // apply to all property names

	    if( value !== undefined ){
	      for( var i = 0; i < self.properties.length; i++ ){
	        var prop = self.properties[ i ];
	        var name = prop.name;

	        var parsedProp = this.parse( name, value, true );

	        if( parsedProp ){
	          props.push( parsedProp );
	        }
	      }
	    }

	  } else if( is.string( name ) ){ // then parse the single property
	    var parsedProp = this.parse( name, value, true );

	    if( parsedProp ){
	      props.push( parsedProp );
	    }
	  } else if( is.plainObject( name ) ){ // then parse each property
	    var specifiedProps = name;
	    updateTransitions = value;

	    for( var i = 0; i < self.properties.length; i++ ){
	      var prop = self.properties[ i ];
	      var name = prop.name;
	      var value = specifiedProps[ name ];

	      if( value === undefined ){ // try camel case name too
	        value = specifiedProps[ util.dash2camel( name ) ];
	      }

	      if( value !== undefined ){
	        var parsedProp = this.parse( name, value, true );

	        if( parsedProp ){
	          props.push( parsedProp );
	        }
	      }
	    }
	  } else { // can't do anything without well defined properties
	    return false;
	  }

	  // we've failed if there are no valid properties
	  if( props.length === 0 ){ return false; }

	  // now, apply the bypass properties on the elements
	  var ret = false; // return true if at least one succesful bypass applied
	  for( var i = 0; i < eles.length; i++ ){ // for each ele
	    var ele = eles[ i ];
	    var diffProps = {};
	    var diffProp;

	    for( var j = 0; j < props.length; j++ ){ // for each prop
	      var prop = props[ j ];

	      if( updateTransitions ){
	        var prevProp = ele.pstyle( prop.name );
	        diffProp = diffProps[ prop.name ] = { prev: prevProp };
	      }

	      ret = this.applyParsedProperty( ele, prop ) || ret;

	      if( updateTransitions ){
	        diffProp.next = ele.pstyle( prop.name );
	      }

	    } // for props

	    if( ret ){
	      this.updateStyleHints( ele );
	    }

	    if( updateTransitions ){
	      this.updateTransitions( ele, diffProps, isBypass );
	    }
	  } // for eles

	  return ret;
	};

	// only useful in specific cases like animation
	styfn.overrideBypass = function( eles, name, value ){
	  name = util.camel2dash( name );

	  for( var i = 0; i < eles.length; i++ ){
	    var ele = eles[ i ];
	    var prop = ele._private.style[ name ];
	    var type = this.properties[ name ].type;
	    var isColor = type.color;
	    var isMulti = type.mutiple;

	    if( !prop || !prop.bypass ){ // need a bypass if one doesn't exist
	      this.applyBypass( ele, name, value );
	      continue;
	    }

	    prop.value = value;

	    if( prop.pfValue != null ){
	      prop.pfValue = value;
	    }

	    if( isColor ){
	      prop.strValue = 'rgb(' + value.join( ',' ) + ')';
	    } else if( isMulti ){
	      prop.strValue = value.join( ' ' );
	    } else {
	      prop.strValue = '' + value;
	    }
	  }
	};

	styfn.removeAllBypasses = function( eles, updateTransitions ){
	  return this.removeBypasses( eles, this.propertyNames, updateTransitions );
	};

	styfn.removeBypasses = function( eles, props, updateTransitions ){
	  var isBypass = true;

	  for( var j = 0; j < eles.length; j++ ){
	    var ele = eles[ j ];
	    var diffProps = {};

	    for( var i = 0; i < props.length; i++ ){
	      var name = props[ i ];
	      var prop = this.properties[ name ];
	      var prevProp = ele.pstyle( prop.name );

	      if( !prevProp || !prevProp.bypass ){
	        // if a bypass doesn't exist for the prop, nothing needs to be removed
	        continue;
	      }

	      var value = ''; // empty => remove bypass
	      var parsedProp = this.parse( name, value, true );
	      var diffProp = diffProps[ prop.name ] = { prev: prevProp };

	      this.applyParsedProperty( ele, parsedProp );

	      diffProp.next = ele.pstyle( prop.name );
	    } // for props

	    this.updateStyleHints( ele );

	    if( updateTransitions ){
	      this.updateTransitions( ele, diffProps, isBypass );
	    }
	  } // for eles
	};

	module.exports = styfn;


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var window = __webpack_require__( 72 );

	var styfn = {};

	// gets what an em size corresponds to in pixels relative to a dom element
	styfn.getEmSizeInPixels = function(){
	  var px = this.containerCss( 'font-size' );

	  if( px != null ){
	    return parseFloat( px );
	  } else {
	    return 1; // for headless
	  }
	};

	// gets css property from the core container
	styfn.containerCss = function( propName ){
	  var cy = this._private.cy;
	  var domElement = cy.container();

	  if( window && domElement && window.getComputedStyle ){
	    return window.getComputedStyle( domElement ).getPropertyValue( propName );
	  }
	};

	module.exports = styfn;


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var is = __webpack_require__( 73 );

	var styfn = {};

	// gets the rendered style for an element
	styfn.getRenderedStyle = function( ele ){
	  return this.getRawStyle( ele, true );
	};

	// gets the raw style for an element
	styfn.getRawStyle = function( ele, isRenderedVal ){
	  var self = this;
	  var ele = ele[0]; // insure it's an element

	  if( ele ){
	    var rstyle = {};

	    for( var i = 0; i < self.properties.length; i++ ){
	      var prop = self.properties[ i ];
	      var val = self.getStylePropertyValue( ele, prop.name, isRenderedVal );

	      if( val ){
	        rstyle[ prop.name ] = val;
	        rstyle[ util.dash2camel( prop.name ) ] = val;
	      }
	    }

	    return rstyle;
	  }
	};

	styfn.getStylePropertyValue = function( ele, propName, isRenderedVal ){
	  var self = this;
	  var ele = ele[0]; // insure it's an element

	  if( ele ){
	    var prop = self.properties[ propName ];
	    var type = prop.type;
	    var styleProp = ele.pstyle( prop.name );
	    var zoom = ele.cy().zoom();

	    if( styleProp ){
	      var units = styleProp.units ? type.implicitUnits || 'px' : null;
	      var val = units ? [].concat( styleProp.pfValue ).map( function( pfValue ){
	        return ( pfValue * (isRenderedVal ? zoom : 1) ) + units;
	      } ).join( ' ' ) : styleProp.strValue;

	      return val;
	    }
	  }
	};

	styfn.getAnimationStartStyle = function( ele, aniProps ){
	  var rstyle = {};

	  for( var i = 0; i < aniProps.length; i++ ){
	    var aniProp = aniProps[ i ];
	    var name = aniProp.name;

	    var styleProp = ele.pstyle( name );

	    if( styleProp !== undefined ){ // then make a prop of it
	      if( is.plainObject( styleProp ) ){
	        styleProp = this.parse( name, styleProp.strValue );
	      } else {
	        styleProp = this.parse( name, styleProp );
	      }
	    }

	    if( styleProp ){
	      rstyle[ name ] = styleProp;
	    }
	  }

	  return rstyle;
	};

	styfn.getPropsList = function( propsObj ){
	  var self = this;
	  var rstyle = [];
	  var style = propsObj;
	  var props = self.properties;

	  if( style ){
	    var names = Object.keys( style );

	    for( var i = 0; i < names.length; i++ ){
	      var name = names[i];
	      var val = style[ name ];
	      var prop = props[ name ] || props[ util.camel2dash( name ) ];
	      var styleProp = this.parse( prop.name, val );

	      rstyle.push( styleProp );
	    }
	  }

	  return rstyle;
	};

	module.exports = styfn;


/***/ },
/* 133 */
/***/ function(module, exports) {

	'use strict';

	var styfn = {};

	styfn.applyFromJson = function( json ){
	  var style = this;

	  for( var i = 0; i < json.length; i++ ){
	    var context = json[ i ];
	    var selector = context.selector;
	    var props = context.style || context.css;
	    var names = Object.keys( props );

	    style.selector( selector ); // apply selector

	    for( var j = 0; j < names.length; j++ ){
	      var name = names[j];
	      var value = props[ name ];

	      style.css( name, value ); // apply property
	    }
	  }

	  return style;
	};

	// accessible cy.style() function
	styfn.fromJson = function( json ){
	  var style = this;

	  style.resetToDefault();
	  style.applyFromJson( json );

	  return style;
	};

	// get json from cy.style() api
	styfn.json = function(){
	  var json = [];

	  for( var i = this.defaultLength; i < this.length; i++ ){
	    var cxt = this[ i ];
	    var selector = cxt.selector;
	    var props = cxt.properties;
	    var css = {};

	    for( var j = 0; j < props.length; j++ ){
	      var prop = props[ j ];
	      css[ prop.name ] = prop.strValue;
	    }

	    json.push( {
	      selector: !selector ? 'core' : selector.toString(),
	      style: css
	    } );
	  }

	  return json;
	};

	module.exports = styfn;


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var Selector = __webpack_require__( 100 );

	var styfn = {};

	styfn.applyFromString = function( string ){
	  var self = this;
	  var style = this;
	  var remaining = '' + string;
	  var selAndBlockStr;
	  var blockRem;
	  var propAndValStr;

	  // remove comments from the style string
	  remaining = remaining.replace( /[/][*](\s|.)+?[*][/]/g, '' );

	  function removeSelAndBlockFromRemaining(){
	    // remove the parsed selector and block from the remaining text to parse
	    if( remaining.length > selAndBlockStr.length ){
	      remaining = remaining.substr( selAndBlockStr.length );
	    } else {
	      remaining = '';
	    }
	  }

	  function removePropAndValFromRem(){
	    // remove the parsed property and value from the remaining block text to parse
	    if( blockRem.length > propAndValStr.length ){
	      blockRem = blockRem.substr( propAndValStr.length );
	    } else {
	      blockRem = '';
	    }
	  }

	  while( true ){
	    var nothingLeftToParse = remaining.match( /^\s*$/ );
	    if( nothingLeftToParse ){ break; }

	    var selAndBlock = remaining.match( /^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/ );

	    if( !selAndBlock ){
	      util.error( 'Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: ' + remaining );
	      break;
	    }

	    selAndBlockStr = selAndBlock[0];

	    // parse the selector
	    var selectorStr = selAndBlock[1];
	    if( selectorStr !== 'core' ){
	      var selector = new Selector( selectorStr );
	      if( selector._private.invalid ){
	        util.error( 'Skipping parsing of block: Invalid selector found in string stylesheet: ' + selectorStr );

	        // skip this selector and block
	        removeSelAndBlockFromRemaining();
	        continue;
	      }
	    }

	    // parse the block of properties and values
	    var blockStr = selAndBlock[2];
	    var invalidBlock = false;
	    blockRem = blockStr;
	    var props = [];

	    while( true ){
	      var nothingLeftToParse = blockRem.match( /^\s*$/ );
	      if( nothingLeftToParse ){ break; }

	      var propAndVal = blockRem.match( /^\s*(.+?)\s*:\s*(.+?)\s*;/ );

	      if( !propAndVal ){
	        util.error( 'Skipping parsing of block: Invalid formatting of style property and value definitions found in:' + blockStr );
	        invalidBlock = true;
	        break;
	      }

	      propAndValStr = propAndVal[0];
	      var propStr = propAndVal[1];
	      var valStr = propAndVal[2];

	      var prop = self.properties[ propStr ];
	      if( !prop ){
	        util.error( 'Skipping property: Invalid property name in: ' + propAndValStr );

	        // skip this property in the block
	        removePropAndValFromRem();
	        continue;
	      }

	      var parsedProp = style.parse( propStr, valStr );

	      if( !parsedProp ){
	        util.error( 'Skipping property: Invalid property definition in: ' + propAndValStr );

	        // skip this property in the block
	        removePropAndValFromRem();
	        continue;
	      }

	      props.push( {
	        name: propStr,
	        val: valStr
	      } );
	      removePropAndValFromRem();
	    }

	    if( invalidBlock ){
	      removeSelAndBlockFromRemaining();
	      break;
	    }

	    // put the parsed block in the style
	    style.selector( selectorStr );
	    for( var i = 0; i < props.length; i++ ){
	      var prop = props[ i ];
	      style.css( prop.name, prop.val );
	    }

	    removeSelAndBlockFromRemaining();
	  }

	  return style;
	};

	styfn.fromString = function( string ){
	  var style = this;

	  style.resetToDefault();
	  style.applyFromString( string );

	  return style;
	};

	module.exports = styfn;


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );

	var styfn = {};

	(function(){
	  var number = util.regex.number;
	  var rgba = util.regex.rgbaNoBackRefs;
	  var hsla = util.regex.hslaNoBackRefs;
	  var hex3 = util.regex.hex3;
	  var hex6 = util.regex.hex6;
	  var data = function( prefix ){ return '^' + prefix + '\\s*\\(\\s*([\\w\\.]+)\\s*\\)$'; };
	  var mapData = function( prefix ){
	    var mapArg = number + '|\\w+|' + rgba + '|' + hsla + '|' + hex3 + '|' + hex6;
	    return '^' + prefix + '\\s*\\(([\\w\\.]+)\\s*\\,\\s*(' + number + ')\\s*\\,\\s*(' + number + ')\\s*,\\s*(' + mapArg + ')\\s*\\,\\s*(' + mapArg + ')\\)$';
	  };

	  // each visual style property has a type and needs to be validated according to it
	  styfn.types = {
	    time: { number: true, min: 0, units: 's|ms', implicitUnits: 'ms' },
	    percent: { number: true, min: 0, max: 100, units: '%', implicitUnits: '%' },
	    zeroOneNumber: { number: true, min: 0, max: 1, unitless: true },
	    nOneOneNumber: { number: true, min: -1, max: 1, unitless: true },
	    nonNegativeInt: { number: true, min: 0, integer: true, unitless: true },
	    position: { enums: [ 'parent', 'origin' ] },
	    nodeSize: { number: true, min: 0, enums: [ 'auto', 'label' ] },
	    number: { number: true, unitless: true },
	    numbers: { number: true, unitless: true, multiple: true },
	    size: { number: true, min: 0 },
	    bidirectionalSize: { number: true }, // allows negative
	    bidirectionalSizes: { number: true, multiple: true }, // allows negative
	    bgSize: { number: true, min: 0, allowPercent: true },
	    bgWH: { number: true, min: 0, allowPercent: true, enums: [ 'auto' ] },
	    bgPos: { number: true, allowPercent: true },
	    bgRepeat: { enums: [ 'repeat', 'repeat-x', 'repeat-y', 'no-repeat' ] },
	    bgFit: { enums: [ 'none', 'contain', 'cover' ] },
	    bgClip: { enums: [ 'none', 'node' ] },
	    color: { color: true },
	    bool: { enums: [ 'yes', 'no' ] },
	    lineStyle: { enums: [ 'solid', 'dotted', 'dashed' ] },
	    borderStyle: { enums: [ 'solid', 'dotted', 'dashed', 'double' ] },
	    curveStyle: { enums: [ 'bezier', 'unbundled-bezier', 'haystack', 'segments' ] },
	    fontFamily: { regex: '^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$' },
	    fontVariant: { enums: [ 'small-caps', 'normal' ] },
	    fontStyle: { enums: [ 'italic', 'normal', 'oblique' ] },
	    fontWeight: { enums: [ 'normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '800', '900', 100, 200, 300, 400, 500, 600, 700, 800, 900 ] },
	    textDecoration: { enums: [ 'none', 'underline', 'overline', 'line-through' ] },
	    textTransform: { enums: [ 'none', 'uppercase', 'lowercase' ] },
	    textWrap: { enums: [ 'none', 'wrap' ] },
	    textBackgroundShape: { enums: [ 'rectangle', 'roundrectangle' ]},
	    nodeShape: { enums: [ 'rectangle', 'roundrectangle', 'ellipse', 'triangle', 'square', 'pentagon', 'hexagon', 'heptagon', 'octagon', 'star', 'diamond', 'vee', 'rhomboid', 'polygon' ] },
	    compoundIncludeLabels: { enums: [ 'include', 'exclude' ] },
	    arrowShape: { enums: [ 'tee', 'triangle', 'triangle-tee', 'triangle-backcurve', 'half-triangle-overshot', 'vee', 'square', 'circle', 'diamond', 'none' ] },
	    arrowFill: { enums: [ 'filled', 'hollow' ] },
	    display: { enums: [ 'element', 'none' ] },
	    visibility: { enums: [ 'hidden', 'visible' ] },
	    valign: { enums: [ 'top', 'center', 'bottom' ] },
	    halign: { enums: [ 'left', 'center', 'right' ] },
	    text: { string: true },
	    data: { mapping: true, regex: data( 'data' ) },
	    layoutData: { mapping: true, regex: data( 'layoutData' ) },
	    scratch: { mapping: true, regex: data( 'scratch' ) },
	    mapData: { mapping: true, regex: mapData( 'mapData' ) },
	    mapLayoutData: { mapping: true, regex: mapData( 'mapLayoutData' ) },
	    mapScratch: { mapping: true, regex: mapData( 'mapScratch' ) },
	    fn: { mapping: true, fn: true },
	    url: { regex: '^url\\s*\\(\\s*([^\\s]+)\\s*\\s*\\)|none|(.+)$' },
	    propList: { propList: true },
	    angle: { number: true, units: 'deg|rad', implicitUnits: 'rad' },
	    textRotation: { number: true, units: 'deg|rad', implicitUnits: 'rad', enums: [ 'none', 'autorotate' ] },
	    polygonPointList: { number: true, multiple: true, evenMultiple: true, min: -1, max: 1, unitless: true },
	    edgeDistances: { enums: ['intersection', 'node-position'] },
	    easing: {
	      regexes: [
	        '^(spring)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$',
	        '^(cubic-bezier)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$'
	      ],
	      enums: [
	        'linear',
	        'ease', 'ease-in', 'ease-out', 'ease-in-out',
	        'ease-in-sine', 'ease-out-sine', 'ease-in-out-sine',
	        'ease-in-quad', 'ease-out-quad', 'ease-in-out-quad',
	        'ease-in-cubic', 'ease-out-cubic', 'ease-in-out-cubic',
	        'ease-in-quart', 'ease-out-quart', 'ease-in-out-quart',
	        'ease-in-quint', 'ease-out-quint', 'ease-in-out-quint',
	        'ease-in-expo', 'ease-out-expo', 'ease-in-out-expo',
	        'ease-in-circ', 'ease-out-circ', 'ease-in-out-circ'
	      ]
	    }
	  };

	  // define visual style properties
	  var t = styfn.types;
	  var props = styfn.properties = [
	    // main label
	    { name: 'label', type: t.text },
	    { name: 'text-rotation', type: t.textRotation },
	    { name: 'text-margin-x', type: t.bidirectionalSize },
	    { name: 'text-margin-y', type: t.bidirectionalSize },

	    // source label
	    { name: 'source-label', type: t.text },
	    { name: 'source-text-rotation', type: t.textRotation },
	    { name: 'source-text-margin-x', type: t.bidirectionalSize },
	    { name: 'source-text-margin-y', type: t.bidirectionalSize },
	    { name: 'source-text-offset', type: t.size },

	    // target label
	    { name: 'target-label', type: t.text },
	    { name: 'target-text-rotation', type: t.textRotation },
	    { name: 'target-text-margin-x', type: t.bidirectionalSize },
	    { name: 'target-text-margin-y', type: t.bidirectionalSize },
	    { name: 'target-text-offset', type: t.size },

	    // common label style
	    { name: 'text-valign', type: t.valign },
	    { name: 'text-halign', type: t.halign },
	    { name: 'color', type: t.color },
	    { name: 'text-outline-color', type: t.color },
	    { name: 'text-outline-width', type: t.size },
	    { name: 'text-outline-opacity', type: t.zeroOneNumber },
	    { name: 'text-opacity', type: t.zeroOneNumber },
	    { name: 'text-background-color', type: t.color },
	    { name: 'text-background-margin', type: t.size },
	    { name: 'text-background-opacity', type: t.zeroOneNumber },
	    { name: 'text-border-opacity', type: t.zeroOneNumber },
	    { name: 'text-border-color', type: t.color },
	    { name: 'text-border-width', type: t.size },
	    { name: 'text-border-style', type: t.borderStyle },
	    { name: 'text-background-shape', type: t.textBackgroundShape},
	    // { name: 'text-decoration', type: t.textDecoration }, // not supported in canvas
	    { name: 'text-transform', type: t.textTransform },
	    { name: 'text-wrap', type: t.textWrap },
	    { name: 'text-max-width', type: t.size },
	    { name: 'text-events', type: t.bool },
	    { name: 'font-family', type: t.fontFamily },
	    { name: 'font-style', type: t.fontStyle },
	    // { name: 'font-variant', type: t.fontVariant }, // not useful
	    { name: 'font-weight', type: t.fontWeight },
	    { name: 'font-size', type: t.size },
	    { name: 'min-zoomed-font-size', type: t.size },

	    // behaviour
	    { name: 'events', type: t.bool },

	    // visibility
	    { name: 'display', type: t.display },
	    { name: 'visibility', type: t.visibility },
	    { name: 'opacity', type: t.zeroOneNumber },
	    { name: 'z-index', type: t.nonNegativeInt },

	    // overlays
	    { name: 'overlay-padding', type: t.size },
	    { name: 'overlay-color', type: t.color },
	    { name: 'overlay-opacity', type: t.zeroOneNumber },

	    // shadows
	    { name: 'shadow-blur', type: t.size },
	    { name: 'shadow-color', type: t.color },
	    { name: 'shadow-opacity', type: t.zeroOneNumber },
	    { name: 'shadow-offset-x', type: t.bidirectionalSize },
	    { name: 'shadow-offset-y', type: t.bidirectionalSize },

	    // label shadows
	    { name: 'text-shadow-blur', type: t.size },
	    { name: 'text-shadow-color', type: t.color },
	    { name: 'text-shadow-opacity', type: t.zeroOneNumber },
	    { name: 'text-shadow-offset-x', type: t.bidirectionalSize },
	    { name: 'text-shadow-offset-y', type: t.bidirectionalSize },

	    // transition anis
	    { name: 'transition-property', type: t.propList },
	    { name: 'transition-duration', type: t.time },
	    { name: 'transition-delay', type: t.time },
	    { name: 'transition-timing-function', type: t.easing },

	    // node body
	    { name: 'height', type: t.nodeSize },
	    { name: 'width', type: t.nodeSize },
	    { name: 'shape', type: t.nodeShape },
	    { name: 'shape-polygon-points', type: t.polygonPointList },
	    { name: 'background-color', type: t.color },
	    { name: 'background-opacity', type: t.zeroOneNumber },
	    { name: 'background-blacken', type: t.nOneOneNumber },
	    { name: 'padding-left', type: t.size },
	    { name: 'padding-right', type: t.size },
	    { name: 'padding-top', type: t.size },
	    { name: 'padding-bottom', type: t.size },

	    // node border
	    { name: 'border-color', type: t.color },
	    { name: 'border-opacity', type: t.zeroOneNumber },
	    { name: 'border-width', type: t.size },
	    { name: 'border-style', type: t.borderStyle },

	    // node background images
	    { name: 'background-image', type: t.url },
	    { name: 'background-image-opacity', type: t.zeroOneNumber },
	    { name: 'background-position-x', type: t.bgPos },
	    { name: 'background-position-y', type: t.bgPos },
	    { name: 'background-repeat', type: t.bgRepeat },
	    { name: 'background-fit', type: t.bgFit },
	    { name: 'background-clip', type: t.bgClip },
	    { name: 'background-width', type: t.bgWH },
	    { name: 'background-height', type: t.bgWH },

	    // compound props
	    { name: 'position', type: t.position },
	    { name: 'compound-sizing-wrt-labels', type: t.compoundIncludeLabels },

	    // edge line
	    { name: 'line-style', type: t.lineStyle },
	    { name: 'line-color', type: t.color },
	    { name: 'curve-style', type: t.curveStyle },
	    { name: 'haystack-radius', type: t.zeroOneNumber },
	    { name: 'control-point-step-size', type: t.size },
	    { name: 'control-point-distances', type: t.bidirectionalSizes },
	    { name: 'control-point-weights', type: t.numbers },
	    { name: 'segment-distances', type: t.bidirectionalSizes },
	    { name: 'segment-weights', type: t.numbers },
	    { name: 'edge-distances', type: t.edgeDistances },

	    // these are just for the core
	    { name: 'selection-box-color', type: t.color },
	    { name: 'selection-box-opacity', type: t.zeroOneNumber },
	    { name: 'selection-box-border-color', type: t.color },
	    { name: 'selection-box-border-width', type: t.size },
	    { name: 'active-bg-color', type: t.color },
	    { name: 'active-bg-opacity', type: t.zeroOneNumber },
	    { name: 'active-bg-size', type: t.size },
	    { name: 'outside-texture-bg-color', type: t.color },
	    { name: 'outside-texture-bg-opacity', type: t.zeroOneNumber }
	  ];

	  // define aliases
	  var aliases = styfn.aliases = [
	    { name: 'content', pointsTo: 'label' },
	    { name: 'control-point-distance', pointsTo: 'control-point-distances' },
	    { name: 'control-point-weight', pointsTo: 'control-point-weights' },
	    { name: 'edge-text-rotation', pointsTo: 'text-rotation' }
	  ];

	  // pie backgrounds for nodes
	  styfn.pieBackgroundN = 16; // because the pie properties are numbered, give access to a constant N (for renderer use)
	  props.push( { name: 'pie-size', type: t.bgSize } );
	  for( var i = 1; i <= styfn.pieBackgroundN; i++ ){
	    props.push( { name: 'pie-' + i + '-background-color', type: t.color } );
	    props.push( { name: 'pie-' + i + '-background-size', type: t.percent } );
	    props.push( { name: 'pie-' + i + '-background-opacity', type: t.zeroOneNumber } );
	  }

	  // edge arrows
	  var arrowPrefixes = styfn.arrowPrefixes = [ 'source', 'mid-source', 'target', 'mid-target' ];
	  [
	    { name: 'arrow-shape', type: t.arrowShape },
	    { name: 'arrow-color', type: t.color },
	    { name: 'arrow-fill', type: t.arrowFill }
	  ].forEach( function( prop ){
	    arrowPrefixes.forEach( function( prefix ){
	      var name = prefix + '-' + prop.name;
	      var type = prop.type;

	      props.push( { name: name, type: type } );
	    } );
	  }, {} );

	  // list of property names
	  styfn.propertyNames = props.map( function( p ){ return p.name; } );

	  // allow access of properties by name ( e.g. style.properties.height )
	  for( var i = 0; i < props.length; i++ ){
	    var prop = props[ i ];

	    props[ prop.name ] = prop; // allow lookup by name
	  }

	  // map aliases
	  for( var i = 0; i < aliases.length; i++ ){
	    var alias = aliases[ i ];
	    var pointsToProp = props[ alias.pointsTo ];
	    var aliasProp = {
	      name: alias.name,
	      alias: true,
	      pointsTo: pointsToProp
	    };

	    // add alias prop for parsing
	    props.push( aliasProp );

	    props[ alias.name ] = aliasProp; // allow lookup by name
	  }
	})();

	styfn.getDefaultProperty = function( name ){
	  return this.getDefaultProperties()[ name ];
	};

	styfn.getDefaultProperties = util.memoize( function(){
	  var rawProps = util.extend( {
	    'events': 'yes',
	    'text-events': 'no',
	    'text-valign': 'top',
	    'text-halign': 'center',
	    'color': '#000',
	    'text-outline-color': '#000',
	    'text-outline-width': 0,
	    'text-outline-opacity': 1,
	    'text-opacity': 1,
	    'text-decoration': 'none',
	    'text-transform': 'none',
	    'text-wrap': 'none',
	    'text-max-width': 9999,
	    'text-background-color': '#000',
	    'text-background-opacity': 0,
	    'text-background-margin': 0,
	    'text-border-opacity': 0,
	    'text-border-width': 0,
	    'text-border-style': 'solid',
	    'text-border-color': '#000',
	    'text-background-shape': 'rectangle',
	    'font-family': 'Helvetica Neue, Helvetica, sans-serif',
	    'font-style': 'normal',
	    // 'font-variant': fontVariant,
	    'font-weight': 'normal',
	    'font-size': 16,
	    'min-zoomed-font-size': 0,
	    'text-rotation': 'none',
	    'source-text-rotation': 'none',
	    'target-text-rotation': 'none',
	    'visibility': 'visible',
	    'display': 'element',
	    'opacity': 1,
	    'z-index': 0,
	    'label': '',
	    'text-margin-x': 0,
	    'text-margin-y': 0,
	    'source-label': '',
	    'source-text-offset': 0,
	    'source-text-margin-x': 0,
	    'source-text-margin-y': 0,
	    'target-label': '',
	    'target-text-offset': 0,
	    'target-text-margin-x': 0,
	    'target-text-margin-y': 0,
	    'overlay-opacity': 0,
	    'overlay-color': '#000',
	    'overlay-padding': 10,
	    'shadow-opacity': 0,
	    'shadow-color': '#000',
	    'shadow-blur': 10,
	    'shadow-offset-x': 0,
	    'shadow-offset-y': 0,
	    'text-shadow-opacity': 0,
	    'text-shadow-color': '#000',
	    'text-shadow-blur': 5,
	    'text-shadow-offset-x': 0,
	    'text-shadow-offset-y': 0,
	    'transition-property': 'none',
	    'transition-duration': 0,
	    'transition-delay': 0,
	    'transition-timing-function': 'linear',

	    // node props
	    'background-blacken': 0,
	    'background-color': '#999',
	    'background-opacity': 1,
	    'background-image': 'none',
	    'background-image-opacity': 1,
	    'background-position-x': '50%',
	    'background-position-y': '50%',
	    'background-repeat': 'no-repeat',
	    'background-fit': 'none',
	    'background-clip': 'node',
	    'background-width': 'auto',
	    'background-height': 'auto',
	    'border-color': '#000',
	    'border-opacity': 1,
	    'border-width': 0,
	    'border-style': 'solid',
	    'height': 30,
	    'width': 30,
	    'shape': 'ellipse',
	    'shape-polygon-points': '-1, -1,   1, -1,   1, 1,   -1, 1',

	    // compound props
	    'padding-top': 0,
	    'padding-bottom': 0,
	    'padding-left': 0,
	    'padding-right': 0,
	    'position': 'origin',
	    'compound-sizing-wrt-labels': 'include'
	  }, {
	    // node pie bg
	    'pie-size': '100%'
	  }, [
	    { name: 'pie-{{i}}-background-color', value: 'black' },
	    { name: 'pie-{{i}}-background-size', value: '0%' },
	    { name: 'pie-{{i}}-background-opacity', value: 1 }
	  ].reduce( function( css, prop ){
	    for( var i = 1; i <= styfn.pieBackgroundN; i++ ){
	      var name = prop.name.replace( '{{i}}', i );
	      var val = prop.value;

	      css[ name ] = val;
	    }

	    return css;
	  }, {} ), {
	    // edge props
	    'line-style': 'solid',
	    'line-color': '#999',
	    'control-point-step-size': 40,
	    'control-point-weights': 0.5,
	    'segment-weights': 0.5,
	    'segment-distances': 20,
	    'edge-distances': 'intersection',
	    'curve-style': 'bezier',
	    'haystack-radius': 0
	  }, [
	    { name: 'arrow-shape', value: 'none' },
	    { name: 'arrow-color', value: '#999' },
	    { name: 'arrow-fill', value: 'filled' }
	  ].reduce( function( css, prop ){
	    styfn.arrowPrefixes.forEach( function( prefix ){
	      var name = prefix + '-' + prop.name;
	      var val = prop.value;

	      css[ name ] = val;
	    } );

	    return css;
	  }, {} ) );

	  var parsedProps = {};

	  for( var i = 0; i < this.properties.length; i++ ){
	    var prop = this.properties[i];

	    if( prop.pointsTo ){ continue; }

	    var name = prop.name;
	    var val = rawProps[ name ];
	    var parsedProp = this.parse( name, val );

	    parsedProps[ name ] = parsedProp;
	  }

	  return parsedProps;
	} );

	styfn.addDefaultStylesheet = function(){
	  this
	    .selector( '$node > node' ) // compound (parent) node properties
	      .css( {
	        'width': 'auto',
	        'height': 'auto',
	        'shape': 'rectangle',
	        'padding-top': 10,
	        'padding-right': 10,
	        'padding-left': 10,
	        'padding-bottom': 10,
	        'background-color': '#eee',
	        'border-color': '#ccc',
	        'border-width': 1
	      } )
	    .selector( 'edge' ) // just edge properties
	      .css( {
	        'width': 3,
	        'curve-style': 'haystack'
	      } )
	    .selector( ':selected' )
	      .css( {
	        'background-color': '#0169D9',
	        'line-color': '#0169D9',
	        'source-arrow-color': '#0169D9',
	        'target-arrow-color': '#0169D9',
	        'mid-source-arrow-color': '#0169D9',
	        'mid-target-arrow-color': '#0169D9'
	      } )
	    .selector( 'node:parent:selected' )
	      .css( {
	        'background-color': '#CCE1F9',
	        'border-color': '#aec8e5'
	      } )
	    .selector( ':active' )
	      .css( {
	        'overlay-color': 'black',
	        'overlay-padding': 10,
	        'overlay-opacity': 0.25
	      } )
	    .selector( 'core' ) // just core properties
	      .css( {
	        'selection-box-color': '#ddd',
	        'selection-box-opacity': 0.65,
	        'selection-box-border-color': '#aaa',
	        'selection-box-border-width': 1,
	        'active-bg-color': 'black',
	        'active-bg-opacity': 0.15,
	        'active-bg-size': 30,
	        'outside-texture-bg-color': '#000',
	        'outside-texture-bg-opacity': 0.125
	      } )
	  ;

	  this.defaultLength = this.length;
	};

	module.exports = styfn;


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var is = __webpack_require__( 73 );
	var math = __webpack_require__( 76 );

	var styfn = {};

	// a caching layer for property parsing
	styfn.parse = function( name, value, propIsBypass, propIsFlat ){
	  var self = this;

	  // function values can't be cached in all cases, and there isn't much benefit of caching them anyway
	  if( is.fn( value ) ){
	    return self.parseImpl( name, value, propIsBypass, propIsFlat );
	  }

	  var argHash = [ name, value, propIsBypass, propIsFlat ].join( '$' );
	  var propCache = self.propCache = self.propCache || {};
	  var ret;

	  if( !(ret = propCache[ argHash ]) ){
	    ret = propCache[ argHash ] = self.parseImpl( name, value, propIsBypass, propIsFlat );
	  }

	  // always need a copy since props are mutated later in their lifecycles
	  ret = util.copy( ret );

	  if( ret ){
	    ret.value = util.copy( ret.value ); // because it could be an array, e.g. colour
	  }

	  return ret;
	};

	// parse a property; return null on invalid; return parsed property otherwise
	// fields :
	// - name : the name of the property
	// - value : the parsed, native-typed value of the property
	// - strValue : a string value that represents the property value in valid css
	// - bypass : true iff the property is a bypass property
	var parseImpl = function( name, value, propIsBypass, propIsFlat ){
	  var self = this;

	  name = util.camel2dash( name ); // make sure the property name is in dash form (e.g. 'property-name' not 'propertyName')

	  var property = self.properties[ name ];
	  var passedValue = value;
	  var types = self.types;

	  if( !property ){ return null; } // return null on property of unknown name
	  if( value === undefined || value === null ){ return null; } // can't assign null

	  // the property may be an alias
	  if( property.alias ){
	    property = property.pointsTo;
	    name = property.name;
	  }

	  var valueIsString = is.string( value );
	  if( valueIsString ){ // trim the value to make parsing easier
	    value = value.trim();
	  }

	  var type = property.type;
	  if( !type ){ return null; } // no type, no luck

	  // check if bypass is null or empty string (i.e. indication to delete bypass property)
	  if( propIsBypass && (value === '' || value === null) ){
	    return {
	      name: name,
	      value: value,
	      bypass: true,
	      deleteBypass: true
	    };
	  }

	  // check if value is a function used as a mapper
	  if( is.fn( value ) ){
	    return {
	      name: name,
	      value: value,
	      strValue: 'fn',
	      mapped: types.fn,
	      bypass: propIsBypass
	    };
	  }

	  // check if value is mapped
	  var data, mapData, layoutData, mapLayoutData, scratch, mapScratch;
	  if( !valueIsString || propIsFlat ){
	    // then don't bother to do the expensive regex checks

	  } else if(
	    ( data = new RegExp( types.data.regex ).exec( value ) ) ||
	    ( layoutData = new RegExp( types.layoutData.regex ).exec( value ) ) ||
	    ( scratch = new RegExp( types.scratch.regex ).exec( value ) )
	  ){
	    if( propIsBypass ){ return false; } // mappers not allowed in bypass

	    var mapped;
	    if( data ){
	      mapped = types.data;
	    } else if( layoutData ){
	      mapped = types.layoutData;
	    } else {
	      mapped = types.scratch;
	    }

	    data = data || layoutData || scratch;

	    return {
	      name: name,
	      value: data,
	      strValue: '' + value,
	      mapped: mapped,
	      field: data[1],
	      bypass: propIsBypass
	    };

	  } else if(
	    ( mapData = new RegExp( types.mapData.regex ).exec( value ) ) ||
	    ( mapLayoutData = new RegExp( types.mapLayoutData.regex ).exec( value ) ) ||
	    ( mapScratch = new RegExp( types.mapScratch.regex ).exec( value ) )
	  ){
	    if( propIsBypass ){ return false; } // mappers not allowed in bypass
	    if( type.multiple ){ return false; } // impossible to map to num

	    var mapped;
	    if( mapData ){
	      mapped = types.mapData;
	    } else if( mapLayoutData ){
	      mapped = types.mapLayoutData;
	    } else {
	      mapped = types.mapScratch;
	    }

	    mapData = mapData || mapLayoutData || mapScratch;

	    // we can map only if the type is a colour or a number
	    if( !(type.color || type.number) ){ return false; }

	    var valueMin = this.parse( name, mapData[4] ); // parse to validate
	    if( !valueMin || valueMin.mapped ){ return false; } // can't be invalid or mapped

	    var valueMax = this.parse( name, mapData[5] ); // parse to validate
	    if( !valueMax || valueMax.mapped ){ return false; } // can't be invalid or mapped

	    // check if valueMin and valueMax are the same
	    if( valueMin.value === valueMax.value ){
	      return false; // can't make much of a mapper without a range

	    } else if( type.color ){
	      var c1 = valueMin.value;
	      var c2 = valueMax.value;

	      var same = c1[0] === c2[0] // red
	        && c1[1] === c2[1] // green
	        && c1[2] === c2[2] // blue
	        && ( // optional alpha
	          c1[3] === c2[3] // same alpha outright
	          || (
	            (c1[3] == null || c1[3] === 1) // full opacity for colour 1?
	            &&
	            (c2[3] == null || c2[3] === 1) // full opacity for colour 2?
	          )
	        )
	      ;

	      if( same ){ return false; } // can't make a mapper without a range
	    }

	    return {
	      name: name,
	      value: mapData,
	      strValue: '' + value,
	      mapped: mapped,
	      field: mapData[1],
	      fieldMin: parseFloat( mapData[2] ), // min & max are numeric
	      fieldMax: parseFloat( mapData[3] ),
	      valueMin: valueMin.value,
	      valueMax: valueMax.value,
	      bypass: propIsBypass
	    };
	  }

	  if( type.multiple && propIsFlat !== 'multiple' ){
	    var vals;

	    if( valueIsString ){
	      vals = value.split( /\s+/ );
	    } else if( is.array( value ) ){
	      vals = value;
	    } else {
	      vals = [ value ];
	    }

	    if( type.evenMultiple && vals.length % 2 !== 0 ){ return null; }

	    var valArr = vals.map( function( v ){
	      var p = self.parse( name, v, propIsBypass, 'multiple' );

	      if( p.pfValue != null ){
	        return p.pfValue;
	      } else {
	        return p.value;
	      }
	    } );

	    return {
	      name: name,
	      value: valArr,
	      pfValue: valArr,
	      strValue: valArr.join( ' ' ),
	      bypass: propIsBypass,
	      units: type.number && !type.unitless ? type.implicitUnits || 'px' : undefined
	    };
	  }

	  // several types also allow enums
	  var checkEnums = function(){
	    for( var i = 0; i < type.enums.length; i++ ){
	      var en = type.enums[ i ];

	      if( en === value ){
	        return {
	          name: name,
	          value: value,
	          strValue: '' + value,
	          bypass: propIsBypass
	        };
	      }
	    }

	    return null;
	  };

	  // check the type and return the appropriate object
	  if( type.number ){
	    var units;
	    var implicitUnits = 'px'; // not set => px

	    if( type.units ){ // use specified units if set
	      units = type.units;
	    }

	    if( type.implicitUnits ){
	      implicitUnits = type.implicitUnits;
	    }

	    if( !type.unitless ){
	      if( valueIsString ){
	        var unitsRegex = 'px|em' + (type.allowPercent ? '|\\%' : '');
	        if( units ){ unitsRegex = units; } // only allow explicit units if so set
	        var match = value.match( '^(' + util.regex.number + ')(' + unitsRegex + ')?' + '$' );

	        if( match ){
	          value = match[1];
	          units = match[2] || implicitUnits;
	        }

	      } else if( !units || type.implicitUnits ){
	        units = implicitUnits; // implicitly px if unspecified
	      }
	    }

	    value = parseFloat( value );

	    // if not a number and enums not allowed, then the value is invalid
	    if( isNaN( value ) && type.enums === undefined ){
	      return null;
	    }

	    // check if this number type also accepts special keywords in place of numbers
	    // (i.e. `left`, `auto`, etc)
	    if( isNaN( value ) && type.enums !== undefined ){
	      value = passedValue;

	      return checkEnums();
	    }

	    // check if value must be an integer
	    if( type.integer && !is.integer( value ) ){
	      return null;
	    }

	    // check value is within range
	    if( (type.min !== undefined && value < type.min)
	    || (type.max !== undefined && value > type.max)
	    ){
	      return null;
	    }

	    var ret = {
	      name: name,
	      value: value,
	      strValue: '' + value + (units ? units : ''),
	      units: units,
	      bypass: propIsBypass
	    };

	    // normalise value in pixels
	    if( type.unitless || (units !== 'px' && units !== 'em') ){
	      ret.pfValue = value;
	    } else {
	      ret.pfValue = ( units === 'px' || !units ? (value) : (this.getEmSizeInPixels() * value) );
	    }

	    // normalise value in ms
	    if( units === 'ms' || units === 's' ){
	      ret.pfValue = units === 'ms' ? value : 1000 * value;
	    }

	    // normalise value in rad
	    if( units === 'deg' || units === 'rad' ){
	      ret.pfValue = units === 'rad' ? value : math.deg2rad( value );
	    }

	    return ret;

	  } else if( type.propList ){

	    var props = [];
	    var propsStr = '' + value;

	    if( propsStr === 'none' ){
	      // leave empty

	    } else { // go over each prop

	      var propsSplit = propsStr.split( ',' );
	      for( var i = 0; i < propsSplit.length; i++ ){
	        var propName = propsSplit[ i ].trim();

	        if( self.properties[ propName ] ){
	          props.push( propName );
	        }
	      }

	      if( props.length === 0 ){ return null; }
	    }

	    return {
	      name: name,
	      value: props,
	      strValue: props.length === 0 ? 'none' : props.join( ', ' ),
	      bypass: propIsBypass
	    };

	  } else if( type.color ){
	    var tuple = util.color2tuple( value );

	    if( !tuple ){ return null; }

	    return {
	      name: name,
	      value: tuple,
	      strValue: '' + value,
	      bypass: propIsBypass,
	      roundValue: true
	    };

	  } else if( type.regex || type.regexes ){

	    // first check enums
	    if( type.enums ){
	      var enumProp = checkEnums();

	      if( enumProp ){ return enumProp; }
	    }

	    var regexes = type.regexes ? type.regexes : [ type.regex ];

	    for( var i = 0; i < regexes.length; i++ ){
	      var regex = new RegExp( regexes[ i ] ); // make a regex from the type string
	      var m = regex.exec( value );

	      if( m ){ // regex matches
	        return {
	          name: name,
	          value: m,
	          strValue: '' + value,
	          bypass: propIsBypass
	        };

	      }
	    }

	    return null; // didn't match any

	  } else if( type.string ){
	    // just return
	    return {
	      name: name,
	      value: value,
	      strValue: '' + value,
	      bypass: propIsBypass
	    };

	  } else if( type.enums ){ // check enums last because it's a combo type in others
	    return checkEnums();

	  } else {
	    return null; // not a type we can handle
	  }

	};
	styfn.parseImpl = parseImpl;

	module.exports = styfn;


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );

	var corefn = ({

	  autolock: function( bool ){
	    if( bool !== undefined ){
	      this._private.autolock = bool ? true : false;
	    } else {
	      return this._private.autolock;
	    }

	    return this; // chaining
	  },

	  autoungrabify: function( bool ){
	    if( bool !== undefined ){
	      this._private.autoungrabify = bool ? true : false;
	    } else {
	      return this._private.autoungrabify;
	    }

	    return this; // chaining
	  },

	  autounselectify: function( bool ){
	    if( bool !== undefined ){
	      this._private.autounselectify = bool ? true : false;
	    } else {
	      return this._private.autounselectify;
	    }

	    return this; // chaining
	  },

	  panningEnabled: function( bool ){
	    if( bool !== undefined ){
	      this._private.panningEnabled = bool ? true : false;
	    } else {
	      return this._private.panningEnabled;
	    }

	    return this; // chaining
	  },

	  userPanningEnabled: function( bool ){
	    if( bool !== undefined ){
	      this._private.userPanningEnabled = bool ? true : false;
	    } else {
	      return this._private.userPanningEnabled;
	    }

	    return this; // chaining
	  },

	  zoomingEnabled: function( bool ){
	    if( bool !== undefined ){
	      this._private.zoomingEnabled = bool ? true : false;
	    } else {
	      return this._private.zoomingEnabled;
	    }

	    return this; // chaining
	  },

	  userZoomingEnabled: function( bool ){
	    if( bool !== undefined ){
	      this._private.userZoomingEnabled = bool ? true : false;
	    } else {
	      return this._private.userZoomingEnabled;
	    }

	    return this; // chaining
	  },

	  boxSelectionEnabled: function( bool ){
	    if( bool !== undefined ){
	      this._private.boxSelectionEnabled = bool ? true : false;
	    } else {
	      return this._private.boxSelectionEnabled;
	    }

	    return this; // chaining
	  },

	  pan: function(){
	    var args = arguments;
	    var pan = this._private.pan;
	    var dim, val, dims, x, y;

	    switch( args.length ){
	    case 0: // .pan()
	      return pan;

	    case 1:

	      if( is.string( args[0] ) ){ // .pan('x')
	        dim = args[0];
	        return pan[ dim ];

	      } else if( is.plainObject( args[0] ) ){ // .pan({ x: 0, y: 100 })
	        if( !this._private.panningEnabled ){
	          return this;
	        }

	        dims = args[0];
	        x = dims.x;
	        y = dims.y;

	        if( is.number( x ) ){
	          pan.x = x;
	        }

	        if( is.number( y ) ){
	          pan.y = y;
	        }

	        this.trigger( 'pan viewport' );
	      }
	      break;

	    case 2: // .pan('x', 100)
	      if( !this._private.panningEnabled ){
	        return this;
	      }

	      dim = args[0];
	      val = args[1];

	      if( (dim === 'x' || dim === 'y') && is.number( val ) ){
	        pan[ dim ] = val;
	      }

	      this.trigger( 'pan viewport' );
	      break;

	    default:
	      break; // invalid
	    }

	    this.notify( { // notify the renderer that the viewport changed
	      type: 'viewport'
	    } );

	    return this; // chaining
	  },

	  panBy: function( params ){
	    var args = arguments;
	    var pan = this._private.pan;
	    var dim, val, dims, x, y;

	    if( !this._private.panningEnabled ){
	      return this;
	    }

	    switch( args.length ){
	    case 1:

	      if( is.plainObject( args[0] ) ){ // .panBy({ x: 0, y: 100 })
	        dims = args[0];
	        x = dims.x;
	        y = dims.y;

	        if( is.number( x ) ){
	          pan.x += x;
	        }

	        if( is.number( y ) ){
	          pan.y += y;
	        }

	        this.trigger( 'pan viewport' );
	      }
	      break;

	    case 2: // .panBy('x', 100)
	      dim = args[0];
	      val = args[1];

	      if( (dim === 'x' || dim === 'y') && is.number( val ) ){
	        pan[ dim ] += val;
	      }

	      this.trigger( 'pan viewport' );
	      break;

	    default:
	      break; // invalid
	    }

	    this.notify( { // notify the renderer that the viewport changed
	      type: 'viewport'
	    } );

	    return this; // chaining
	  },

	  fit: function( elements, padding ){
	    var viewportState = this.getFitViewport( elements, padding );

	    if( viewportState ){
	      var _p = this._private;
	      _p.zoom = viewportState.zoom;
	      _p.pan = viewportState.pan;

	      this.trigger( 'pan zoom viewport' );

	      this.notify( { // notify the renderer that the viewport changed
	        type: 'viewport'
	      } );
	    }

	    return this; // chaining
	  },

	  getFitViewport: function( elements, padding ){
	    if( is.number( elements ) && padding === undefined ){ // elements is optional
	      padding = elements;
	      elements = undefined;
	    }

	    if( !this._private.panningEnabled || !this._private.zoomingEnabled ){
	      return;
	    }

	    var bb;

	    if( is.string( elements ) ){
	      var sel = elements;
	      elements = this.$( sel );

	    } else if( is.boundingBox( elements ) ){ // assume bb
	      var bbe = elements;
	      bb = {
	        x1: bbe.x1,
	        y1: bbe.y1,
	        x2: bbe.x2,
	        y2: bbe.y2
	      };

	      bb.w = bb.x2 - bb.x1;
	      bb.h = bb.y2 - bb.y1;

	    } else if( !is.elementOrCollection( elements ) ){
	      elements = this.mutableElements();
	    }

	    bb = bb || elements.boundingBox();

	    var w = this.width();
	    var h = this.height();
	    var zoom;
	    padding = is.number( padding ) ? padding : 0;

	    if( !isNaN( w ) && !isNaN( h ) && w > 0 && h > 0 && !isNaN( bb.w ) && !isNaN( bb.h ) &&  bb.w > 0 && bb.h > 0 ){
	      zoom = Math.min( (w - 2 * padding) / bb.w, (h - 2 * padding) / bb.h );

	      // crop zoom
	      zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;
	      zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;

	      var pan = { // now pan to middle
	        x: (w - zoom * ( bb.x1 + bb.x2 )) / 2,
	        y: (h - zoom * ( bb.y1 + bb.y2 )) / 2
	      };

	      return {
	        zoom: zoom,
	        pan: pan
	      };
	    }

	    return;
	  },

	  minZoom: function( zoom ){
	    if( zoom === undefined ){
	      return this._private.minZoom;
	    } else if( is.number( zoom ) ){
	      this._private.minZoom = zoom;
	    }

	    return this;
	  },

	  maxZoom: function( zoom ){
	    if( zoom === undefined ){
	      return this._private.maxZoom;
	    } else if( is.number( zoom ) ){
	      this._private.maxZoom = zoom;
	    }

	    return this;
	  },

	  zoom: function( params ){
	    var pos; // in rendered px
	    var zoom;

	    if( params === undefined ){ // then get the zoom
	      return this._private.zoom;

	    } else if( is.number( params ) ){ // then set the zoom
	      zoom = params;

	    } else if( is.plainObject( params ) ){ // then zoom about a point
	      zoom = params.level;

	      if( params.position ){
	        var p = params.position;
	        var pan = this._private.pan;
	        var z = this._private.zoom;

	        pos = { // convert to rendered px
	          x: p.x * z + pan.x,
	          y: p.y * z + pan.y
	        };
	      } else if( params.renderedPosition ){
	        pos = params.renderedPosition;
	      }

	      if( pos && !this._private.panningEnabled ){
	        return this; // panning disabled
	      }
	    }

	    if( !this._private.zoomingEnabled ){
	      return this; // zooming disabled
	    }

	    if( !is.number( zoom ) || ( pos && (!is.number( pos.x ) || !is.number( pos.y )) ) ){
	      return this; // can't zoom with invalid params
	    }

	    // crop zoom
	    zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;
	    zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;

	    if( pos ){ // set zoom about position
	      var pan1 = this._private.pan;
	      var zoom1 = this._private.zoom;
	      var zoom2 = zoom;

	      var pan2 = {
	        x: -zoom2 / zoom1 * (pos.x - pan1.x) + pos.x,
	        y: -zoom2 / zoom1 * (pos.y - pan1.y) + pos.y
	      };

	      this._private.zoom = zoom;
	      this._private.pan = pan2;

	      var posChanged = pan1.x !== pan2.x || pan1.y !== pan2.y;
	      this.trigger( ' zoom ' + (posChanged ? ' pan ' : '') + ' viewport ' );

	    } else { // just set the zoom
	      this._private.zoom = zoom;
	      this.trigger( 'zoom viewport' );
	    }

	    this.notify( { // notify the renderer that the viewport changed
	      type: 'viewport'
	    } );

	    return this; // chaining
	  },

	  viewport: function( opts ){
	    var _p = this._private;
	    var zoomDefd = true;
	    var panDefd = true;
	    var events = []; // to trigger
	    var zoomFailed = false;
	    var panFailed = false;

	    if( !opts ){ return this; }
	    if( !is.number( opts.zoom ) ){ zoomDefd = false; }
	    if( !is.plainObject( opts.pan ) ){ panDefd = false; }
	    if( !zoomDefd && !panDefd ){ return this; }

	    if( zoomDefd ){
	      var z = opts.zoom;

	      if( z < _p.minZoom || z > _p.maxZoom || !_p.zoomingEnabled ){
	        zoomFailed = true;

	      } else {
	        _p.zoom = z;

	        events.push( 'zoom' );
	      }
	    }

	    if( panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled ){
	      var p = opts.pan;

	      if( is.number( p.x ) ){
	        _p.pan.x = p.x;
	        panFailed = false;
	      }

	      if( is.number( p.y ) ){
	        _p.pan.y = p.y;
	        panFailed = false;
	      }

	      if( !panFailed ){
	        events.push( 'pan' );
	      }
	    }

	    if( events.length > 0 ){
	      events.push( 'viewport' );
	      this.trigger( events.join( ' ' ) );

	      this.notify( {
	        type: 'viewport'
	      } );
	    }

	    return this; // chaining
	  },

	  center: function( elements ){
	    var pan = this.getCenterPan( elements );

	    if( pan ){
	      this._private.pan = pan;

	      this.trigger( 'pan viewport' );

	      this.notify( { // notify the renderer that the viewport changed
	        type: 'viewport'
	      } );
	    }

	    return this; // chaining
	  },

	  getCenterPan: function( elements, zoom ){
	    if( !this._private.panningEnabled ){
	      return;
	    }

	    if( is.string( elements ) ){
	      var selector = elements;
	      elements = this.mutableElements().filter( selector );
	    } else if( !is.elementOrCollection( elements ) ){
	      elements = this.mutableElements();
	    }

	    var bb = elements.boundingBox();
	    var w = this.width();
	    var h = this.height();
	    zoom = zoom === undefined ? this._private.zoom : zoom;

	    var pan = { // middle
	      x: (w - zoom * ( bb.x1 + bb.x2 )) / 2,
	      y: (h - zoom * ( bb.y1 + bb.y2 )) / 2
	    };

	    return pan;
	  },

	  reset: function(){
	    if( !this._private.panningEnabled || !this._private.zoomingEnabled ){
	      return this;
	    }

	    this.viewport( {
	      pan: { x: 0, y: 0 },
	      zoom: 1
	    } );

	    return this; // chaining
	  },

	  invalidateSize: function(){
	    this._private.sizeCache = null;
	  },

	  size: function(){
	    var _p = this._private;
	    var container = _p.container;

	    return ( _p.sizeCache = _p.sizeCache || ( container ? {
	      width: container.clientWidth,
	      height: container.clientHeight
	    } : { // fallback if no container (not 0 b/c can be used for dividing etc)
	      width: 1,
	      height: 1
	    } ) );
	  },

	  width: function(){
	    return this.size().width;
	  },

	  height: function(){
	    return this.size().height;
	  },

	  extent: function(){
	    var pan = this._private.pan;
	    var zoom = this._private.zoom;
	    var rb = this.renderedExtent();

	    var b = {
	      x1: ( rb.x1 - pan.x ) / zoom,
	      x2: ( rb.x2 - pan.x ) / zoom,
	      y1: ( rb.y1 - pan.y ) / zoom,
	      y2: ( rb.y2 - pan.y ) / zoom
	    };

	    b.w = b.x2 - b.x1;
	    b.h = b.y2 - b.y1;

	    return b;
	  },

	  renderedExtent: function(){
	    var width = this.width();
	    var height = this.height();

	    return {
	      x1: 0,
	      y1: 0,
	      x2: width,
	      y2: height,
	      w: width,
	      h: height
	    };
	  }
	});

	// aliases
	corefn.centre = corefn.center;

	// backwards compatibility
	corefn.autolockNodes = corefn.autolock;
	corefn.autoungrabifyNodes = corefn.autoungrabify;

	module.exports = corefn;


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var define = __webpack_require__( 99 );
	var Collection = __webpack_require__( 83 );
	var Core = __webpack_require__( 74 );
	var incExts = __webpack_require__( 139 );
	var is = __webpack_require__( 73 );

	// registered extensions to cytoscape, indexed by name
	var extensions = {};

	// registered modules for extensions, indexed by name
	var modules = {};

	function setExtension( type, name, registrant ){

	  var ext = registrant;

	  var overrideErr = function( field ){
	    util.error( 'Can not register `' + name + '` for `' + type + '` since `' + field + '` already exists in the prototype and can not be overridden' );
	  };

	  if( type === 'core' ){
	    if( Core.prototype[ name ] ){
	      return overrideErr( name );
	    } else {
	      Core.prototype[ name ] = registrant;
	    }

	  } else if( type === 'collection' ){
	    if( Collection.prototype[ name ] ){
	      return overrideErr( name );
	    } else {
	      Collection.prototype[ name ] = registrant;
	    }

	  } else if( type === 'layout' ){
	    // fill in missing layout functions in the prototype

	    var Layout = function( options ){
	      this.options = options;

	      registrant.call( this, options );

	      // make sure layout has _private for use w/ std apis like .on()
	      if( !is.plainObject( this._private ) ){
	        this._private = {};
	      }

	      this._private.cy = options.cy;
	      this._private.listeners = [];
	    };

	    var layoutProto = Layout.prototype = Object.create( registrant.prototype );

	    var optLayoutFns = [];

	    for( var i = 0; i < optLayoutFns.length; i++ ){
	      var fnName = optLayoutFns[ i ];

	      layoutProto[ fnName ] = layoutProto[ fnName ] || function(){ return this; };
	    }

	    // either .start() or .run() is defined, so autogen the other
	    if( layoutProto.start && !layoutProto.run ){
	      layoutProto.run = function(){ this.start(); return this; };
	    } else if( !layoutProto.start && layoutProto.run ){
	      layoutProto.start = function(){ this.run(); return this; };
	    }

	    if( !layoutProto.stop ){
	      layoutProto.stop = function(){
	        var opts = this.options;

	        if( opts && opts.animate ){
	          var anis = this.animations;
	          for( var i = 0; i < anis.length; i++ ){
	            anis[ i ].stop();
	          }
	        }

	        this.trigger( 'layoutstop' );

	        return this;
	      };
	    }

	    if( !layoutProto.destroy ){
	      layoutProto.destroy = function(){
	        return this;
	      };
	    }

	    layoutProto.on = define.on( { layout: true } );
	    layoutProto.one = define.on( { layout: true, unbindSelfOnTrigger: true } );
	    layoutProto.once = define.on( { layout: true, unbindAllBindersOnTrigger: true } );
	    layoutProto.off = define.off( { layout: true } );
	    layoutProto.trigger = define.trigger( { layout: true } );

	    define.eventAliasesOn( layoutProto );

	    ext = Layout; // replace with our wrapped layout

	  } else if( type === 'renderer' && name !== 'null' && name !== 'base' ){
	    // user registered renderers inherit from base

	    var BaseRenderer = getExtension( 'renderer', 'base' );
	    var bProto = BaseRenderer.prototype;
	    var RegistrantRenderer = registrant;
	    var rProto = registrant.prototype;

	    var Renderer = function(){
	      BaseRenderer.apply( this, arguments );
	      RegistrantRenderer.apply( this, arguments );
	    };

	    var proto = Renderer.prototype;

	    for( var pName in bProto ){
	      var pVal = bProto[ pName ];
	      var existsInR = rProto[ pName ] != null;

	      if( existsInR ){
	        return overrideErr( pName );
	      }

	      proto[ pName ] = pVal; // take impl from base
	    }

	    for( var pName in rProto ){
	      proto[ pName ] = rProto[ pName ]; // take impl from registrant
	    }

	    bProto.clientFunctions.forEach( function( name ){
	      proto[ name ] = proto[ name ] || function(){
	        util.error( 'Renderer does not implement `renderer.' + name + '()` on its prototype' );
	      };
	    } );

	    ext = Renderer;

	  }

	  return util.setMap( {
	    map: extensions,
	    keys: [ type, name ],
	    value: ext
	  } );
	}

	function getExtension( type, name ){
	  return util.getMap( {
	    map: extensions,
	    keys: [ type, name ]
	  } );
	}

	function setModule( type, name, moduleType, moduleName, registrant ){
	  return util.setMap( {
	    map: modules,
	    keys: [ type, name, moduleType, moduleName ],
	    value: registrant
	  } );
	}

	function getModule( type, name, moduleType, moduleName ){
	  return util.getMap( {
	    map: modules,
	    keys: [ type, name, moduleType, moduleName ]
	  } );
	}

	var extension = function(){
	  // e.g. extension('renderer', 'svg')
	  if( arguments.length === 2 ){
	    return getExtension.apply( null, arguments );
	  }

	  // e.g. extension('renderer', 'svg', { ... })
	  else if( arguments.length === 3 ){
	    return setExtension.apply( null, arguments );
	  }

	  // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse')
	  else if( arguments.length === 4 ){
	    return getModule.apply( null, arguments );
	  }

	  // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse', { ... })
	  else if( arguments.length === 5 ){
	    return setModule.apply( null, arguments );
	  }

	  else {
	    util.error( 'Invalid extension access syntax' );
	  }

	};

	// allows a core instance to access extensions internally
	Core.prototype.extension = extension;

	// included extensions
	incExts.forEach( function( group ){
	  group.extensions.forEach( function( ext ){
	    setExtension( group.type, ext.name, ext.impl );
	  } );
	} );

	module.exports = extension;


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = [
	  {
	    type: 'layout',
	    extensions: __webpack_require__( 140 )
	  },

	  {
	    type: 'renderer',
	    extensions: __webpack_require__( 152 )
	  }
	];


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = [
	  { name: 'breadthfirst', impl: __webpack_require__( 141 ) },
	  { name: 'circle', impl: __webpack_require__( 142 ) },
	  { name: 'concentric',impl: __webpack_require__( 143 ) },
	  { name: 'cose', impl: __webpack_require__( 144 ) },
	  { name: 'grid', impl: __webpack_require__( 148 ) },
	  { name: 'null', impl: __webpack_require__( 149 ) },
	  { name: 'preset', impl: __webpack_require__( 150 ) },
	  { name: 'random', impl: __webpack_require__( 151 ) }
	];


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var math = __webpack_require__( 76 );
	var is = __webpack_require__( 73 );

	var defaults = {
	  fit: true, // whether to fit the viewport to the graph
	  directed: false, // whether the tree is directed downwards (or edges can point in any direction if false)
	  padding: 30, // padding on fit
	  circle: false, // put depths in concentric circles if true, put depths top down if false
	  spacingFactor: 1.75, // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
	  roots: undefined, // the roots of the trees
	  maximalAdjustments: 0, // how many times to try to position the nodes in a maximal way (i.e. no backtracking)
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function BreadthFirstLayout( options ){
	  this.options = util.extend( {}, defaults, options );
	}

	BreadthFirstLayout.prototype.run = function(){
	  var params = this.options;
	  var options = params;

	  var cy = params.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().not( ':parent' );
	  var graph = eles;

	  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  } );

	  var roots;
	  if( is.elementOrCollection( options.roots ) ){
	    roots = options.roots;
	  } else if( is.array( options.roots ) ){
	    var rootsArray = [];

	    for( var i = 0; i < options.roots.length; i++ ){
	      var id = options.roots[ i ];
	      var ele = cy.getElementById( id );
	      rootsArray.push( ele );
	    }

	    roots = cy.collection( rootsArray );
	  } else if( is.string( options.roots ) ){
	    roots = cy.$( options.roots );

	  } else {
	    if( options.directed ){
	      roots = nodes.roots();
	    } else {
	      var components = [];
	      var unhandledNodes = nodes;

	      while( unhandledNodes.length > 0 ){
	        var currComp = cy.collection();

	        eles.bfs( {
	          roots: unhandledNodes[0],
	          visit: function( i, depth, node, edge, pNode ){
	            currComp = currComp.add( node );
	          },
	          directed: false
	        } );

	        unhandledNodes = unhandledNodes.not( currComp );
	        components.push( currComp );
	      }

	      roots = cy.collection();
	      for( var i = 0; i < components.length; i++ ){
	        var comp = components[ i ];
	        var maxDegree = comp.maxDegree( false );
	        var compRoots = comp.filter( function(){
	          return this.degree( false ) === maxDegree;
	        } );

	        roots = roots.add( compRoots );
	      }

	    }
	  }


	  var depths = [];
	  var foundByBfs = {};
	  var id2depth = {};
	  var prevNode = {};
	  var prevEdge = {};
	  var successors = {};

	  // find the depths of the nodes
	  graph.bfs( {
	    roots: roots,
	    directed: options.directed,
	    visit: function( i, depth, node, edge, pNode ){
	      var ele = this[0];
	      var id = ele.id();

	      if( !depths[ depth ] ){
	        depths[ depth ] = [];
	      }

	      depths[ depth ].push( ele );
	      foundByBfs[ id ] = true;
	      id2depth[ id ] = depth;
	      prevNode[ id ] = pNode;
	      prevEdge[ id ] = edge;

	      if( pNode ){
	        var prevId = pNode.id();
	        var succ = successors[ prevId ] = successors[ prevId ] || [];

	        succ.push( node );
	      }
	    }
	  } );

	  // check for nodes not found by bfs
	  var orphanNodes = [];
	  for( var i = 0; i < nodes.length; i++ ){
	    var ele = nodes[ i ];

	    if( foundByBfs[ ele.id() ] ){
	      continue;
	    } else {
	      orphanNodes.push( ele );
	    }
	  }

	  // assign orphan nodes a depth from their neighborhood
	  var maxChecks = orphanNodes.length * 3;
	  var checks = 0;
	  while( orphanNodes.length !== 0 && checks < maxChecks ){
	    var node = orphanNodes.shift();
	    var neighbors = node.neighborhood().nodes();
	    var assignedDepth = false;

	    for( var i = 0; i < neighbors.length; i++ ){
	      var depth = id2depth[ neighbors[ i ].id() ];

	      if( depth !== undefined ){
	        depths[ depth ].push( node );
	        assignedDepth = true;
	        break;
	      }
	    }

	    if( !assignedDepth ){
	      orphanNodes.push( node );
	    }

	    checks++;
	  }

	  // assign orphan nodes that are still left to the depth of their subgraph
	  while( orphanNodes.length !== 0 ){
	    var node = orphanNodes.shift();
	    //var subgraph = graph.bfs( node ).path;
	    var assignedDepth = false;

	    // for( var i = 0; i < subgraph.length; i++ ){
	    //   var depth = id2depth[ subgraph[i].id() ];

	    //   if( depth !== undefined ){
	    //     depths[depth].push( node );
	    //     assignedDepth = true;
	    //     break;
	    //   }
	    // }

	    if( !assignedDepth ){ // worst case if the graph really isn't tree friendly, then just dump it in 0
	      if( depths.length === 0 ){
	        depths.push( [] );
	      }

	      depths[0].push( node );
	    }
	  }

	  // assign the nodes a depth and index
	  var assignDepthsToEles = function(){
	    for( var i = 0; i < depths.length; i++ ){
	      var eles = depths[ i ];

	      for( var j = 0; j < eles.length; j++ ){
	        var ele = eles[ j ];

	        ele._private.scratch.breadthfirst = {
	          depth: i,
	          index: j
	        };
	      }
	    }
	  };
	  assignDepthsToEles();


	  var intersectsDepth = function( node ){ // returns true if has edges pointing in from a higher depth
	    var edges = node.connectedEdges( function(){
	      return this.data( 'target' ) === node.id();
	    } );
	    var thisInfo = node._private.scratch.breadthfirst;
	    var highestDepthOfOther = 0;
	    var highestOther;
	    for( var i = 0; i < edges.length; i++ ){
	      var edge = edges[ i ];
	      var otherNode = edge.source()[0];
	      var otherInfo = otherNode._private.scratch.breadthfirst;

	      if( thisInfo.depth <= otherInfo.depth && highestDepthOfOther < otherInfo.depth ){
	        highestDepthOfOther = otherInfo.depth;
	        highestOther = otherNode;
	      }
	    }

	    return highestOther;
	  };

	  // make maximal if so set by adjusting depths
	  for( var adj = 0; adj < options.maximalAdjustments; adj++ ){

	    var nDepths = depths.length;
	    var elesToMove = [];
	    for( var i = 0; i < nDepths; i++ ){
	      var depth = depths[ i ];

	      var nDepth = depth.length;
	      for( var j = 0; j < nDepth; j++ ){
	        var ele = depth[ j ];
	        var info = ele._private.scratch.breadthfirst;
	        var intEle = intersectsDepth( ele );

	        if( intEle ){
	          info.intEle = intEle;
	          elesToMove.push( ele );
	        }
	      }
	    }

	    for( var i = 0; i < elesToMove.length; i++ ){
	      var ele = elesToMove[ i ];
	      var info = ele._private.scratch.breadthfirst;
	      var intEle = info.intEle;
	      var intInfo = intEle._private.scratch.breadthfirst;

	      depths[ info.depth ].splice( info.index, 1 ); // remove from old depth & index

	      // add to end of new depth
	      var newDepth = intInfo.depth + 1;
	      while( newDepth > depths.length - 1 ){
	        depths.push( [] );
	      }
	      depths[ newDepth ].push( ele );

	      info.depth = newDepth;
	      info.index = depths[ newDepth ].length - 1;
	    }

	    assignDepthsToEles();
	  }

	  // find min distance we need to leave between nodes
	  var minDistance = 0;
	  if( options.avoidOverlap ){
	    for( var i = 0; i < nodes.length; i++ ){
	      var n = nodes[ i ];
	      var nbb = n.boundingBox();
	      var w = nbb.w;
	      var h = nbb.h;

	      minDistance = Math.max( minDistance, w, h );
	    }
	    minDistance *= options.spacingFactor; // just to have some nice spacing
	  }

	  // get the weighted percent for an element based on its connectivity to other levels
	  var cachedWeightedPercent = {};
	  var getWeightedPercent = function( ele ){
	    if( cachedWeightedPercent[ ele.id() ] ){
	      return cachedWeightedPercent[ ele.id() ];
	    }

	    var eleDepth = ele._private.scratch.breadthfirst.depth;
	    var neighbors = ele.neighborhood().nodes().not( ':parent' );
	    var percent = 0;
	    var samples = 0;

	    for( var i = 0; i < neighbors.length; i++ ){
	      var neighbor = neighbors[ i ];
	      var bf = neighbor._private.scratch.breadthfirst;
	      var index = bf.index;
	      var depth = bf.depth;
	      var nDepth = depths[ depth ].length;

	      if( eleDepth > depth || eleDepth === 0 ){ // only get influenced by elements above
	        percent += index / nDepth;
	        samples++;
	      }
	    }

	    samples = Math.max( 1, samples );
	    percent = percent / samples;

	    if( samples === 0 ){ // so lone nodes have a "don't care" state in sorting
	      percent = undefined;
	    }

	    cachedWeightedPercent[ ele.id() ] = percent;
	    return percent;
	  };


	  // rearrange the indices in each depth level based on connectivity

	  var sortFn = function( a, b ){
	    var apct = getWeightedPercent( a );
	    var bpct = getWeightedPercent( b );

	    return apct - bpct;
	  };

	  for( var times = 0; times < 3; times++ ){ // do it a few times b/c the depths are dynamic and we want a more stable result

	    for( var i = 0; i < depths.length; i++ ){
	      depths[ i ] = depths[ i ].sort( sortFn );
	    }
	    assignDepthsToEles(); // and update

	  }

	  var biggestDepthSize = 0;
	  for( var i = 0; i < depths.length; i++ ){
	    biggestDepthSize = Math.max( depths[ i ].length, biggestDepthSize );
	  }

	  var center = {
	    x: bb.x1 + bb.w / 2,
	    y: bb.x1 + bb.h / 2
	  };

	  var getPosition = function( ele, isBottomDepth ){
	    var info = ele._private.scratch.breadthfirst;
	    var depth = info.depth;
	    var index = info.index;
	    var depthSize = depths[ depth ].length;

	    var distanceX = Math.max( bb.w / (depthSize + 1), minDistance );
	    var distanceY = Math.max( bb.h / (depths.length + 1), minDistance );
	    var radiusStepSize = Math.min( bb.w / 2 / depths.length, bb.h / 2 / depths.length );
	    radiusStepSize = Math.max( radiusStepSize, minDistance );

	    if( !options.circle ){

	      var epos = {
	        x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,
	        y: (depth + 1) * distanceY
	      };

	      if( isBottomDepth ){
	        return epos;
	      }

	      // var succs = successors[ ele.id() ];
	      // if( succs ){
	      //   epos.x = 0;
	      //
	      //   for( var i = 0 ; i < succs.length; i++ ){
	      //     var spos = pos[ succs[i].id() ];
	      //
	      //     epos.x += spos.x;
	      //   }
	      //
	      //   epos.x /= succs.length;
	      // } else {
	      //   //debugger;
	      // }

	      return epos;

	    } else {
	      if( options.circle ){
	        var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize / 2 : 0);
	        var theta = 2 * Math.PI / depths[ depth ].length * index;

	        if( depth === 0 && depths[0].length === 1 ){
	          radius = 1;
	        }

	        return {
	          x: center.x + radius * Math.cos( theta ),
	          y: center.y + radius * Math.sin( theta )
	        };

	      } else {
	        return {
	          x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,
	          y: (depth + 1) * distanceY
	        };
	      }
	    }

	  };

	  // get positions in reverse depth order
	  var pos = {};
	  for( var i = depths.length - 1; i >= 0; i-- ){
	    var depth = depths[ i ];

	    for( var j = 0; j < depth.length; j++ ){
	      var node = depth[ j ];

	      pos[ node.id() ] = getPosition( node, i === depths.length - 1 );
	    }
	  }

	  nodes.layoutPositions( this, options, function(){
	    return pos[ this.id() ];
	  } );

	  return this; // chaining
	};

	module.exports = BreadthFirstLayout;


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var math = __webpack_require__( 76 );
	var is = __webpack_require__( 73 );

	var defaults = {
	  fit: true, // whether to fit the viewport to the graph
	  padding: 30, // the padding on fit
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true, // prevents node overlap, may overflow boundingBox and radius if not enough space
	  radius: undefined, // the radius of the circle
	  startAngle: 3 / 2 * Math.PI, // where nodes start in radians
	  sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)
	  clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
	  sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function CircleLayout( options ){
	  this.options = util.extend( {}, defaults, options );
	}

	CircleLayout.prototype.run = function(){
	  var params = this.options;
	  var options = params;

	  var cy = params.cy;
	  var eles = options.eles;

	  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;

	  var nodes = eles.nodes().not( ':parent' );

	  if( options.sort ){
	    nodes = nodes.sort( options.sort );
	  }

	  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  } );

	  var center = {
	    x: bb.x1 + bb.w / 2,
	    y: bb.y1 + bb.h / 2
	  };

	  var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / nodes.length : options.sweep;

	  var dTheta = sweep / ( Math.max( 1, nodes.length - 1 ) );
	  var r;

	  var minDistance = 0;
	  for( var i = 0; i < nodes.length; i++ ){
	    var n = nodes[ i ];
	    var nbb = n.boundingBox();
	    var w = nbb.w;
	    var h = nbb.h;

	    minDistance = Math.max( minDistance, w, h );
	  }

	  if( is.number( options.radius ) ){
	    r = options.radius;
	  } else if( nodes.length <= 1 ){
	    r = 0;
	  } else {
	    r = Math.min( bb.h, bb.w ) / 2 - minDistance;
	  }

	  // calculate the radius
	  if( nodes.length > 1 && options.avoidOverlap ){ // but only if more than one node (can't overlap)
	    minDistance *= 1.75; // just to have some nice spacing

	    var dcos = Math.cos( dTheta ) - Math.cos( 0 );
	    var dsin = Math.sin( dTheta ) - Math.sin( 0 );
	    var rMin = Math.sqrt( minDistance * minDistance / ( dcos * dcos + dsin * dsin ) ); // s.t. no nodes overlapping
	    r = Math.max( rMin, r );
	  }

	  var getPos = function( i, ele ){
	    var theta = options.startAngle + i * dTheta * ( clockwise ? 1 : -1 );

	    var rx = r * Math.cos( theta );
	    var ry = r * Math.sin( theta );
	    var pos = {
	      x: center.x + rx,
	      y: center.y + ry
	    };

	    return pos;
	  };

	  nodes.layoutPositions( this, options, getPos );

	  return this; // chaining
	};

	module.exports = CircleLayout;


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var math = __webpack_require__( 76 );

	var defaults = {
	  fit: true, // whether to fit the viewport to the graph
	  padding: 30, // the padding on fit
	  startAngle: 3 / 2 * Math.PI, // where nodes start in radians
	  sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)
	  clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
	  equidistant: false, // whether levels have an equal radial distance betwen them, may cause bounding box overflow
	  minNodeSpacing: 10, // min spacing between outside of nodes (used for radius adjustment)
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
	  height: undefined, // height of layout area (overrides container height)
	  width: undefined, // width of layout area (overrides container width)
	  concentric: function( node ){ // returns numeric value for each node, placing higher nodes in levels towards the centre
	    return node.degree();
	  },
	  levelWidth: function( nodes ){ // the variation of concentric values in each level
	    return nodes.maxDegree() / 4;
	  },
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function ConcentricLayout( options ){
	  this.options = util.extend( {}, defaults, options );
	}

	ConcentricLayout.prototype.run = function(){
	  var params = this.options;
	  var options = params;

	  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;

	  var cy = params.cy;

	  var eles = options.eles;
	  var nodes = eles.nodes().not( ':parent' );

	  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  } );

	  var center = {
	    x: bb.x1 + bb.w / 2,
	    y: bb.y1 + bb.h / 2
	  };

	  var nodeValues = []; // { node, value }
	  var theta = options.startAngle;
	  var maxNodeSize = 0;

	  for( var i = 0; i < nodes.length; i++ ){
	    var node = nodes[ i ];
	    var value;

	    // calculate the node value
	    value = options.concentric.apply( node, [ node ] );
	    nodeValues.push( {
	      value: value,
	      node: node
	    } );

	    // for style mapping
	    node._private.scratch.concentric = value;
	  }

	  // in case we used the `concentric` in style
	  nodes.updateStyle();

	  // calculate max size now based on potentially updated mappers
	  for( var i = 0; i < nodes.length; i++ ){
	    var node = nodes[ i ];
	    var nbb = node.boundingBox();

	    maxNodeSize = Math.max( maxNodeSize, nbb.w, nbb.h );
	  }

	  // sort node values in descreasing order
	  nodeValues.sort( function( a, b ){
	    return b.value - a.value;
	  } );

	  var levelWidth = options.levelWidth( nodes );

	  // put the values into levels
	  var levels = [ [] ];
	  var currentLevel = levels[0];
	  for( var i = 0; i < nodeValues.length; i++ ){
	    var val = nodeValues[ i ];

	    if( currentLevel.length > 0 ){
	      var diff = Math.abs( currentLevel[0].value - val.value );

	      if( diff >= levelWidth ){
	        currentLevel = [];
	        levels.push( currentLevel );
	      }
	    }

	    currentLevel.push( val );
	  }

	  // create positions from levels

	  var minDist = maxNodeSize + options.minNodeSpacing; // min dist between nodes

	  if( !options.avoidOverlap ){ // then strictly constrain to bb
	    var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;
	    var maxR = ( Math.min( bb.w, bb.h ) / 2 - minDist );
	    var rStep = maxR / ( levels.length + firstLvlHasMulti ? 1 : 0 );

	    minDist = Math.min( minDist, rStep );
	  }

	  // find the metrics for each level
	  var r = 0;
	  for( var i = 0; i < levels.length; i++ ){
	    var level = levels[ i ];
	    var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / level.length : options.sweep;
	    var dTheta = level.dTheta = sweep / ( Math.max( 1, level.length - 1 ) );

	    // calculate the radius
	    if( level.length > 1 && options.avoidOverlap ){ // but only if more than one node (can't overlap)
	      var dcos = Math.cos( dTheta ) - Math.cos( 0 );
	      var dsin = Math.sin( dTheta ) - Math.sin( 0 );
	      var rMin = Math.sqrt( minDist * minDist / ( dcos * dcos + dsin * dsin ) ); // s.t. no nodes overlapping

	      r = Math.max( rMin, r );
	    }

	    level.r = r;

	    r += minDist;
	  }

	  if( options.equidistant ){
	    var rDeltaMax = 0;
	    var r = 0;

	    for( var i = 0; i < levels.length; i++ ){
	      var level = levels[ i ];
	      var rDelta = level.r - r;

	      rDeltaMax = Math.max( rDeltaMax, rDelta );
	    }

	    r = 0;
	    for( var i = 0; i < levels.length; i++ ){
	      var level = levels[ i ];

	      if( i === 0 ){
	        r = level.r;
	      }

	      level.r = r;

	      r += rDeltaMax;
	    }
	  }

	  // calculate the node positions
	  var pos = {}; // id => position
	  for( var i = 0; i < levels.length; i++ ){
	    var level = levels[ i ];
	    var dTheta = level.dTheta;
	    var r = level.r;

	    for( var j = 0; j < level.length; j++ ){
	      var val = level[ j ];
	      var theta = options.startAngle + (clockwise ? 1 : -1) * dTheta * j;

	      var p = {
	        x: center.x + r * Math.cos( theta ),
	        y: center.y + r * Math.sin( theta )
	      };

	      pos[ val.node.id() ] = p;
	    }
	  }

	  // position the nodes
	  nodes.layoutPositions( this, options, function(){
	    var id = this.id();

	    return pos[ id ];
	  } );

	  return this; // chaining
	};

	module.exports = ConcentricLayout;


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/*
	The CoSE layout was written by Gerardo Huck.
	https://www.linkedin.com/in/gerardohuck/

	Based on the following article:
	http://dl.acm.org/citation.cfm?id=1498047

	Modifications tracked on Github.
	*/

	var util = __webpack_require__( 75 );
	var math = __webpack_require__( 76 );
	var Thread = __webpack_require__( 145 );
	var is = __webpack_require__( 73 );

	var DEBUG;

	/**
	 * @brief :  default layout options
	 */
	var defaults = {
	  // Called on `layoutready`
	  ready: function(){},

	  // Called on `layoutstop`
	  stop: function(){},

	  // Whether to animate while running the layout
	  animate: true,

	  // The layout animates only after this many milliseconds
	  // (prevents flashing on fast runs)
	  animationThreshold: 250,

	  // Number of iterations between consecutive screen positions update
	  // (0 -> only updated on the end)
	  refresh: 20,

	  // Whether to fit the network view after when done
	  fit: true,

	  // Padding on fit
	  padding: 30,

	  // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  boundingBox: undefined,

	  // Extra spacing between components in non-compound graphs
	  componentSpacing: 100,

	  // Node repulsion (non overlapping) multiplier
	  nodeRepulsion: function( node ){ return 400000; },

	  // Node repulsion (overlapping) multiplier
	  nodeOverlap: 10,

	  // Ideal edge (non nested) length
	  idealEdgeLength: function( edge ){ return 10; },

	  // Divisor to compute edge forces
	  edgeElasticity: function( edge ){ return 100; },

	  // Nesting factor (multiplier) to compute ideal edge length for nested edges
	  nestingFactor: 5,

	  // Gravity force (constant)
	  gravity: 80,

	  // Maximum number of iterations to perform
	  numIter: 1000,

	  // Initial temperature (maximum node displacement)
	  initialTemp: 200,

	  // Cooling factor (how the temperature is reduced between consecutive iterations
	  coolingFactor: 0.95,

	  // Lower temperature threshold (below this point the layout will end)
	  minTemp: 1.0,

	  // Whether to use threading to speed up the layout
	  useMultitasking: true
	};


	/**
	 * @brief       : constructor
	 * @arg options : object containing layout options
	 */
	function CoseLayout( options ){
	  this.options = util.extend( {}, defaults, options );

	  this.options.layout = this;
	}


	/**
	 * @brief : runs the layout
	 */
	CoseLayout.prototype.run = function(){
	  var options = this.options;
	  var cy      = options.cy;
	  var layout  = this;
	  var thread  = this.thread;

	  if( !thread || thread.stopped() ){
	    thread = this.thread = Thread( { disabled: !options.useMultitasking } );
	  }

	  layout.stopped = false;

	  layout.trigger( { type: 'layoutstart', layout: layout } );

	  // Set DEBUG - Global variable
	  if( true === options.debug ){
	    DEBUG = true;
	  } else {
	    DEBUG = false;
	  }

	  // Initialize layout info
	  var layoutInfo = createLayoutInfo( cy, layout, options );

	  // Show LayoutInfo contents if debugging
	  if( DEBUG ){
	    printLayoutInfo( layoutInfo );
	  }

	  // If required, randomize node positions
	  // if (true === options.randomize) {
	  randomizePositions( layoutInfo, cy );
	  // }

	  var startTime = Date.now();
	  var refreshRequested = false;
	  var refresh = function( rOpts ){
	    rOpts = rOpts || {};

	    if( refreshRequested && !rOpts.next ){
	      return;
	    }

	    if( !rOpts.force && Date.now() - startTime < options.animationThreshold ){
	      return;
	    }

	    refreshRequested = true;

	    util.requestAnimationFrame( function(){
	      refreshPositions( layoutInfo, cy, options );

	      // Fit the graph if necessary
	      if( true === options.fit ){
	        cy.fit( options.padding );
	      }

	      refreshRequested = false;

	      if( rOpts.next ){ rOpts.next(); }
	    });
	  };

	  thread.on( 'message', function( e ){
	    var layoutNodes = e.message;

	    layoutInfo.layoutNodes = layoutNodes;
	    refresh();
	  } );

	  thread.pass( {
	    layoutInfo: layoutInfo,
	    options: {
	      animate: options.animate,
	      refresh: options.refresh,
	      componentSpacing: options.componentSpacing,
	      nodeOverlap: options.nodeOverlap,
	      nestingFactor: options.nestingFactor,
	      gravity: options.gravity,
	      numIter: options.numIter,
	      initialTemp: options.initialTemp,
	      coolingFactor: options.coolingFactor,
	      minTemp: options.minTemp
	    }
	  } ).run( function( pass ){
	    var layoutInfo = pass.layoutInfo;
	    var options = pass.options;
	    var stopped = false;

	    /**
	     * @brief          : Performs one iteration of the physical simulation
	     * @arg layoutInfo : LayoutInfo object already initialized
	     * @arg cy         : Cytoscape object
	     * @arg options    : Layout options
	     */
	    var step = function( layoutInfo, options, step ){
	      // var s = "\n\n###############################";
	      // s += "\nSTEP: " + step;
	      // s += "\n###############################\n";
	      // logDebug(s);

	      // Calculate node repulsions
	      calculateNodeForces( layoutInfo, options );
	      // Calculate edge forces
	      calculateEdgeForces( layoutInfo, options );
	      // Calculate gravity forces
	      calculateGravityForces( layoutInfo, options );
	      // Propagate forces from parent to child
	      propagateForces( layoutInfo, options );
	      // Update positions based on calculated forces
	      updatePositions( layoutInfo, options );
	    };

	    /**
	     * @brief : Computes the node repulsion forces
	     */
	    var calculateNodeForces = function( layoutInfo, options ){
	      // Go through each of the graphs in graphSet
	      // Nodes only repel each other if they belong to the same graph
	      // var s = 'calculateNodeForces';
	      // logDebug(s);
	      for( var i = 0; i < layoutInfo.graphSet.length; i ++ ){
	        var graph    = layoutInfo.graphSet[ i ];
	        var numNodes = graph.length;

	        // s = "Set: " + graph.toString();
	        // logDebug(s);

	        // Now get all the pairs of nodes
	        // Only get each pair once, (A, B) = (B, A)
	        for( var j = 0; j < numNodes; j++ ){
	          var node1 = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ graph[ j ] ] ];

	          for( var k = j + 1; k < numNodes; k++ ){
	            var node2 = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ graph[ k ] ] ];

	            nodeRepulsion( node1, node2, layoutInfo, options );
	          }
	        }
	      }
	    };

	    /**
	     * @brief : Compute the node repulsion forces between a pair of nodes
	     */
	    var nodeRepulsion = function( node1, node2, layoutInfo, options ){
	      // var s = "Node repulsion. Node1: " + node1.id + " Node2: " + node2.id;

	      var cmptId1 = node1.cmptId;
	      var cmptId2 = node2.cmptId;

	      if( cmptId1 !== cmptId2 && !layoutInfo.isCompound ){ return; }

	      // Get direction of line connecting both node centers
	      var directionX = node2.positionX - node1.positionX;
	      var directionY = node2.positionY - node1.positionY;
	      // s += "\ndirectionX: " + directionX + ", directionY: " + directionY;

	      // If both centers are the same, apply a random force
	      if( 0 === directionX && 0 === directionY ){
	        // s += "\nNodes have the same position.";
	        return; // TODO could be improved with random force
	      }

	      var overlap = nodesOverlap( node1, node2, directionX, directionY );

	      if( overlap > 0 ){
	        // s += "\nNodes DO overlap.";
	        // s += "\nOverlap: " + overlap;
	        // If nodes overlap, repulsion force is proportional
	        // to the overlap
	        var force    = options.nodeOverlap * overlap;

	        // Compute the module and components of the force vector
	        var distance = Math.sqrt( directionX * directionX + directionY * directionY );
	        // s += "\nDistance: " + distance;
	        var forceX   = force * directionX / distance;
	        var forceY   = force * directionY / distance;

	      } else {
	        // s += "\nNodes do NOT overlap.";
	        // If there's no overlap, force is inversely proportional
	        // to squared distance

	        // Get clipping points for both nodes
	        var point1 = findClippingPoint( node1, directionX, directionY );
	        var point2 = findClippingPoint( node2, -1 * directionX, -1 * directionY );

	        // Use clipping points to compute distance
	        var distanceX   = point2.x - point1.x;
	        var distanceY   = point2.y - point1.y;
	        var distanceSqr = distanceX * distanceX + distanceY * distanceY;
	        var distance    = Math.sqrt( distanceSqr );
	        // s += "\nDistance: " + distance;

	        // Compute the module and components of the force vector
	        var force  = ( node1.nodeRepulsion + node2.nodeRepulsion ) / distanceSqr;
	        var forceX = force * distanceX / distance;
	        var forceY = force * distanceY / distance;
	      }

	      // Apply force
	      if( !node1.isLocked ){
	        node1.offsetX -= forceX;
	        node1.offsetY -= forceY;
	      }

	      if( !node2.isLocked ){
	        node2.offsetX += forceX;
	        node2.offsetY += forceY;
	      }

	      // s += "\nForceX: " + forceX + " ForceY: " + forceY;
	      // logDebug(s);

	      return;
	    };

	    /**
	     * @brief  : Determines whether two nodes overlap or not
	     * @return : Amount of overlapping (0 => no overlap)
	     */
	    var nodesOverlap = function( node1, node2, dX, dY ){

	      if( dX > 0 ){
	        var overlapX = node1.maxX - node2.minX;
	      } else {
	        var overlapX = node2.maxX - node1.minX;
	      }

	      if( dY > 0 ){
	        var overlapY = node1.maxY - node2.minY;
	      } else {
	        var overlapY = node2.maxY - node1.minY;
	      }

	      if( overlapX >= 0 && overlapY >= 0 ){
	        return Math.sqrt( overlapX * overlapX + overlapY * overlapY );
	      } else {
	        return 0;
	      }
	    };

	    /**
	     * @brief : Finds the point in which an edge (direction dX, dY) intersects
	     *          the rectangular bounding box of it's source/target node
	     */
	    var findClippingPoint = function( node, dX, dY ){

	      // Shorcuts
	      var X = node.positionX;
	      var Y = node.positionY;
	      var H = node.height || 1;
	      var W = node.width || 1;
	      var dirSlope     = dY / dX;
	      var nodeSlope    = H / W;

	      // var s = 'Computing clipping point of node ' + node.id +
	      //   " . Height:  " + H + ", Width: " + W +
	      //   "\nDirection " + dX + ", " + dY;
	      //
	      // Compute intersection
	      var res = {};
	      do {
	        // Case: Vertical direction (up)
	        if( 0 === dX && 0 < dY ){
	          res.x = X;
	          // s += "\nUp direction";
	          res.y = Y + H / 2;
	          break;
	        }

	        // Case: Vertical direction (down)
	        if( 0 === dX && 0 > dY ){
	          res.x = X;
	          res.y = Y + H / 2;
	          // s += "\nDown direction";
	          break;
	        }

	        // Case: Intersects the right border
	        if( 0 < dX &&
	        -1 * nodeSlope <= dirSlope &&
	        dirSlope <= nodeSlope ){
	          res.x = X + W / 2;
	          res.y = Y + (W * dY / 2 / dX);
	          // s += "\nRightborder";
	          break;
	        }

	        // Case: Intersects the left border
	        if( 0 > dX &&
	        -1 * nodeSlope <= dirSlope &&
	        dirSlope <= nodeSlope ){
	          res.x = X - W / 2;
	          res.y = Y - (W * dY / 2 / dX);
	          // s += "\nLeftborder";
	          break;
	        }

	        // Case: Intersects the top border
	        if( 0 < dY &&
	        ( dirSlope <= -1 * nodeSlope ||
	          dirSlope >= nodeSlope ) ){
	          res.x = X + (H * dX / 2 / dY);
	          res.y = Y + H / 2;
	          // s += "\nTop border";
	          break;
	        }

	        // Case: Intersects the bottom border
	        if( 0 > dY &&
	        ( dirSlope <= -1 * nodeSlope ||
	          dirSlope >= nodeSlope ) ){
	          res.x = X - (H * dX / 2 / dY);
	          res.y = Y - H / 2;
	          // s += "\nBottom border";
	          break;
	        }

	      } while( false);

	      // s += "\nClipping point found at " + res.x + ", " + res.y;
	      // logDebug(s);
	      return res;
	    };

	    /**
	     * @brief : Calculates all edge forces
	     */
	    var calculateEdgeForces = function( layoutInfo, options ){
	      // Iterate over all edges
	      for( var i = 0; i < layoutInfo.edgeSize; i++ ){
	        // Get edge, source & target nodes
	        var edge     = layoutInfo.layoutEdges[ i ];
	        var sourceIx = layoutInfo.idToIndex[ edge.sourceId ];
	        var source   = layoutInfo.layoutNodes[ sourceIx ];
	        var targetIx = layoutInfo.idToIndex[ edge.targetId ];
	        var target   = layoutInfo.layoutNodes[ targetIx ];

	        // Get direction of line connecting both node centers
	        var directionX = target.positionX - source.positionX;
	        var directionY = target.positionY - source.positionY;

	        // If both centers are the same, do nothing.
	        // A random force has already been applied as node repulsion
	        if( 0 === directionX && 0 === directionY ){
	          return;
	        }

	        // Get clipping points for both nodes
	        var point1 = findClippingPoint( source, directionX, directionY );
	        var point2 = findClippingPoint( target, -1 * directionX, -1 * directionY );


	        var lx = point2.x - point1.x;
	        var ly = point2.y - point1.y;
	        var l  = Math.sqrt( lx * lx + ly * ly );

	        var force  = Math.pow( edge.idealLength - l, 2 ) / edge.elasticity;

	        if( 0 !== l ){
	          var forceX = force * lx / l;
	          var forceY = force * ly / l;
	        } else {
	          var forceX = 0;
	          var forceY = 0;
	        }

	        // Add this force to target and source nodes
	        if( !source.isLocked ){
	          source.offsetX += forceX;
	          source.offsetY += forceY;
	        }

	        if( !target.isLocked ){
	          target.offsetX -= forceX;
	          target.offsetY -= forceY;
	        }

	        // var s = 'Edge force between nodes ' + source.id + ' and ' + target.id;
	        // s += "\nDistance: " + l + " Force: (" + forceX + ", " + forceY + ")";
	        // logDebug(s);
	      }
	    };

	    /**
	     * @brief : Computes gravity forces for all nodes
	     */
	    var calculateGravityForces = function( layoutInfo, options ){
	      var distThreshold = 1;

	      // var s = 'calculateGravityForces';
	      // logDebug(s);
	      for( var i = 0; i < layoutInfo.graphSet.length; i ++ ){
	        var graph    = layoutInfo.graphSet[ i ];
	        var numNodes = graph.length;

	        // s = "Set: " + graph.toString();
	        // logDebug(s);

	        // Compute graph center
	        if( 0 === i ){
	          var centerX   = layoutInfo.clientHeight / 2;
	          var centerY   = layoutInfo.clientWidth  / 2;
	        } else {
	          // Get Parent node for this graph, and use its position as center
	          var temp    = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ graph[0] ] ];
	          var parent  = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ temp.parentId ] ];
	          var centerX = parent.positionX;
	          var centerY = parent.positionY;
	        }
	        // s = "Center found at: " + centerX + ", " + centerY;
	        // logDebug(s);

	        // Apply force to all nodes in graph
	        for( var j = 0; j < numNodes; j++ ){
	          var node = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ graph[ j ] ] ];
	          // s = "Node: " + node.id;

	          if( node.isLocked ){ continue; }

	          var dx = centerX - node.positionX;
	          var dy = centerY - node.positionY;
	          var d  = Math.sqrt( dx * dx + dy * dy );
	          if( d > distThreshold ){
	            var fx = options.gravity * dx / d;
	            var fy = options.gravity * dy / d;
	            node.offsetX += fx;
	            node.offsetY += fy;
	            // s += ": Applied force: " + fx + ", " + fy;
	          } else {
	            // s += ": skypped since it's too close to center";
	          }
	          // logDebug(s);
	        }
	      }
	    };

	    /**
	     * @brief          : This function propagates the existing offsets from
	     *                   parent nodes to its descendents.
	     * @arg layoutInfo : layoutInfo Object
	     * @arg cy         : cytoscape Object
	     * @arg options    : Layout options
	     */
	    var propagateForces = function( layoutInfo, options ){
	      // Inline implementation of a queue, used for traversing the graph in BFS order
	      var queue = [];
	      var start = 0;   // Points to the start the queue
	      var end   = -1;  // Points to the end of the queue

	      // logDebug('propagateForces');

	      // Start by visiting the nodes in the root graph
	      queue.push.apply( queue, layoutInfo.graphSet[0] );
	      end += layoutInfo.graphSet[0].length;

	      // Traverse the graph, level by level,
	      while( start <= end ){
	        // Get the node to visit and remove it from queue
	        var nodeId    = queue[ start++ ];
	        var nodeIndex = layoutInfo.idToIndex[ nodeId ];
	        var node      = layoutInfo.layoutNodes[ nodeIndex ];
	        var children  = node.children;

	        // We only need to process the node if it's compound
	        if( 0 < children.length && !node.isLocked ){
	          var offX = node.offsetX;
	          var offY = node.offsetY;

	          // var s = "Propagating offset from parent node : " + node.id +
	          //   ". OffsetX: " + offX + ". OffsetY: " + offY;
	          // s += "\n Children: " + children.toString();
	          // logDebug(s);

	          for( var i = 0; i < children.length; i++ ){
	            var childNode = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ children[ i ] ] ];
	            // Propagate offset
	            childNode.offsetX += offX;
	            childNode.offsetY += offY;
	            // Add children to queue to be visited
	            queue[ ++end ] = children[ i ];
	          }

	          // Reset parent offsets
	          node.offsetX = 0;
	          node.offsetY = 0;
	        }

	      }
	    };

	    /**
	     * @brief : Updates the layout model positions, based on
	     *          the accumulated forces
	     */
	    var updatePositions = function( layoutInfo, options ){
	      // var s = 'Updating positions';
	      // logDebug(s);

	      // Reset boundaries for compound nodes
	      for( var i = 0; i < layoutInfo.nodeSize; i++ ){
	        var n = layoutInfo.layoutNodes[ i ];
	        if( 0 < n.children.length ){
	          // logDebug("Resetting boundaries of compound node: " + n.id);
	          n.maxX = undefined;
	          n.minX = undefined;
	          n.maxY = undefined;
	          n.minY = undefined;
	        }
	      }

	      for( var i = 0; i < layoutInfo.nodeSize; i++ ){
	        var n = layoutInfo.layoutNodes[ i ];
	        if( 0 < n.children.length || n.isLocked ){
	          // No need to set compound or locked node position
	          // logDebug("Skipping position update of node: " + n.id);
	          continue;
	        }
	        // s = "Node: " + n.id + " Previous position: (" +
	        // n.positionX + ", " + n.positionY + ").";

	        // Limit displacement in order to improve stability
	        var tempForce = limitForce( n.offsetX, n.offsetY, layoutInfo.temperature );
	        n.positionX += tempForce.x;
	        n.positionY += tempForce.y;
	        n.offsetX = 0;
	        n.offsetY = 0;
	        n.minX    = n.positionX - n.width;
	        n.maxX    = n.positionX + n.width;
	        n.minY    = n.positionY - n.height;
	        n.maxY    = n.positionY + n.height;
	        // s += " New Position: (" + n.positionX + ", " + n.positionY + ").";
	        // logDebug(s);

	        // Update ancestry boudaries
	        updateAncestryBoundaries( n, layoutInfo );
	      }

	      // Update size, position of compund nodes
	      for( var i = 0; i < layoutInfo.nodeSize; i++ ){
	        var n = layoutInfo.layoutNodes[ i ];
	        if( 0 < n.children.length && !n.isLocked ){
	          n.positionX = (n.maxX + n.minX) / 2;
	          n.positionY = (n.maxY + n.minY) / 2;
	          n.width     = n.maxX - n.minX;
	          n.height    = n.maxY - n.minY;
	          // s = "Updating position, size of compound node " + n.id;
	          // s += "\nPositionX: " + n.positionX + ", PositionY: " + n.positionY;
	          // s += "\nWidth: " + n.width + ", Height: " + n.height;
	          // logDebug(s);
	        }
	      }
	    };

	    /**
	     * @brief : Limits a force (forceX, forceY) to be not
	     *          greater (in modulo) than max.
	     8          Preserves force direction.
	     */
	    var limitForce = function( forceX, forceY, max ){
	      // var s = "Limiting force: (" + forceX + ", " + forceY + "). Max: " + max;
	      var force = Math.sqrt( forceX * forceX + forceY * forceY );

	      if( force > max ){
	        var res = {
	          x: max * forceX / force,
	          y: max * forceY / force
	        };

	      } else {
	        var res = {
	          x: forceX,
	          y: forceY
	        };
	      }

	      // s += ".\nResult: (" + res.x + ", " + res.y + ")";
	      // logDebug(s);

	      return res;
	    };

	    /**
	     * @brief : Function used for keeping track of compound node
	     *          sizes, since they should bound all their subnodes.
	     */
	    var updateAncestryBoundaries = function( node, layoutInfo ){
	      // var s = "Propagating new position/size of node " + node.id;
	      var parentId = node.parentId;
	      if( null == parentId ){
	        // If there's no parent, we are done
	        // s += ". No parent node.";
	        // logDebug(s);
	        return;
	      }

	      // Get Parent Node
	      var p = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ parentId ] ];
	      var flag = false;

	      // MaxX
	      if( null == p.maxX || node.maxX + p.padRight > p.maxX ){
	        p.maxX = node.maxX + p.padRight;
	        flag = true;
	        // s += "\nNew maxX for parent node " + p.id + ": " + p.maxX;
	      }

	      // MinX
	      if( null == p.minX || node.minX - p.padLeft < p.minX ){
	        p.minX = node.minX - p.padLeft;
	        flag = true;
	        // s += "\nNew minX for parent node " + p.id + ": " + p.minX;
	      }

	      // MaxY
	      if( null == p.maxY || node.maxY + p.padBottom > p.maxY ){
	        p.maxY = node.maxY + p.padBottom;
	        flag = true;
	        // s += "\nNew maxY for parent node " + p.id + ": " + p.maxY;
	      }

	      // MinY
	      if( null == p.minY || node.minY - p.padTop < p.minY ){
	        p.minY = node.minY - p.padTop;
	        flag = true;
	        // s += "\nNew minY for parent node " + p.id + ": " + p.minY;
	      }

	      // If updated boundaries, propagate changes upward
	      if( flag ){
	        // logDebug(s);
	        return updateAncestryBoundaries( p, layoutInfo );
	      }

	      // s += ". No changes in boundaries/position of parent node " + p.id;
	      // logDebug(s);
	      return;
	    };

	    var separateComponents = function( layutInfo, options ){
	      var nodes = layoutInfo.layoutNodes;
	      var components = [];

	      for( var i = 0; i < nodes.length; i++ ){
	        var node = nodes[ i ];
	        var cid = node.cmptId;
	        var component = components[ cid ] = components[ cid ] || [];

	        component.push( node );
	      }

	      var totalA = 0;

	      for( var i = 0; i < components.length; i++ ){
	        var c = components[ i ];

	        if( !c ){ continue; }

	        c.x1 = Infinity;
	        c.x2 = -Infinity;
	        c.y1 = Infinity;
	        c.y2 = -Infinity;

	        for( var j = 0; j < c.length; j++ ){
	          var n = c[ j ];

	          c.x1 = Math.min( c.x1, n.positionX - n.width / 2 );
	          c.x2 = Math.max( c.x2, n.positionX + n.width / 2 );
	          c.y1 = Math.min( c.y1, n.positionY - n.height / 2 );
	          c.y2 = Math.max( c.y2, n.positionY + n.height / 2 );
	        }

	        c.w = c.x2 - c.x1;
	        c.h = c.y2 - c.y1;

	        totalA += c.w * c.h;
	      }

	      components.sort( function( c1, c2 ){
	        return c2.w * c2.h - c1.w * c1.h;
	      } );

	      var x = 0;
	      var y = 0;
	      var usedW = 0;
	      var rowH = 0;
	      var maxRowW = Math.sqrt( totalA ) * layoutInfo.clientWidth / layoutInfo.clientHeight;

	      for( var i = 0; i < components.length; i++ ){
	        var c = components[ i ];

	        if( !c ){ continue; }

	        for( var j = 0; j < c.length; j++ ){
	          var n = c[ j ];

	          if( !n.isLocked ){
	            n.positionX += x;
	            n.positionY += y;
	          }
	        }

	        x += c.w + options.componentSpacing;
	        usedW += c.w + options.componentSpacing;
	        rowH = Math.max( rowH, c.h );

	        if( usedW > maxRowW ){
	          y += rowH + options.componentSpacing;
	          x = 0;
	          usedW = 0;
	          rowH = 0;
	        }
	      }
	    };

	    var mainLoop = function( i ){
	      if( stopped ){
	        // logDebug("Layout manually stopped. Stopping computation in step " + i);
	        return false;
	      }

	      // Do one step in the phisical simulation
	      step( layoutInfo, options, i );

	      // Update temperature
	      layoutInfo.temperature = layoutInfo.temperature * options.coolingFactor;
	      // logDebug("New temperature: " + layoutInfo.temperature);

	      if( layoutInfo.temperature < options.minTemp ){
	        // logDebug("Temperature drop below minimum threshold. Stopping computation in step " + i);
	        return false;
	      }

	      return true;
	    };

	    var i = 0;
	    var loopRet;

	    do {
	      var f = 0;

	      while( f < options.refresh && i < options.numIter ){
	        var loopRet = mainLoop( i );
	        if( !loopRet ){ break; }

	        f++;
	        i++;
	      }

	      if( options.animate ){
	        broadcast( layoutInfo.layoutNodes ); // jshint ignore:line
	      }

	    } while( loopRet && i + 1 < options.numIter );

	    separateComponents( layoutInfo, options );

	    return layoutInfo;
	  } ).then( function( layoutInfoUpdated ){
	    layoutInfo.layoutNodes = layoutInfoUpdated.layoutNodes; // get the positions

	    thread.stop();
	    done();
	  } );

	  var done = function(){
	    refresh({
	      force: true,
	      next: function(){
	        // Layout has finished
	        layout.one('layoutstop', options.stop);
	        layout.trigger({ type: 'layoutstop', layout: layout });
	      }
	    });
	  };

	  return this; // chaining
	};


	/**
	 * @brief : called on continuous layouts to stop them before they finish
	 */
	CoseLayout.prototype.stop = function(){
	  this.stopped = true;

	  if( this.thread ){
	    this.thread.stop();
	  }

	  this.trigger( 'layoutstop' );

	  return this; // chaining
	};

	CoseLayout.prototype.destroy = function(){
	  if( this.thread ){
	    this.thread.stop();
	  }

	  return this; // chaining
	};


	/**
	 * @brief     : Creates an object which is contains all the data
	 *              used in the layout process
	 * @arg cy    : cytoscape.js object
	 * @return    : layoutInfo object initialized
	 */
	var createLayoutInfo = function( cy, layout, options ){
	  // Shortcut
	  var edges = options.eles.edges();
	  var nodes = options.eles.nodes();

	  var layoutInfo   = {
	    isCompound: cy.hasCompoundNodes(),
	    layoutNodes: [],
	    idToIndex: {},
	    nodeSize: nodes.size(),
	    graphSet: [],
	    indexToGraph: [],
	    layoutEdges: [],
	    edgeSize: edges.size(),
	    temperature: options.initialTemp,
	    clientWidth: cy.width(),
	    clientHeight: cy.width(),
	    boundingBox: math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	                     x1: 0, y1: 0, w: cy.width(), h: cy.height()
	                   } )
	  };

	  var components = options.eles.components();
	  var id2cmptId = {};

	  for( var i = 0; i < components.length; i++ ){
	    var component = components[ i ];

	    for( var j = 0; j < component.length; j++ ){
	      var node = component[ j ];

	      id2cmptId[ node.id() ] = i;
	    }
	  }

	  // Iterate over all nodes, creating layout nodes
	  for( var i = 0; i < layoutInfo.nodeSize; i++ ){
	    var n = nodes[ i ];
	    var nbb = n.boundingBox();

	    var tempNode        = {};
	    tempNode.isLocked   = n.locked();
	    tempNode.id         = n.data( 'id' );
	    tempNode.parentId   = n.data( 'parent' );
	    tempNode.cmptId     = id2cmptId[ n.id() ];
	    tempNode.children   = [];
	    tempNode.positionX  = n.position( 'x' );
	    tempNode.positionY  = n.position( 'y' );
	    tempNode.offsetX    = 0;
	    tempNode.offsetY    = 0;
	    tempNode.height     = nbb.w;
	    tempNode.width      = nbb.h;
	    tempNode.maxX       = tempNode.positionX + tempNode.width  / 2;
	    tempNode.minX       = tempNode.positionX - tempNode.width  / 2;
	    tempNode.maxY       = tempNode.positionY + tempNode.height / 2;
	    tempNode.minY       = tempNode.positionY - tempNode.height / 2;
	    tempNode.padLeft    = parseFloat( n.style( 'padding-left' ) );
	    tempNode.padRight   = parseFloat( n.style( 'padding-right' ) );
	    tempNode.padTop     = parseFloat( n.style( 'padding-top' ) );
	    tempNode.padBottom  = parseFloat( n.style( 'padding-bottom' ) );

	    // forces
	    tempNode.nodeRepulsion = is.fn( options.nodeRepulsion ) ? options.nodeRepulsion.call( n, n ) : options.nodeRepulsion;

	    // Add new node
	    layoutInfo.layoutNodes.push( tempNode );
	    // Add entry to id-index map
	    layoutInfo.idToIndex[ tempNode.id ] = i;
	  }

	  // Inline implementation of a queue, used for traversing the graph in BFS order
	  var queue = [];
	  var start = 0;   // Points to the start the queue
	  var end   = -1;  // Points to the end of the queue

	  var tempGraph = [];

	  // Second pass to add child information and
	  // initialize queue for hierarchical traversal
	  for( var i = 0; i < layoutInfo.nodeSize; i++ ){
	    var n = layoutInfo.layoutNodes[ i ];
	    var p_id = n.parentId;
	    // Check if node n has a parent node
	    if( null != p_id ){
	      // Add node Id to parent's list of children
	      layoutInfo.layoutNodes[ layoutInfo.idToIndex[ p_id ] ].children.push( n.id );
	    } else {
	      // If a node doesn't have a parent, then it's in the root graph
	      queue[ ++end ] = n.id;
	      tempGraph.push( n.id );
	    }
	  }

	  // Add root graph to graphSet
	  layoutInfo.graphSet.push( tempGraph );

	  // Traverse the graph, level by level,
	  while( start <= end ){
	    // Get the node to visit and remove it from queue
	    var node_id  = queue[ start++ ];
	    var node_ix  = layoutInfo.idToIndex[ node_id ];
	    var node     = layoutInfo.layoutNodes[ node_ix ];
	    var children = node.children;
	    if( children.length > 0 ){
	      // Add children nodes as a new graph to graph set
	      layoutInfo.graphSet.push( children );
	      // Add children to que queue to be visited
	      for( var i = 0; i < children.length; i++ ){
	        queue[ ++end ] = children[ i ];
	      }
	    }
	  }

	  // Create indexToGraph map
	  for( var i = 0; i < layoutInfo.graphSet.length; i++ ){
	    var graph = layoutInfo.graphSet[ i ];
	    for( var j = 0; j < graph.length; j++ ){
	      var index = layoutInfo.idToIndex[ graph[ j ] ];
	      layoutInfo.indexToGraph[ index ] = i;
	    }
	  }

	  // Iterate over all edges, creating Layout Edges
	  for( var i = 0; i < layoutInfo.edgeSize; i++ ){
	    var e = edges[ i ];
	    var tempEdge = {};
	    tempEdge.id       = e.data( 'id' );
	    tempEdge.sourceId = e.data( 'source' );
	    tempEdge.targetId = e.data( 'target' );

	    // Compute ideal length
	    var idealLength = is.fn( options.idealEdgeLength ) ? options.idealEdgeLength.call( e, e ) : options.idealEdgeLength;
	    var elasticity = is.fn( options.edgeElasticity ) ? options.edgeElasticity.call( e, e ) : options.edgeElasticity;

	    // Check if it's an inter graph edge
	    var sourceIx    = layoutInfo.idToIndex[ tempEdge.sourceId ];
	    var targetIx    = layoutInfo.idToIndex[ tempEdge.targetId ];
	    var sourceGraph = layoutInfo.indexToGraph[ sourceIx ];
	    var targetGraph = layoutInfo.indexToGraph[ targetIx ];

	    if( sourceGraph != targetGraph ){
	      // Find lowest common graph ancestor
	      var lca = findLCA( tempEdge.sourceId, tempEdge.targetId, layoutInfo );

	      // Compute sum of node depths, relative to lca graph
	      var lcaGraph = layoutInfo.graphSet[ lca ];
	      var depth    = 0;

	      // Source depth
	      var tempNode = layoutInfo.layoutNodes[ sourceIx ];
	      while( -1 === lcaGraph.indexOf( tempNode.id ) ){
	        tempNode = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ tempNode.parentId ] ];
	        depth++;
	      }

	      // Target depth
	      tempNode = layoutInfo.layoutNodes[ targetIx ];
	      while( -1 === lcaGraph.indexOf( tempNode.id ) ){
	        tempNode = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ tempNode.parentId ] ];
	        depth++;
	      }

	      // logDebug('LCA of nodes ' + tempEdge.sourceId + ' and ' + tempEdge.targetId +
	      //  ". Index: " + lca + " Contents: " + lcaGraph.toString() +
	      //  ". Depth: " + depth);

	      // Update idealLength
	      idealLength *= depth * options.nestingFactor;
	    }

	    tempEdge.idealLength = idealLength;
	    tempEdge.elasticity = elasticity;

	    layoutInfo.layoutEdges.push( tempEdge );
	  }

	  // Finally, return layoutInfo object
	  return layoutInfo;
	};


	/**
	 * @brief : This function finds the index of the lowest common
	 *          graph ancestor between 2 nodes in the subtree
	 *          (from the graph hierarchy induced tree) whose
	 *          root is graphIx
	 *
	 * @arg node1: node1's ID
	 * @arg node2: node2's ID
	 * @arg layoutInfo: layoutInfo object
	 *
	 */
	var findLCA = function( node1, node2, layoutInfo ){
	  // Find their common ancester, starting from the root graph
	  var res = findLCA_aux( node1, node2, 0, layoutInfo );
	  if( 2 > res.count ){
	    // If aux function couldn't find the common ancester,
	    // then it is the root graph
	    return 0;
	  } else {
	    return res.graph;
	  }
	};


	/**
	 * @brief          : Auxiliary function used for LCA computation
	 *
	 * @arg node1      : node1's ID
	 * @arg node2      : node2's ID
	 * @arg graphIx    : subgraph index
	 * @arg layoutInfo : layoutInfo object
	 *
	 * @return         : object of the form {count: X, graph: Y}, where:
	 *                   X is the number of ancesters (max: 2) found in
	 *                   graphIx (and it's subgraphs),
	 *                   Y is the graph index of the lowest graph containing
	 *                   all X nodes
	 */
	var findLCA_aux = function( node1, node2, graphIx, layoutInfo ){
	  var graph = layoutInfo.graphSet[ graphIx ];
	  // If both nodes belongs to graphIx
	  if( -1 < graph.indexOf( node1 ) && -1 < graph.indexOf( node2 ) ){
	    return {count: 2, graph: graphIx};
	  }

	  // Make recursive calls for all subgraphs
	  var c = 0;
	  for( var i = 0; i < graph.length; i++ ){
	    var nodeId   = graph[ i ];
	    var nodeIx   = layoutInfo.idToIndex[ nodeId ];
	    var children = layoutInfo.layoutNodes[ nodeIx ].children;

	    // If the node has no child, skip it
	    if( 0 === children.length ){
	      continue;
	    }

	    var childGraphIx = layoutInfo.indexToGraph[ layoutInfo.idToIndex[ children[0] ] ];
	    var result = findLCA_aux( node1, node2, childGraphIx, layoutInfo );
	    if( 0 === result.count ){
	      // Neither node1 nor node2 are present in this subgraph
	      continue;
	    } else if( 1 === result.count ){
	      // One of (node1, node2) is present in this subgraph
	      c++;
	      if( 2 === c ){
	        // We've already found both nodes, no need to keep searching
	        break;
	      }
	    } else {
	      // Both nodes are present in this subgraph
	      return result;
	    }
	  }

	  return {count: c, graph: graphIx};
	};


	/**
	 * @brief: printsLayoutInfo into js console
	 *         Only used for debbuging
	 */
	var printLayoutInfo = function( layoutInfo ){
	  /* jshint ignore:start */

	  if( !DEBUG ){
	    return;
	  }
	  console.debug( 'layoutNodes:' );
	  for( var i = 0; i < layoutInfo.nodeSize; i++ ){
	    var n = layoutInfo.layoutNodes[ i ];
	    var s =
	    '\nindex: '     + i +
	    '\nId: '        + n.id +
	    '\nChildren: '  + n.children.toString() +
	    '\nparentId: '  + n.parentId  +
	    '\npositionX: ' + n.positionX +
	    '\npositionY: ' + n.positionY +
	    '\nOffsetX: ' + n.offsetX +
	    '\nOffsetY: ' + n.offsetY +
	    '\npadLeft: ' + n.padLeft +
	    '\npadRight: ' + n.padRight +
	    '\npadTop: ' + n.padTop +
	    '\npadBottom: ' + n.padBottom;

	    console.debug( s );
	  }

	  console.debug( 'idToIndex' );
	  for( var i in layoutInfo.idToIndex ){
	    console.debug( 'Id: ' + i + '\nIndex: ' + layoutInfo.idToIndex[ i ] );
	  }

	  console.debug( 'Graph Set' );
	  var set = layoutInfo.graphSet;
	  for( var i = 0; i < set.length; i ++ ){
	    console.debug( 'Set : ' + i + ': ' + set[ i ].toString() );
	  }

	  var s = 'IndexToGraph';
	  for( var i = 0; i < layoutInfo.indexToGraph.length; i ++ ){
	    s += '\nIndex : ' + i + ' Graph: ' + layoutInfo.indexToGraph[ i ];
	  }
	  console.debug( s );

	  s = 'Layout Edges';
	  for( var i = 0; i < layoutInfo.layoutEdges.length; i++ ){
	    var e = layoutInfo.layoutEdges[ i ];
	    s += '\nEdge Index: ' + i + ' ID: ' + e.id +
	    ' SouceID: ' + e.sourceId + ' TargetId: ' + e.targetId +
	    ' Ideal Length: ' + e.idealLength;
	  }
	  console.debug( s );

	  s =  'nodeSize: ' + layoutInfo.nodeSize;
	  s += '\nedgeSize: ' + layoutInfo.edgeSize;
	  s += '\ntemperature: ' + layoutInfo.temperature;
	  console.debug( s );

	  return;
	  /* jshint ignore:end */
	};


	/**
	 * @brief : Randomizes the position of all nodes
	 */
	var randomizePositions = function( layoutInfo, cy ){
	  var width     = layoutInfo.clientWidth;
	  var height    = layoutInfo.clientHeight;

	  for( var i = 0; i < layoutInfo.nodeSize; i++ ){
	    var n = layoutInfo.layoutNodes[ i ];

	    // No need to randomize compound nodes or locked nodes
	    if( 0 === n.children.length && !n.isLocked ){
	      n.positionX = Math.random() * width;
	      n.positionY = Math.random() * height;
	    }
	  }
	};


	/**
	 * @brief          : Updates the positions of nodes in the network
	 * @arg layoutInfo : LayoutInfo object
	 * @arg cy         : Cytoscape object
	 * @arg options    : Layout options
	 */
	var refreshPositions = function( layoutInfo, cy, options ){
	  // var s = 'Refreshing positions';
	  // logDebug(s);

	  var layout = options.layout;
	  var nodes = options.eles.nodes();
	  var bb = layoutInfo.boundingBox;
	  var coseBB = { x1: Infinity, x2: -Infinity, y1: Infinity, y2: -Infinity };

	  if( options.boundingBox ){
	    nodes.forEach( function( node ){
	      var lnode = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ node.data( 'id' ) ] ];

	      coseBB.x1 = Math.min( coseBB.x1, lnode.positionX );
	      coseBB.x2 = Math.max( coseBB.x2, lnode.positionX );

	      coseBB.y1 = Math.min( coseBB.y1, lnode.positionY );
	      coseBB.y2 = Math.max( coseBB.y2, lnode.positionY );
	    } );

	    coseBB.w = coseBB.x2 - coseBB.x1;
	    coseBB.h = coseBB.y2 - coseBB.y1;
	  }

	  nodes.positions( function( i, ele ){
	    var lnode = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ ele.data( 'id' ) ] ];
	    // s = "Node: " + lnode.id + ". Refreshed position: (" +
	    // lnode.positionX + ", " + lnode.positionY + ").";
	    // logDebug(s);

	    if( options.boundingBox ){ // then add extra bounding box constraint
	      var pctX = (lnode.positionX - coseBB.x1) / coseBB.w;
	      var pctY = (lnode.positionY - coseBB.y1) / coseBB.h;

	      return {
	        x: bb.x1 + pctX * bb.w,
	        y: bb.y1 + pctY * bb.h
	      };
	    } else {
	      return {
	        x: lnode.positionX,
	        y: lnode.positionY
	      };
	    }
	  } );

	  // Trigger layoutReady only on first call
	  if( true !== layoutInfo.ready ){
	    // s = 'Triggering layoutready';
	    // logDebug(s);
	    layoutInfo.ready = true;
	    layout.one( 'layoutready', options.ready );
	    layout.trigger( { type: 'layoutready', layout: this } );
	  }
	};

	/**
	 * @brief : Logs a debug message in JS console, if DEBUG is ON
	 */
	// var logDebug = function(text) {
	//   if (DEBUG) {
	//     console.debug(text);
	//   }
	// };

	module.exports = CoseLayout;


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {/*! Weaver licensed under MIT (https://tldrlegal.com/license/mit-license), copyright Max Franz */

	// cross-env thread/worker
	// NB : uses (heavyweight) processes on nodejs so best not to create too many threads

	'use strict';

	var window = __webpack_require__(72);
	var util = __webpack_require__(75);
	var Promise = __webpack_require__(101);
	var Event = __webpack_require__(102);
	var define = __webpack_require__(99);
	var is = __webpack_require__(73);

	var Thread = function( opts ){
	  if( !(this instanceof Thread) ){
	    return new Thread( opts );
	  }

	  var _p = this._private = {
	    requires: [],
	    files: [],
	    queue: null,
	    pass: [],
	    disabled: false
	  };

	  if( is.plainObject(opts) ){
	    if( opts.disabled != null ){
	      _p.disabled = !!opts.disabled;
	    }
	  }

	};

	var thdfn = Thread.prototype; // short alias

	var stringifyFieldVal = function( val ){
	  var valStr = is.fn( val ) ? val.toString() : "JSON.parse('" + JSON.stringify(val) + "')";

	  return valStr;
	};

	// allows for requires with prototypes and subobjs etc
	var fnAsRequire = function( fn ){
	  var req;
	  var fnName;

	  if( is.object(fn) && fn.fn ){ // manual fn
	    req = fnAs( fn.fn, fn.name );
	    fnName = fn.name;
	    fn = fn.fn;
	  } else if( is.fn(fn) ){ // auto fn
	    req = fn.toString();
	    fnName = fn.name;
	  } else if( is.string(fn) ){ // stringified fn
	    req = fn;
	  } else if( is.object(fn) ){ // plain object
	    if( fn.proto ){
	      req = '';
	    } else {
	      req = fn.name + ' = {};';
	    }

	    fnName = fn.name;
	    fn = fn.obj;
	  }

	  req += '\n';

	  var protoreq = function( val, subname ){
	    if( val.prototype ){
	      var protoNonempty = false;
	      for( var prop in val.prototype ){ protoNonempty = true; break; } // jshint ignore:line

	      if( protoNonempty ){
	        req += fnAsRequire( {
	          name: subname,
	          obj: val,
	          proto: true
	        }, val );
	      }
	    }
	  };

	  // pull in prototype
	  if( fn.prototype && fnName != null ){

	    for( var name in fn.prototype ){
	      var protoStr = '';

	      var val = fn.prototype[ name ];
	      var valStr = stringifyFieldVal( val );
	      var subname = fnName + '.prototype.' + name;

	      protoStr += subname + ' = ' + valStr + ';\n';

	      if( protoStr ){
	        req += protoStr;
	      }

	      protoreq( val, subname ); // subobject with prototype
	    }

	  }

	  // pull in properties for obj/fns
	  if( !is.string(fn) ){ for( var name in fn ){
	    var propsStr = '';

	    if( fn.hasOwnProperty(name) ){
	      var val = fn[ name ];
	      var valStr = stringifyFieldVal( val );
	      var subname = fnName + '["' + name + '"]';

	      propsStr += subname + ' = ' + valStr + ';\n';
	    }

	    if( propsStr ){
	      req += propsStr;
	    }

	    protoreq( val, subname ); // subobject with prototype
	  } }

	  return req;
	};

	var isPathStr = function( str ){
	  return is.string(str) && str.match(/\.js$/);
	};

	util.extend(thdfn, {

	  instanceString: function(){ return 'thread'; },

	  require: function( fn, as ){
	    var requires = this._private.requires;

	    if( isPathStr(fn) ){
	      this._private.files.push( fn );

	      return this;
	    }

	    if( as ){
	      if( is.fn(fn) ){
	        fn = { name: as, fn: fn };
	      } else {
	        fn = { name: as, obj: fn };
	      }
	    } else {
	      if( is.fn(fn) ){
	        if( !fn.name ){
	          throw 'The function name could not be automatically determined.  Use thread.require( someFunction, "someFunction" )';
	        }

	        fn = { name: fn.name, fn: fn };
	      }
	    }

	    requires.push( fn );

	    return this; // chaining
	  },

	  pass: function( data ){
	    this._private.pass.push( data );

	    return this; // chaining
	  },

	  run: function( fn, pass ){ // fn used like main()
	    var self = this;
	    var _p = this._private;
	    pass = pass || _p.pass.shift();

	    if( _p.stopped ){
	      throw 'Attempted to run a stopped thread!  Start a new thread or do not stop the existing thread and reuse it.';
	    }

	    if( _p.running ){
	      return ( _p.queue = _p.queue.then(function(){ // inductive step
	        return self.run( fn, pass );
	      }) );
	    }

	    var useWW = window != null && !_p.disabled;
	    var useNode = !window && typeof module !== 'undefined' && !_p.disabled;

	    self.trigger('run');

	    var runP = new Promise(function( resolve, reject ){

	      _p.running = true;

	      var threadTechAlreadyExists = _p.ran;

	      var fnImplStr = is.string( fn ) ? fn : fn.toString();

	      // worker code to exec
	      var fnStr = '\n' + ( _p.requires.map(function( r ){
	        return fnAsRequire( r );
	      }) ).concat( _p.files.map(function( f ){
	        if( useWW ){
	          var wwifyFile = function( file ){
	            if( file.match(/^\.\//) || file.match(/^\.\./) ){
	              return window.location.origin + window.location.pathname + file;
	            } else if( file.match(/^\//) ){
	              return window.location.origin + '/' + file;
	            }
	            return file;
	          };

	          return 'importScripts("' + wwifyFile(f) + '");';
	        } else if( useNode ) {
	          return 'eval( require("fs").readFileSync("' + f + '", { encoding: "utf8" }) );';
	        } else {
	          throw 'External file `' + f + '` can not be required without any threading technology.';
	        }
	      }) ).concat([
	        '( function(){',
	          'var ret = (' + fnImplStr + ')(' + JSON.stringify(pass) + ');',
	          'if( ret !== undefined ){ resolve(ret); }', // assume if ran fn returns defined value (incl. null), that we want to resolve to it
	        '} )()\n'
	      ]).join('\n');

	      // because we've now consumed the requires, empty the list so we don't dupe on next run()
	      _p.requires = [];
	      _p.files = [];

	      if( useWW ){
	        var fnBlob, fnUrl;

	        // add normalised thread api functions
	        if( !threadTechAlreadyExists ){
	          var fnPre = fnStr + '';

	          fnStr = [
	            'function _ref_(o){ return eval(o); };',
	            'function broadcast(m){ return message(m); };', // alias
	            'function message(m){ postMessage(m); };',
	            'function listen(fn){',
	            '  self.addEventListener("message", function(m){ ',
	            '    if( typeof m === "object" && (m.data.$$eval || m.data === "$$start") ){',
	            '    } else { ',
	            '      fn( m.data );',
	            '    }',
	            '  });',
	            '};',
	            'self.addEventListener("message", function(m){  if( m.data.$$eval ){ eval( m.data.$$eval ); }  });',
	            'function resolve(v){ postMessage({ $$resolve: v }); };',
	            'function reject(v){ postMessage({ $$reject: v }); };'
	          ].join('\n');

	          fnStr += fnPre;

	          fnBlob = new Blob([ fnStr ], {
	            type: 'application/javascript'
	          });
	          fnUrl = window.URL.createObjectURL( fnBlob );
	        }
	        // create webworker and let it exec the serialised code
	        var ww = _p.webworker = _p.webworker || new Worker( fnUrl );

	        if( threadTechAlreadyExists ){ // then just exec new run() code
	          ww.postMessage({
	            $$eval: fnStr
	          });
	        }

	        // worker messages => events
	        var cb;
	        ww.addEventListener('message', cb = function( m ){
	          var isObject = is.object(m) && is.object( m.data );

	          if( isObject && ('$$resolve' in m.data) ){
	            ww.removeEventListener('message', cb); // done listening b/c resolve()

	            resolve( m.data.$$resolve );
	          } else if( isObject && ('$$reject' in m.data) ){
	            ww.removeEventListener('message', cb); // done listening b/c reject()

	            reject( m.data.$$reject );
	          } else {
	            self.trigger( new Event(m, { type: 'message', message: m.data }) );
	          }
	        }, false);

	        if( !threadTechAlreadyExists ){
	          ww.postMessage('$$start'); // start up the worker
	        }

	      } else if( useNode ){
	        // create a new process

	        if( !_p.child ){
	          _p.child = ( __webpack_require__(146).fork( __webpack_require__(147).join(__dirname, 'thread-node-fork') ) );
	        }

	        var child = _p.child;

	        // child process messages => events
	        var cb;
	        child.on('message', cb = function( m ){
	          if( is.object(m) && ('$$resolve' in m) ){
	            child.removeListener('message', cb); // done listening b/c resolve()

	            resolve( m.$$resolve );
	          } else if( is.object(m) && ('$$reject' in m) ){
	            child.removeListener('message', cb); // done listening b/c reject()

	            reject( m.$$reject );
	          } else {
	            self.trigger( new Event({}, { type: 'message', message: m }) );
	          }
	        });

	        // ask the child process to eval the worker code
	        child.send({
	          $$eval: fnStr
	        });

	      } else { // use a fallback mechanism using a timeout

	        var promiseResolve = resolve;
	        var promiseReject = reject;

	        var timer = _p.timer = _p.timer || {

	          listeners: [],

	          exec: function(){
	            // as a string so it can't be mangled by minifiers and processors
	            fnStr = [
	              'function _ref_(o){ return eval(o); };',
	              'function broadcast(m){ return message(m); };',
	              'function message(m){ self.trigger( new Event({}, { type: "message", message: m }) ); };',
	              'function listen(fn){ timer.listeners.push( fn ); };',
	              'function resolve(v){ promiseResolve(v); };',
	              'function reject(v){ promiseReject(v); };'
	            ].join('\n') + fnStr;

	            // the .run() code
	            eval( fnStr ); // jshint ignore:line
	          },

	          message: function( m ){
	            var ls = timer.listeners;

	            for( var i = 0; i < ls.length; i++ ){
	              var fn = ls[i];

	              fn( m );
	            }
	          }

	        };

	        timer.exec();
	      }

	    }).then(function( v ){
	      _p.running = false;
	      _p.ran = true;

	      self.trigger('ran');

	      return v;
	    });

	    if( _p.queue == null ){
	      _p.queue = runP; // i.e. first step of inductive promise chain (for queue)
	    }

	    return runP;
	  },

	  // send the thread a message
	  message: function( m ){
	    var _p = this._private;

	    if( _p.webworker ){
	      _p.webworker.postMessage( m );
	    }

	    if( _p.child ){
	      _p.child.send( m );
	    }

	    if( _p.timer ){
	      _p.timer.message( m );
	    }

	    return this; // chaining
	  },

	  stop: function(){
	    var _p = this._private;

	    if( _p.webworker ){
	      _p.webworker.terminate();
	    }

	    if( _p.child ){
	      _p.child.kill();
	    }

	    if( _p.timer ){
	      // nothing we can do if we've run a timeout
	    }

	    _p.stopped = true;

	    return this.trigger('stop'); // chaining
	  },

	  stopped: function(){
	    return this._private.stopped;
	  }

	});

	// turns a stringified function into a (re)named function
	var fnAs = function( fn, name ){
	  var fnStr = fn.toString();
	  fnStr = fnStr.replace(/function\s*?\S*?\s*?\(/, 'function ' + name + '(');

	  return fnStr;
	};

	var defineFnal = function( opts ){
	  opts = opts || {};

	  return function fnalImpl( fn, arg1 ){
	    var fnStr = fnAs( fn, '_$_$_' + opts.name );

	    this.require( fnStr );

	    return this.run( [
	      'function( data ){',
	      '  var origResolve = resolve;',
	      '  var res = [];',
	      '  ',
	      '  resolve = function( val ){',
	      '    res.push( val );',
	      '  };',
	      '  ',
	      '  var ret = data.' + opts.name + '( _$_$_' + opts.name + ( arguments.length > 1 ? ', ' + JSON.stringify(arg1) : '' ) + ' );',
	      '  ',
	      '  resolve = origResolve;',
	      '  resolve( res.length > 0 ? res : ret );',
	      '}'
	    ].join('\n') );
	  };
	};

	util.extend(thdfn, {
	  reduce: defineFnal({ name: 'reduce' }),

	  reduceRight: defineFnal({ name: 'reduceRight' }),

	  map: defineFnal({ name: 'map' })
	});

	// aliases
	var fn = thdfn;
	fn.promise = fn.run;
	fn.terminate = fn.halt = fn.stop;
	fn.include = fn.require;

	// pull in event apis
	util.extend(thdfn, {
	  on: define.on(),
	  one: define.on({ unbindSelfOnTrigger: true }),
	  off: define.off(),
	  trigger: define.trigger()
	});

	define.eventAliasesOn( thdfn );

	module.exports = Thread;

	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 146 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var math = __webpack_require__( 76 );

	var defaults = {
	  fit: true, // whether to fit the viewport to the graph
	  padding: 30, // padding used on fit
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
	  avoidOverlapPadding: 10, // extra spacing around nodes when avoidOverlap: true
	  condense: false, // uses all available space on false, uses minimal space on true
	  rows: undefined, // force num of rows in the grid
	  cols: undefined, // force num of columns in the grid
	  position: function( node ){}, // returns { row, col } for element
	  sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function GridLayout( options ){
	  this.options = util.extend( {}, defaults, options );
	}

	GridLayout.prototype.run = function(){
	  var params = this.options;
	  var options = params;

	  var cy = params.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().not( ':parent' );

	  if( options.sort ){
	    nodes = nodes.sort( options.sort );
	  }

	  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  } );

	  if( bb.h === 0 || bb.w === 0 ){
	    nodes.layoutPositions( this, options, function(){
	      return { x: bb.x1, y: bb.y1 };
	    } );

	  } else {

	    // width/height * splits^2 = cells where splits is number of times to split width
	    var cells = nodes.size();
	    var splits = Math.sqrt( cells * bb.h / bb.w );
	    var rows = Math.round( splits );
	    var cols = Math.round( bb.w / bb.h * splits );

	    var small = function( val ){
	      if( val == null ){
	        return Math.min( rows, cols );
	      } else {
	        var min = Math.min( rows, cols );
	        if( min == rows ){
	          rows = val;
	        } else {
	          cols = val;
	        }
	      }
	    };

	    var large = function( val ){
	      if( val == null ){
	        return Math.max( rows, cols );
	      } else {
	        var max = Math.max( rows, cols );
	        if( max == rows ){
	          rows = val;
	        } else {
	          cols = val;
	        }
	      }
	    };

	    var oRows = options.rows;
	    var oCols = options.cols != null ? options.cols : options.columns;

	    // if rows or columns were set in options, use those values
	    if( oRows != null && oCols != null ){
	      rows = oRows;
	      cols = oCols;
	    } else if( oRows != null && oCols == null ){
	      rows = oRows;
	      cols = Math.ceil( cells / rows );
	    } else if( oRows == null && oCols != null ){
	      cols = oCols;
	      rows = Math.ceil( cells / cols );
	    }

	    // otherwise use the automatic values and adjust accordingly

	    // if rounding was up, see if we can reduce rows or columns
	    else if( cols * rows > cells ){
	      var sm = small();
	      var lg = large();

	      // reducing the small side takes away the most cells, so try it first
	      if( (sm - 1) * lg >= cells ){
	        small( sm - 1 );
	      } else if( (lg - 1) * sm >= cells ){
	        large( lg - 1 );
	      }
	    } else {

	      // if rounding was too low, add rows or columns
	      while( cols * rows < cells ){
	        var sm = small();
	        var lg = large();

	        // try to add to larger side first (adds less in multiplication)
	        if( (lg + 1) * sm >= cells ){
	          large( lg + 1 );
	        } else {
	          small( sm + 1 );
	        }
	      }
	    }

	    var cellWidth = bb.w / cols;
	    var cellHeight = bb.h / rows;

	    if( options.condense ){
	      cellWidth = 0;
	      cellHeight = 0;
	    }

	    if( options.avoidOverlap ){
	      for( var i = 0; i < nodes.length; i++ ){
	        var node = nodes[ i ];
	        var pos = node._private.position;

	        if( pos.x == null || pos.y == null ){ // for bb
	          pos.x = 0;
	          pos.y = 0;
	        }

	        var nbb = node.boundingBox();
	        var p = options.avoidOverlapPadding;

	        var w = nbb.w + p;
	        var h = nbb.h + p;

	        cellWidth = Math.max( cellWidth, w );
	        cellHeight = Math.max( cellHeight, h );
	      }
	    }

	    var cellUsed = {}; // e.g. 'c-0-2' => true

	    var used = function( row, col ){
	      return cellUsed[ 'c-' + row + '-' + col ] ? true : false;
	    };

	    var use = function( row, col ){
	      cellUsed[ 'c-' + row + '-' + col ] = true;
	    };

	    // to keep track of current cell position
	    var row = 0;
	    var col = 0;
	    var moveToNextCell = function(){
	      col++;
	      if( col >= cols ){
	        col = 0;
	        row++;
	      }
	    };

	    // get a cache of all the manual positions
	    var id2manPos = {};
	    for( var i = 0; i < nodes.length; i++ ){
	      var node = nodes[ i ];
	      var rcPos = options.position( node );

	      if( rcPos && (rcPos.row !== undefined || rcPos.col !== undefined) ){ // must have at least row or col def'd
	        var pos = {
	          row: rcPos.row,
	          col: rcPos.col
	        };

	        if( pos.col === undefined ){ // find unused col
	          pos.col = 0;

	          while( used( pos.row, pos.col ) ){
	            pos.col++;
	          }
	        } else if( pos.row === undefined ){ // find unused row
	          pos.row = 0;

	          while( used( pos.row, pos.col ) ){
	            pos.row++;
	          }
	        }

	        id2manPos[ node.id() ] = pos;
	        use( pos.row, pos.col );
	      }
	    }

	    var getPos = function( i, element ){
	      var x, y;

	      if( element.locked() || element.isFullAutoParent() ){
	        return false;
	      }

	      // see if we have a manual position set
	      var rcPos = id2manPos[ element.id() ];
	      if( rcPos ){
	        x = rcPos.col * cellWidth + cellWidth / 2 + bb.x1;
	        y = rcPos.row * cellHeight + cellHeight / 2 + bb.y1;

	      } else { // otherwise set automatically

	        while( used( row, col ) ){
	          moveToNextCell();
	        }

	        x = col * cellWidth + cellWidth / 2 + bb.x1;
	        y = row * cellHeight + cellHeight / 2 + bb.y1;
	        use( row, col );

	        moveToNextCell();
	      }

	      return { x: x, y: y };

	    };

	    nodes.layoutPositions( this, options, getPos );
	  }

	  return this; // chaining

	};

	module.exports = GridLayout;


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );

	// default layout options
	var defaults = {
	  ready: function(){}, // on layoutready
	  stop: function(){} // on layoutstop
	};

	// constructor
	// options : object containing layout options
	function NullLayout( options ){
	  this.options = util.extend( {}, defaults, options );
	}

	// runs the layout
	NullLayout.prototype.run = function(){
	  var options = this.options;
	  var eles = options.eles; // elements to consider in the layout
	  var layout = this;

	  // cy is automatically populated for us in the constructor
	  var cy = options.cy; // jshint ignore:line

	  layout.trigger( 'layoutstart' );

	  // puts all nodes at (0, 0)
	  eles.nodes().positions( function(){
	    return {
	      x: 0,
	      y: 0
	    };
	  } );

	  // trigger layoutready when each node has had its position set at least once
	  layout.one( 'layoutready', options.ready );
	  layout.trigger( 'layoutready' );

	  // trigger layoutstop when the layout stops (e.g. finishes)
	  layout.one( 'layoutstop', options.stop );
	  layout.trigger( 'layoutstop' );

	  return this; // chaining
	};

	// called on continuous layouts to stop them before they finish
	NullLayout.prototype.stop = function(){
	  return this; // chaining
	};

	module.exports = NullLayout;


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var is = __webpack_require__( 73 );

	var defaults = {
	  positions: undefined, // map of (node id) => (position obj); or function(node){ return somPos; }
	  zoom: undefined, // the zoom level to set (prob want fit = false if set)
	  pan: undefined, // the pan level to set (prob want fit = false if set)
	  fit: true, // whether to fit to viewport
	  padding: 30, // padding on fit
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function PresetLayout( options ){
	  this.options = util.extend( {}, defaults, options );
	}

	PresetLayout.prototype.run = function(){
	  var options = this.options;
	  var eles = options.eles;

	  var nodes = eles.nodes();
	  var posIsFn = is.fn( options.positions );

	  function getPosition( node ){
	    if( options.positions == null ){
	      return null;
	    }

	    if( posIsFn ){
	      return options.positions.apply( node, [ node ] );
	    }

	    var pos = options.positions[ node._private.data.id ];

	    if( pos == null ){
	      return null;
	    }

	    return pos;
	  }

	  nodes.layoutPositions( this, options, function( i, node ){
	    var position = getPosition( node );

	    if( node.locked() || position == null ){
	      return false;
	    }

	    return position;
	  } );

	  return this; // chaining
	};

	module.exports = PresetLayout;


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var math = __webpack_require__( 76 );

	var defaults = {
	  fit: true, // whether to fit to viewport
	  padding: 30, // fit padding
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function RandomLayout( options ){
	  this.options = util.extend( {}, defaults, options );
	}

	RandomLayout.prototype.run = function(){
	  var options = this.options;
	  var cy = options.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().not( ':parent' );

	  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  } );

	  var getPos = function( i, node ){
	    return {
	      x: bb.x1 + Math.round( Math.random() * bb.w ),
	      y: bb.y1 + Math.round( Math.random() * bb.h )
	    };
	  };

	  nodes.layoutPositions( this, options, getPos );

	  return this; // chaining
	};

	module.exports = RandomLayout;


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = [
	  { name: 'null', impl: __webpack_require__( 153 ) },
	  { name: 'base', impl: __webpack_require__( 154 ) },
	  { name: 'canvas', impl: __webpack_require__( 161 ) }
	];


/***/ },
/* 153 */
/***/ function(module, exports) {

	'use strict';

	function NullRenderer( options ){
	  this.options = options;
	  this.notifications = 0; // for testing
	}

	var noop = function(){};

	NullRenderer.prototype = {
	  recalculateRenderedStyle: noop,
	  notify: function(){ this.notifications++; },
	  init: noop
	};

	module.exports = NullRenderer;


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );
	var util = __webpack_require__( 75 );

	var BaseRenderer = function( options ){ this.init( options ); };
	var BR = BaseRenderer;
	var BRp = BR.prototype;

	BRp.clientFunctions = [ 'redrawHint', 'render', 'renderTo', 'matchCanvasSize', 'nodeShapeImpl', 'arrowShapeImpl' ];

	BRp.init = function( options ){
	  var r = this;

	  r.options = options;

	  r.cy = options.cy;

	  r.container = options.cy.container();

	  r.selection = [ undefined, undefined, undefined, undefined, 0]; // Coordinates for selection box, plus enabled flag

	  r.bezierProjPcts = [ 0.05, 0.225, 0.4, 0.5, 0.6, 0.775, 0.95 ];

	  //--Pointer-related data
	  r.hoverData = {down: null, last: null,
	      downTime: null, triggerMode: null,
	      dragging: false,
	      initialPan: [ null, null ], capture: false};

	  r.dragData = {possibleDragElements: []};

	  r.touchData = {
	    start: null, capture: false,

	    // These 3 fields related to tap, taphold events
	    startPosition: [ null, null, null, null, null, null ],
	    singleTouchStartTime: null,
	    singleTouchMoved: true,

	    now: [ null, null, null, null, null, null ],
	    earlier: [ null, null, null, null, null, null ]
	  };

	  r.redraws = 0;
	  r.showFps = options.showFps;

	  r.hideEdgesOnViewport = options.hideEdgesOnViewport;
	  r.hideLabelsOnViewport = options.hideLabelsOnViewport;
	  r.textureOnViewport = options.textureOnViewport;
	  r.wheelSensitivity = options.wheelSensitivity;
	  r.motionBlurEnabled = options.motionBlur; // on by default
	  r.forcedPixelRatio = options.pixelRatio;
	  r.motionBlur = options.motionBlur; // for initial kick off
	  r.motionBlurOpacity = options.motionBlurOpacity;
	  r.motionBlurTransparency = 1 - r.motionBlurOpacity;
	  r.motionBlurPxRatio = 1;
	  r.mbPxRBlurry = 1; //0.8;
	  r.minMbLowQualFrames = 4;
	  r.fullQualityMb = false;
	  r.clearedForMotionBlur = [];
	  r.desktopTapThreshold = options.desktopTapThreshold;
	  r.desktopTapThreshold2 = options.desktopTapThreshold * options.desktopTapThreshold;
	  r.touchTapThreshold = options.touchTapThreshold;
	  r.touchTapThreshold2 = options.touchTapThreshold * options.touchTapThreshold;
	  r.tapholdDuration = 500;

	  r.bindings = [];
	  r.beforeRenderCallbacks = [];
	  r.beforeRenderPriorities = { // higher priority execs before lower one
	    animations:   400,
	    eleCalcs:     300,
	    eleTxrDeq:    200,
	    lyrTxrDeq:    100
	  };

	  r.registerNodeShapes();
	  r.registerArrowShapes();
	  r.registerCalculationListeners();
	  r.load();
	};

	BRp.notify = function( params ){
	  var types;
	  var r = this;

	  if( is.array( params.type ) ){
	    types = params.type;

	  } else {
	    types = [ params.type ];
	  }

	  var has = {};
	  for( var i = 0; i < types.length; i++ ){
	    var type = types[ i ];

	    has[ type ] = true;
	  } // for

	  if( has['destroy'] ){
	    r.destroy();
	    return;
	  }

	  if( has['add'] || has['remove'] || has['load'] || has['style'] ){
	    r.updateCachedZSortedEles();
	  }

	  if( has['viewport'] ){
	    r.redrawHint( 'select', true );
	  }

	  if( has['load'] || has['resize'] ){
	    r.invalidateContainerClientCoordsCache();
	    r.matchCanvasSize( r.container );
	  }

	  r.redrawHint( 'eles', true );
	  r.redrawHint( 'drag', true );

	  this.startRenderLoop();

	  this.redraw();
	};

	BRp.destroy = function(){
	  var r = this;

	  r.destroyed = true;

	  r.cy.stopAnimationLoop();

	  for( var i = 0; i < r.bindings.length; i++ ){
	    var binding = r.bindings[ i ];
	    var b = binding;
	    var tgt = b.target;

	    ( tgt.off || tgt.removeEventListener ).apply( tgt, b.args );
	  }

	  if( r.removeObserver ){
	    r.removeObserver.disconnect();
	  }

	  if( r.styleObserver ){
	    r.styleObserver.disconnect();
	  }

	  if( r.labelCalcDiv ){
	    try {
	      document.body.removeChild( r.labelCalcDiv );
	    } catch( e ){
	      // ie10 issue #1014
	    }
	  }
	};

	[
	  __webpack_require__( 155 ),
	  __webpack_require__( 156 ),
	  __webpack_require__( 157 ),
	  __webpack_require__( 158 ),
	  __webpack_require__( 159 ),
	  __webpack_require__( 160 )
	].forEach( function( props ){
	  util.extend( BRp, props );
	} );

	module.exports = BR;


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var math = __webpack_require__( 76 );
	var is = __webpack_require__( 73 );
	var util = __webpack_require__( 75 );

	var BRp = {};

	BRp.arrowShapeWidth = 0.3;

	BRp.registerArrowShapes = function(){
	  var arrowShapes = this.arrowShapes = {};
	  var renderer = this;

	  // Contract for arrow shapes:
	  // 0, 0 is arrow tip
	  // (0, 1) is direction towards node
	  // (1, 0) is right
	  //
	  // functional api:
	  // collide: check x, y in shape
	  // roughCollide: called before collide, no false negatives
	  // draw: draw
	  // spacing: dist(arrowTip, nodeBoundary)
	  // gap: dist(edgeTip, nodeBoundary), edgeTip may != arrowTip

	  var bbCollide = function( x, y, size, angle, translation, padding ){
	    var x1 = translation.x - size / 2 - padding;
	    var x2 = translation.x + size / 2 + padding;
	    var y1 = translation.y - size / 2 - padding;
	    var y2 = translation.y + size / 2 + padding;

	    var inside = (x1 <= x && x <= x2) && (y1 <= y && y <= y2);

	    return inside;
	  };

	  var transform = function( x, y, size, angle, translation ){
	    var xRotated = x * Math.cos( angle ) - y * Math.sin( angle );
	    var yRotated = x * Math.sin( angle ) + y * Math.cos( angle );

	    var xScaled = xRotated * size;
	    var yScaled = yRotated * size;

	    var xTranslated = xScaled + translation.x;
	    var yTranslated = yScaled + translation.y;

	    return {
	      x: xTranslated,
	      y: yTranslated
	    };
	  };

	  var transformPoints = function( pts, size, angle, translation ){
	    var retPts = [];

	    for( var i = 0; i < pts.length; i += 2 ){
	      var x = pts[ i ];
	      var y = pts[ i + 1];

	      retPts.push( transform( x, y, size, angle, translation ) );
	    }

	    return retPts;
	  };

	  var pointsToArr = function( pts ){
	    var ret = [];

	    for( var i = 0; i < pts.length; i++ ){
	      var p = pts[ i ];

	      ret.push( p.x, p.y );
	    }

	    return ret;
	  };

	  var defineArrowShape = function( name, defn ){
	    if( is.string( defn ) ){
	      defn = arrowShapes[ defn ];
	    }

	    arrowShapes[ name ] = util.extend( {
	      name: name,

	      points: [
	        -0.15, -0.3,
	        0.15, -0.3,
	        0.15, 0.3,
	        -0.15, 0.3
	      ],

	      collide: function( x, y, size, angle, translation, padding ){
	        var points = pointsToArr( transformPoints( this.points, size + 2 * padding, angle, translation ) );
	        var inside = math.pointInsidePolygonPoints( x, y, points );

	        return inside;
	      },

	      roughCollide: bbCollide,

	      draw: function( context, size, angle, translation ){
	        var points = transformPoints( this.points, size, angle, translation );

	        renderer.arrowShapeImpl( 'polygon' )( context, points );
	      },

	      spacing: function( edge ){
	        return 0;
	      },

	      gap: function( edge ){
	        return edge.pstyle( 'width' ).pfValue * 2;
	      }
	    }, defn );
	  };

	  defineArrowShape( 'none', {
	    collide: util.falsify,

	    roughCollide: util.falsify,

	    draw: util.noop,

	    spacing: util.zeroify,

	    gap: util.zeroify
	  } );

	  defineArrowShape( 'triangle', {
	    points: [
	      -0.15, -0.3,
	      0, 0,
	      0.15, -0.3
	    ]
	  } );

	  defineArrowShape( 'arrow', 'triangle' );

	  defineArrowShape( 'triangle-backcurve', {
	    points: arrowShapes[ 'triangle' ].points,

	    controlPoint: [ 0, -0.15 ],

	    roughCollide: bbCollide,

	    draw: function( context, size, angle, translation ){
	      var ptsTrans = transformPoints( this.points, size, angle, translation );
	      var ctrlPt = this.controlPoint;
	      var ctrlPtTrans = transform( ctrlPt[0], ctrlPt[1], size, angle, translation );

	      renderer.arrowShapeImpl( this.name )( context, ptsTrans, ctrlPtTrans );
	    },

	    gap: function( edge ){
	      return edge.pstyle( 'width' ).pfValue;
	    }
	  } );


	  defineArrowShape( 'triangle-tee', {
	    points: [
	      -0.15, -0.3,
	      0, 0,
	      0.15, -0.3,
	      -0.15, -0.3
	    ],

	    pointsTee: [
	      -0.15, -0.4,
	      -0.15, -0.5,
	      0.15, -0.5,
	      0.15, -0.4
	    ],

	    collide: function( x, y, size, angle, translation, padding ){
	      var triPts = pointsToArr( transformPoints( this.points, size + 2 * padding, angle, translation ) );
	      var teePts = pointsToArr( transformPoints( this.pointsTee, size + 2 * padding, angle, translation ) );

	      var inside = math.pointInsidePolygonPoints( x, y, triPts ) || math.pointInsidePolygonPoints( x, y, teePts );

	      return inside;
	    },

	    draw: function( context, size, angle, translation ){
	      var triPts = transformPoints( this.points, size, angle, translation );
	      var teePts = transformPoints( this.pointsTee, size, angle, translation );

	      renderer.arrowShapeImpl( this.name )( context, triPts, teePts );
	    }
	  } );

	  defineArrowShape( 'vee', {
	    points: [
	      -0.15, -0.3,
	      0, 0,
	      0.15, -0.3,
	      0, -0.15
	    ],

	    gap: function( edge ){
	      return edge.pstyle( 'width' ).pfValue;
	    }
	  } );

	  defineArrowShape( 'circle', {
	    radius: 0.15,

	    collide: function( x, y, size, angle, translation, padding ){
	      var t = translation;
	      var inside = ( Math.pow( t.x - x, 2 ) + Math.pow( t.y - y, 2 ) <= Math.pow( (size + 2 * padding) * this.radius, 2 ) );

	      return inside;
	    },

	    draw: function( context, size, angle, translation ){
	      renderer.arrowShapeImpl( this.name )( context, translation.x, translation.y, this.radius * size );
	    },

	    spacing: function( edge ){
	      return renderer.getArrowWidth( edge.pstyle( 'width' ).pfValue )
	        * this.radius;
	    }
	  } );

	  defineArrowShape( 'inhibitor', {
	    points: [
	      -0.15, 0,
	      -0.15, -0.1,
	      0.15, -0.1,
	      0.15, 0
	    ],

	    spacing: function( edge ){
	      return 1;
	    },

	    gap: function( edge ){
	      return 1;
	    }
	  } );

	  defineArrowShape( 'tee', 'inhibitor' );

	  defineArrowShape( 'square', {
	    points: [
	      -0.15, 0.00,
	      0.15, 0.00,
	      0.15, -0.3,
	      -0.15, -0.3
	    ]
	  } );

	  defineArrowShape( 'diamond', {
	    points: [
	      -0.15, -0.15,
	      0, -0.3,
	      0.15, -0.15,
	      0, 0
	    ],

	    gap: function( edge ){
	      return edge.pstyle( 'width' ).pfValue;
	    }
	  } );

	};

	module.exports = BRp;


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var math = __webpack_require__( 76 );
	var is = __webpack_require__( 73 );
	var util = __webpack_require__( 75 );
	var zIndexSort = __webpack_require__( 114 );

	var BRp = {};

	BRp.registerCalculationListeners = function(){
	  var cy = this.cy;
	  var elesToUpdate = cy.collection();
	  var r = this;

	  var enqueue = function( eles, e ){
	    elesToUpdate.merge( eles );

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      var _p = ele._private;
	      var rstyle = _p.rstyle;

	      rstyle.clean = false;
	      _p.bbCache = null;

	      var evts = rstyle.dirtyEvents = rstyle.dirtyEvents || { length: 0 };

	      if( !evts[ e.type ] ){
	        evts[ e.type ] = true;
	        evts.length++;
	//
	        // elesToUpdate.merge( ele );
	      }
	    }
	  };

	  r.binder( cy )
	    // nodes

	    .on('position.* style.* free.*', 'node', function onDirtyModNode( e ){
	      var node = e.cyTarget;

	      enqueue( node, e );
	      enqueue( node.connectedEdges(), e );

	      if( cy.hasCompoundNodes() ){
	        var parents = node.parents();

	        enqueue( parents, e );
	        enqueue( parents.connectedEdges(), e );
	      }
	    })

	    .on('add.* background.*', 'node', function onDirtyAddNode( e ){
	      var ele = e.cyTarget;

	      enqueue( ele, e );
	    })

	    // edges

	    .on('add.* style.*', 'edge', function onDirtyEdge( e ){
	      var edge = e.cyTarget;

	      enqueue( edge, e );
	      enqueue( edge.parallelEdges(), e );
	    })

	    .on('remove.*', 'edge', function onDirtyRemoveEdge( e ){
	      var edge = e.cyTarget;
	      var pEdges = edge.parallelEdges();

	      for( var i = 0; i < pEdges.length; i++ ){
	        var pEdge = pEdges[i];

	        if( !pEdge.removed() ){
	          enqueue( pEdge, e );
	        }
	      }
	    })
	  ;

	  var updateEleCalcs = function( willDraw ){
	    if( willDraw ){
	      var fns = r.onUpdateEleCalcsFns;

	      if( fns ){ for( var i = 0; i < fns.length; i++ ){
	        var fn = fns[i];

	        fn( willDraw, elesToUpdate );
	      } }

	      r.recalculateRenderedStyle( elesToUpdate, false );

	      for( var i = 0; i < elesToUpdate.length; i++ ){
	        elesToUpdate[i]._private.rstyle.dirtyEvents = null;
	      }

	      elesToUpdate = cy.collection();
	    }
	  };

	  r.beforeRender( updateEleCalcs, r.beforeRenderPriorities.eleCalcs );
	};

	BRp.onUpdateEleCalcs = function( fn ){
	  var fns = this.onUpdateEleCalcsFns = this.onUpdateEleCalcsFns || [];

	  fns.push( fn );
	};

	BRp.recalculateRenderedStyle = function( eles, useCache ){
	  var edges = [];
	  var nodes = [];

	  // use cache by default for perf
	  if( useCache === undefined ){ useCache = true; }

	  for( var i = 0; i < eles.length; i++ ){
	    var ele = eles[ i ];
	    var _p = ele._private;
	    var rstyle = _p.rstyle;

	    // only update if dirty and in graph
	    if( (useCache && rstyle.clean) || ele.removed() ){ continue; }

	    if( _p.group === 'nodes' ){
	      var pos = _p.position;

	      nodes.push( ele );

	      rstyle.nodeX = pos.x;
	      rstyle.nodeY = pos.y;
	      rstyle.nodeW = ele.pstyle( 'width' ).pfValue;
	      rstyle.nodeH = ele.pstyle( 'height' ).pfValue;
	    } else { // edges

	      edges.push( ele );

	    } // if edges

	    rstyle.clean = true;
	    // rstyle.dirtyEvents = null;
	  }

	  this.recalculateEdgeProjections( edges );
	  this.recalculateLabelProjections( nodes, edges );

	  // update edge data from projections
	  for( var i = 0; i < edges.length; i++ ){
	    var ele = edges[ i ];
	    var _p = ele._private;
	    var rstyle = _p.rstyle;
	    var rs = _p.rscratch;

	    // update rstyle positions
	    rstyle.srcX = rs.arrowStartX;
	    rstyle.srcY = rs.arrowStartY;
	    rstyle.tgtX = rs.arrowEndX;
	    rstyle.tgtY = rs.arrowEndY;
	    rstyle.midX = rs.midX;
	    rstyle.midY = rs.midY;
	  }
	};

	// Project mouse
	BRp.projectIntoViewport = function( clientX, clientY ){
	  var offsets = this.findContainerClientCoords();
	  var offsetLeft = offsets[0];
	  var offsetTop = offsets[1];

	  var x = clientX - offsetLeft;
	  var y = clientY - offsetTop;

	  x -= this.cy.pan().x; y -= this.cy.pan().y; x /= this.cy.zoom(); y /= this.cy.zoom();
	  return [ x, y ];
	};

	BRp.findContainerClientCoords = function(){
	  var container = this.container;

	  var bb = this.containerBB = this.containerBB || container.getBoundingClientRect();

	  return [ bb.left, bb.top, bb.right - bb.left, bb.bottom - bb.top ];
	};

	BRp.invalidateContainerClientCoordsCache = function(){
	  this.containerBB = null;
	};

	BRp.findNearestElement = function( x, y, visibleElementsOnly, isTouch ){
	  return this.findNearestElements( x, y, visibleElementsOnly, isTouch )[0];
	};

	BRp.findNearestElements = function( x, y, visibleElementsOnly, isTouch ){
	  var self = this;
	  var r = this;
	  var eles = r.getCachedZSortedEles();
	  var near = []; // 1 node max, 1 edge max
	  var zoom = r.cy.zoom();
	  var hasCompounds = r.cy.hasCompoundNodes();
	  var edgeThreshold = (isTouch ? 24 : 8) / zoom;
	  var nodeThreshold = (isTouch ? 8 : 2) / zoom;
	  var labelThreshold = (isTouch ? 8 : 2) / zoom;
	  var minSqDist = Infinity;
	  var nearEdge;
	  var nearNode;

	  function addEle( ele, sqDist ){
	    if( ele.isNode() ){
	      if( nearNode ){
	        return; // can't replace node
	      } else {
	        nearNode = ele;
	        near.push( ele );
	      }
	    }

	    if( ele.isEdge() && ( sqDist == null || sqDist < minSqDist ) ){
	      if( nearEdge ){ // then replace existing edge
	        // can replace only if same z-index
	        if( nearEdge.pstyle( 'z-index' ).value === ele.pstyle('z-index').value ){
	          for( var i = 0; i < near.length; i++ ){
	            if( near[i].isEdge() ){
	              near[i] = ele;
	              nearEdge = ele;
	              minSqDist = sqDist != null ? sqDist : minSqDist;
	              break;
	            }
	          }
	        }
	      } else {
	        near.push( ele );
	        nearEdge = ele;
	        minSqDist = sqDist != null ? sqDist : minSqDist;
	      }
	    }
	  }

	  function checkNode( node ){
	    var _p = node._private;

	    if( node.pstyle( 'events' ).strValue === 'no' ){ return; }

	    var width = node.outerWidth() + 2 * nodeThreshold;
	    var height = node.outerHeight() + 2 * nodeThreshold;
	    var hw = width / 2;
	    var hh = height / 2;
	    var pos = _p.position;

	    if(
	      pos.x - hw <= x && x <= pos.x + hw // bb check x
	        &&
	      pos.y - hh <= y && y <= pos.y + hh // bb check y
	    ){
	      var visible = !visibleElementsOnly || ( node.visible() && !node.transparent() );

	      // exit early if invisible edge and must be visible
	      if( visibleElementsOnly && !visible ){
	        return;
	      }

	      var shape = r.nodeShapes[ self.getNodeShape( node ) ];

	      if(
	        shape.checkPoint( x, y, 0, width, height, pos.x, pos.y )
	      ){
	        addEle( node, 0 );
	      }

	    }
	  }

	  function checkEdge( edge ){
	    var _p = edge._private;

	    if( edge.pstyle('events').strValue === 'no' ){ return; }

	    var rs = _p.rscratch;
	    var width = edge.pstyle( 'width' ).pfValue / 2 + edgeThreshold; // more like a distance radius from centre
	    var widthSq = width * width;
	    var width2 = width * 2;
	    var src = _p.source;
	    var tgt = _p.target;
	    var inEdgeBB = false;
	    var sqDist;

	    // exit early if invisible edge and must be visible
	    var passedVisibilityCheck;
	    var passesVisibilityCheck = function(){
	      if( passedVisibilityCheck !== undefined ){
	        return passedVisibilityCheck;
	      }

	      if( !visibleElementsOnly ){
	        passedVisibilityCheck = true;
	        return true;
	      }

	      var visible = edge.visible() && !edge.transparent();
	      if( visible ){
	        passedVisibilityCheck = true;
	        return true;
	      }

	      passedVisibilityCheck = false;
	      return false;
	    };

	    if( rs.edgeType === 'segments' || rs.edgeType === 'straight' || rs.edgeType === 'haystack' ){
	      var pts = rs.allpts;

	      for( var i = 0; i + 3 < pts.length; i += 2 ){
	        if(
	          (inEdgeBB = math.inLineVicinity( x, y, pts[ i ], pts[ i + 1], pts[ i + 2], pts[ i + 3], width2 ))
	            && passesVisibilityCheck() &&
	          widthSq > ( sqDist = math.sqdistToFiniteLine( x, y, pts[ i ], pts[ i + 1], pts[ i + 2], pts[ i + 3] ) )
	        ){
	          addEle( edge, sqDist );
	        }
	      }

	    } else if( rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' ){
	      var pts = rs.allpts;
	      for( var i = 0; i + 5 < rs.allpts.length; i += 4 ){
	        if(
	          (inEdgeBB = math.inBezierVicinity( x, y, pts[ i ], pts[ i + 1], pts[ i + 2], pts[ i + 3], pts[ i + 4], pts[ i + 5], width2 ))
	            && passesVisibilityCheck() &&
	          (widthSq > (sqDist = math.sqdistToQuadraticBezier( x, y, pts[ i ], pts[ i + 1], pts[ i + 2], pts[ i + 3], pts[ i + 4], pts[ i + 5] )) )
	        ){
	          addEle( edge, sqDist );
	        }
	      }
	    }

	    // if we're close to the edge but didn't hit it, maybe we hit its arrows
	    if( inEdgeBB && passesVisibilityCheck() ){
	      var src = src || _p.source;
	      var tgt = tgt || _p.target;

	      var eWidth = edge.pstyle( 'width' ).pfValue;
	      var arSize = self.getArrowWidth( eWidth );

	      var arrows = [
	        { name: 'source', x: rs.arrowStartX, y: rs.arrowStartY, angle: rs.srcArrowAngle },
	        { name: 'target', x: rs.arrowEndX, y: rs.arrowEndY, angle: rs.tgtArrowAngle },
	        { name: 'mid-source', x: rs.midX, y: rs.midY, angle: rs.midsrcArrowAngle },
	        { name: 'mid-target', x: rs.midX, y: rs.midY, angle: rs.midtgtArrowAngle }
	      ];

	      for( var i = 0; i < arrows.length; i++ ){
	        var ar = arrows[ i ];
	        var shape = r.arrowShapes[ edge.pstyle( ar.name + '-arrow-shape' ).value ];

	        if(
	          shape.roughCollide( x, y, arSize, ar.angle, { x: ar.x, y: ar.y }, edgeThreshold )
	           &&
	          shape.collide( x, y, arSize, ar.angle, { x: ar.x, y: ar.y }, edgeThreshold )
	        ){
	          addEle( edge );
	          break;
	        }
	      }
	    }

	    // for compound graphs, hitting edge may actually want a connected node instead (b/c edge may have greater z-index precedence)
	    if( hasCompounds && near.length > 0 ){
	      checkNode( src );
	      checkNode( tgt );
	    }
	  }

	  function preprop( obj, name, pre ){
	    return util.getPrefixedProperty( obj, name, pre );
	  }

	  function checkLabel( ele, prefix ){
	    var _p = ele._private;
	    var th = labelThreshold;

	    var prefixDash;
	    if( prefix ){
	      prefixDash = prefix + '-';
	    } else {
	      prefixDash = '';
	    }

	    if( ele.pstyle( 'text-events' ).strValue === 'no' ){ return; }

	    var rotation = ele.pstyle( prefixDash + 'text-rotation' );

	    // adjust bb w/ angle
	    if( rotation.strValue === 'autorotate' || !!rotation.pfValue ){

	      var rstyle = _p.rstyle;
	      var bw = ele.pstyle('text-border-width').pfValue;
	      var lw = preprop( rstyle, 'labelWidth', prefix ) + bw/2 + 2*th;
	      var lh = preprop( rstyle, 'labelHeight', prefix ) + bw/2 + 2*th;
	      var lx = preprop( rstyle, 'labelX', prefix );
	      var ly = preprop( rstyle, 'labelY', prefix );

	      var theta = preprop( _p.rscratch, 'labelAngle', prefix );
	      var cos = Math.cos( theta );
	      var sin = Math.sin( theta );

	      var rotate = function( x, y ){
	        x = x - lx;
	        y = y - ly;

	        return {
	          x: x * cos - y * sin + lx,
	          y: x * sin + y * cos + ly
	        };
	      };

	      var lx1 = lx - lw / 2;
	      var lx2 = lx + lw / 2;
	      var ly1 = ly - lh / 2;
	      var ly2 = ly + lh / 2;

	      var px1y1 = rotate( lx1, ly1 );
	      var px1y2 = rotate( lx1, ly2 );
	      var px2y1 = rotate( lx2, ly1 );
	      var px2y2 = rotate( lx2, ly2 );

	      var points = [
	        px1y1.x, px1y1.y,
	        px2y1.x, px2y1.y,
	        px2y2.x, px2y2.y,
	        px1y2.x, px1y2.y
	      ];

	      if( math.pointInsidePolygonPoints( x, y, points ) ){
	        addEle( ele );
	      }

	    } else {
	      var bb = ele.boundingBox( {
	        includeLabels: true,
	        includeNodes: false,
	        includeEdges: false
	      } );

	      // adjust bb w/ threshold
	      bb.x1 -= th;
	      bb.y1 -= th;
	      bb.x2 += th;
	      bb.y2 += th;
	      bb.w = bb.x2 - bb.x1;
	      bb.h = bb.y2 - bb.y1;

	      if( math.inBoundingBox( bb, x, y ) ){
	        addEle( ele );
	      }
	    }

	  }

	  for( var i = eles.length - 1; i >= 0; i-- ){ // reverse order for precedence
	    var ele = eles[ i ];

	    if( ele.isNode() ){
	      checkNode( ele );

	      checkLabel( ele );

	    } else { // then edge
	      checkEdge( ele );

	      checkLabel( ele );
	      checkLabel( ele, 'source' );
	      checkLabel( ele, 'target' );
	    }
	  }

	  return near;
	};

	// 'Give me everything from this box'
	BRp.getAllInBox = function( x1, y1, x2, y2 ){
	  var eles = this.getCachedZSortedEles();
	  var nodes = eles.nodes;
	  var edges = eles.edges;
	  var box = [];

	  var x1c = Math.min( x1, x2 );
	  var x2c = Math.max( x1, x2 );
	  var y1c = Math.min( y1, y2 );
	  var y2c = Math.max( y1, y2 );

	  x1 = x1c;
	  x2 = x2c;
	  y1 = y1c;
	  y2 = y2c;

	  var boxBb = math.makeBoundingBox( {
	    x1: x1, y1: y1,
	    x2: x2, y2: y2
	  } );

	  for( var i = 0; i < nodes.length; i++ ){
	    var node = nodes[ i ];
	    var nodeBb = node.boundingBox( {
	      includeNodes: true,
	      includeEdges: false,
	      includeLabels: false,
	      includeShadows: false
	    } );

	    if( math.boundingBoxesIntersect( boxBb, nodeBb ) ){
	      box.push( nodes[ i ] );
	    }
	  }

	  for( var e = 0; e < edges.length; e++ ){
	    var edge = edges[ e ];
	    var _p = edge._private;
	    var rs = _p.rscratch;

	    if( rs.startX != null && rs.startY != null && !math.inBoundingBox( boxBb, rs.startX, rs.startY ) ){ continue; }
	    if( rs.endX != null && rs.endY != null && !math.inBoundingBox( boxBb, rs.endX, rs.endY ) ){ continue; }

	    if( rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' || rs.edgeType === 'segments' || rs.edgeType === 'haystack' ){

	      var pts = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;
	      var allInside = true;

	      for( var i = 0; i < pts.length; i++ ){
	        if( !math.pointInBoundingBox( boxBb, pts[ i ] ) ){
	          allInside = false;
	          break;
	        }
	      }

	      if( allInside ){
	        box.push( edge );
	      }

	    } else if( rs.edgeType === 'haystack' || rs.edgeType === 'straight' ){
	      box.push( edge );
	    }

	  }

	  return box;
	};


	/**
	 * Returns the shape of the given node. If the height or width of the given node
	 * is set to auto, the node is considered to be a compound.
	 *
	 * @param node          a node
	 * @return {String}     shape of the node
	 */
	BRp.getNodeShape = function( node ){
	  var r = this;
	  var shape = node.pstyle( 'shape' ).value;

	  if( node.isParent() ){
	    if( shape === 'rectangle' || shape === 'roundrectangle' ){
	      return shape;
	    } else {
	      return 'rectangle';
	    }
	  }

	  if( shape === 'polygon' ){
	    var points = node.pstyle( 'shape-polygon-points' ).value;

	    return r.nodeShapes.makePolygon( points ).name;
	  }

	  return shape;
	};

	BRp.updateCachedZSortedEles = function(){
	  this.getCachedZSortedEles( true );
	};

	BRp.updateCachedGrabbedEles = function(){
	  var eles = this.cachedZSortedEles;

	  eles.drag = [];
	  eles.nondrag = [];

	  var grabTarget;

	  for( var i = 0; i < eles.length; i++ ){
	    var ele = eles[i];
	    var rs = ele._private.rscratch;

	    if( rs.isGrabTarget && !ele.isParent() ){
	      grabTarget = ele;
	    } else if( rs.inDragLayer ){
	      eles.drag.push( ele );
	    } else {
	      eles.nondrag.push( ele );
	    }
	  }

	  // put the grab target node last so it's on top of its neighbourhood
	  if( grabTarget ){
	    eles.drag.push( grabTarget );
	  }
	};

	BRp.getCachedZSortedEles = function( forceRecalc ){
	  if( forceRecalc || !this.cachedZSortedEles ){
	    //console.time('cachezorder')

	    var cyEles = this.cy.mutableElements();
	    var eles = [];

	    eles.nodes = [];
	    eles.edges = [];

	    for( var i = 0; i < cyEles.length; i++ ){
	      var ele = cyEles[i];

	      if( ele.animated() || (ele.visible() && !ele.transparent()) ){
	        eles.push( ele );

	        if( ele.isNode() ){
	          eles.nodes.push( ele );
	        } else {
	          eles.edges.push( ele );
	        }
	      }
	    }

	    eles.sort( zIndexSort );

	    this.cachedZSortedEles = eles;

	    this.updateCachedGrabbedEles();

	    //console.log('make cache')

	    //console.timeEnd('cachezorder')
	  } else {
	    eles = this.cachedZSortedEles;
	    //console.log('read cache')
	  }

	  return eles;
	};

	function pushBezierPts( r, edge, pts ){
	  var qbezierAt = function( p1, p2, p3, t ){ return math.qbezierAt( p1, p2, p3, t ); };
	  var _p = edge._private;
	  var bpts = _p.rstyle.bezierPts;

	  for( var i = 0; i < r.bezierProjPcts.length; i++ ){
	    var p = r.bezierProjPcts[i];

	    bpts.push( {
	      x: qbezierAt( pts[0], pts[2], pts[4], p ),
	      y: qbezierAt( pts[1], pts[3], pts[5], p )
	    } );
	  }
	}

	BRp.projectLines = function( edge ){
	  var _p = edge._private;
	  var rs = _p.rscratch;
	  var et = rs.edgeType;

	  if( et === 'multibezier' ||  et === 'bezier' ||  et === 'self' ||  et === 'compound' ){
	    var bpts = _p.rstyle.bezierPts = []; // jshint ignore:line

	    for( var i = 0; i + 5 < rs.allpts.length; i += 4 ){
	      pushBezierPts( this, edge, rs.allpts.slice( i, i + 6 ) );
	    }
	  } else if(  et === 'segments' ){
	    var lpts = _p.rstyle.linePts = [];

	    for( var i = 0; i + 1 < rs.allpts.length; i += 2 ){
	      lpts.push( {
	        x: rs.allpts[ i ],
	        y: rs.allpts[ i + 1]
	      } );
	    }
	  } else if( et === 'haystack' ){
	    var hpts = rs.haystackPts;

	    _p.rstyle.haystackPts = [
	      { x: hpts[0], y: hpts[1] },
	      { x: hpts[2], y: hpts[3] }
	    ];
	  }

	  _p.rstyle.arrowWidth = this.getArrowWidth( edge.pstyle('width').pfValue ) * this.arrowShapeWidth;
	};

	BRp.projectBezier = BRp.projectLines;

	BRp.recalculateNodeLabelProjection = function( node ){
	  var content = node.pstyle( 'label' ).strValue;

	  if( is.emptyString(content) ){ return; }

	  var textX, textY;
	  var _p = node._private;
	  var nodeWidth = node.width();
	  var nodeHeight = node.height();
	  var paddingLeft = node.pstyle('padding-left').pfValue;
	  var paddingRight = node.pstyle('padding-right').pfValue;
	  var paddingTop = node.pstyle('padding-top').pfValue;
	  var paddingBottom = node.pstyle('padding-bottom').pfValue;
	  var nodePos = _p.position;
	  var textHalign = node.pstyle( 'text-halign' ).strValue;
	  var textValign = node.pstyle( 'text-valign' ).strValue;
	  var rs = _p.rscratch;
	  var rstyle = _p.rstyle;

	  switch( textHalign ){
	    case 'left':
	      textX = nodePos.x - nodeWidth / 2 - paddingLeft;
	      break;

	    case 'right':
	      textX = nodePos.x + nodeWidth / 2 + paddingRight;
	      break;

	    default: // e.g. center
	      textX = nodePos.x;
	  }

	  switch( textValign ){
	    case 'top':
	      textY = nodePos.y - nodeHeight / 2 - paddingTop;
	      break;

	    case 'bottom':
	      textY = nodePos.y + nodeHeight / 2 + paddingBottom;
	      break;

	    default: // e.g. middle
	      textY = nodePos.y;
	  }

	  rs.labelX = textX;
	  rs.labelY = textY;
	  rstyle.labelX = textX;
	  rstyle.labelY = textY;

	  this.applyLabelDimensions( node );
	};

	BRp.recalculateEdgeLabelProjections = function( edge ){
	  var p;
	  var _p = edge._private;
	  var rs = _p.rscratch;
	  var r = this;
	  var content = {
	    mid: edge.pstyle('label').strValue,
	    source: edge.pstyle('source-label').strValue,
	    target: edge.pstyle('target-label').strValue
	  };

	  if( content.mid || content.source || content.target ){
	    // then we have to calculate...
	  } else {
	    return; // no labels => no calcs
	  }

	  // add center point to style so bounding box calculations can use it
	  //
	  p = {
	    x: rs.midX,
	    y: rs.midY
	  };

	  var setRs = function( propName, prefix, value ){
	    util.setPrefixedProperty( _p.rscratch, propName, prefix, value );
	    util.setPrefixedProperty( _p.rstyle, propName, prefix, value );
	  };

	  setRs( 'labelX', null, p.x );
	  setRs( 'labelY', null, p.y );

	  var createControlPointInfo = function(){
	    if( createControlPointInfo.cache ){ return createControlPointInfo.cache; } // use cache so only 1x per edge

	    var ctrlpts = [];

	    // store each ctrlpt info init
	    for( var i = 0; i + 5 < rs.allpts.length; i += 4 ){
	      var p0 = { x: rs.allpts[i], y: rs.allpts[i+1] };
	      var p1 = { x: rs.allpts[i+2], y: rs.allpts[i+3] }; // ctrlpt
	      var p2 = { x: rs.allpts[i+4], y: rs.allpts[i+5] };

	      ctrlpts.push({
	        p0: p0,
	        p1: p1,
	        p2: p2,
	        startDist: 0,
	        length: 0,
	        segments: []
	      });
	    }

	    var bpts = _p.rstyle.bezierPts;
	    var nProjs = r.bezierProjPcts.length;

	    function addSegment( cp, p0, p1, t0, t1 ){
	      var length = math.dist( p0, p1 );
	      var prevSegment = cp.segments[ cp.segments.length - 1 ];
	      var segment = {
	        p0: p0,
	        p1: p1,
	        t0: t0,
	        t1: t1,
	        startDist: prevSegment ? prevSegment.startDist + prevSegment.length : 0,
	        length: length
	      };

	      cp.segments.push( segment );

	      cp.length += length;
	    }

	    // update each ctrlpt with segment info
	    for( var i = 0; i < ctrlpts.length; i++ ){
	      var cp = ctrlpts[i];
	      var prevCp = ctrlpts[i - 1];

	      if( prevCp ){
	        cp.startDist = prevCp.startDist + prevCp.length;
	      }

	      addSegment(
	        cp,
	        cp.p0,   bpts[ i * nProjs ],
	        0,       r.bezierProjPcts[ 0 ]
	      ); // first

	      for( var j = 0; j < nProjs - 1; j++ ){
	        addSegment(
	          cp,
	          bpts[ i * nProjs + j ],   bpts[ i * nProjs + j + 1 ],
	          r.bezierProjPcts[ j ],    r.bezierProjPcts[ j + 1 ]
	        );
	      }

	      addSegment(
	        cp,
	        bpts[ i * nProjs + nProjs - 1 ],   cp.p2,
	        r.bezierProjPcts[ nProjs - 1 ],    1
	      ); // last
	    }

	    return ( createControlPointInfo.cache = ctrlpts );
	  };

	  var calculateEndProjection = function( prefix ){
	    var angle;
	    var isSrc = prefix === 'source';

	    if( !content[ prefix ] ){ return; }

	    var offset = edge.pstyle(prefix+'-text-offset').pfValue;

	    var lineAngle = function( p0, p1 ){
	      var dx = p1.x - p0.x;
	      var dy = p1.y - p0.y;

	      return Math.atan( dy / dx );
	    };

	    var bezierAngle = function( p0, p1, p2, t ){
	      var t0 = math.bound( 0, t - 0.001, 1 );
	      var t1 = math.bound( 0, t + 0.001, 1 );

	      var lp0 = math.qbezierPtAt( p0, p1, p2, t0 );
	      var lp1 = math.qbezierPtAt( p0, p1, p2, t1 );

	      return lineAngle( lp0, lp1 );
	    };

	    switch( rs.edgeType ){
	      case 'self':
	      case 'compound':
	      case 'bezier':
	      case 'multibezier':
	        var cps = createControlPointInfo();
	        var selected;
	        var startDist = 0;
	        var totalDist = 0;

	        // find the segment we're on
	        for( var i = 0; i < cps.length; i++ ){
	          var cp = cps[ isSrc ? i : cps.length - 1 - i ];

	          for( var j = 0; j < cp.segments.length; j++ ){
	            var seg = cp.segments[ isSrc ? j : cp.segments.length - 1 - j ];
	            var lastSeg = i === cps.length - 1 && j === cp.segments.length - 1;

	            startDist = totalDist;
	            totalDist += seg.length;

	            if( totalDist >= offset || lastSeg ){
	              selected = { cp: cp, segment: seg };
	              break;
	            }
	          }

	          if( selected ){ break; }
	        }

	        var cp = selected.cp;
	        var seg = selected.segment;
	        var tSegment = ( offset - startDist ) / ( seg.length );
	        var segDt = seg.t1 - seg.t0;
	        var t = isSrc ? seg.t0 + segDt * tSegment : seg.t1 - segDt * tSegment;

	        t = math.bound( 0, t, 1 );
	        p = math.qbezierPtAt( cp.p0, cp.p1, cp.p2, t );
	        angle = bezierAngle( cp.p0, cp.p1, cp.p2, t, p );

	        break;

	      case 'straight':
	      case 'segments':
	      case 'haystack':
	        var d = 0, di, d0;
	        var p0, p1;
	        var l = rs.allpts.length;

	        for( var i = 0; i + 3 < l; i += 2 ){
	          if( isSrc ){
	            p0 = { x: rs.allpts[i],     y: rs.allpts[i+1] };
	            p1 = { x: rs.allpts[i+2],   y: rs.allpts[i+3] };
	          } else {
	            p0 = { x: rs.allpts[l-2-i], y: rs.allpts[l-1-i] };
	            p1 = { x: rs.allpts[l-4-i], y: rs.allpts[l-3-i] };
	          }

	          di = math.dist( p0, p1 );
	          d0 = d;
	          d += di;

	          if( d >= offset ){ break; }
	        }

	        var pD = offset - d0;
	        var t = pD / di;

	        t  = math.bound( 0, t, 1 );
	        p = math.lineAt( p0, p1, t );
	        angle = lineAngle( p0, p1 );

	        break;
	    }

	    setRs( 'labelX', prefix, p.x );
	    setRs( 'labelY', prefix, p.y );
	    setRs( 'labelAutoAngle', prefix, angle );
	  };

	  calculateEndProjection( 'source' );
	  calculateEndProjection( 'target' );

	  this.applyLabelDimensions( edge );
	};

	BRp.applyLabelDimensions = function( ele ){
	  this.applyPrefixedLabelDimensions( ele );

	  if( ele.isEdge() ){
	    this.applyPrefixedLabelDimensions( ele, 'source' );
	    this.applyPrefixedLabelDimensions( ele, 'target' );
	  }
	};

	BRp.applyPrefixedLabelDimensions = function( ele, prefix ){
	  var _p = ele._private;

	  var text = this.getLabelText( ele, prefix );
	  var labelDims = this.calculateLabelDimensions( ele, text );

	  util.setPrefixedProperty( _p.rstyle,   'labelWidth', prefix, labelDims.width );
	  util.setPrefixedProperty( _p.rscratch, 'labelWidth', prefix, labelDims.width );

	  util.setPrefixedProperty( _p.rstyle,   'labelHeight', prefix, labelDims.height );
	  util.setPrefixedProperty( _p.rscratch, 'labelHeight', prefix, labelDims.height );
	};

	BRp.getLabelText = function( ele, prefix ){
	  var _p = ele._private;
	  var pfd = prefix ? prefix + '-' : '';
	  var text = ele.pstyle( pfd + 'label' ).strValue;
	  var textTransform = ele.pstyle( 'text-transform' ).value;
	  var rscratch = function( propName, value ){
	    if( value ){
	      util.setPrefixedProperty( _p.rscratch, propName, prefix, value );
	      return value;
	    } else {
	      return util.getPrefixedProperty( _p.rscratch, propName, prefix );
	    }
	  };

	  if( textTransform == 'none' ){
	  } else if( textTransform == 'uppercase' ){
	    text = text.toUpperCase();
	  } else if( textTransform == 'lowercase' ){
	    text = text.toLowerCase();
	  }

	  if( ele.pstyle( 'text-wrap' ).value === 'wrap' ){
	    //console.log('wrap');

	    var labelKey = rscratch( 'labelKey' );

	    // save recalc if the label is the same as before
	    if( labelKey && rscratch( 'labelWrapKey' ) === labelKey ){
	      // console.log('wrap cache hit');
	      return rscratch( 'labelWrapCachedText' );
	    }
	    // console.log('wrap cache miss');

	    var lines = text.split( '\n' );
	    var maxW = ele.pstyle( 'text-max-width' ).pfValue;
	    var wrappedLines = [];

	    for( var l = 0; l < lines.length; l++ ){
	      var line = lines[ l ];
	      var lineDims = this.calculateLabelDimensions( ele, line, 'line=' + line );
	      var lineW = lineDims.width;

	      if( lineW > maxW ){ // line is too long
	        var words = line.split( /\s+/ ); // NB: assume collapsed whitespace into single space
	        var subline = '';

	        for( var w = 0; w < words.length; w++ ){
	          var word = words[ w ];
	          var testLine = subline.length === 0 ? word : subline + ' ' + word;
	          var testDims = this.calculateLabelDimensions( ele, testLine, 'testLine=' + testLine );
	          var testW = testDims.width;

	          if( testW <= maxW ){ // word fits on current line
	            subline += word + ' ';
	          } else { // word starts new line
	            wrappedLines.push( subline );
	            subline = word + ' ';
	          }
	        }

	        // if there's remaining text, put it in a wrapped line
	        if( !subline.match( /^\s+$/ ) ){
	          wrappedLines.push( subline );
	        }
	      } else { // line is already short enough
	        wrappedLines.push( line );
	      }
	    } // for

	    rscratch( 'labelWrapCachedLines', wrappedLines );
	    text = rscratch( 'labelWrapCachedText', wrappedLines.join( '\n' ) );
	    rscratch( 'labelWrapKey', labelKey );

	    // console.log(text)
	  } // if wrap

	  return text;
	};

	BRp.calculateLabelDimensions = function( ele, text, extraKey ){
	  var r = this;

	  var cacheKey = ele._private.labelStyleKey + '$@$' + text;

	  if( extraKey ){
	    cacheKey += '$@$' + extraKey;
	  }

	  var cache = r.labelDimCache || (r.labelDimCache = {});

	  if( cache[ cacheKey ] ){
	    return cache[ cacheKey ];
	  }

	  var fStyle = ele.pstyle( 'font-style' ).strValue;
	  var size = ele.pstyle( 'font-size' ).pfValue + 'px';
	  var family = ele.pstyle( 'font-family' ).strValue;
	  var weight = ele.pstyle( 'font-weight' ).strValue;

	  var div = this.labelCalcDiv;

	  if( !div ){
	    div = this.labelCalcDiv = document.createElement( 'div' );
	    document.body.appendChild( div );
	  }

	  var ds = div.style;

	  // from ele style
	  ds.fontFamily = family;
	  ds.fontStyle = fStyle;
	  ds.fontSize = size;
	  ds.fontWeight = weight;

	  // forced style
	  ds.position = 'absolute';
	  ds.left = '-9999px';
	  ds.top = '-9999px';
	  ds.zIndex = '-1';
	  ds.visibility = 'hidden';
	  ds.pointerEvents = 'none';
	  ds.padding = '0';
	  ds.lineHeight = '1';

	  if( ele.pstyle( 'text-wrap' ).value === 'wrap' ){
	    ds.whiteSpace = 'pre'; // so newlines are taken into account
	  } else {
	    ds.whiteSpace = 'normal';
	  }

	  // put label content in div
	  div.textContent = text;

	  cache[ cacheKey ] = {
	    width: div.clientWidth,
	    height: div.clientHeight
	  };

	  return cache[ cacheKey ];
	};

	BRp.recalculateLabelProjections = function( nodes, edges ){
	  for( var i = 0; i < nodes.length; i++ ){
	    this.recalculateNodeLabelProjection( nodes[ i ] );
	  }

	  for( var i = 0; i < edges.length; i++ ){
	    this.recalculateEdgeLabelProjections( edges[ i ] );
	  }
	};

	BRp.recalculateEdgeProjections = function( edges ){
	  this.findEdgeControlPoints( edges );
	};


	// Find edge control points
	BRp.findEdgeControlPoints = function( edges ){
	  if( !edges || edges.length === 0 ){ return; }

	  var r = this;
	  var cy = r.cy;
	  var hasCompounds = cy.hasCompoundNodes();
	  var hashTable = {};
	  var pairIds = [];
	  var haystackEdges = [];

	  // create a table of edge (src, tgt) => list of edges between them
	  var pairId;
	  for( var i = 0; i < edges.length; i++ ){
	    var edge = edges[ i ];
	    var _p = edge._private;
	    var data = _p.data;
	    var curveStyle = edge.pstyle( 'curve-style' ).value;
	    var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments';

	    // ignore edges who are not to be displayed
	    // they shouldn't take up space
	    if( edge.pstyle( 'display').value === 'none' ){
	      continue;
	    }

	    if( curveStyle === 'haystack' ){
	      haystackEdges.push( edge );
	      continue;
	    }

	    var srcId = data.source;
	    var tgtId = data.target;

	    pairId = srcId > tgtId ?
	      tgtId + '$-$' + srcId :
	      srcId + '$-$' + tgtId ;

	    if( edgeIsUnbundled ){
	      pairId = 'unbundled' + '$-$' + data.id;
	    }

	    if( hashTable[ pairId ] == null ){
	      hashTable[ pairId ] = [];
	      pairIds.push( pairId );
	    }

	    hashTable[ pairId ].push( edge );

	    if( edgeIsUnbundled ){
	      hashTable[ pairId ].hasUnbundled = true;
	    }
	  }

	  var src, tgt, src_p, tgt_p, srcPos, tgtPos, srcW, srcH, tgtW, tgtH, srcShape, tgtShape;
	  var vectorNormInverse;
	  var badBezier;

	  // for each pair (src, tgt), create the ctrl pts
	  // Nested for loop is OK; total number of iterations for both loops = edgeCount
	  for( var p = 0; p < pairIds.length; p++ ){
	    pairId = pairIds[ p ];
	    var pairEdges = hashTable[ pairId ];

	    // for each pair id, the edges should be sorted by index
	    pairEdges.sort( function( edge1, edge2 ){
	      return edge1.poolIndex() - edge2.poolIndex();
	    } );

	    src = pairEdges[0]._private.source;
	    tgt = pairEdges[0]._private.target;

	    src_p = src._private;
	    tgt_p = tgt._private;

	    // make sure src/tgt distinction is consistent
	    // (src/tgt in this case are just for ctrlpts and don't actually have to be true src/tgt)
	    if( src_p.data.id > tgt_p.data.id ){
	      var temp = src;
	      src = tgt;
	      tgt = temp;
	    }

	    srcPos = src_p.position;
	    tgtPos = tgt_p.position;

	    srcW = src.outerWidth();
	    srcH = src.outerHeight();

	    tgtW = tgt.outerWidth();
	    tgtH = tgt.outerHeight();

	    srcShape = r.nodeShapes[ this.getNodeShape( src ) ];
	    tgtShape = r.nodeShapes[ this.getNodeShape( tgt ) ];

	    badBezier = false;


	    if( (pairEdges.length > 1 && src !== tgt) || pairEdges.hasUnbundled ){

	      // pt outside src shape to calc distance/displacement from src to tgt
	      var srcOutside = srcShape.intersectLine(
	        srcPos.x,
	        srcPos.y,
	        srcW,
	        srcH,
	        tgtPos.x,
	        tgtPos.y,
	        0
	      );

	      // pt outside tgt shape to calc distance/displacement from src to tgt
	      var tgtOutside = tgtShape.intersectLine(
	        tgtPos.x,
	        tgtPos.y,
	        tgtW,
	        tgtH,
	        srcPos.x,
	        srcPos.y,
	        0
	      );

	      var midptSrcPts = {
	        x1: srcOutside[0],
	        x2: tgtOutside[0],
	        y1: srcOutside[1],
	        y2: tgtOutside[1]
	      };

	      var posPts = {
	        x1: srcPos.x,
	        x2: tgtPos.x,
	        y1: srcPos.y,
	        y2: tgtPos.y
	      };

	      var dy = ( tgtOutside[1] - srcOutside[1] );
	      var dx = ( tgtOutside[0] - srcOutside[0] );
	      var l = Math.sqrt( dx * dx + dy * dy );

	      var vector = {
	        x: dx,
	        y: dy
	      };

	      var vectorNorm = {
	        x: vector.x / l,
	        y: vector.y / l
	      };
	      vectorNormInverse = {
	        x: -vectorNorm.y,
	        y: vectorNorm.x
	      };


	      // if node shapes overlap, then no ctrl pts to draw
	      if(
	        tgtShape.checkPoint( srcOutside[0], srcOutside[1], 0, tgtW, tgtH, tgtPos.x, tgtPos.y )  &&
	        srcShape.checkPoint( tgtOutside[0], tgtOutside[1], 0, srcW, srcH, srcPos.x, srcPos.y )
	      ){
	        vectorNormInverse = {};
	        badBezier = true;
	      }

	    }

	    var edge;
	    var edge_p;
	    var rs;

	    for( var i = 0; i < pairEdges.length; i++ ){
	      edge = pairEdges[ i ];
	      edge_p = edge._private;
	      rs = edge_p.rscratch;

	      var edgeIndex1 = rs.lastEdgeIndex;
	      var edgeIndex2 = i;

	      var numEdges1 = rs.lastNumEdges;
	      var numEdges2 = pairEdges.length;

	      var curveStyle = edge.pstyle( 'curve-style' ).value;
	      var ctrlptDists = edge.pstyle( 'control-point-distances' );
	      var ctrlptWs = edge.pstyle( 'control-point-weights' );
	      var bezierN = ctrlptDists && ctrlptWs ? Math.min( ctrlptDists.value.length, ctrlptWs.value.length ) : 1;
	      var stepSize = edge.pstyle( 'control-point-step-size' ).pfValue;
	      var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
	      var ctrlptWeight = ctrlptWs.value[0];
	      var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments';

	      var swappedDirection = edge_p.source !== src;

	      if( swappedDirection && edgeIsUnbundled ){
	        ctrlptDist *= -1;
	      }

	      var srcX1 = rs.lastSrcCtlPtX;
	      var srcX2 = srcPos.x;
	      var srcY1 = rs.lastSrcCtlPtY;
	      var srcY2 = srcPos.y;
	      var srcW1 = rs.lastSrcCtlPtW;
	      var srcW2 = src.outerWidth();
	      var srcH1 = rs.lastSrcCtlPtH;
	      var srcH2 = src.outerHeight();

	      var tgtX1 = rs.lastTgtCtlPtX;
	      var tgtX2 = tgtPos.x;
	      var tgtY1 = rs.lastTgtCtlPtY;
	      var tgtY2 = tgtPos.y;
	      var tgtW1 = rs.lastTgtCtlPtW;
	      var tgtW2 = tgt.outerWidth();
	      var tgtH1 = rs.lastTgtCtlPtH;
	      var tgtH2 = tgt.outerHeight();

	      var width1 = rs.lastW;
	      var width2 = edge.pstyle( 'control-point-step-size' ).pfValue;

	      var edgeDistances = edge.pstyle('edge-distances').value;

	      if( badBezier ){
	        rs.badBezier = true;
	      } else {
	        rs.badBezier = false;
	      }

	      if( srcX1 === srcX2 && srcY1 === srcY2 && srcW1 === srcW2 && srcH1 === srcH2
	      &&  tgtX1 === tgtX2 && tgtY1 === tgtY2 && tgtW1 === tgtW2 && tgtH1 === tgtH2
	      &&  width1 === width2
	      &&  ((edgeIndex1 === edgeIndex2 && numEdges1 === numEdges2) || edgeIsUnbundled) ){
	        // console.log('edge ctrl pt cache HIT')
	        continue; // then the control points haven't changed and we can skip calculating them
	      } else {
	        rs.lastSrcCtlPtX = srcX2;
	        rs.lastSrcCtlPtY = srcY2;
	        rs.lastSrcCtlPtW = srcW2;
	        rs.lastSrcCtlPtH = srcH2;
	        rs.lastTgtCtlPtX = tgtX2;
	        rs.lastTgtCtlPtY = tgtY2;
	        rs.lastTgtCtlPtW = tgtW2;
	        rs.lastTgtCtlPtH = tgtH2;
	        rs.lastEdgeIndex = edgeIndex2;
	        rs.lastNumEdges = numEdges2;
	        rs.lastWidth = width2;
	        // console.log('edge ctrl pt cache MISS')
	      }

	      if( src === tgt ){
	        // Self-edge

	        rs.edgeType = 'self';

	        var j = i;
	        var loopDist = stepSize;

	        if( edgeIsUnbundled ){
	          j = 0;
	          loopDist = ctrlptDist;
	        }

	        rs.ctrlpts = [
	          srcPos.x,
	          srcPos.y - (1 + Math.pow( srcH, 1.12 ) / 100) * loopDist * (j / 3 + 1),

	          srcPos.x - (1 + Math.pow( srcW, 1.12 ) / 100) * loopDist * (j / 3 + 1),
	          srcPos.y
	        ];

	      } else if(
	        hasCompounds &&
	        ( src.isParent() || src.isChild() || tgt.isParent() || tgt.isChild() ) &&
	        ( src.parents().anySame( tgt ) || tgt.parents().anySame( src ) )
	      ){
	        // Compound edge

	        rs.edgeType = 'compound';

	        // because the line approximation doesn't apply for compound beziers
	        // (loop/self edges are already elided b/c of cheap src==tgt check)
	        rs.badBezier = false;

	        var j = i;
	        var loopDist = stepSize;

	        if( edgeIsUnbundled ){
	          j = 0;
	          loopDist = ctrlptDist;
	        }

	        var loopW = 50;

	        var loopaPos = {
	          x: srcPos.x - srcW / 2,
	          y: srcPos.y - srcH / 2
	        };

	        var loopbPos = {
	          x: tgtPos.x - tgtW / 2,
	          y: tgtPos.y - tgtH / 2
	        };

	        var loopPos = {
	          x: Math.min( loopaPos.x, loopbPos.x ),
	          y: Math.min( loopaPos.y, loopbPos.y )
	        };

	        // avoids cases with impossible beziers
	        var minCompoundStretch = 0.5;
	        var compoundStretchA = Math.max( minCompoundStretch, Math.log( srcW * 0.01 ) );
	        var compoundStretchB = Math.max( minCompoundStretch, Math.log( tgtW * 0.01 ) );

	        rs.ctrlpts = [
	          loopPos.x,
	          loopPos.y - (1 + Math.pow( loopW, 1.12 ) / 100) * loopDist * (j / 3 + 1) * compoundStretchA,

	          loopPos.x - (1 + Math.pow( loopW, 1.12 ) / 100) * loopDist * (j / 3 + 1) * compoundStretchB,
	          loopPos.y
	        ];

	      } else if( curveStyle === 'segments' ){
	        // Segments (multiple straight lines)

	        rs.edgeType = 'segments';
	        rs.segpts = [];

	        var segmentWs = edge.pstyle( 'segment-weights' ).pfValue;
	        var segmentDs = edge.pstyle( 'segment-distances' ).pfValue;
	        var segmentsN = Math.min( segmentWs.length, segmentDs.length );

	        for( var s = 0; s < segmentsN; s++ ){
	          var w = segmentWs[ s ];
	          var d = segmentDs[ s ];

	          // d = swappedDirection ? -d : d;
	          //
	          // d = Math.abs(d);

	          // var w1 = !swappedDirection ? (1 - w) : w;
	          // var w2 = !swappedDirection ? w : (1 - w);

	          var w1 = (1 - w);
	          var w2 = w;

	          var midptPts = edgeDistances === 'node-position' ? posPts : midptSrcPts;

	          var adjustedMidpt = {
	            x: midptPts.x1 * w1 + midptPts.x2 * w2,
	            y: midptPts.y1 * w1 + midptPts.y2 * w2
	          };

	          rs.segpts.push(
	            adjustedMidpt.x + vectorNormInverse.x * d,
	            adjustedMidpt.y + vectorNormInverse.y * d
	          );
	        }

	      // Straight edge
	      } else if(
	        pairEdges.length % 2 === 1
	        && i === Math.floor( pairEdges.length / 2 )
	        && !edgeIsUnbundled
	      ){

	        rs.edgeType = 'straight';

	      } else {
	        // (Multi)bezier

	        var multi = edgeIsUnbundled;

	        rs.edgeType = multi ? 'multibezier' : 'bezier';
	        rs.ctrlpts = [];

	        for( var b = 0; b < bezierN; b++ ){
	          var normctrlptDist = (0.5 - pairEdges.length / 2 + i) * stepSize;
	          var manctrlptDist;
	          var sign = math.signum( normctrlptDist );

	          if( multi ){
	            ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[ b ] : stepSize; // fall back on step size
	            ctrlptWeight = ctrlptWs.value[ b ];
	          }

	          if( edgeIsUnbundled ){ // multi or single unbundled
	            manctrlptDist = ctrlptDist;
	          } else {
	            manctrlptDist = ctrlptDist !== undefined ? sign * ctrlptDist : undefined;
	          }

	          var distanceFromMidpoint = manctrlptDist !== undefined ? manctrlptDist : normctrlptDist;

	          var w1 = !swappedDirection || edgeIsUnbundled ? (1 - ctrlptWeight) : ctrlptWeight;
	          var w2 = !swappedDirection || edgeIsUnbundled ? ctrlptWeight : (1 - ctrlptWeight);

	          var midptPts = edgeDistances === 'node-position' ? posPts : midptSrcPts;

	          var adjustedMidpt = {
	            x: midptPts.x1 * w1 + midptPts.x2 * w2,
	            y: midptPts.y1 * w1 + midptPts.y2 * w2
	          };

	          rs.ctrlpts.push(
	            adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint,
	            adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint
	          );
	        }

	      }

	      // find endpts for edge
	      this.findEndpoints( edge );

	      var badStart = !is.number( rs.startX ) || !is.number( rs.startY );
	      var badAStart = !is.number( rs.arrowStartX ) || !is.number( rs.arrowStartY );
	      var badEnd = !is.number( rs.endX ) || !is.number( rs.endY );
	      var badAEnd = !is.number( rs.arrowEndX ) || !is.number( rs.arrowEndY );

	      var minCpADistFactor = 3;
	      var arrowW = this.getArrowWidth( edge.pstyle( 'width' ).pfValue ) * this.arrowShapeWidth;
	      var minCpADist = minCpADistFactor * arrowW;

	      if( rs.edgeType === 'bezier' ){
	        var startACpDist = math.dist( { x: rs.ctrlpts[0], y: rs.ctrlpts[1] }, { x: rs.startX, y: rs.startY } );
	        var closeStartACp = startACpDist < minCpADist;
	        var endACpDist = math.dist( { x: rs.ctrlpts[0], y: rs.ctrlpts[1] }, { x: rs.endX, y: rs.endY } );
	        var closeEndACp = endACpDist < minCpADist;

	        var overlapping = false;

	        if( badStart || badAStart || closeStartACp ){
	          overlapping = true;

	          // project control point along line from src centre to outside the src shape
	          // (otherwise intersection will yield nothing)
	          var cpD = { // delta
	            x: rs.ctrlpts[0] - srcPos.x,
	            y: rs.ctrlpts[1] - srcPos.y
	          };
	          var cpL = Math.sqrt( cpD.x * cpD.x + cpD.y * cpD.y ); // length of line
	          var cpM = { // normalised delta
	            x: cpD.x / cpL,
	            y: cpD.y / cpL
	          };
	          var radius = Math.max( srcW, srcH );
	          var cpProj = { // *2 radius guarantees outside shape
	            x: rs.ctrlpts[0] + cpM.x * 2 * radius,
	            y: rs.ctrlpts[1] + cpM.y * 2 * radius
	          };

	          var srcCtrlPtIntn = srcShape.intersectLine(
	            srcPos.x,
	            srcPos.y,
	            srcW,
	            srcH,
	            cpProj.x,
	            cpProj.y,
	            0
	          );

	          if( closeStartACp ){
	            rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - startACpDist);
	            rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - startACpDist);
	          } else {
	            rs.ctrlpts[0] = srcCtrlPtIntn[0] + cpM.x * minCpADist;
	            rs.ctrlpts[1] = srcCtrlPtIntn[1] + cpM.y * minCpADist;
	          }
	        }

	        if( badEnd || badAEnd || closeEndACp ){
	          overlapping = true;

	          // project control point along line from tgt centre to outside the tgt shape
	          // (otherwise intersection will yield nothing)
	          var cpD = { // delta
	            x: rs.ctrlpts[0] - tgtPos.x,
	            y: rs.ctrlpts[1] - tgtPos.y
	          };
	          var cpL = Math.sqrt( cpD.x * cpD.x + cpD.y * cpD.y ); // length of line
	          var cpM = { // normalised delta
	            x: cpD.x / cpL,
	            y: cpD.y / cpL
	          };
	          var radius = Math.max( srcW, srcH );
	          var cpProj = { // *2 radius guarantees outside shape
	            x: rs.ctrlpts[0] + cpM.x * 2 * radius,
	            y: rs.ctrlpts[1] + cpM.y * 2 * radius
	          };

	          var tgtCtrlPtIntn = tgtShape.intersectLine(
	            tgtPos.x,
	            tgtPos.y,
	            tgtW,
	            tgtH,
	            cpProj.x,
	            cpProj.y,
	            0
	          );

	          if( closeEndACp ){
	            rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - endACpDist);
	            rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - endACpDist);
	          } else {
	            rs.ctrlpts[0] = tgtCtrlPtIntn[0] + cpM.x * minCpADist;
	            rs.ctrlpts[1] = tgtCtrlPtIntn[1] + cpM.y * minCpADist;
	          }

	        }

	        if( overlapping ){
	          // recalc endpts
	          this.findEndpoints( edge );
	        }

	      }

	      if( rs.edgeType === 'multibezier' || rs.edgeType === 'bezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' ){
	        rs.allpts = [];

	        rs.allpts.push( rs.startX, rs.startY );

	        for( var b = 0; b + 1 < rs.ctrlpts.length; b += 2 ){
	          // ctrl pt itself
	          rs.allpts.push( rs.ctrlpts[ b ], rs.ctrlpts[ b + 1] );

	          // the midpt between ctrlpts as intermediate destination pts
	          if( b + 3 < rs.ctrlpts.length ){
	            rs.allpts.push( (rs.ctrlpts[ b ] + rs.ctrlpts[ b + 2]) / 2, (rs.ctrlpts[ b + 1] + rs.ctrlpts[ b + 3]) / 2 );
	          }
	        }

	        rs.allpts.push( rs.endX, rs.endY );

	        var m, mt;
	        if( rs.ctrlpts.length / 2 % 2 === 0 ){
	          m = rs.allpts.length / 2 - 1;

	          rs.midX = rs.allpts[ m ];
	          rs.midY = rs.allpts[ m + 1];
	        } else {
	          m = rs.allpts.length / 2 - 3;
	          mt = 0.5;

	          rs.midX = math.qbezierAt( rs.allpts[ m ], rs.allpts[ m + 2], rs.allpts[ m + 4], mt );
	          rs.midY = math.qbezierAt( rs.allpts[ m + 1], rs.allpts[ m + 3], rs.allpts[ m + 5], mt );
	        }

	      } else if( rs.edgeType === 'straight' ){
	        // need to calc these after endpts
	        rs.allpts = [ rs.startX, rs.startY, rs.endX, rs.endY ];

	        // default midpt for labels etc
	        rs.midX = ( rs.startX + rs.endX + rs.arrowStartX + rs.arrowEndX ) / 4;
	        rs.midY = ( rs.startY + rs.endY + rs.arrowStartY + rs.arrowEndY ) / 4;

	      } else if( rs.edgeType === 'segments' ){
	        rs.allpts = [];
	        rs.allpts.push( rs.startX, rs.startY );
	        rs.allpts.push.apply( rs.allpts, rs.segpts );
	        rs.allpts.push( rs.endX, rs.endY );

	        if( rs.segpts.length % 4 === 0 ){
	          var i2 = rs.segpts.length / 2;
	          var i1 = i2 - 2;

	          rs.midX = ( rs.segpts[ i1 ] + rs.segpts[ i2 ] ) / 2;
	          rs.midY = ( rs.segpts[ i1 + 1] + rs.segpts[ i2 + 1] ) / 2;
	        } else {
	          var i1 = rs.segpts.length / 2 - 1;

	          rs.midX = rs.segpts[ i1 ];
	          rs.midY = rs.segpts[ i1 + 1];
	        }


	      }

	      this.projectLines( edge );
	      this.calculateArrowAngles( edge );
	      this.recalculateEdgeLabelProjections( edge );
	      this.calculateLabelAngles( edge );

	    } // for pair edges
	  } // for pair ids

	  for( var i = 0; i < haystackEdges.length; i++ ){
	    var edge = haystackEdges[ i ];
	    var _p = edge._private;
	    var rscratch = _p.rscratch;
	    var rs = rscratch;

	    if( !rscratch.haystack ){
	      var angle = Math.random() * 2 * Math.PI;

	      rscratch.source = {
	        x: Math.cos( angle ),
	        y: Math.sin( angle )
	      };

	      var angle = Math.random() * 2 * Math.PI;

	      rscratch.target = {
	        x: Math.cos( angle ),
	        y: Math.sin( angle )
	      };

	    }

	    var src = _p.source;
	    var tgt = _p.target;
	    var srcPos = src._private.position;
	    var tgtPos = tgt._private.position;
	    var srcW = src.width();
	    var tgtW = tgt.width();
	    var srcH = src.height();
	    var tgtH = tgt.height();
	    var radius = edge.pstyle( 'haystack-radius' ).value;
	    var halfRadius = radius / 2; // b/c have to half width/height

	    rs.haystackPts = rs.allpts = [
	      rs.source.x * srcW * halfRadius + srcPos.x,
	      rs.source.y * srcH * halfRadius + srcPos.y,
	      rs.target.x * tgtW * halfRadius + tgtPos.x,
	      rs.target.y * tgtH * halfRadius + tgtPos.y
	    ];

	    rs.midX = (rs.allpts[0] + rs.allpts[2]) / 2;
	    rs.midY = (rs.allpts[1] + rs.allpts[3]) / 2;

	    // always override as haystack in case set to different type previously
	    rscratch.edgeType = 'haystack';
	    rscratch.haystack = true;

	    this.projectLines( edge );
	    this.calculateArrowAngles( edge );
	    this.recalculateEdgeLabelProjections( edge );
	    this.calculateLabelAngles( edge );
	  }

	  return hashTable;
	};

	var getAngleFromDisp = function( dispX, dispY ){
	  return Math.atan2( dispY, dispX ) - Math.PI / 2;
	};

	BRp.calculateArrowAngles = function( edge ){
	  var rs = edge._private.rscratch;
	  var isHaystack = rs.edgeType === 'haystack';
	  var isMultibezier = rs.edgeType === 'multibezier';
	  var isSegments = rs.edgeType === 'segments';
	  var isCompound = rs.edgeType === 'compound';
	  var isSelf = rs.edgeType === 'self';

	  // Displacement gives direction for arrowhead orientation
	  var dispX, dispY;
	  var startX, startY, endX, endY;

	  var srcPos = edge._private.source._private.position;
	  var tgtPos = edge._private.target._private.position;

	  if( isHaystack ){
	    startX = rs.haystackPts[0];
	    startY = rs.haystackPts[1];
	    endX = rs.haystackPts[2];
	    endY = rs.haystackPts[3];
	  } else {
	    startX = rs.arrowStartX;
	    startY = rs.arrowStartY;
	    endX = rs.arrowEndX;
	    endY = rs.arrowEndY;
	  }

	  // source
	  //

	  dispX = srcPos.x - startX;
	  dispY = srcPos.y - startY;

	  rs.srcArrowAngle = getAngleFromDisp( dispX, dispY );

	  // mid target
	  //

	  var midX = rs.midX;
	  var midY = rs.midY;

	  if( isHaystack ){
	    midX = ( startX + endX ) / 2;
	    midY = ( startY + endY ) / 2;
	  }

	  dispX = endX - startX;
	  dispY = endY - startY;

	  if( isSelf ){
	    dispX = -1;
	    dispY = 1;
	  } else if( isSegments ){
	    var pts = rs.allpts;

	    if( pts.length / 2 % 2 === 0 ){
	      var i2 = pts.length / 2;
	      var i1 = i2 - 2;

	      dispX = ( pts[ i2 ] - pts[ i1 ] );
	      dispY = ( pts[ i2 + 1] - pts[ i1 + 1] );
	    } else {
	      var i2 = pts.length / 2 - 1;
	      var i1 = i2 - 2;
	      var i3 = i2 + 2;

	      dispX = ( pts[ i2 ] - pts[ i1 ] );
	      dispY = ( pts[ i2 + 1] - pts[ i1 + 1] );
	    }
	  } else if( isMultibezier || isCompound ){
	    var pts = rs.allpts;
	    var cpts = rs.ctrlpts;
	    var bp0x, bp0y;
	    var bp1x, bp1y;

	    if( cpts.length / 2 % 2 === 0 ){
	      var p0 = pts.length / 2 - 1; // startpt
	      var ic = p0 + 2;
	      var p1 = ic + 2;

	      bp0x = math.qbezierAt( pts[ p0 ], pts[ ic ], pts[ p1 ], 0.0 );
	      bp0y = math.qbezierAt( pts[ p0 + 1], pts[ ic + 1], pts[ p1 + 1], 0.0 );

	      bp1x = math.qbezierAt( pts[ p0 ], pts[ ic ], pts[ p1 ], 0.0001 );
	      bp1y = math.qbezierAt( pts[ p0 + 1], pts[ ic + 1], pts[ p1 + 1], 0.0001 );
	    } else {
	      var ic = pts.length / 2 - 1; // ctrpt
	      var p0 = ic - 2; // startpt
	      var p1 = ic + 2; // endpt

	      bp0x = math.qbezierAt( pts[ p0 ], pts[ ic ], pts[ p1 ], 0.4999 );
	      bp0y = math.qbezierAt( pts[ p0 + 1], pts[ ic + 1], pts[ p1 + 1], 0.4999 );

	      bp1x = math.qbezierAt( pts[ p0 ], pts[ ic ], pts[ p1 ], 0.5 );
	      bp1y = math.qbezierAt( pts[ p0 + 1], pts[ ic + 1], pts[ p1 + 1], 0.5 );
	    }

	    dispX = ( bp1x - bp0x );
	    dispY = ( bp1y - bp0y );
	  }

	  rs.midtgtArrowAngle = getAngleFromDisp( dispX, dispY );

	  rs.midDispX = dispX;
	  rs.midDispY = dispY;

	  // mid source
	  //

	  dispX *= -1;
	  dispY *= -1;

	  if( isSegments ){
	    var pts = rs.allpts;

	    if( pts.length / 2 % 2 === 0 ){
	      // already ok
	    } else {
	      var i2 = pts.length / 2 - 1;
	      var i3 = i2 + 2;

	      dispX = -( pts[ i3 ] - pts[ i2 ] );
	      dispY = -( pts[ i3 + 1] - pts[ i2 + 1] );
	    }
	  }

	  rs.midsrcArrowAngle = getAngleFromDisp( dispX, dispY );

	  // target
	  //

	  dispX = tgtPos.x - endX;
	  dispY = tgtPos.y - endY;

	  rs.tgtArrowAngle = getAngleFromDisp( dispX, dispY );
	};

	BRp.calculateLabelAngles = function( ele ){
	  var _p = ele._private;
	  var rs = _p.rscratch;
	  var isEdge = ele.isEdge();
	  var rot = ele.pstyle( 'text-rotation' );
	  var rotStr = rot.strValue;

	  if( rotStr === 'none' ){
	    rs.labelAngle = rs.sourceLabelAngle = rs.targetLabelAngle = 0;
	  } else if( isEdge && rotStr === 'autorotate' ){
	    rs.labelAngle = Math.atan( rs.midDispY / rs.midDispX );
	    rs.sourceLabelAngle = rs.sourceLabelAutoAngle;
	    rs.targetLabelAngle = rs.targetLabelAutoAngle;
	  } else if( rotStr === 'autorotate' ){
	    rs.labelAngle = rs.sourceLabelAngle = rs.targetLabelAngle = 0;
	  } else {
	    rs.labelAngle = rs.sourceLabelAngle = rs.targetLabelAngle = rot.pfValue;
	  }
	};


	BRp.findEndpoints = function( edge ){
	  var r = this;
	  var intersect;

	  var source = edge.source()[0];
	  var target = edge.target()[0];

	  var src_p = source._private;
	  var tgt_p = target._private;

	  var srcPos = src_p.position;
	  var tgtPos = tgt_p.position;

	  var tgtArShape = edge.pstyle( 'target-arrow-shape' ).value;
	  var srcArShape = edge.pstyle( 'source-arrow-shape' ).value;

	  var rs = edge._private.rscratch;

	  var et = rs.edgeType;
	  var bezier = et === 'bezier' || et === 'multibezier' || et === 'self' || et === 'compound';
	  var multi = et !== 'bezier';
	  var lines = et === 'straight' || et === 'segments';
	  var segments = et === 'segments';
	  var hasEndpts = bezier || multi || lines;

	  var p1, p2;

	  if( bezier ){
	    var cpStart = [ rs.ctrlpts[0], rs.ctrlpts[1] ];
	    var cpEnd = multi ? [ rs.ctrlpts[ rs.ctrlpts.length - 2], rs.ctrlpts[ rs.ctrlpts.length - 1] ] : cpStart;

	    p1 = cpEnd;
	    p2 = cpStart;
	  } else if( lines ){
	    var srcArrowFromPt = !segments ? [ tgtPos.x, tgtPos.y ] : rs.segpts.slice( 0, 2 );
	    var tgtArrowFromPt = !segments ? [ srcPos.x, srcPos.y ] : rs.segpts.slice( rs.segpts.length - 2 );

	    p1 = tgtArrowFromPt;
	    p2 = srcArrowFromPt;
	  }

	  intersect = r.nodeShapes[ this.getNodeShape( target ) ].intersectLine(
	    tgtPos.x,
	    tgtPos.y,
	    target.outerWidth(),
	    target.outerHeight(),
	    p1[0],
	    p1[1],
	    0
	  );

	  var arrowEnd = math.shortenIntersection( intersect, p1,
	    r.arrowShapes[ tgtArShape ].spacing( edge ) );
	  var edgeEnd = math.shortenIntersection( intersect, p1,
	    r.arrowShapes[ tgtArShape ].gap( edge ) );

	  rs.endX = edgeEnd[0];
	  rs.endY = edgeEnd[1];

	  rs.arrowEndX = arrowEnd[0];
	  rs.arrowEndY = arrowEnd[1];

	  intersect = r.nodeShapes[ this.getNodeShape( source ) ].intersectLine(
	    srcPos.x,
	    srcPos.y,
	    source.outerWidth(),
	    source.outerHeight(),
	    p2[0],
	    p2[1],
	    0
	  );

	  var arrowStart = math.shortenIntersection(
	    intersect, p2,
	    r.arrowShapes[ srcArShape ].spacing( edge )
	  );
	  var edgeStart = math.shortenIntersection(
	    intersect, p2,
	    r.arrowShapes[ srcArShape ].gap( edge )
	  );

	  rs.startX = edgeStart[0];
	  rs.startY = edgeStart[1];

	  rs.arrowStartX = arrowStart[0];
	  rs.arrowStartY = arrowStart[1];

	  if( hasEndpts ){
	    if( !is.number( rs.startX ) || !is.number( rs.startY ) || !is.number( rs.endX ) || !is.number( rs.endY ) ){
	      rs.badLine = true;
	    } else {
	      rs.badLine = false;
	    }
	  }
	};

	BRp.getArrowWidth = BRp.getArrowHeight = function( edgeWidth ){
	  var cache = this.arrowWidthCache = this.arrowWidthCache || {};

	  var cachedVal = cache[ edgeWidth ];
	  if( cachedVal ){
	    return cachedVal;
	  }

	  cachedVal =  Math.max( Math.pow( edgeWidth * 13.37, 0.9 ), 29 );
	  cache[ edgeWidth ] = cachedVal;

	  return cachedVal;
	};

	module.exports = BRp;


/***/ },
/* 157 */
/***/ function(module, exports) {

	'use strict';

	var BRp = {};

	BRp.getCachedImage = function( url, onLoad ){
	  var r = this;
	  var imageCache = r.imageCache = r.imageCache || {};

	  if( imageCache[ url ] && imageCache[ url ].image ){
	    return imageCache[ url ].image;
	  }

	  var cache = imageCache[ url ] = imageCache[ url ] || {};

	  var image = cache.image = new Image();
	  image.addEventListener('load', onLoad);
	  image.crossOrigin = 'Anonymous'; // prevent tainted canvas
	  image.src = url;

	  return image;
	};

	module.exports = BRp;


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );
	var util = __webpack_require__( 75 );
	var math = __webpack_require__( 76 );
	var Event = __webpack_require__( 102 );

	var BRp = {};

	BRp.registerBinding = function( target, event, handler, useCapture ){
	  var args = Array.prototype.slice.apply( arguments, [1] ); // copy
	  var b = this.binder( target );

	  return b.on.apply( b, args );
	};

	BRp.binder = function( tgt ){
	  var r = this;

	  var on = function(){
	    var args = arguments;

	    r.bindings.push({
	      target: tgt,
	      args: args
	    });

	    ( tgt.on || tgt.addEventListener ).apply( tgt, args );

	    return this;
	  };

	  return {
	    on: on,
	    addEventListener: on,
	    addListener: on,
	    bind: on
	  };
	};

	BRp.nodeIsDraggable = function( node ){
	  return (
	    node
	    && node.isNode()
	    && !node.locked()
	    && node.grabbable()
	  );
	};

	BRp.nodeIsGrabbable = function( node ){
	  return (
	    this.nodeIsDraggable( node )
	    && node.pstyle( 'opacity' ).value !== 0
	    && node.pstyle( 'visibility' ).value === 'visible'
	    && node.pstyle( 'display' ).value === 'element'
	  );
	};

	BRp.load = function(){
	  var r = this;

	  var triggerEvents = function( target, names, e, props ){
	    if( target == null ){
	      target = r.cy;
	    }

	    for( var i = 0; i < names.length; i++ ){
	      var name = names[ i ];

	      var event = new Event( e, util.extend( { type: name }, props ) );
	      target.trigger( event );
	    }
	  };

	  var isMultSelKeyDown = function( e ){
	    return e.shiftKey || e.metaKey || e.ctrlKey; // maybe e.altKey
	  };

	  var allowPanningPassthrough = function( down, downs ){
	    var allowPassthrough = true;

	    if( r.cy.hasCompoundNodes() && down && down.isEdge() ){
	      // a compound node below the edge => no passthrough panning
	      for( var i = 0; downs && i < downs.length; i++ ){
	        var down = downs[i];

	        if( down.isNode() && down.isParent() ){
	          allowPassthrough = false;
	          break;
	        }
	      }
	    } else {
	      allowPassthrough = true;
	    }

	    return allowPassthrough;
	  };

	  var getDragListIds = function( opts ){
	    var listHasId;

	    if( opts.addToList && r.cy.hasCompoundNodes() ){ // only needed for compound graphs
	      if( !opts.addToList.hasId ){ // build ids lookup if doesn't already exist
	        opts.addToList.hasId = {};

	        for( var i = 0; i < opts.addToList.length; i++ ){
	          var ele = opts.addToList[ i ];

	          opts.addToList.hasId[ ele.id() ] = true;
	        }
	      }

	      listHasId = opts.addToList.hasId;
	    }

	    return listHasId || {};
	  };

	  var setGrabbed = function( ele ){
	    ele[0]._private.grabbed = true;
	  };

	  var setFreed = function( ele ){
	    ele[0]._private.grabbed = false;
	  };

	  var setInDragLayer = function( ele ){
	    ele[0]._private.rscratch.inDragLayer = true;
	  };

	  var setOutDragLayer = function( ele ){
	    ele[0]._private.rscratch.inDragLayer = false;
	  };

	  var setGrabTarget = function( ele ){
	    ele[0]._private.rscratch.isGrabTarget = true;
	  };

	  var removeGrabTarget = function( ele ){
	    ele[0]._private.rscratch.isGrabTarget = false;
	  };

	  var addToDragList = function( ele, opts ){
	    var listHasId = getDragListIds( opts );

	    if( !listHasId[ ele.id() ] ){
	      opts.addToList.push( ele );
	      listHasId[ ele.id() ] = true;

	      setGrabbed( ele );
	    }
	  };

	  // helper function to determine which child nodes and inner edges
	  // of a compound node to be dragged as well as the grabbed and selected nodes
	  var addDescendantsToDrag = function( node, opts ){
	    if( !node.cy().hasCompoundNodes() ){
	      return;
	    }

	    if( opts.inDragLayer == null && opts.addToList == null ){ return; } // nothing to do

	    var innerNodes = node.descendants();

	    if( opts.inDragLayer ){
	      innerNodes.forEach( setInDragLayer );
	      innerNodes.connectedEdges().forEach( setInDragLayer );
	    }

	    if( opts.addToList ){
	      innerNodes.forEach(function( ele ){
	        addToDragList( ele, opts );
	      });
	    }
	  };

	  // adds the given nodes and its neighbourhood to the drag layer
	  var addNodesToDrag = function( nodes, opts ){
	    opts = opts || {};

	    var hasCompoundNodes = nodes.cy().hasCompoundNodes();

	    if( opts.inDragLayer ){
	      nodes.forEach( setInDragLayer );

	      nodes.neighborhood().stdFilter(function( ele ){
	        return !hasCompoundNodes || ele.isEdge();
	      }).forEach( setInDragLayer );
	    }

	    if( opts.addToList ){
	      nodes.forEach(function( ele ){
	        addToDragList( ele, opts );
	      });
	    }

	    addDescendantsToDrag( nodes, opts ); // always add to drag

	    // also add nodes and edges related to the topmost ancestor
	    updateAncestorsInDragLayer( nodes, {
	      inDragLayer: opts.inDragLayer
	    } );

	    r.updateCachedGrabbedEles();
	  };

	  var addNodeToDrag = addNodesToDrag;

	  var freeDraggedElements = function( grabbedEles ){
	    if( !grabbedEles ){ return; }

	    grabbedEles.hasId = {}; // clear the id list

	    // just go over all elements rather than doing a bunch of (possibly expensive) traversals
	    r.getCachedZSortedEles().forEach(function( ele ){
	      setFreed( ele );
	      setOutDragLayer( ele );
	      removeGrabTarget( ele );
	    });

	    r.updateCachedGrabbedEles();
	  };

	  // helper function to determine which ancestor nodes and edges should go
	  // to the drag layer (or should be removed from drag layer).
	  var updateAncestorsInDragLayer = function( node, opts ){

	    if( opts.inDragLayer == null && opts.addToList == null ){ return; } // nothing to do

	    if( !node.cy().hasCompoundNodes() ){
	      return;
	    }

	    // find top-level parent
	    var parent = node.ancestors().orphans();

	    // no parent node: no nodes to add to the drag layer
	    if( parent.same( node ) ){
	      return;
	    }

	    var nodes = parent.descendants().spawnSelf()
	      .merge( parent )
	      .unmerge( node )
	      .unmerge( node.descendants() )
	    ;

	    var edges = nodes.connectedEdges();

	    if( opts.inDragLayer ){
	      edges.forEach( setInDragLayer );
	      nodes.forEach( setInDragLayer );
	    }

	    if( opts.addToList ){
	      nodes.forEach(function( ele ){
	        addToDragList( ele, opts );
	      });
	    }
	  };

	  var haveMutationsApi = typeof MutationObserver !== 'undefined';

	  // watch for when the cy container is removed from the dom
	  if( haveMutationsApi ){
	    r.removeObserver = new MutationObserver( function( mutns ){
	      for( var i = 0; i < mutns.length; i++ ){
	        var mutn = mutns[ i ];
	        var rNodes = mutn.removedNodes;

	        if( rNodes ){ for( var j = 0; j < rNodes.length; j++ ){
	          var rNode = rNodes[ j ];

	          if( rNode === r.container ){
	            r.destroy();
	            break;
	          }
	        } }
	      }
	    } );

	    if( r.container.parentNode ){
	      r.removeObserver.observe( r.container.parentNode, { childList: true } );
	    }
	  } else {
	    r.registerBinding( r.container, 'DOMNodeRemoved', function( e ){
	      r.destroy();
	    } );
	  }

	  var onResize = util.debounce( function(){
	    r.cy.invalidateSize();
	    r.invalidateContainerClientCoordsCache();

	    r.matchCanvasSize( r.container );
	    r.redrawHint( 'eles', true );
	    r.redrawHint( 'drag', true );
	    r.redraw();
	  }, 100 );

	  if( haveMutationsApi ){
	    r.styleObserver = new MutationObserver( onResize );

	    r.styleObserver.observe( r.container, { attributes: true } );
	  }

	  // auto resize
	  r.registerBinding( window, 'resize', onResize );

	  var invalCtnrBBOnScroll = function( domEle ){
	    r.registerBinding( domEle, 'scroll', function( e ){
	      r.invalidateContainerClientCoordsCache();
	    } );
	  };

	  var bbCtnr = r.cy.container();

	  for( ;; ){

	    invalCtnrBBOnScroll( bbCtnr );

	    if( bbCtnr.parentNode ){
	      bbCtnr = bbCtnr.parentNode;
	    } else {
	      break;
	    }

	  }

	  // stop right click menu from appearing on cy
	  r.registerBinding( r.container, 'contextmenu', function( e ){
	    e.preventDefault();
	  } );

	  var inBoxSelection = function(){
	    return r.selection[4] !== 0;
	  };

	  // Primary key
	  r.registerBinding( r.container, 'mousedown', function mousedownHandler( e ){
	    e.preventDefault();
	    r.hoverData.capture = true;
	    r.hoverData.which = e.which;

	    var cy = r.cy;
	    var gpos = [ e.clientX, e.clientY ];
	    var pos = r.projectIntoViewport( gpos[0], gpos[1] );
	    var select = r.selection;
	    var nears = r.findNearestElements( pos[0], pos[1], true, false );
	    var near = nears[0];
	    var draggedElements = r.dragData.possibleDragElements;

	    r.hoverData.mdownPos = pos;
	    r.hoverData.mdownGPos = gpos;

	    var checkForTaphold = function(){
	      r.hoverData.tapholdCancelled = false;

	      clearTimeout( r.hoverData.tapholdTimeout );

	      r.hoverData.tapholdTimeout = setTimeout( function(){

	        if( r.hoverData.tapholdCancelled ){
	          return;
	        } else {
	          var ele = r.hoverData.down;

	          if( ele ){
	            ele.trigger( new Event( e, {
	              type: 'taphold',
	              cyPosition: { x: pos[0], y: pos[1] }
	            } ) );
	          } else {
	            cy.trigger( new Event( e, {
	              type: 'taphold',
	              cyPosition: { x: pos[0], y: pos[1] }
	            } ) );
	          }
	        }

	      }, r.tapholdDuration );
	    };

	    // Right click button
	    if( e.which == 3 ){

	      r.hoverData.cxtStarted = true;

	      var cxtEvt = new Event( e, {
	        type: 'cxttapstart',
	        cyPosition: { x: pos[0], y: pos[1] }
	      } );

	      if( near ){
	        near.activate();
	        near.trigger( cxtEvt );

	        r.hoverData.down = near;
	      } else {
	        cy.trigger( cxtEvt );
	      }

	      r.hoverData.downTime = (new Date()).getTime();
	      r.hoverData.cxtDragged = false;

	    // Primary button
	    } else if( e.which == 1 ){

	      if( near ){
	        near.activate();
	      }

	      // Element dragging
	      {
	        // If something is under the cursor and it is draggable, prepare to grab it
	        if( near != null ){

	          if( r.nodeIsGrabbable( near ) ){

	            var grabEvent = new Event( e, {
	              type: 'grab',
	              cyPosition: { x: pos[0], y: pos[1] }
	            } );

	            setGrabTarget( near );

	            if( !near.selected() ){

	              draggedElements = r.dragData.possibleDragElements = [];
	              addNodeToDrag( near, { addToList: draggedElements } );

	              near.trigger( grabEvent );

	            } else if( near.selected() ){
	              draggedElements = r.dragData.possibleDragElements = [  ];

	              var selectedNodes = cy.$( function(){ return this.isNode() && this.selected() && r.nodeIsGrabbable( this ); } );

	              addNodesToDrag( selectedNodes, { addToList: draggedElements } );

	              near.trigger( grabEvent );
	            }

	            r.redrawHint( 'eles', true );
	            r.redrawHint( 'drag', true );

	          }

	        }

	        r.hoverData.down = near;
	        r.hoverData.downs = nears;
	        r.hoverData.downTime = (new Date()).getTime();
	      }

	      triggerEvents( near, [ 'mousedown', 'tapstart', 'vmousedown' ], e, {
	        cyPosition: { x: pos[0], y: pos[1] }
	      } );

	      if( near == null ){
	        select[4] = 1;

	        r.data.bgActivePosistion = {
	          x: pos[0],
	          y: pos[1]
	        };

	        r.redrawHint( 'select', true );

	        r.redraw();
	      } else if( near.isEdge() ){
	        select[4] = 1; // for future pan
	      }

	      checkForTaphold();

	    }

	    // Initialize selection box coordinates
	    select[0] = select[2] = pos[0];
	    select[1] = select[3] = pos[1];

	  }, false );

	  r.registerBinding( window, 'mousemove', function mousemoveHandler( e ){
	    var preventDefault = false;
	    var capture = r.hoverData.capture;

	    // save cycles if mouse events aren't to be captured
	    if( !capture ){
	      var containerPageCoords = r.findContainerClientCoords();

	      if( e.clientX > containerPageCoords[0] && e.clientX < containerPageCoords[0] + r.canvasWidth
	        && e.clientY > containerPageCoords[1] && e.clientY < containerPageCoords[1] + r.canvasHeight
	      ){
	        // inside container bounds so OK
	      } else {
	        return;
	      }

	      var cyContainer = r.container;
	      var target = e.target;
	      var tParent = target.parentNode;
	      var containerIsTarget = false;

	      while( tParent ){
	        if( tParent === cyContainer ){
	          containerIsTarget = true;
	          break;
	        }

	        tParent = tParent.parentNode;
	      }

	      if( !containerIsTarget ){ return; } // if target is outisde cy container, then this event is not for us
	    }

	    var cy = r.cy;
	    var zoom = cy.zoom();
	    var gpos = [ e.clientX, e.clientY ];
	    var pos = r.projectIntoViewport( gpos[0], gpos[1] );
	    var mdownPos = r.hoverData.mdownPos;
	    var mdownGPos = r.hoverData.mdownGPos;
	    var select = r.selection;

	    var near = null;
	    if( !r.hoverData.draggingEles && !r.hoverData.dragging && !r.hoverData.selecting ){
	      near = r.findNearestElement( pos[0], pos[1], true, false );
	    }
	    var last = r.hoverData.last;
	    var down = r.hoverData.down;

	    var disp = [ pos[0] - select[2], pos[1] - select[3] ];

	    var draggedElements = r.dragData.possibleDragElements;

	    var isOverThresholdDrag;

	    if( mdownGPos ){
	      var dx = gpos[0] - mdownGPos[0];
	      var dx2 = dx * dx;
	      var dy = gpos[1] - mdownGPos[1];
	      var dy2 = dy * dy;
	      var dist2 = dx2 + dy2;

	      isOverThresholdDrag = dist2 >= r.desktopTapThreshold2;
	    }

	    var multSelKeyDown = isMultSelKeyDown( e );

	    if (isOverThresholdDrag) {
	      r.hoverData.tapholdCancelled = true;
	    }

	    var updateDragDelta = function(){
	      var dragDelta = r.hoverData.dragDelta = r.hoverData.dragDelta || [];

	      if( dragDelta.length === 0 ){
	        dragDelta.push( disp[0] );
	        dragDelta.push( disp[1] );
	      } else {
	        dragDelta[0] += disp[0];
	        dragDelta[1] += disp[1];
	      }
	    };


	    preventDefault = true;

	    triggerEvents( near, [ 'mousemove', 'vmousemove', 'tapdrag' ], e, {
	      cyPosition: { x: pos[0], y: pos[1] }
	    } );

	    // trigger context drag if rmouse down
	    if( r.hoverData.which === 3 ){
	      // but only if over threshold
	      if( isOverThresholdDrag ){
	        var cxtEvt = new Event( e, {
	          type: 'cxtdrag',
	          cyPosition: { x: pos[0], y: pos[1] }
	        } );

	        if( down ){
	          down.trigger( cxtEvt );
	        } else {
	          cy.trigger( cxtEvt );
	        }

	        r.hoverData.cxtDragged = true;

	        if( !r.hoverData.cxtOver || near !== r.hoverData.cxtOver ){

	          if( r.hoverData.cxtOver ){
	            r.hoverData.cxtOver.trigger( new Event( e, {
	              type: 'cxtdragout',
	              cyPosition: { x: pos[0], y: pos[1] }
	            } ) );
	          }

	          r.hoverData.cxtOver = near;

	          if( near ){
	            near.trigger( new Event( e, {
	              type: 'cxtdragover',
	              cyPosition: { x: pos[0], y: pos[1] }
	            } ) );
	          }

	        }
	      }

	    // Check if we are drag panning the entire graph
	    } else if( r.hoverData.dragging ){
	      preventDefault = true;

	      if( cy.panningEnabled() && cy.userPanningEnabled() ){
	        var deltaP;

	        if( r.hoverData.justStartedPan ){
	          var mdPos = r.hoverData.mdownPos;

	          deltaP = {
	            x: ( pos[0] - mdPos[0] ) * zoom,
	            y: ( pos[1] - mdPos[1] ) * zoom
	          };

	          r.hoverData.justStartedPan = false;

	        } else {
	          deltaP = {
	            x: disp[0] * zoom,
	            y: disp[1] * zoom
	          };

	        }

	        cy.panBy( deltaP );

	        r.hoverData.dragged = true;
	      }

	      // Needs reproject due to pan changing viewport
	      pos = r.projectIntoViewport( e.clientX, e.clientY );

	    // Checks primary button down & out of time & mouse not moved much
	    } else if(
	        select[4] == 1 && (down == null || down.isEdge())
	    ){

	      if( isOverThresholdDrag ){

	        if( !r.hoverData.dragging && cy.boxSelectionEnabled() && ( multSelKeyDown || !cy.panningEnabled() || !cy.userPanningEnabled() ) ){
	          r.data.bgActivePosistion = undefined;

	          if( !r.hoverData.selecting ){
	            cy.trigger('boxstart');
	          }

	          r.hoverData.selecting = true;

	          r.redrawHint( 'select', true );
	          r.redraw();

	        } else if( !r.hoverData.selecting && cy.panningEnabled() && cy.userPanningEnabled() ){
	          var allowPassthrough = allowPanningPassthrough( down, r.hoverData.downs );

	          if( allowPassthrough ){
	            r.hoverData.dragging = true;
	            r.hoverData.justStartedPan = true;
	            select[4] = 0;

	            r.data.bgActivePosistion = math.array2point( mdownPos );

	            r.redrawHint( 'select', true );
	            r.redraw();
	          }
	        }

	        if( down && down.isEdge() && down.active() ){ down.unactivate(); }

	      }

	    } else {
	      if( down && down.isEdge() && down.active() ){ down.unactivate(); }

	      if( ( !down || !down.grabbed() ) && near != last ){

	        if( last ){
	          triggerEvents( last, [ 'mouseout', 'tapdragout' ], e, {
	            cyPosition: { x: pos[0], y: pos[1] }
	          } );
	        }

	        if( near ){
	          triggerEvents( near, [ 'mouseover', 'tapdragover' ], e, {
	            cyPosition: { x: pos[0], y: pos[1] }
	          } );
	        }

	        r.hoverData.last = near;
	      }

	      if( down && r.nodeIsDraggable( down ) ){

	        if( isOverThresholdDrag ){ // then drag

	          var justStartedDrag = !r.dragData.didDrag;

	          if( justStartedDrag ){
	            r.redrawHint( 'eles', true );
	          }

	          r.dragData.didDrag = true; // indicate that we actually did drag the node

	          var toTrigger = [];

	          // now, add the elements to the drag layer if not done already
	          if( !r.hoverData.draggingEles ){
	            addNodesToDrag( cy.collection( draggedElements ), { inDragLayer: true } );
	          }

	          for( var i = 0; i < draggedElements.length; i++ ){
	            var dEle = draggedElements[ i ];

	            // Locked nodes not draggable, as well as non-visible nodes
	            if( r.nodeIsDraggable( dEle ) && dEle.grabbed() ){
	              var dPos = dEle._private.position;

	              toTrigger.push( dEle );

	              if( is.number( disp[0] ) && is.number( disp[1] ) ){
	                var updatePos = !dEle.isParent();

	                if( updatePos ){
	                  dPos.x += disp[0];
	                  dPos.y += disp[1];
	                }

	                if( justStartedDrag ){
	                  var dragDelta = r.hoverData.dragDelta;

	                  if( updatePos && dragDelta && is.number( dragDelta[0] ) && is.number( dragDelta[1] ) ){
	                    dPos.x += dragDelta[0];
	                    dPos.y += dragDelta[1];
	                  }
	                }
	              }

	            }
	          }

	          r.hoverData.draggingEles = true;

	          var tcol = cy.collection( toTrigger );

	          tcol.updateCompoundBounds();
	          tcol.trigger( 'position drag' );

	          r.redrawHint( 'drag', true );
	          r.redraw();

	        } else { // otherwise save drag delta for when we actually start dragging so the relative grab pos is constant
	          updateDragDelta();
	        }
	      }

	      // prevent the dragging from triggering text selection on the page
	      preventDefault = true;
	    }

	    select[2] = pos[0]; select[3] = pos[1];

	    if( preventDefault ){
	      if( e.stopPropagation ) e.stopPropagation();
	      if( e.preventDefault ) e.preventDefault();
	      return false;
	    }
	  }, false );

	  r.registerBinding( window, 'mouseup', function mouseupHandler( e ){
	    var capture = r.hoverData.capture;
	    if( !capture ){ return; }
	    r.hoverData.capture = false;

	    var cy = r.cy; var pos = r.projectIntoViewport( e.clientX, e.clientY ); var select = r.selection;
	    var near = r.findNearestElement( pos[0], pos[1], true, false );
	    var draggedElements = r.dragData.possibleDragElements; var down = r.hoverData.down;
	    var multSelKeyDown = isMultSelKeyDown( e );

	    if( r.data.bgActivePosistion ){
	      r.redrawHint( 'select', true );
	      r.redraw();
	    }

	    r.hoverData.tapholdCancelled = true;

	    r.data.bgActivePosistion = undefined; // not active bg now

	    if( down ){
	      down.unactivate();
	    }

	    if( r.hoverData.which === 3 ){
	      var cxtEvt = new Event( e, {
	        type: 'cxttapend',
	        cyPosition: { x: pos[0], y: pos[1] }
	      } );

	      if( down ){
	        down.trigger( cxtEvt );
	      } else {
	        cy.trigger( cxtEvt );
	      }

	      if( !r.hoverData.cxtDragged ){
	        var cxtTap = new Event( e, {
	          type: 'cxttap',
	          cyPosition: { x: pos[0], y: pos[1] }
	        } );

	        if( down ){
	          down.trigger( cxtTap );
	        } else {
	          cy.trigger( cxtTap );
	        }
	      }

	      r.hoverData.cxtDragged = false;
	      r.hoverData.which = null;

	    } else if( r.hoverData.which === 1 ){

	      // Deselect all elements if nothing is currently under the mouse cursor and we aren't dragging something
	      if( (down == null) // not mousedown on node
	        && !r.dragData.didDrag // didn't move the node around
	        && !r.hoverData.selecting // not box selection
	        && !r.hoverData.dragged // didn't pan
	        && !isMultSelKeyDown( e )
	      ){

	        cy.$( function(){
	          return this.selected();
	        } ).unselect();

	        if( draggedElements.length > 0 ){
	          r.redrawHint( 'eles', true );
	        }

	        r.dragData.possibleDragElements = draggedElements = [];
	      }

	      triggerEvents( near, [ 'mouseup', 'tapend', 'vmouseup' ], e, {
	        cyPosition: { x: pos[0], y: pos[1] }
	      } );

	      if(
	        !r.dragData.didDrag // didn't move a node around
	        && !r.hoverData.dragged // didn't pan
	        && !r.hoverData.selecting // not box selection
	      ){
	        triggerEvents( down, ['click', 'tap', 'vclick'], e, {
	          cyPosition: { x: pos[0], y: pos[1] }
	        } );
	      }

	      // Single selection
	      if( near == down && !r.dragData.didDrag && !r.hoverData.selecting ){
	        if( near != null && near._private.selectable ){

	          if( r.hoverData.dragging ){
	            // if panning, don't change selection state
	          } else if( cy.selectionType() === 'additive' || multSelKeyDown ){
	            if( near.selected() ){
	              near.unselect();
	            } else {
	              near.select();
	            }
	          } else {
	            if( !multSelKeyDown ){
	              cy.$( ':selected' ).unmerge( near ).unselect();
	              near.select();
	            }
	          }

	          r.redrawHint( 'eles', true );
	        }
	      }

	      if( r.hoverData.selecting ){
	        var box = cy.collection( r.getAllInBox( select[0], select[1], select[2], select[3] ) );

	        r.redrawHint( 'select', true );

	        if( box.length > 0 ){
	          r.redrawHint( 'eles', true );
	        }

	        cy.trigger('boxend');

	        var eleWouldBeSelected = function( ele ){ return ele.selectable() && !ele.selected(); };

	        if( cy.selectionType() === 'additive' ){
	          box
	            .trigger('box')
	            .stdFilter( eleWouldBeSelected )
	              .select()
	              .trigger('boxselect')
	          ;
	        } else {
	          if( !multSelKeyDown ){
	            cy.$( ':selected' ).unmerge( box ).unselect();
	          }

	          box
	            .trigger('box')
	            .stdFilter( eleWouldBeSelected )
	              .select()
	              .trigger('boxselect')
	          ;
	        }

	        // always need redraw in case eles unselectable
	        r.redraw();

	      }

	      // Cancel drag pan
	      if( r.hoverData.dragging ){
	        r.hoverData.dragging = false;

	        r.redrawHint( 'select', true );
	        r.redrawHint( 'eles', true );

	        r.redraw();
	      }

	      if( !select[4] ) {
	        r.redrawHint('drag', true);
	        r.redrawHint('eles', true);

	        var downWasGrabbed = down && down.grabbed();

	        freeDraggedElements( draggedElements );

	        if( downWasGrabbed ){ down.trigger('free'); }
	      }

	    } // else not right mouse

	    select[4] = 0; r.hoverData.down = null;

	    r.hoverData.cxtStarted = false;
	    r.hoverData.draggingEles = false;
	    r.hoverData.selecting = false;
	    r.dragData.didDrag = false;
	    r.hoverData.dragged = false;
	    r.hoverData.dragDelta = [];
	    r.hoverData.mdownPos = null;
	    r.hoverData.mdownGPos = null;

	  }, false );

	  var wheelHandler = function( e ){


	    if( r.scrollingPage ){ return; } // while scrolling, ignore wheel-to-zoom

	    var cy = r.cy;
	    var pos = r.projectIntoViewport( e.clientX, e.clientY );
	    var rpos = [ pos[0] * cy.zoom() + cy.pan().x,
	                  pos[1] * cy.zoom() + cy.pan().y ];

	    if( r.hoverData.draggingEles || r.hoverData.dragging || r.hoverData.cxtStarted || inBoxSelection() ){ // if pan dragging or cxt dragging, wheel movements make no zoom
	      e.preventDefault();
	      return;
	    }

	    if( cy.panningEnabled() && cy.userPanningEnabled() && cy.zoomingEnabled() && cy.userZoomingEnabled() ){
	      e.preventDefault();

	      r.data.wheelZooming = true;
	      clearTimeout( r.data.wheelTimeout );
	      r.data.wheelTimeout = setTimeout( function(){
	        r.data.wheelZooming = false;

	        r.redrawHint( 'eles', true );
	        r.redraw();
	      }, 150 );

	      var diff = e.deltaY / -250 || e.wheelDeltaY / 1000 || e.wheelDelta / 1000;
	      diff = diff * r.wheelSensitivity;

	      var needsWheelFix = e.deltaMode === 1;
	      if( needsWheelFix ){ // fixes slow wheel events on ff/linux and ff/windows
	        diff *= 33;
	      }

	      cy.zoom( {
	        level: cy.zoom() * Math.pow( 10, diff ),
	        renderedPosition: { x: rpos[0], y: rpos[1] }
	      } );
	    }

	  };

	  // Functions to help with whether mouse wheel should trigger zooming
	  // --
	  r.registerBinding( r.container, 'wheel', wheelHandler, true );

	  // disable nonstandard wheel events
	  // r.registerBinding(r.container, 'mousewheel', wheelHandler, true);
	  // r.registerBinding(r.container, 'DOMMouseScroll', wheelHandler, true);
	  // r.registerBinding(r.container, 'MozMousePixelScroll', wheelHandler, true); // older firefox

	  r.registerBinding( window, 'scroll', function scrollHandler( e ){
	    r.scrollingPage = true;

	    clearTimeout( r.scrollingPageTimeout );
	    r.scrollingPageTimeout = setTimeout( function(){
	      r.scrollingPage = false;
	    }, 250 );
	  }, true );

	  // Functions to help with handling mouseout/mouseover on the Cytoscape container
	  // Handle mouseout on Cytoscape container
	  r.registerBinding( r.container, 'mouseout', function mouseOutHandler( e ){
	    var pos = r.projectIntoViewport( e.clientX, e.clientY );

	    r.cy.trigger( new Event( e, {
	      type: 'mouseout',
	      cyPosition: { x: pos[0], y: pos[1] }
	    } ) );
	  }, false );

	  r.registerBinding( r.container, 'mouseover', function mouseOverHandler( e ){
	    var pos = r.projectIntoViewport( e.clientX, e.clientY );

	    r.cy.trigger( new Event( e, {
	      type: 'mouseover',
	      cyPosition: { x: pos[0], y: pos[1] }
	    } ) );
	  }, false );

	  var f1x1, f1y1, f2x1, f2y1; // starting points for pinch-to-zoom
	  var distance1, distance1Sq; // initial distance between finger 1 and finger 2 for pinch-to-zoom
	  var center1, modelCenter1; // center point on start pinch to zoom
	  var offsetLeft, offsetTop;
	  var containerWidth, containerHeight;
	  var twoFingersStartInside;

	  var distance = function( x1, y1, x2, y2 ){
	    return Math.sqrt( (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) );
	  };

	  var distanceSq = function( x1, y1, x2, y2 ){
	    return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
	  };

	  var touchstartHandler;
	  r.registerBinding( r.container, 'touchstart', touchstartHandler = function( e ){
	    r.touchData.capture = true;
	    r.data.bgActivePosistion = undefined;

	    var cy = r.cy;
	    var now = r.touchData.now;
	    var earlier = r.touchData.earlier;

	    if( e.touches[0] ){ var pos = r.projectIntoViewport( e.touches[0].clientX, e.touches[0].clientY ); now[0] = pos[0]; now[1] = pos[1]; }
	    if( e.touches[1] ){ var pos = r.projectIntoViewport( e.touches[1].clientX, e.touches[1].clientY ); now[2] = pos[0]; now[3] = pos[1]; }
	    if( e.touches[2] ){ var pos = r.projectIntoViewport( e.touches[2].clientX, e.touches[2].clientY ); now[4] = pos[0]; now[5] = pos[1]; }

	    // record starting points for pinch-to-zoom
	    if( e.touches[1] ){

	      freeDraggedElements( r.dragData.touchDragEles );

	      var offsets = r.findContainerClientCoords();
	      offsetLeft = offsets[0];
	      offsetTop = offsets[1];
	      containerWidth = offsets[2];
	      containerHeight = offsets[3];

	      f1x1 = e.touches[0].clientX - offsetLeft;
	      f1y1 = e.touches[0].clientY - offsetTop;

	      f2x1 = e.touches[1].clientX - offsetLeft;
	      f2y1 = e.touches[1].clientY - offsetTop;

	      twoFingersStartInside =
	           0 <= f1x1 && f1x1 <= containerWidth
	        && 0 <= f2x1 && f2x1 <= containerWidth
	        && 0 <= f1y1 && f1y1 <= containerHeight
	        && 0 <= f2y1 && f2y1 <= containerHeight
	      ;

	      var pan = cy.pan();
	      var zoom = cy.zoom();

	      distance1 = distance( f1x1, f1y1, f2x1, f2y1 );
	      distance1Sq = distanceSq( f1x1, f1y1, f2x1, f2y1 );
	      center1 = [ (f1x1 + f2x1) / 2, (f1y1 + f2y1) / 2 ];
	      modelCenter1 = [
	        (center1[0] - pan.x) / zoom,
	        (center1[1] - pan.y) / zoom
	      ];

	      // consider context tap
	      var cxtDistThreshold = 200;
	      var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;
	      if( distance1Sq < cxtDistThresholdSq && !e.touches[2] ){

	        var near1 = r.findNearestElement( now[0], now[1], true, true );
	        var near2 = r.findNearestElement( now[2], now[3], true, true );

	        if( near1 && near1.isNode() ){
	          near1.activate().trigger( new Event( e, {
	            type: 'cxttapstart',
	            cyPosition: { x: now[0], y: now[1] }
	          } ) );
	          r.touchData.start = near1;

	        } else if( near2 && near2.isNode() ){
	          near2.activate().trigger( new Event( e, {
	            type: 'cxttapstart',
	            cyPosition: { x: now[0], y: now[1] }
	          } ) );
	          r.touchData.start = near2;

	        } else {
	          cy.trigger( new Event( e, {
	            type: 'cxttapstart',
	            cyPosition: { x: now[0], y: now[1] }
	          } ) );
	          r.touchData.start = null;
	        }

	        if( r.touchData.start ){ r.touchData.start._private.grabbed = false; }
	        r.touchData.cxt = true;
	        r.touchData.cxtDragged = false;
	        r.data.bgActivePosistion = undefined;

	        r.redraw();
	        return;

	      }

	    }

	    if( e.touches[2] ){

	    } else if( e.touches[1] ){

	    } else if( e.touches[0] ){
	      var nears = r.findNearestElements( now[0], now[1], true, true );
	      var near = nears[0];

	      if( near != null ){
	        near.activate();

	        r.touchData.start = near;
	        r.touchData.starts = nears;

	        if( r.nodeIsGrabbable( near ) ){

	          var draggedEles = r.dragData.touchDragEles = [];

	          r.redrawHint( 'eles', true );
	          r.redrawHint( 'drag', true );

	          if( near.selected() ){
	            // reset drag elements, since near will be added again

	            var selectedNodes = cy.$( function(){
	              return this.selected() && r.nodeIsGrabbable( this );
	            } );

	            addNodesToDrag( selectedNodes, { addToList: draggedEles } );
	          } else {
	            addNodeToDrag( near, { addToList: draggedEles } );
	          }

	          setGrabTarget( near );

	          near.trigger( new Event( e, {
	            type: 'grab',
	            cyPosition: { x: now[0], y: now[1] }
	          } ) );
	        }
	      }

	      triggerEvents( near, [ 'touchstart', 'tapstart', 'vmousedown' ], e, {
	        cyPosition: { x: now[0], y: now[1] }
	      } );

	      if( near == null ){
	        r.data.bgActivePosistion = {
	          x: pos[0],
	          y: pos[1]
	        };

	        r.redrawHint( 'select', true );
	        r.redraw();
	      }


	      // Tap, taphold
	      // -----

	      r.touchData.startPosition = [];
	      for (var i=0; i<now.length; i++) {
	        earlier[i] = now[i];
	        r.touchData.startPosition[i] = now[i];
	      }

	      r.touchData.startGPosition = [ e.touches[0].clientX, e.touches[0].clientY ];

	      r.touchData.singleTouchMoved = false;
	      r.touchData.singleTouchStartTime = +new Date();

	      clearTimeout( r.touchData.tapholdTimeout );
	      r.touchData.tapholdTimeout = setTimeout( function(){
	        if(
	            r.touchData.singleTouchMoved === false
	            && !r.pinching // if pinching, then taphold unselect shouldn't take effect
	            && !r.touchData.selecting // box selection shouldn't allow taphold through
	        ){
	          triggerEvents( r.touchData.start, [ 'taphold' ], e, {
	            cyPosition: { x: now[0], y: now[1] }
	          } );

	          if( !r.touchData.start ){
	            cy.$( ':selected' ).unselect();
	          }

	        }
	      }, r.tapholdDuration );
	    }

	  }, false );

	  var touchmoveHandler;
	  r.registerBinding(window, 'touchmove', touchmoveHandler = function(e) {
	    var select = r.selection;
	    var capture = r.touchData.capture;
	    var cy = r.cy;
	    var now = r.touchData.now;
	    var earlier = r.touchData.earlier;
	    var zoom = cy.zoom();

	    if( e.touches[0] ){ var pos = r.projectIntoViewport( e.touches[0].clientX, e.touches[0].clientY ); now[0] = pos[0]; now[1] = pos[1]; }
	    if( e.touches[1] ){ var pos = r.projectIntoViewport( e.touches[1].clientX, e.touches[1].clientY ); now[2] = pos[0]; now[3] = pos[1]; }
	    if( e.touches[2] ){ var pos = r.projectIntoViewport( e.touches[2].clientX, e.touches[2].clientY ); now[4] = pos[0]; now[5] = pos[1]; }

	    var isOverThresholdDrag;

	    if( capture && e.touches[0] ){
	      var disp = []; for (var j=0;j<now.length;j++) { disp[j] = now[j] - earlier[j]; }
	      var startGPos = r.touchData.startGPosition;
	      var dx = e.touches[0].clientX - startGPos[0];
	      var dx2 = dx * dx;
	      var dy = e.touches[0].clientY - startGPos[1];
	      var dy2 = dy * dy;
	      var dist2 = dx2 + dy2;

	      isOverThresholdDrag = dist2 >= r.touchTapThreshold2;
	    }

	    // context swipe cancelling
	    if( capture && r.touchData.cxt ){
	      e.preventDefault();

	      var f1x2 = e.touches[0].clientX - offsetLeft, f1y2 = e.touches[0].clientY - offsetTop;
	      var f2x2 = e.touches[1].clientX - offsetLeft, f2y2 = e.touches[1].clientY - offsetTop;
	      // var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );
	      var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );
	      var factorSq = distance2Sq / distance1Sq;

	      var distThreshold = 150;
	      var distThresholdSq = distThreshold * distThreshold;
	      var factorThreshold = 1.5;
	      var factorThresholdSq = factorThreshold * factorThreshold;

	      // cancel ctx gestures if the distance b/t the fingers increases
	      if( factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq ){
	        r.touchData.cxt = false;
	        if( r.touchData.start ){ r.touchData.start.unactivate(); r.touchData.start = null; }
	        r.data.bgActivePosistion = undefined;
	        r.redrawHint( 'select', true );

	        var cxtEvt = new Event( e, {
	          type: 'cxttapend',
	          cyPosition: { x: now[0], y: now[1] }
	        } );
	        if( r.touchData.start ){
	          r.touchData.start.trigger( cxtEvt );
	        } else {
	          cy.trigger( cxtEvt );
	        }
	      }

	    }

	    // context swipe
	    if( capture && r.touchData.cxt ){
	      var cxtEvt = new Event( e, {
	        type: 'cxtdrag',
	        cyPosition: { x: now[0], y: now[1] }
	      } );
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint( 'select', true );

	      if( r.touchData.start ){
	        r.touchData.start.trigger( cxtEvt );
	      } else {
	        cy.trigger( cxtEvt );
	      }

	      if( r.touchData.start ){ r.touchData.start._private.grabbed = false; }
	      r.touchData.cxtDragged = true;

	      var near = r.findNearestElement( now[0], now[1], true, true );

	      if( !r.touchData.cxtOver || near !== r.touchData.cxtOver ){

	        if( r.touchData.cxtOver ){
	          r.touchData.cxtOver.trigger( new Event( e, {
	            type: 'cxtdragout',
	            cyPosition: { x: now[0], y: now[1] }
	          } ) );
	        }

	        r.touchData.cxtOver = near;

	        if( near ){
	          near.trigger( new Event( e, {
	            type: 'cxtdragover',
	            cyPosition: { x: now[0], y: now[1] }
	          } ) );

	        }

	      }

	    // box selection
	    } else if( capture && e.touches[2] && cy.boxSelectionEnabled() ){
	      e.preventDefault();

	      r.data.bgActivePosistion = undefined;

	      this.lastThreeTouch = +new Date();

	      if( !r.touchData.selecting ){
	        cy.trigger('boxstart');
	      }

	      r.touchData.selecting = true;

	      r.redrawHint( 'select', true );

	      if( !select || select.length === 0 || select[0] === undefined ){
	        select[0] = (now[0] + now[2] + now[4]) / 3;
	        select[1] = (now[1] + now[3] + now[5]) / 3;
	        select[2] = (now[0] + now[2] + now[4]) / 3 + 1;
	        select[3] = (now[1] + now[3] + now[5]) / 3 + 1;
	      } else {
	        select[2] = (now[0] + now[2] + now[4]) / 3;
	        select[3] = (now[1] + now[3] + now[5]) / 3;
	      }

	      select[4] = 1;
	      r.touchData.selecting = true;

	      r.redraw();

	    // pinch to zoom
	    } else if( capture && e.touches[1] && cy.zoomingEnabled() && cy.panningEnabled() && cy.userZoomingEnabled() && cy.userPanningEnabled() ){ // two fingers => pinch to zoom
	      e.preventDefault();

	      r.data.bgActivePosistion = undefined;
	      r.redrawHint( 'select', true );

	      var draggedEles = r.dragData.touchDragEles;
	      if( draggedEles ){
	        r.redrawHint( 'drag', true );

	        for( var i = 0; i < draggedEles.length; i++ ){
	          draggedEles[ i ]._private.grabbed = false;
	          draggedEles[ i ]._private.rscratch.inDragLayer = false;
	        }
	      }

	      // (x2, y2) for fingers 1 and 2
	      var f1x2 = e.touches[0].clientX - offsetLeft, f1y2 = e.touches[0].clientY - offsetTop;
	      var f2x2 = e.touches[1].clientX - offsetLeft, f2y2 = e.touches[1].clientY - offsetTop;


	      var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );
	      // var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );
	      // var factor = Math.sqrt( distance2Sq ) / Math.sqrt( distance1Sq );
	      var factor = distance2 / distance1;

	      if( factor != 1 && twoFingersStartInside ){
	        // delta finger1
	        var df1x = f1x2 - f1x1;
	        var df1y = f1y2 - f1y1;

	        // delta finger 2
	        var df2x = f2x2 - f2x1;
	        var df2y = f2y2 - f2y1;

	        // translation is the normalised vector of the two fingers movement
	        // i.e. so pinching cancels out and moving together pans
	        var tx = (df1x + df2x) / 2;
	        var ty = (df1y + df2y) / 2;

	        // adjust factor by the speed multiplier
	        // var speed = 1.5;
	        // if( factor > 1 ){
	        //   factor = (factor - 1) * speed + 1;
	        // } else {
	        //   factor = 1 - (1 - factor) * speed;
	        // }

	        // now calculate the zoom
	        var zoom1 = cy.zoom();
	        var zoom2 = zoom1 * factor;
	        var pan1 = cy.pan();

	        // the model center point converted to the current rendered pos
	        var ctrx = modelCenter1[0] * zoom1 + pan1.x;
	        var ctry = modelCenter1[1] * zoom1 + pan1.y;

	        var pan2 = {
	          x: -zoom2 / zoom1 * (ctrx - pan1.x - tx) + ctrx,
	          y: -zoom2 / zoom1 * (ctry - pan1.y - ty) + ctry
	        };

	        // remove dragged eles
	        if( r.touchData.start ){
	          var draggedEles = r.dragData.touchDragEles;

	          freeDraggedElements( draggedEles );

	          r.redrawHint( 'drag', true );
	          r.redrawHint( 'eles', true );

	          r.touchData.start
	            .trigger( 'free' )
	            .unactivate()
	          ;
	        }

	        cy.viewport( {
	          zoom: zoom2,
	          pan: pan2,
	          cancelOnFailedZoom: true
	        } );

	        distance1 = distance2;
	        f1x1 = f1x2;
	        f1y1 = f1y2;
	        f2x1 = f2x2;
	        f2y1 = f2y2;

	        r.pinching = true;
	      }

	      // Re-project
	      if( e.touches[0] ){ var pos = r.projectIntoViewport( e.touches[0].clientX, e.touches[0].clientY ); now[0] = pos[0]; now[1] = pos[1]; }
	      if( e.touches[1] ){ var pos = r.projectIntoViewport( e.touches[1].clientX, e.touches[1].clientY ); now[2] = pos[0]; now[3] = pos[1]; }
	      if( e.touches[2] ){ var pos = r.projectIntoViewport( e.touches[2].clientX, e.touches[2].clientY ); now[4] = pos[0]; now[5] = pos[1]; }

	    } else if( e.touches[0] ){
	      var start = r.touchData.start;
	      var last = r.touchData.last;
	      var near;

	      if( !r.hoverData.draggingEles && !r.swipePanning ){
	        near = r.findNearestElement( now[0], now[1], true, true );
	      }

	      if( capture && start != null ){
	        e.preventDefault();
	      }

	      // dragging nodes
	      if( capture && start != null && r.nodeIsDraggable( start ) ){

	        if( isOverThresholdDrag ){ // then dragging can happen
	          var draggedEles = r.dragData.touchDragEles;
	          var justStartedDrag = !r.dragData.didDrag;

	          if( justStartedDrag ){
	            addNodesToDrag( cy.collection( draggedEles ), { inDragLayer: true } );
	          }

	          for( var k = 0; k < draggedEles.length; k++ ){
	            var draggedEle = draggedEles[ k ];

	            if( r.nodeIsDraggable( draggedEle ) && draggedEle.grabbed() ){
	              r.dragData.didDrag = true;
	              var dPos = draggedEle._private.position;
	              var updatePos = !draggedEle.isParent();

	              if( updatePos && is.number( disp[0] ) && is.number( disp[1] ) ){
	                dPos.x += disp[0];
	                dPos.y += disp[1];
	              }

	              if( justStartedDrag ){
	                r.redrawHint( 'eles', true );

	                var dragDelta = r.touchData.dragDelta;

	                if( updatePos && dragDelta && is.number( dragDelta[0] ) && is.number( dragDelta[1] ) ){
	                  dPos.x += dragDelta[0];
	                  dPos.y += dragDelta[1];
	                }

	              }
	            }
	          }

	          var tcol = cy.collection( draggedEles );

	          tcol.updateCompoundBounds();
	          tcol.trigger( 'position drag' );

	          r.hoverData.draggingEles = true;

	          r.redrawHint( 'drag', true );

	          if(
	               r.touchData.startPosition[0] == earlier[0]
	            && r.touchData.startPosition[1] == earlier[1]
	          ){

	            r.redrawHint( 'eles', true );
	          }

	          r.redraw();
	        } else { // otherise keep track of drag delta for later
	          var dragDelta = r.touchData.dragDelta = r.touchData.dragDelta || [];

	          if( dragDelta.length === 0 ){
	            dragDelta.push( disp[0] );
	            dragDelta.push( disp[1] );
	          } else {
	            dragDelta[0] += disp[0];
	            dragDelta[1] += disp[1];
	          }
	        }
	      }

	      // touchmove
	      {
	        triggerEvents( (start || near), [ 'touchmove', 'tapdrag', 'vmousemove' ], e, {
	          cyPosition: { x: now[0], y: now[1] }
	        } );

	        if( ( !start || !start.grabbed() ) && near != last ){
	          if( last ){ last.trigger( new Event( e, { type: 'tapdragout', cyPosition: { x: now[0], y: now[1] } } ) ); }
	          if( near ){ near.trigger( new Event( e, { type: 'tapdragover', cyPosition: { x: now[0], y: now[1] } } ) ); }
	        }

	        r.touchData.last = near;
	      }

	      // check to cancel taphold
	      if( capture ){
	        for( var i = 0; i < now.length; i++ ){
	          if( now[ i ]
	            && r.touchData.startPosition[ i ]
	            && isOverThresholdDrag ){

	            r.touchData.singleTouchMoved = true;
	          }
	        }
	      }

	      // panning
	      if(
	          capture
	          && ( start == null || start.isEdge() )
	          && cy.panningEnabled() && cy.userPanningEnabled()
	      ){

	        var allowPassthrough = allowPanningPassthrough( start, r.touchData.starts );

	        if( allowPassthrough ){
	          e.preventDefault();

	          if( r.swipePanning ){
	            cy.panBy( {
	              x: disp[0] * zoom,
	              y: disp[1] * zoom
	            } );

	          } else if( isOverThresholdDrag ){
	            r.swipePanning = true;

	            cy.panBy( {
	              x: dx * zoom,
	              y: dy * zoom
	            } );

	            if( start ){
	              start.unactivate();

	              if( !r.data.bgActivePosistion ){
	                r.data.bgActivePosistion = math.array2point( r.touchData.startPosition );
	              }

	              r.redrawHint( 'select', true );

	              r.touchData.start = null;
	            }
	          }

	        }

	        // Re-project
	        var pos = r.projectIntoViewport( e.touches[0].clientX, e.touches[0].clientY );
	        now[0] = pos[0]; now[1] = pos[1];
	      }
	    }

	    for( var j = 0; j < now.length; j++ ){ earlier[ j ] = now[ j ]; }
	    //r.redraw();

	  }, false );

	  var touchcancelHandler;
	  r.registerBinding( window, 'touchcancel', touchcancelHandler = function( e ){
	    var start = r.touchData.start;

	    r.touchData.capture = false;

	    if( start ){
	      start.unactivate();
	    }
	  } );

	  var touchendHandler;
	  r.registerBinding( window, 'touchend', touchendHandler = function( e ){
	    var start = r.touchData.start;

	    var capture = r.touchData.capture;

	    if( capture ){
	      r.touchData.capture = false;

	      e.preventDefault();
	    } else {
	      return;
	    }

	    var select = r.selection;

	    r.swipePanning = false;
	    r.hoverData.draggingEles = false;

	    var cy = r.cy;
	    var zoom = cy.zoom();
	    var now = r.touchData.now;
	    var earlier = r.touchData.earlier;

	    if( e.touches[0] ){ var pos = r.projectIntoViewport( e.touches[0].clientX, e.touches[0].clientY ); now[0] = pos[0]; now[1] = pos[1]; }
	    if( e.touches[1] ){ var pos = r.projectIntoViewport( e.touches[1].clientX, e.touches[1].clientY ); now[2] = pos[0]; now[3] = pos[1]; }
	    if( e.touches[2] ){ var pos = r.projectIntoViewport( e.touches[2].clientX, e.touches[2].clientY ); now[4] = pos[0]; now[5] = pos[1]; }

	    if( start ){
	      start.unactivate();
	    }

	    var ctxTapend;
	    if( r.touchData.cxt ){
	      ctxTapend = new Event( e, {
	        type: 'cxttapend',
	        cyPosition: { x: now[0], y: now[1] }
	      } );

	      if( start ){
	        start.trigger( ctxTapend );
	      } else {
	        cy.trigger( ctxTapend );
	      }

	      if( !r.touchData.cxtDragged ){
	        var ctxTap = new Event( e, {
	          type: 'cxttap',
	          cyPosition: { x: now[0], y: now[1] }
	        } );

	        if( start ){
	          start.trigger( ctxTap );
	        } else {
	          cy.trigger( ctxTap );
	        }

	      }

	      if( r.touchData.start ){ r.touchData.start._private.grabbed = false; }
	      r.touchData.cxt = false;
	      r.touchData.start = null;

	      r.redraw();
	      return;
	    }

	    // no more box selection if we don't have three fingers
	    if( !e.touches[2] && cy.boxSelectionEnabled() && r.touchData.selecting ){
	      r.touchData.selecting = false;

	      var box = cy.collection( r.getAllInBox( select[0], select[1], select[2], select[3] ) );

	      select[0] = undefined;
	      select[1] = undefined;
	      select[2] = undefined;
	      select[3] = undefined;
	      select[4] = 0;

	      r.redrawHint( 'select', true );

	      cy.trigger('boxend');

	      var eleWouldBeSelected = function( ele ){ return ele.selectable() && !ele.selected(); };

	      box
	        .trigger('box')
	        .stdFilter( eleWouldBeSelected )
	          .select()
	          .trigger('boxselect')
	      ;

	      if( box.nonempty() ){
	        r.redrawHint( 'eles', true );
	      }

	      r.redraw();
	    }

	    if( start != null ){
	      start.unactivate();
	    }

	    if( e.touches[2] ){
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint( 'select', true );
	    } else if( e.touches[1] ){

	    } else if( e.touches[0] ){

	    // Last touch released
	    } else if( !e.touches[0] ){

	      r.data.bgActivePosistion = undefined;
	      r.redrawHint( 'select', true );

	      var draggedEles = r.dragData.touchDragEles;

	      if( start != null ){

	        var startWasGrabbed = start._private.grabbed;

	        freeDraggedElements( draggedEles );

	        r.redrawHint( 'drag', true );
	        r.redrawHint( 'eles', true );

	        if( startWasGrabbed ){
	          start.trigger( 'free' );
	        }

	        triggerEvents( start, [ 'touchend', 'tapend', 'vmouseup', 'tapdragout' ], e, {
	          cyPosition: { x: now[0], y: now[1] }
	        } );

	        start.unactivate();

	        r.touchData.start = null;

	      } else {
	        var near = r.findNearestElement( now[0], now[1], true, true );

	        triggerEvents( near, [ 'touchend', 'tapend', 'vmouseup', 'tapdragout' ], e, {
	          cyPosition: { x: now[0], y: now[1] }
	        } );

	      }

	      var dx = r.touchData.startPosition[0] - now[0];
	      var dx2 = dx * dx;
	      var dy = r.touchData.startPosition[1] - now[1];
	      var dy2 = dy * dy;
	      var dist2 = dx2 + dy2;
	      var rdist2 = dist2 * zoom * zoom;

	      // Prepare to select the currently touched node, only if it hasn't been dragged past a certain distance
	      if( start != null
	          && !r.dragData.didDrag // didn't drag nodes around
	          && start._private.selectable
	          && rdist2 < r.touchTapThreshold2
	          && !r.pinching // pinch to zoom should not affect selection
	      ){

	        if( cy.selectionType() === 'single' ){
	          cy.$( ':selected' ).unmerge( start ).unselect();
	          start.select();
	        } else {
	          if( start.selected() ){
	            start.unselect();
	          } else {
	            start.select();
	          }
	        }

	        r.redrawHint( 'eles', true );
	      }

	      // Tap event, roughly same as mouse click event for touch
	      if( !r.touchData.singleTouchMoved ){
	        triggerEvents( start, [ 'tap', 'vclick' ], e, {
	          cyPosition: { x: now[0], y: now[1] }
	        } );
	      }

	      r.touchData.singleTouchMoved = true;
	    }

	    for( var j = 0; j < now.length; j++ ){ earlier[ j ] = now[ j ]; }

	    r.dragData.didDrag = false; // reset for next mousedown

	    if( e.touches.length === 0 ){
	      r.touchData.dragDelta = [];
	      r.touchData.startPosition = null;
	      r.touchData.startGPosition = null;
	    }

	    if( e.touches.length < 2 ){
	      r.pinching = false;
	      r.redrawHint( 'eles', true );
	      r.redraw();
	    }

	    //r.redraw();

	  }, false );

	  // fallback compatibility layer for ms pointer events
	  if( typeof TouchEvent === 'undefined' ){

	    var pointers = [];

	    var makeTouch = function( e ){
	      return {
	        clientX: e.clientX,
	        clientY: e.clientY,
	        force: 1,
	        identifier: e.pointerId,
	        pageX: e.pageX,
	        pageY: e.pageY,
	        radiusX: e.width / 2,
	        radiusY: e.height / 2,
	        screenX: e.screenX,
	        screenY: e.screenY,
	        target: e.target
	      };
	    };

	    var makePointer = function( e ){
	      return {
	        event: e,
	        touch: makeTouch( e )
	      };
	    };

	    var addPointer = function( e ){
	      pointers.push( makePointer( e ) );
	    };

	    var removePointer = function( e ){
	      for( var i = 0; i < pointers.length; i++ ){
	        var p = pointers[ i ];

	        if( p.event.pointerId === e.pointerId ){
	          pointers.splice( i, 1 );
	          return;
	        }
	      }
	    };

	    var updatePointer = function( e ){
	      var p = pointers.filter( function( p ){
	        return p.event.pointerId === e.pointerId;
	      } )[0];

	      p.event = e;
	      p.touch = makeTouch( e );
	    };

	    var addTouchesToEvent = function( e ){
	      e.touches = pointers.map( function( p ){
	        return p.touch;
	      } );
	    };

	    r.registerBinding( r.container, 'pointerdown', function( e ){
	      if( e.pointerType === 'mouse' ){ return; } // mouse already handled

	      e.preventDefault();

	      addPointer( e );

	      addTouchesToEvent( e );
	      touchstartHandler( e );
	    } );

	    r.registerBinding( r.container, 'pointerup', function( e ){
	      if( e.pointerType === 'mouse' ){ return; } // mouse already handled

	      removePointer( e );

	      addTouchesToEvent( e );
	      touchendHandler( e );
	    } );

	    r.registerBinding( r.container, 'pointercancel', function( e ){
	      if( e.pointerType === 'mouse' ){ return; } // mouse already handled

	      removePointer( e );

	      addTouchesToEvent( e );
	      touchcancelHandler( e );
	    } );

	    r.registerBinding( r.container, 'pointermove', function( e ){
	      if( e.pointerType === 'mouse' ){ return; } // mouse already handled

	      e.preventDefault();

	      updatePointer( e );

	      addTouchesToEvent( e );
	      touchmoveHandler( e );
	    } );

	  }
	};

	module.exports = BRp;


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var math = __webpack_require__( 76 );

	var BRp = {};

	BRp.registerNodeShapes = function(){
	  var nodeShapes = this.nodeShapes = {};
	  var renderer = this;

	  nodeShapes[ 'ellipse' ] = {
	    name: 'ellipse',

	    draw: function( context, centerX, centerY, width, height ){
	      renderer.nodeShapeImpl( this.name )( context, centerX, centerY, width, height );
	    },

	    intersectLine: function( nodeX, nodeY, width, height, x, y, padding ){
	      return math.intersectLineEllipse(
	        x, y,
	        nodeX,
	        nodeY,
	        width / 2 + padding,
	        height / 2 + padding )
	      ;
	    },

	    checkPoint: function( x, y, padding, width, height, centerX, centerY ){
	      x -= centerX;
	      y -= centerY;

	      x /= (width / 2 + padding);
	      y /= (height / 2 + padding);

	      return x * x + y * y <= 1;
	    }
	  };

	  function generatePolygon( name, points ){
	    return ( nodeShapes[ name ] = {
	      name: name,

	      points: points,

	      draw: function( context, centerX, centerY, width, height ){
	        renderer.nodeShapeImpl( 'polygon' )( context, centerX, centerY, width, height, this.points );
	      },

	      intersectLine: function( nodeX, nodeY, width, height, x, y, padding ){
	        return math.polygonIntersectLine(
	            x, y,
	            this.points,
	            nodeX,
	            nodeY,
	            width / 2, height / 2,
	            padding )
	          ;
	      },

	      checkPoint: function( x, y, padding, width, height, centerX, centerY ){
	        return math.pointInsidePolygon( x, y, nodeShapes[ name ].points,
	          centerX, centerY, width, height, [0, -1], padding )
	        ;
	      }
	    } );
	  }

	  generatePolygon( 'triangle', math.generateUnitNgonPointsFitToSquare( 3, 0 ) );

	  generatePolygon( 'square', math.generateUnitNgonPointsFitToSquare( 4, 0 ) );
	  nodeShapes[ 'rectangle' ] = nodeShapes[ 'square' ];

	  nodeShapes[ 'roundrectangle' ] = {
	    name: 'roundrectangle',

	    points: math.generateUnitNgonPointsFitToSquare( 4, 0 ),

	    draw: function( context, centerX, centerY, width, height ){
	      renderer.nodeShapeImpl( this.name )( context, centerX, centerY, width, height );
	    },

	    intersectLine: function( nodeX, nodeY, width, height, x, y, padding ){
	      return math.roundRectangleIntersectLine(
	        x, y,
	        nodeX,
	        nodeY,
	        width, height,
	        padding )
	      ;
	    },

	    // Looks like the width passed into this function is actually the total width / 2
	    checkPoint: function(
	      x, y, padding, width, height, centerX, centerY ){

	      var cornerRadius = math.getRoundRectangleRadius( width, height );

	      // Check hBox
	      if( math.pointInsidePolygon( x, y, this.points,
	        centerX, centerY, width, height - 2 * cornerRadius, [0, -1], padding ) ){
	        return true;
	      }

	      // Check vBox
	      if( math.pointInsidePolygon( x, y, this.points,
	        centerX, centerY, width - 2 * cornerRadius, height, [0, -1], padding ) ){
	        return true;
	      }

	      var checkInEllipse = function( x, y, centerX, centerY, width, height, padding ){
	        x -= centerX;
	        y -= centerY;

	        x /= (width / 2 + padding);
	        y /= (height / 2 + padding);

	        return (x * x + y * y <= 1);
	      };


	      // Check top left quarter circle
	      if( checkInEllipse( x, y,
	        centerX - width / 2 + cornerRadius,
	        centerY - height / 2 + cornerRadius,
	        cornerRadius * 2, cornerRadius * 2, padding ) ){

	        return true;
	      }

	      // Check top right quarter circle
	      if( checkInEllipse( x, y,
	        centerX + width / 2 - cornerRadius,
	        centerY - height / 2 + cornerRadius,
	        cornerRadius * 2, cornerRadius * 2, padding ) ){

	        return true;
	      }

	      // Check bottom right quarter circle
	      if( checkInEllipse( x, y,
	        centerX + width / 2 - cornerRadius,
	        centerY + height / 2 - cornerRadius,
	        cornerRadius * 2, cornerRadius * 2, padding ) ){

	        return true;
	      }

	      // Check bottom left quarter circle
	      if( checkInEllipse( x, y,
	        centerX - width / 2 + cornerRadius,
	        centerY + height / 2 - cornerRadius,
	        cornerRadius * 2, cornerRadius * 2, padding ) ){

	        return true;
	      }

	      return false;
	    }
	  };

	  generatePolygon( 'diamond', [
	    0, 1,
	    1, 0,
	    0, -1,
	    -1, 0
	  ] );

	  generatePolygon( 'pentagon', math.generateUnitNgonPointsFitToSquare( 5, 0 ) );

	  generatePolygon( 'hexagon', math.generateUnitNgonPointsFitToSquare( 6, 0 ) );

	  generatePolygon( 'heptagon', math.generateUnitNgonPointsFitToSquare( 7, 0 ) );

	  generatePolygon( 'octagon', math.generateUnitNgonPointsFitToSquare( 8, 0 ) );

	  var star5Points = new Array( 20 );
	  {
	    var outerPoints = math.generateUnitNgonPoints( 5, 0 );
	    var innerPoints = math.generateUnitNgonPoints( 5, Math.PI / 5 );

	    // Outer radius is 1; inner radius of star is smaller
	    var innerRadius = 0.5 * (3 - Math.sqrt( 5 ));
	    innerRadius *= 1.57;

	    for( var i = 0;i < innerPoints.length / 2;i++ ){
	      innerPoints[ i * 2] *= innerRadius;
	      innerPoints[ i * 2 + 1] *= innerRadius;
	    }

	    for( var i = 0;i < 20 / 4;i++ ){
	      star5Points[ i * 4] = outerPoints[ i * 2];
	      star5Points[ i * 4 + 1] = outerPoints[ i * 2 + 1];

	      star5Points[ i * 4 + 2] = innerPoints[ i * 2];
	      star5Points[ i * 4 + 3] = innerPoints[ i * 2 + 1];
	    }
	  }

	  star5Points = math.fitPolygonToSquare( star5Points );

	  generatePolygon( 'star', star5Points );

	  generatePolygon( 'vee', [
	    -1, -1,
	    0, -0.333,
	    1, -1,
	    0, 1
	  ] );

	  generatePolygon( 'rhomboid', [
	    -1, -1,
	    0.333, -1,
	    1, 1,
	    -0.333, 1
	  ] );

	  nodeShapes.makePolygon = function( points ){

	    // use caching on user-specified polygons so they are as fast as native shapes

	    var key = points.join( '$' );
	    var name = 'polygon-' + key;
	    var shape;

	    if( (shape = nodeShapes[ name ]) ){ // got cached shape
	      return shape;
	    }

	    // create and cache new shape
	    return generatePolygon( name, points );
	  };

	};

	module.exports = BRp;


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );

	var BRp = {};

	BRp.timeToRender = function(){
	  return this.redrawTotalTime / this.redrawCount;
	};

	BRp.redraw = function( options ){
	  options = options || util.staticEmptyObject();

	  var r = this;

	  if( r.averageRedrawTime === undefined ){ r.averageRedrawTime = 0; }
	  if( r.lastRedrawTime === undefined ){ r.lastRedrawTime = 0; }
	  if( r.lastDrawTime === undefined ){ r.lastDrawTime = 0; }

	  r.requestedFrame = true;
	  r.renderOptions = options;
	};

	BRp.beforeRender = function( fn, priority ){
	  priority = priority || 0;

	  var cbs = this.beforeRenderCallbacks;

	  cbs.push({ fn: fn, priority: priority });

	  // higher priority callbacks executed first
	  cbs.sort(function( a, b ){ return b.priority - a.priority; });
	};

	BRp.startRenderLoop = function(){
	  var r = this;

	  if( r.renderLoopStarted ){
	    return;
	  } else {
	    r.renderLoopStarted = true;
	  }

	  var beforeRenderCallbacks = function( willDraw, startTime ){
	    var cbs = r.beforeRenderCallbacks;

	    for( var i = 0; i < cbs.length; i++ ){
	      cbs[i].fn( willDraw, startTime );
	    }
	  };

	  var renderFn = function( requestTime ){
	    if( r.destroyed ){ return; }

	    if( r.requestedFrame && !r.skipFrame ){
	      beforeRenderCallbacks( true, requestTime );

	      var startTime = util.performanceNow();

	      r.render( r.renderOptions );

	      var endTime = r.lastDrawTime = util.performanceNow();

	      if( r.averageRedrawTime === undefined ){
	        r.averageRedrawTime = endTime - startTime;
	      }

	      if( r.redrawCount === undefined ){
	        r.redrawCount = 0;
	      }

	      r.redrawCount++;

	      if( r.redrawTotalTime === undefined ){
	        r.redrawTotalTime = 0;
	      }

	      var duration = endTime - startTime;

	      r.redrawTotalTime += duration;
	      r.lastRedrawTime = duration;

	      // use a weighted average with a bias from the previous average so we don't spike so easily
	      r.averageRedrawTime = r.averageRedrawTime / 2 + duration / 2;

	      r.requestedFrame = false;
	    } else {
	      beforeRenderCallbacks( false, requestTime );
	    }

	    r.skipFrame = false;

	    util.requestAnimationFrame( renderFn );
	  };

	  util.requestAnimationFrame( renderFn );

	};

	module.exports = BRp;


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/*
	The canvas renderer was written by Yue Dong.

	Modifications tracked on Github.
	*/

	'use strict';

	var util = __webpack_require__( 75 );
	var is = __webpack_require__( 73 );
	var ElementTextureCache = __webpack_require__(162);
	var LayeredTextureCache = __webpack_require__(164);

	var CR = CanvasRenderer;
	var CRp = CanvasRenderer.prototype;

	CRp.CANVAS_LAYERS = 3;
	//
	CRp.SELECT_BOX = 0;
	CRp.DRAG = 1;
	CRp.NODE = 2;

	CRp.BUFFER_COUNT = 3;
	//
	CRp.TEXTURE_BUFFER = 0;
	CRp.MOTIONBLUR_BUFFER_NODE = 1;
	CRp.MOTIONBLUR_BUFFER_DRAG = 2;

	function CanvasRenderer( options ){
	  var r = this;

	  r.data = {
	    canvases: new Array( CRp.CANVAS_LAYERS ),
	    contexts: new Array( CRp.CANVAS_LAYERS ),
	    canvasNeedsRedraw: new Array( CRp.CANVAS_LAYERS ),

	    bufferCanvases: new Array( CRp.BUFFER_COUNT ),
	    bufferContexts: new Array( CRp.CANVAS_LAYERS ),
	  };

	  r.data.canvasContainer = document.createElement( 'div' );
	  var containerStyle = r.data.canvasContainer.style;
	  r.data.canvasContainer.setAttribute( 'style', '-webkit-tap-highlight-color: rgba(0,0,0,0);' );
	  containerStyle.position = 'relative';
	  containerStyle.zIndex = '0';
	  containerStyle.overflow = 'hidden';

	  var container = options.cy.container();
	  container.appendChild( r.data.canvasContainer );
	  container.setAttribute( 'style', ( container.getAttribute( 'style' ) || '' ) + '-webkit-tap-highlight-color: rgba(0,0,0,0);' );

	  for( var i = 0; i < CRp.CANVAS_LAYERS; i++ ){
	    var canvas = r.data.canvases[ i ] = document.createElement( 'canvas' );
	    r.data.contexts[ i ] = canvas.getContext( '2d' );
	    canvas.setAttribute( 'style', '-webkit-user-select: none; -moz-user-select: -moz-none; user-select: none; -webkit-tap-highlight-color: rgba(0,0,0,0); outline-style: none;' + ( is.ms() ? ' -ms-touch-action: none; touch-action: none; ' : '' ) );
	    canvas.style.position = 'absolute';
	    canvas.setAttribute( 'data-id', 'layer' + i );
	    canvas.style.zIndex = String( CRp.CANVAS_LAYERS - i );
	    r.data.canvasContainer.appendChild( canvas );

	    r.data.canvasNeedsRedraw[ i ] = false;
	  }
	  r.data.topCanvas = r.data.canvases[0];

	  r.data.canvases[ CRp.NODE ].setAttribute( 'data-id', 'layer' + CRp.NODE + '-node' );
	  r.data.canvases[ CRp.SELECT_BOX ].setAttribute( 'data-id', 'layer' + CRp.SELECT_BOX + '-selectbox' );
	  r.data.canvases[ CRp.DRAG ].setAttribute( 'data-id', 'layer' + CRp.DRAG + '-drag' );

	  for( var i = 0; i < CRp.BUFFER_COUNT; i++ ){
	    r.data.bufferCanvases[ i ] = document.createElement( 'canvas' );
	    r.data.bufferContexts[ i ] = r.data.bufferCanvases[ i ].getContext( '2d' );
	    r.data.bufferCanvases[ i ].style.position = 'absolute';
	    r.data.bufferCanvases[ i ].setAttribute( 'data-id', 'buffer' + i );
	    r.data.bufferCanvases[ i ].style.zIndex = String( -i - 1 );
	    r.data.bufferCanvases[ i ].style.visibility = 'hidden';
	    //r.data.canvasContainer.appendChild(r.data.bufferCanvases[i]);
	  }

	  r.pathsEnabled = true;

	  r.data.eleTxrCache = new ElementTextureCache( r );
	  r.data.lyrTxrCache = new LayeredTextureCache( r, r.data.eleTxrCache );

	  r.onUpdateEleCalcs(function invalidateTextureCaches( willDraw, eles ){
	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      var rs = ele._private.rstyle;
	      var de = rs.dirtyEvents;

	      if( ele.isNode() && de && de.length === 1 && de['position'] ){
	        // then keep cached ele texture
	      } else {
	        r.data.eleTxrCache.invalidateElement( ele );
	      }
	    }

	    if( eles.length > 0 ){
	      r.data.lyrTxrCache.invalidateElements( eles );
	    }
	  });
	}

	CRp.redrawHint = function( group, bool ){
	  var r = this;

	  switch( group ){
	    case 'eles':
	      r.data.canvasNeedsRedraw[ CRp.NODE ] = bool;
	      break;
	    case 'drag':
	      r.data.canvasNeedsRedraw[ CRp.DRAG ] = bool;
	      break;
	    case 'select':
	      r.data.canvasNeedsRedraw[ CRp.SELECT_BOX ] = bool;
	      break;
	  }
	};

	// whether to use Path2D caching for drawing
	var pathsImpld = typeof Path2D !== 'undefined';

	CRp.path2dEnabled = function( on ){
	  if( on === undefined ){
	    return this.pathsEnabled;
	  }

	  this.pathsEnabled = on ? true : false;
	};

	CRp.usePaths = function(){
	  return pathsImpld && this.pathsEnabled;
	};

	[
	  __webpack_require__( 165 ),
	  __webpack_require__( 166 ),
	  __webpack_require__( 167 ),
	  __webpack_require__( 168 ),
	  __webpack_require__( 169 ),
	  __webpack_require__( 170 ),
	  __webpack_require__( 171 ),
	  __webpack_require__( 172 ),
	  __webpack_require__( 173 ),
	  __webpack_require__( 174 )
	].forEach( function( props ){
	  util.extend( CRp, props );
	} );

	module.exports = CR;


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var math = __webpack_require__( 76 );
	var util = __webpack_require__( 75 );
	var Heap = __webpack_require__( 88 );
	var defs = __webpack_require__( 163 );

	var minTxrH = 25; // the size of the texture cache for small height eles (special case)
	var txrStepH = 50; // the min size of the regular cache, and the size it increases with each step up
	var minLvl = -4; // when scaling smaller than that we don't need to re-render
	var maxLvl = 2; // when larger than this scale just render directly (caching is not helpful)
	var maxZoom = 3.99; // beyond this zoom level, layered textures are not used
	var eleTxrSpacing = 8; // spacing between elements on textures to avoid blitting overlaps
	var defTxrWidth = 1024; // default/minimum texture width
	var maxTxrW = 1024; // the maximum width of a texture
	var maxTxrH = 1024;  // the maximum height of a texture
	var minUtility = 0.5; // if usage of texture is less than this, it is retired
	var maxFullness = 0.8; // fullness of texture after which queue removal is checked
	var maxFullnessChecks = 10; // dequeued after this many checks
	var allowEdgeTxrCaching = false; // whether edges can be cached as textures (TODO maybe better on if webgl supported?)
	var allowParentTxrCaching = false; // whether parent nodes can be cached as textures (TODO maybe better on if webgl supported?)
	var deqCost = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame
	var deqAvgCost = 0.1; // % of add'l rendering cost compared to average overall redraw time
	var deqNoDrawCost = 0.9; // % of avg frame time that can be used for dequeueing when not drawing
	var deqFastCost = 0.9; // % of frame time to be used when >60fps
	var deqRedrawThreshold = 100; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile
	var maxDeqSize = 1; // number of eles to dequeue and render at higher texture in each batch

	var getTxrReasons = {
	  dequeue: 'dequeue',
	  downscale: 'downscale',
	  highQuality: 'highQuality'
	};

	var ElementTextureCache = function( renderer ){
	  var self = this;

	  self.renderer = renderer;
	  self.onDequeues = [];

	  self.setupDequeueing();
	};

	var ETCp = ElementTextureCache.prototype;

	ETCp.reasons = getTxrReasons;

	// the list of textures in which new subtextures for elements can be placed
	ETCp.getTextureQueue = function( txrH ){
	  var self = this;
	  self.eleImgCaches = self.eleImgCaches || {};

	  return ( self.eleImgCaches[ txrH ] = self.eleImgCaches[ txrH ] || [] );
	};

	// the list of usused textures which can be recycled (in use in texture queue)
	ETCp.getRetiredTextureQueue = function( txrH ){
	  var self = this;

	  var rtxtrQs = self.eleImgCaches.retired = self.eleImgCaches.retired || {};
	  var rtxtrQ = rtxtrQs[ txrH ] = rtxtrQs[ txrH ] || [];

	  return rtxtrQ;
	};

	// queue of element draw requests at different scale levels
	ETCp.getElementQueue = function(){
	  var self = this;

	  var q = self.eleCacheQueue = self.eleCacheQueue || new Heap(function( a, b ){
	    return b.reqs - a.reqs;
	  });

	  return q;
	};

	// queue of element draw requests at different scale levels (element id lookup)
	ETCp.getElementIdToQueue = function(){
	  var self = this;

	  var id2q = self.eleIdToCacheQueue = self.eleIdToCacheQueue || {};

	  return id2q;
	};

	ETCp.getElement = function( ele, bb, pxRatio, lvl, reason ){
	  var self = this;
	  var r = this.renderer;
	  var rs = ele._private.rscratch;
	  var zoom = r.cy.zoom();

	  if( lvl == null ){
	    lvl = Math.ceil( math.log2( zoom * pxRatio ) );
	  }

	  if( lvl < minLvl ){
	    lvl = minLvl;
	  } else if( zoom >= maxZoom || lvl > maxLvl ){
	    return null;
	  }

	  var scale = Math.pow( 2, lvl );
	  var eleScaledH = bb.h * scale;
	  var eleScaledW = bb.w * scale;
	  var caches = rs.imgCaches = rs.imgCaches || {};
	  var eleCache = caches[lvl];

	  if( eleCache ){
	    return eleCache;
	  }

	  var txrH; // which texture height this ele belongs to

	  if( eleScaledH <= minTxrH ){
	    txrH = minTxrH;
	  } else if( eleScaledH <= txrStepH ){
	    txrH = txrStepH;
	  } else {
	    txrH = Math.ceil( eleScaledH / txrStepH ) * txrStepH;
	  }

	  if(
	    eleScaledH > maxTxrH
	    || eleScaledW > maxTxrW
	    || ( !allowEdgeTxrCaching && ele.isEdge() )
	    || ( !allowParentTxrCaching && ele.isParent() )
	  ){
	    return null; // caching large elements is not efficient
	  }

	  var txrQ = self.getTextureQueue( txrH );

	  // first try the second last one in case it has space at the end
	  var txr = txrQ[ txrQ.length - 2 ];

	  var addNewTxr = function(){
	    return self.recycleTexture( txrH, eleScaledW ) || self.addTexture( txrH, eleScaledW );
	  };

	  // try the last one if there is no second last one
	  if( !txr ){
	    txr = txrQ[ txrQ.length - 1 ];
	  }

	  // if the last one doesn't exist, we need a first one
	  if( !txr ){
	    txr = addNewTxr();
	  }

	  // if there's no room in the current texture, we need a new one
	  if( txr.width - txr.usedWidth < eleScaledW ){
	    txr = addNewTxr();
	  }

	  var scaledLabelShown = r.eleTextBiggerThanMin( ele, scale );
	  var scalableFrom = function( otherCache ){
	    return otherCache && otherCache.scaledLabelShown === scaledLabelShown;
	  };

	  var deqing = reason && reason === getTxrReasons.dequeue;
	  var highQualityReq = reason && reason === getTxrReasons.highQuality;
	  var downscaleReq = reason && reason === getTxrReasons.downscale;

	  var higherCache; // the nearest cache with a higher level
	  for( var l = lvl + 1; l <= maxLvl; l++ ){
	    var c = caches[l];

	    if( c ){ higherCache = c; break; }
	  }

	  var oneUpCache = higherCache && higherCache.level === lvl + 1 ? higherCache : null;

	  var downscale = function(){
	    txr.context.drawImage(
	      oneUpCache.texture.canvas,
	      oneUpCache.x, 0,
	      oneUpCache.width, oneUpCache.height,
	      txr.usedWidth, 0,
	      eleScaledW, eleScaledH
	    );
	  };

	  if( scalableFrom(oneUpCache) ){
	    // then we can relatively cheaply rescale the existing image w/o rerendering
	    downscale();

	  } else if( scalableFrom(higherCache) ){
	    // then use the higher cache for now and queue the next level down
	    // to cheaply scale towards the smaller level

	    if( highQualityReq ){
	      for( var l = higherCache.level; l > lvl; l-- ){
	        oneUpCache = self.getElement( ele, bb, pxRatio, l, getTxrReasons.downscale );
	      }

	      downscale();

	    } else {
	      self.queueElement( ele, bb, higherCache.level - 1 );

	      return higherCache;
	    }
	  } else {

	    var lowerCache; // the nearest cache with a lower level
	    if( !deqing && !highQualityReq && !downscaleReq ){
	      for( var l = lvl - 1; l >= minLvl; l-- ){
	        var c = caches[l];

	        if( c ){ lowerCache = c; break; }
	      }
	    }

	    if( scalableFrom(lowerCache) ){
	      // then use the lower quality cache for now and queue the better one for later

	      self.queueElement( ele, bb, lvl );

	      return lowerCache;
	    }

	    txr.context.translate( txr.usedWidth, 0 );
	    txr.context.scale( scale, scale );

	    r.drawElement( txr.context, ele, bb, scaledLabelShown );

	    txr.context.scale( 1/scale, 1/scale );
	    txr.context.translate( -txr.usedWidth, 0 );
	  }

	  eleCache = caches[lvl] = {
	    ele: ele,
	    x: txr.usedWidth,
	    texture: txr,
	    level: lvl,
	    scale: scale,
	    width: eleScaledW,
	    height: eleScaledH,
	    scaledLabelShown: scaledLabelShown
	  };

	  txr.usedWidth += Math.ceil( eleScaledW + eleTxrSpacing );

	  txr.eleCaches.push( eleCache );

	  self.checkTextureFullness( txr );

	  return eleCache;
	};

	ETCp.invalidateElement = function( ele ){
	  var self = this;
	  var caches = ele._private.rscratch.imgCaches;

	  if( caches ){
	    for( var lvl = minLvl; lvl <= maxLvl; lvl++ ){
	      var cache = caches[ lvl ];

	      if( cache ){
	        var txr = cache.texture;

	        // remove space from the texture it belongs to
	        txr.invalidatedWidth += cache.width;

	        // remove refs with the element
	        caches[ lvl ] = null;
	        util.removeFromArray( txr.eleCaches, cache );

	        // might have to remove the entire texture if it's not efficiently using its space
	        self.checkTextureUtility( txr );
	      }
	    }
	  }
	};

	ETCp.checkTextureUtility = function( txr ){
	  // invalidate all entries in the cache if the cache size is small
	  if( txr.invalidatedWidth >= minUtility * txr.width ){
	    this.retireTexture( txr );
	  }
	};

	ETCp.checkTextureFullness = function( txr ){
	  // if texture has been mostly filled and passed over several times, remove
	  // it from the queue so we don't need to waste time looking at it to put new things

	  var self = this;
	  var txrQ = self.getTextureQueue( txr.height );

	  if( txr.usedWidth / txr.width > maxFullness && txr.fullnessChecks >= maxFullnessChecks ){
	    util.removeFromArray( txrQ, txr );
	  } else {
	    txr.fullnessChecks++;
	  }
	};

	ETCp.retireTexture = function( txr ){
	  var self = this;
	  var txrH = txr.height;
	  var txrQ = self.getTextureQueue( txrH );

	  // retire the texture from the active / searchable queue:

	  util.removeFromArray( txrQ, txr );

	  txr.retired = true;

	  // remove the refs from the eles to the caches:

	  var eleCaches = txr.eleCaches;

	  for( var i = 0; i < eleCaches.length; i++ ){
	    var eleCache = eleCaches[i];
	    var ele = eleCache.ele;
	    var lvl = eleCache.level;
	    var imgCaches = ele._private.rscratch.imgCaches;

	    if( imgCaches ){
	      imgCaches[ lvl ] = null;
	    }
	  }

	  util.clearArray( eleCaches );

	  // add the texture to a retired queue so it can be recycled in future:

	  var rtxtrQ = self.getRetiredTextureQueue( txrH );

	  rtxtrQ.push( txr );
	};

	ETCp.addTexture = function( txrH, minW ){
	  var self = this;
	  var txrQ = self.getTextureQueue( txrH );
	  var txr = {};

	  txrQ.push( txr );

	  txr.eleCaches = [];

	  txr.height = txrH;
	  txr.width = Math.max( defTxrWidth, minW );
	  txr.usedWidth = 0;
	  txr.invalidatedWidth = 0;
	  txr.fullnessChecks = 0;

	  txr.canvas = document.createElement('canvas');
	  txr.canvas.width = txr.width;
	  txr.canvas.height = txr.height;

	  txr.context = txr.canvas.getContext('2d');

	  return txr;
	};

	ETCp.recycleTexture = function( txrH, minW ){
	  var self = this;
	  var txrQ = self.getTextureQueue( txrH );
	  var rtxtrQ = self.getRetiredTextureQueue( txrH );

	  for( var i = 0; i < rtxtrQ.length; i++ ){
	    var txr = rtxtrQ[i];

	    if( txr.width >= minW ){
	      txr.retired = false;

	      txr.usedWidth = 0;
	      txr.invalidatedWidth = 0;
	      txr.fullnessChecks = 0;

	      util.clearArray( txr.eleCaches );

	      txr.context.clearRect( 0, 0, txr.width, txr.height );

	      util.removeFromArray( rtxtrQ, txr );
	      txrQ.push( txr );

	      return txr;
	    }
	  }
	};

	ETCp.queueElement = function( ele, bb, lvl ){
	  var self = this;
	  var q = self.getElementQueue();
	  var id2q = self.getElementIdToQueue();
	  var id = ele.id();
	  var existingReq = id2q[ id ];

	  if( existingReq ){ // use the max lvl b/c in between lvls are cheap to make
	    existingReq.level = Math.max( existingReq.level, lvl );
	    existingReq.reqs++;

	    q.updateItem( existingReq );
	  } else {
	    var req = {
	      ele: ele,
	      bb: bb,
	      position: math.copyPosition( ele.position() ),
	      level: lvl,
	      reqs: 1
	    };

	    if( ele.isEdge() ){
	      req.positions = {
	        source: math.copyPosition( ele.source().position() ),
	        target: math.copyPosition( ele.target().position() )
	      };
	    }

	    q.push( req );

	    id2q[ id ] = req;
	  }
	};

	ETCp.dequeue = function( pxRatio, extent ){
	  var self = this;
	  var q = self.getElementQueue();
	  var id2q = self.getElementIdToQueue();
	  var dequeued = [];

	  for( var i = 0; i < maxDeqSize; i++ ){
	    if( q.size() > 0 ){
	      var req = q.pop();

	      id2q[ req.ele.id() ] = null;

	      dequeued.push( req );

	      var ele = req.ele;
	      var bb;

	      if(
	        ( ele.isEdge()
	          && (
	            !math.arePositionsSame( ele.source().position(), req.positions.source )
	            || !math.arePositionsSame( ele.target().position(), req.positions.target )
	          )
	        )
	        || ( !math.arePositionsSame( ele.position(), req.position ) )
	      ){
	        bb = ele.boundingBox();
	      } else {
	        bb = req.bb;
	      }

	      self.getElement( req.ele, bb, pxRatio, req.level, getTxrReasons.dequeue );
	    } else {
	      break;
	    }
	  }

	  return dequeued;
	};

	ETCp.onDequeue = function( fn ){ this.onDequeues.push( fn ); };
	ETCp.offDequeue = function( fn ){ util.removeFromArray( this.onDequeues, fn ); };

	ETCp.setupDequeueing = defs.setupDequeueing({
	  deqRedrawThreshold: deqRedrawThreshold,
	  deqCost: deqCost,
	  deqAvgCost: deqAvgCost,
	  deqNoDrawCost: deqNoDrawCost,
	  deqFastCost: deqFastCost,
	  deq: function( self, pxRatio, extent ){
	    return self.dequeue( pxRatio, extent );
	  },
	  onDeqd: function( self, deqd ){
	    for( var i = 0; i < self.onDequeues.length; i++ ){
	      var fn = self.onDequeues[i];

	      fn( deqd );
	    }
	  },
	  shouldRedraw: function( self, deqd, pxRatio, extent ){
	    for( var i = 0; i < deqd.length; i++ ){
	      var bb = deqd[i].bb;

	      if( math.boundingBoxesIntersect( bb, extent ) ){
	        return true;
	      }
	    }

	    return false;
	  },
	  priority: function( self ){
	    return self.renderer.beforeRenderPriorities.eleTxrDeq;
	  }
	});

	module.exports = ElementTextureCache;


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );

	var fullFpsTime = 1000/60; // assume 60 frames per second

	module.exports = {
	  setupDequeueing: function( opts ){
	    return function setupDequeueingImpl(){
	      var self = this;
	      var r = this.renderer;

	      if( self.dequeueingSetup ){
	        return;
	      } else {
	        self.dequeueingSetup = true;
	      }

	      var queueRedraw = util.debounce( function(){
	        r.redrawHint( 'eles', true );
	        r.redrawHint( 'drag', true );

	        r.redraw();
	      }, opts.deqRedrawThreshold );

	      var dequeue = function( willDraw, frameStartTime ){
	        var startTime = util.performanceNow();
	        var avgRenderTime = r.averageRedrawTime;
	        var renderTime = r.lastRedrawTime;
	        var deqd = [];
	        var extent = r.cy.extent();
	        var pixelRatio = r.getPixelRatio();

	        while( true ){
	          var now = util.performanceNow();
	          var duration = now - startTime;
	          var frameDuration = now - frameStartTime;

	          if( renderTime < fullFpsTime ){
	            // if we're rendering faster than the ideal fps, then do dequeueing
	            // during all of the remaining frame time

	            var timeAvailable = fullFpsTime - ( willDraw ? avgRenderTime : 0 );

	            if( frameDuration >= opts.deqFastCost * timeAvailable ){
	              break;
	            }
	          } else {
	            if( willDraw ){
	              if(
	                   duration >= opts.deqCost * renderTime
	                || duration >= opts.deqAvgCost * avgRenderTime
	              ){
	                break;
	              }
	            } else if( frameDuration >= opts.deqNoDrawCost * fullFpsTime ){
	              break;
	            }
	          }

	          var thisDeqd = opts.deq( self, pixelRatio, extent );

	          if( thisDeqd.length > 0 ){
	            for( var i = 0; i < thisDeqd.length; i++ ){
	              deqd.push( thisDeqd[i] );
	            }
	          } else {
	            break;
	          }
	        }

	        // callbacks on dequeue
	        if( deqd.length > 0 ){
	          opts.onDeqd( self, deqd );

	          if( !willDraw && opts.shouldRedraw( self, deqd, pixelRatio, extent ) ){
	            queueRedraw();
	          }
	        }
	      };

	      var priority = opts.priority || util.noop;

	      r.beforeRender( dequeue, priority( self ) );
	    };
	  }
	};


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var math = __webpack_require__( 76 );
	var Heap = __webpack_require__( 88 );
	var is = __webpack_require__( 73 );
	var defs = __webpack_require__( 163 );

	var defNumLayers = 1; // default number of layers to use
	var minLvl = -4; // when scaling smaller than that we don't need to re-render
	var maxLvl = 2; // when larger than this scale just render directly (caching is not helpful)
	var maxZoom = 3.99; // beyond this zoom level, layered textures are not used
	var deqRedrawThreshold = 50; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile
	var refineEleDebounceTime = 50; // time to debounce sharper ele texture updates
	var disableEleImgSmoothing = true; // when drawing eles on layers from an ele cache ; crisper and more performant when true
	var deqCost = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame
	var deqAvgCost = 0.1; // % of add'l rendering cost compared to average overall redraw time
	var deqNoDrawCost = 0.9; // % of avg frame time that can be used for dequeueing when not drawing
	var deqFastCost = 0.9; // % of frame time to be used when >60fps
	var maxDeqSize = 1; // number of eles to dequeue and render at higher texture in each batch
	var invalidThreshold = 250; // time threshold for disabling b/c of invalidations
	var maxLayerArea = 4000 * 4000; // layers can't be bigger than this
	var alwaysQueue = true; // never draw all the layers in a level on a frame; draw directly until all dequeued
	var useHighQualityEleTxrReqs = true; // whether to use high quality ele txr requests (generally faster and cheaper in the longterm)

	var useEleTxrCaching = true; // whether to use individual ele texture caching underneath this cache

	// var log = function(){ console.log.apply( console, arguments ); };

	var LayeredTextureCache = function( renderer, eleTxrCache ){
	  var self = this;

	  // TODO disable once not debugging
	  window.cache = this;

	  var r = self.renderer = renderer;

	  self.layersByLevel = {}; // e.g. 2 => [ layer1, layer2, ..., layerN ]

	  self.firstGet = true;

	  self.lastInvalidationTime = util.performanceNow() - 2*invalidThreshold;

	  self.skipping = false;

	  r.beforeRender(function( willDraw, now ){
	    if( now - self.lastInvalidationTime <= invalidThreshold ){
	      self.skipping = true;
	    } else {
	      self.skipping = false;
	    }
	  });

	  var qSort = function(a, b){
	    return b.reqs - a.reqs;
	  };

	  self.layersQueue = new Heap( qSort );

	  self.eleTxrCache = eleTxrCache;

	  self.setupEleCacheInvalidation();

	  self.setupDequeueing();
	};

	var LTCp = LayeredTextureCache.prototype;

	var layerIdPool = 0;
	var MAX_INT = Math.pow(2, 53) - 1;

	LTCp.makeLayer = function( bb, lvl ){
	  var scale = Math.pow( 2, lvl );

	  var w = Math.ceil( bb.w * scale );
	  var h = Math.ceil( bb.h * scale );

	  var canvas = document.createElement('canvas');

	  canvas.width = w;
	  canvas.height = h;

	  var layer = {
	    id: (layerIdPool = ++layerIdPool % MAX_INT ),
	    bb: bb,
	    level: lvl,
	    width: w,
	    height: h,
	    canvas: canvas,
	    context: canvas.getContext('2d'),
	    eles: [],
	    elesQueue: [],
	    reqs: 0
	  };

	  // log('make layer %s with w %s and h %s and lvl %s', layer.id, layer.width, layer.height, layer.level);

	  var cxt = layer.context;
	  var dx = -layer.bb.x1;
	  var dy = -layer.bb.y1;

	  // do the transform on creation to save cycles (it's the same for all eles)
	  cxt.scale( scale, scale );
	  cxt.translate( dx, dy );

	  return layer;
	};

	LTCp.getLayers = function( eles, pxRatio, lvl ){
	  var self = this;
	  var r = self.renderer;
	  var cy = r.cy;
	  var zoom = cy.zoom();
	  var firstGet = self.firstGet;

	  self.firstGet = false;

	  // log('--\nget layers with %s eles', eles.length);
	  //log eles.map(function(ele){ return ele.id() }) );

	  if( lvl == null ){
	    lvl = Math.ceil( math.log2( zoom * pxRatio ) );

	    if( lvl < minLvl ){
	      lvl = minLvl;
	    } else if( zoom >= maxZoom || lvl > maxLvl ){
	      return null;
	    }
	  }

	  self.validateLayersElesOrdering( lvl, eles );

	  var layersByLvl = self.layersByLevel;
	  var scale = Math.pow( 2, lvl );
	  var layers = layersByLvl[ lvl ] = layersByLvl[ lvl ] || [];
	  var bb;

	  var lvlComplete = self.levelIsComplete( lvl, eles );
	  var tmpLayers;

	  var checkTempLevels = function(){
	    var canUseAsTmpLvl = function( l ){
	      self.validateLayersElesOrdering( l, eles );

	      if( self.levelIsComplete( l, eles ) ){
	        tmpLayers = layersByLvl[l];
	        return true;
	      }
	    };

	    var checkLvls = function( dir ){
	      if( tmpLayers ){ return; }

	      for( var l = lvl + dir; minLvl <= l && l <= maxLvl; l += dir ){
	        if( canUseAsTmpLvl(l) ){ break; }
	      }
	    };

	    checkLvls( +1 );
	    checkLvls( -1 );

	    // remove the invalid layers; they will be replaced as needed later in this function
	    for( var i = layers.length - 1; i >= 0; i-- ){
	      var layer = layers[i];

	      if( layer.invalid ){
	        util.removeFromArray( layers, layer );
	      }
	    }
	  };

	  if( !lvlComplete ){
	    // if the current level is incomplete, then use the closest, best quality layerset temporarily
	    // and later queue the current layerset so we can get the proper quality level soon

	    checkTempLevels();

	  } else {
	    // log('level complete, using existing layers\n--');
	    return layers;
	  }

	  var getBb = function(){
	    if( !bb ){
	      bb = math.makeBoundingBox();

	      for( var i = 0; i < eles.length; i++ ){
	        math.updateBoundingBox( bb, eles[i].boundingBox() );
	      }
	    }

	    return bb;
	  };

	  var makeLayer = function( opts ){
	    opts = opts || {};

	    var after = opts.after;

	    getBb();

	    var area = ( bb.w * scale ) * ( bb.h * scale );

	    if( area > maxLayerArea ){
	      return null;
	    }

	    var layer = self.makeLayer( bb, lvl );

	    if( after != null ){
	      var index = layers.indexOf( after ) + 1;

	      layers.splice( index, 0, layer );
	    } else if( opts.insert === undefined || opts.insert ){
	      // no after specified => first layer made so put at start
	      layers.unshift( layer );
	    }

	    // if( tmpLayers ){
	      //self.queueLayer( layer );
	    // }

	    return layer;
	  };

	  if( self.skipping && !firstGet ){
	    // log('skip layers');
	    return null;
	  }

	  // log('do layers');

	  var layer = null;
	  var maxElesPerLayer = eles.length / defNumLayers;
	  var allowLazyQueueing = alwaysQueue && !firstGet;

	  for( var i = 0; i < eles.length; i++ ){
	    var ele = eles[i];
	    var rs = ele._private.rscratch;
	    var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};

	    // log('look at ele', ele.id());

	    var existingLayer = caches[ lvl ];

	    if( existingLayer ){
	      // reuse layer for later eles
	      // log('reuse layer for', ele.id());
	      layer = existingLayer;
	      continue;
	    }

	    if(
	      !layer
	      || layer.eles.length >= maxElesPerLayer
	      || ( defNumLayers > 1 && !math.boundingBoxInBoundingBox( layer.bb, ele.boundingBox() ) )
	    ){
	      // log('make new layer for ele %s', ele.id());

	      layer = makeLayer({ insert: true, after: layer });

	      // if now layer can be built then we can't use layers at this level
	      if( !layer ){ return null; }

	      // log('new layer with id %s', layer.id);
	    }

	    if( tmpLayers || allowLazyQueueing ){
	      // log('queue ele %s in layer %s', ele.id(), layer.id);
	      self.queueLayer( layer, ele );
	    } else {
	      // log('draw ele %s in layer %s', ele.id(), layer.id);
	      self.drawEleInLayer( layer, ele, lvl, pxRatio );
	    }

	    layer.eles.push( ele );

	    caches[ lvl ] = layer;
	  }

	  // log('--');

	  if( tmpLayers ){ // then we only queued the current layerset and can't draw it yet
	    return tmpLayers;
	  }

	  if( allowLazyQueueing ){
	    // log('lazy queue level', lvl);
	    return null;
	  }

	  return layers;
	};

	// a layer may want to use an ele cache of a higher level to avoid blurriness
	// so the layer level might not equal the ele level
	LTCp.getEleLevelForLayerLevel = function( lvl, pxRatio ){
	  return lvl;
	};

	function imgSmoothing( context, bool ){
	  if( context.imageSmoothingEnabled != null ){
	    context.imageSmoothingEnabled = bool;
	  } else {
	    context.webkitImageSmoothingEnabled = bool;
	    context.mozImageSmoothingEnabled = bool;
	    context.msImageSmoothingEnabled = bool;
	  }
	}

	LTCp.drawEleInLayer = function( layer, ele, lvl, pxRatio ){
	  var self = this;
	  var r = this.renderer;
	  var context = layer.context;
	  var bb = ele.boundingBox();
	  var eleCache = self.eleTxrCache;
	  var reason = useHighQualityEleTxrReqs ? eleCache.reasons.highQuality : undefined;

	  lvl = self.getEleLevelForLayerLevel( lvl, pxRatio );

	  var cache = useEleTxrCaching ? eleCache.getElement( ele, bb, null, lvl, reason ) : null;

	  if( cache ){
	    if( disableEleImgSmoothing ){ imgSmoothing( context, false ); }

	    context.drawImage( cache.texture.canvas, cache.x, 0, cache.width, cache.height, bb.x1, bb.y1, bb.w, bb.h );

	    if( disableEleImgSmoothing ){ imgSmoothing( context, true ); }
	  } else { // if the element is not cacheable, then draw directly
	    r.drawElement( context, ele );
	  }
	};

	LTCp.levelIsComplete = function( lvl, eles ){
	  var self = this;
	  var layers = self.layersByLevel[ lvl ];

	  if( !layers || layers.length === 0 ){ return false; }

	  var numElesInLayers = 0;

	  for( var i = 0; i < layers.length; i++ ){
	    var layer = layers[i];

	    // if there are any eles needed to be drawn yet, the level is not complete
	    if( layer.reqs > 0 ){ return false; }

	    // if the layer is invalid, the level is not complete
	    if( layer.invalid ){ return false; }

	    numElesInLayers += layer.eles.length;
	  }

	  // we should have exactly the number of eles passed in to be complete
	  if( numElesInLayers !== eles.length ){ return false; }

	  return true;
	};

	LTCp.validateLayersElesOrdering = function( lvl, eles ){
	  var layers = this.layersByLevel[ lvl ];

	  if( !layers ){ return; }

	  // if in a layer the eles are not in the same order, then the layer is invalid
	  // (i.e. there is an ele in between the eles in the layer)

	  for( var i = 0; i < layers.length; i++ ){
	    var layer = layers[i];
	    var offset = -1;

	    // find the offset
	    for( var j = 0; j < eles.length; j++ ){
	      if( layer.eles[0] === eles[j] ){
	        offset = j;
	        break;
	      }
	    }

	    if( offset < 0 ){
	      // then the layer has nonexistant elements and is invalid
	      this.invalidateLayer( layer );
	      continue;
	    }

	    // the eles in the layer must be in the same continuous order, else the layer is invalid

	    var o = offset;

	    for( var j = 0; j < layer.eles.length; j++ ){
	      if( layer.eles[j] !== eles[o+j] ){
	        // log('invalidate based on ordering', layer.id);

	        this.invalidateLayer( layer );
	        break;
	      }
	    }
	  }
	};

	LTCp.updateElementsInLayers = function( eles, update ){
	  var self = this;
	  var isEles = is.element( eles[0] );

	  // collect udpated elements (cascaded from the layers) and update each
	  // layer itself along the way
	  for( var i = 0; i < eles.length; i++ ){
	    var req = isEles ? null : eles[i];
	    var ele = isEles ? eles[i] : eles[i].ele;
	    var rs = ele._private.rscratch;
	    var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};

	    for( var l = minLvl; l <= maxLvl; l++ ){
	      var layer = caches[l];

	      if( !layer ){ continue; }

	      // if update is a request from the ele cache, then it affects only
	      // the matching level
	      if( req && self.getEleLevelForLayerLevel( layer.level ) !== req.level ){
	        continue;
	      }

	      update( layer, ele, req );
	    }
	  }
	};

	LTCp.haveLayers = function(){
	  var self = this;
	  var haveLayers = false;

	  for( var l = minLvl; l <= maxLvl; l++ ){
	    var layers = self.layersByLevel[l];

	    if( layers && layers.length > 0 ){
	      haveLayers = true;
	      break;
	    }
	  }

	  return haveLayers;
	};

	LTCp.invalidateElements = function( eles ){
	  var self = this;

	  self.lastInvalidationTime = util.performanceNow();

	  // log('update invalidate layer time from eles');

	  if( eles.length === 0 || !self.haveLayers() ){ return; }

	  self.updateElementsInLayers( eles, function invalAssocLayers( layer, ele, req ){
	    self.invalidateLayer( layer );
	  } );
	};

	LTCp.invalidateLayer = function( layer ){
	  // log('update invalidate layer time');

	  this.lastInvalidationTime = util.performanceNow();

	  if( layer.invalid ){ return; } // save cycles

	  var lvl = layer.level;
	  var eles = layer.eles;
	  var layers = this.layersByLevel[ lvl ];

	   // log('invalidate layer', layer.id );

	  util.removeFromArray( layers, layer );
	  // layer.eles = [];

	  layer.elesQueue = [];

	  layer.invalid = true;

	  if( layer.replacement ){
	    layer.replacement.invalid = true;
	  }

	  for( var i = 0; i < eles.length; i++ ){
	    var caches = eles[i]._private.rscratch.imgLayerCaches;

	    if( caches ){
	      caches[ lvl ] = null;
	    }
	  }
	};

	LTCp.refineElementTextures = function( eles ){
	  var self = this;

	  // log('refine', eles.length);

	  self.updateElementsInLayers( eles, function refineEachEle( layer, ele, req ){
	    var rLyr = layer.replacement;

	    if( !rLyr ){
	      rLyr = layer.replacement = self.makeLayer( layer.bb, layer.level );
	      rLyr.replaces = layer;
	      rLyr.eles = layer.eles;

	       // log('make replacement layer %s for %s with level %s', rLyr.id, layer.id, rLyr.level);
	    }

	    if( !rLyr.reqs ){
	      for( var i = 0; i < rLyr.eles.length; i++ ){
	        self.queueLayer( rLyr, rLyr.eles[i] );
	      }

	       // log('queue replacement layer refinement', rLyr.id);
	    }
	  } );
	};

	LTCp.setupEleCacheInvalidation = function(){
	  var self = this;
	  var eleDeqs = [];

	  if( !useEleTxrCaching ){ return; }

	  var updatedElesInLayers = util.debounce( function(){
	    self.refineElementTextures( eleDeqs );

	    eleDeqs = [];
	  }, refineEleDebounceTime );

	  self.eleTxrCache.onDequeue(function( reqs ){
	    for( var i = 0; i < reqs.length; i++ ){
	      eleDeqs.push( reqs[i] );
	    }

	    updatedElesInLayers();
	  });
	};

	LTCp.queueLayer = function( layer, ele ){
	  var self = this;
	  var q = self.layersQueue;
	  var elesQ = layer.elesQueue;
	  var hasId = elesQ.hasId = elesQ.hasId || {};

	  // if a layer is going to be replaced, queuing is a waste of time
	  if( layer.replacement ){ return; }

	  if( ele ){
	    if( hasId[ ele.id() ] ){
	      return;
	    }

	    elesQ.push( ele );
	    hasId[ ele.id() ] = true;
	  }

	  if( layer.reqs ){
	    layer.reqs++;

	    q.updateItem( layer );
	  } else {
	    layer.reqs = 1;

	    q.push( layer );
	  }
	};

	LTCp.dequeue = function( pxRatio ){
	  var self = this;
	  var q = self.layersQueue;
	  var deqd = [];
	  var eleDeqs = 0;

	  while( eleDeqs < maxDeqSize ){
	    if( q.size() === 0 ){ break; }

	    var layer = q.peek();

	    // if a layer has been or will be replaced, then don't waste time with it
	    if( layer.replacement ){
	       // log('layer %s in queue skipped b/c it already has a replacement', layer.id);
	      q.pop();
	      continue;
	    }

	    // if this is a replacement layer that has been superceded, then forget it
	    if( layer.replaces && layer !== layer.replaces.replacement ){
	       // log('layer is no longer the most uptodate replacement; dequeued', layer.id)
	      q.pop();
	      continue;
	    }

	    if( layer.invalid ){
	       // log('replacement layer %s is invalid; dequeued', layer.id);
	      q.pop();
	      continue;
	    }

	    var ele = layer.elesQueue.shift();

	    if( ele ){
	       // log('dequeue layer %s', layer.id);

	      self.drawEleInLayer( layer, ele, layer.level, pxRatio );

	      eleDeqs++;
	    }

	    if( deqd.length === 0 ){
	      // we need only one entry in deqd to queue redrawing etc
	      deqd.push( true );
	    }

	    // if the layer has all its eles done, then remove from the queue
	    if( layer.elesQueue.length === 0 ){
	      q.pop();

	      layer.reqs = 0;

	       // log('dequeue of layer %s complete', layer.id);

	      // when a replacement layer is dequeued, it replaces the old layer in the level
	      if( layer.replaces ){
	        self.applyLayerReplacement( layer );
	      }

	      self.requestRedraw();
	    }
	  }

	  return deqd;
	};

	LTCp.applyLayerReplacement = function( layer ){
	  var self = this;
	  var layersInLevel = self.layersByLevel[ layer.level ];
	  var replaced = layer.replaces;
	  var index = layersInLevel.indexOf( replaced );

	  // if the replaced layer is not in the active list for the level, then replacing
	  // refs would be a mistake (i.e. overwriting the true active layer)
	  if( index < 0 || replaced.invalid ){
	     // log('replacement layer would have no effect', layer.id);
	    return;
	  }

	  layersInLevel[ index ] = layer; // replace level ref

	  // replace refs in eles
	  for( var i = 0; i < layer.eles.length; i++ ){
	    var _p = layer.eles[i]._private;
	    var cache = _p.imgLayerCaches = _p.imgLayerCaches || {};

	    if( cache ){
	      cache[ layer.level ] = layer;
	    }
	  }

	   // log('apply replacement layer %s over %s', layer.id, replaced.id);

	  self.requestRedraw();
	};

	LTCp.requestRedraw = util.debounce( function(){
	  var r = this.renderer;

	  r.redrawHint( 'eles', true );
	  r.redrawHint( 'drag', true );
	  r.redraw();
	}, 100 );

	LTCp.setupDequeueing = defs.setupDequeueing({
	  deqRedrawThreshold: deqRedrawThreshold,
	  deqCost: deqCost,
	  deqAvgCost: deqAvgCost,
	  deqNoDrawCost: deqNoDrawCost,
	  deqFastCost: deqFastCost,
	  deq: function( self, pxRatio ){
	    return self.dequeue( pxRatio );
	  },
	  onDeqd: util.noop,
	  shouldRedraw: util.trueify,
	  priority: function( self ){
	    return self.renderer.beforeRenderPriorities.lyrTxrDeq;
	  }
	});

	module.exports = LayeredTextureCache;


/***/ },
/* 165 */
/***/ function(module, exports) {

	'use strict';

	var CRp = {};

	var impl;

	CRp.arrowShapeImpl = function( name ){
	  return ( impl || (impl = {
	    'polygon': function( context, points ){
	      for( var i = 0; i < points.length; i++ ){
	        var pt = points[ i ];

	        context.lineTo( pt.x, pt.y );
	      }
	    },

	    'triangle-backcurve': function( context, points, controlPoint ){
	      var firstPt;

	      for( var i = 0; i < points.length; i++ ){
	        var pt = points[ i ];

	        if( i === 0 ){
	          firstPt = pt;
	        }

	        context.lineTo( pt.x, pt.y );
	      }

	      context.quadraticCurveTo( controlPoint.x, controlPoint.y, firstPt.x, firstPt.y );
	    },

	    'triangle-tee': function( context, trianglePoints, teePoints ){
	      var triPts = trianglePoints;
	      for( var i = 0; i < triPts.length; i++ ){
	        var pt = triPts[ i ];

	        context.lineTo( pt.x, pt.y );
	      }

	      var teePts = teePoints;
	      var firstTeePt = teePoints[0];
	      context.moveTo( firstTeePt.x, firstTeePt.y );

	      for( var i = 0; i < teePts.length; i++ ){
	        var pt = teePts[ i ];

	        context.lineTo( pt.x, pt.y );
	      }
	    },

	    'circle': function( context, rx, ry, r ){
	      context.arc( rx, ry, r, 0, Math.PI * 2, false );
	    }
	  }) )[ name ];
	};

	module.exports = CRp;


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var math = __webpack_require__( 76 );

	var CRp = {};

	CRp.drawElement = function( context, ele, shiftToOriginWithBb, showLabel ){
	  var r = this;

	  if( ele.isNode() ){
	    r.drawNode( context, ele, shiftToOriginWithBb, showLabel );
	  } else {
	    r.drawEdge( context, ele, shiftToOriginWithBb, showLabel );
	  }
	};

	CRp.drawCachedElement = function( context, ele, pxRatio, extent ){
	  var r = this;
	  var bb = ele.boundingBox();

	  if( !extent || math.boundingBoxesIntersect( bb, extent ) ){
	    var cache = r.data.eleTxrCache.getElement( ele, bb, pxRatio );

	    if( cache ){
	      context.drawImage( cache.texture.canvas, cache.x, 0, cache.width, cache.height, bb.x1, bb.y1, bb.w, bb.h );
	    } else { // if the element is not cacheable, then draw directly
	      r.drawElement( context, ele );
	    }
	  }
	};

	CRp.drawElements = function( context, eles ){
	  var r = this;

	  for( var i = 0; i < eles.length; i++ ){
	    var ele = eles[ i ];

	    r.drawElement( context, ele );
	  }
	};

	CRp.drawCachedElements = function( context, eles, pxRatio, extent ){
	  var r = this;

	  for( var i = 0; i < eles.length; i++ ){
	    var ele = eles[ i ];

	    r.drawCachedElement( context, ele, pxRatio, extent );
	  }
	};

	CRp.drawCachedNodes = function( context, eles, pxRatio, extent ){
	  var r = this;

	  for( var i = 0; i < eles.length; i++ ){
	    var ele = eles[ i ];

	    if( !ele.isNode() ){ continue; }

	    r.drawCachedElement( context, ele, pxRatio, extent );
	  }
	};

	CRp.drawLayeredElements = function( context, eles, pxRatio, extent ){
	  var r = this;

	  var layers = r.data.lyrTxrCache.getLayers( eles, pxRatio );

	  if( layers ){
	    for( var i = 0; i < layers.length; i++ ){
	      var layer = layers[i];
	      var bb = layer.bb;

	      context.drawImage( layer.canvas, bb.x1, bb.y1, bb.w, bb.h );
	    }
	  } else { // fall back on plain caching if no layers
	    r.drawCachedElements( context, eles, pxRatio, extent );
	  }
	};

	module.exports = CRp;


/***/ },
/* 167 */
/***/ function(module, exports) {

	'use strict';

	var CRp = {};

	CRp.drawEdge = function( context, edge, shiftToOriginWithBb, drawLabel, drawOverlayInstead ){
	  var rs = edge._private.rscratch;
	  var usePaths = this.usePaths();

	  // if bezier ctrl pts can not be calculated, then die
	  if( rs.badLine || isNaN(rs.allpts[0]) ){ // isNaN in case edge is impossible and browser bugs (e.g. safari)
	    return;
	  }

	  // Edge line width
	  if( edge.pstyle( 'width' ).pfValue <= 0 ){
	    return;
	  }

	  var bb;
	  if( shiftToOriginWithBb ){
	    bb = shiftToOriginWithBb;

	    context.translate( -bb.x1, -bb.y1 );
	  }

	  var overlayPadding = edge.pstyle( 'overlay-padding' ).pfValue;
	  var overlayOpacity = edge.pstyle( 'overlay-opacity' ).value;
	  var overlayColor = edge.pstyle( 'overlay-color' ).value;

	  // Edge color & opacity
	  if( drawOverlayInstead ){

	    if( overlayOpacity === 0 ){ // exit early if no overlay
	      return;
	    }

	    this.strokeStyle( context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity );
	    context.lineCap = 'round';

	    if( rs.edgeType == 'self' && !usePaths ){
	      context.lineCap = 'butt';
	    }

	  } else {
	    var lineColor = edge.pstyle( 'line-color' ).value;

	    this.strokeStyle( context, lineColor[0], lineColor[1], lineColor[2], edge.pstyle( 'opacity' ).value );

	    context.lineCap = 'butt';
	  }

	  context.lineJoin = 'round';

	  var edgeWidth = edge.pstyle( 'width' ).pfValue + (drawOverlayInstead ? 2 * overlayPadding : 0);
	  var lineStyle = drawOverlayInstead ? 'solid' : edge.pstyle( 'line-style' ).value;
	  context.lineWidth = edgeWidth;

	  var shadowBlur = edge.pstyle( 'shadow-blur' ).pfValue;
	  var shadowOpacity = edge.pstyle( 'shadow-opacity' ).value;
	  var shadowColor = edge.pstyle( 'shadow-color' ).value;
	  var shadowOffsetX = edge.pstyle( 'shadow-offset-x' ).pfValue;
	  var shadowOffsetY = edge.pstyle( 'shadow-offset-y' ).pfValue;

	  this.shadowStyle( context,  shadowColor, drawOverlayInstead ? 0 : shadowOpacity, shadowBlur, shadowOffsetX, shadowOffsetY );

	  this.drawEdgePath(
	    edge,
	    context,
	    rs.allpts,
	    lineStyle,
	    edgeWidth
	  );

	  this.drawArrowheads( context, edge, drawOverlayInstead );

	  this.shadowStyle( context, 'transparent', 0 ); // reset for next guy

	  if( !drawOverlayInstead ){
	    this.drawEdge( context, edge, false, drawLabel, true );
	  }

	  this.drawElementText( context, edge, drawLabel );

	  if( shiftToOriginWithBb ){
	    context.translate( bb.x1, bb.y1 );
	  }
	};


	CRp.drawEdgePath = function( edge, context, pts, type, width ){
	  var rs = edge._private.rscratch;
	  var canvasCxt = context;
	  var path;
	  var pathCacheHit = false;
	  var usePaths = this.usePaths();

	  if( usePaths ){
	    var pathCacheKey = pts.join( '$' );
	    var keyMatches = rs.pathCacheKey && rs.pathCacheKey === pathCacheKey;

	    if( keyMatches ){
	      path = context = rs.pathCache;
	      pathCacheHit = true;
	    } else {
	      path = context = new Path2D();
	      rs.pathCacheKey = pathCacheKey;
	      rs.pathCache = path;
	    }
	  }

	  if( canvasCxt.setLineDash ){ // for very outofdate browsers
	    switch( type ){
	      case 'dotted':
	        canvasCxt.setLineDash( [ 1, 1 ] );
	        break;

	      case 'dashed':
	        canvasCxt.setLineDash( [ 6, 3 ] );
	        break;

	      case 'solid':
	        canvasCxt.setLineDash( [ ] );
	        break;
	    }
	  }

	  if( !pathCacheHit && !rs.badLine ){
	    if( context.beginPath ){ context.beginPath(); }
	    context.moveTo( pts[0], pts[1] );

	    switch( rs.edgeType ){
	      case 'bezier':
	      case 'self':
	      case 'compound':
	      case 'multibezier':
	        for( var i = 2; i + 3 < pts.length; i += 4 ){
	          context.quadraticCurveTo( pts[ i ], pts[ i + 1], pts[ i + 2], pts[ i + 3] );
	        }
	        break;

	      case 'straight':
	      case 'segments':
	      case 'haystack':
	        for( var i = 2; i + 1 < pts.length; i += 2 ){
	          context.lineTo( pts[ i ], pts[ i + 1] );
	        }
	        break;
	    }
	  }

	  context = canvasCxt;
	  if( usePaths ){
	    context.stroke( path );
	  } else {
	    context.stroke();
	  }

	  // reset any line dashes
	  if( context.setLineDash ){ // for very outofdate browsers
	    context.setLineDash( [ ] );
	  }

	};

	CRp.drawArrowheads = function( context, edge, drawOverlayInstead ){
	  if( drawOverlayInstead ){ return; } // don't do anything for overlays

	  var rs = edge._private.rscratch;
	  var isHaystack = rs.edgeType === 'haystack';

	  if( !isHaystack ){
	    this.drawArrowhead( context, edge, 'source', rs.arrowStartX, rs.arrowStartY, rs.srcArrowAngle );
	  }

	  this.drawArrowhead( context, edge, 'mid-target', rs.midX, rs.midY, rs.midtgtArrowAngle );

	  this.drawArrowhead( context, edge, 'mid-source', rs.midX, rs.midY, rs.midsrcArrowAngle );

	  if( !isHaystack ){
	    this.drawArrowhead( context, edge, 'target', rs.arrowEndX, rs.arrowEndY, rs.tgtArrowAngle );
	  }
	};

	CRp.drawArrowhead = function( context, edge, prefix, x, y, angle ){
	  if( isNaN( x ) || x == null || isNaN( y ) || y == null || isNaN( angle ) || angle == null ){ return; }

	  var self = this;
	  var arrowShape = edge.pstyle( prefix + '-arrow-shape' ).value;

	  if( arrowShape === 'none' ){
	    return;
	  }

	  var gco = context.globalCompositeOperation;

	  var arrowClearFill = edge.pstyle( prefix + '-arrow-fill' ).value === 'hollow' ? 'both' : 'filled';
	  var arrowFill = edge.pstyle( prefix + '-arrow-fill' ).value;
	  var opacity = edge.pstyle( 'opacity' ).value;

	  if( arrowShape === 'half-triangle-overshot' ){
	    arrowFill = 'hollow';
	    arrowClearFill = 'hollow';
	  }

	  if( opacity !== 1 || arrowFill === 'hollow' ){ // then extra clear is needed
	    context.globalCompositeOperation = 'destination-out';

	    self.fillStyle( context, 255, 255, 255, 1 );
	    self.strokeStyle( context, 255, 255, 255, 1 );

	    self.drawArrowShape( edge, prefix, context,
	      arrowClearFill, edge.pstyle( 'width' ).pfValue, edge.pstyle( prefix + '-arrow-shape' ).value,
	      x, y, angle
	    );

	    context.globalCompositeOperation = gco;
	  } // otherwise, the opaque arrow clears it for free :)

	  var color = edge.pstyle( prefix + '-arrow-color' ).value;
	  self.fillStyle( context, color[0], color[1], color[2], opacity );
	  self.strokeStyle( context, color[0], color[1], color[2], opacity );

	  self.drawArrowShape( edge, prefix, context,
	    arrowFill, edge.pstyle( 'width' ).pfValue, edge.pstyle( prefix + '-arrow-shape' ).value,
	    x, y, angle
	  );
	};

	CRp.drawArrowShape = function( edge, arrowType, context, fill, edgeWidth, shape, x, y, angle ){
	  var r = this;
	  var usePaths = this.usePaths();
	  var rs = edge._private.rscratch;
	  var pathCacheHit = false;
	  var path;
	  var canvasContext = context;
	  var translation = { x: x, y: y };
	  var size = this.getArrowWidth( edgeWidth );
	  var shapeImpl = r.arrowShapes[ shape ];

	  if( usePaths ){
	    var pathCacheKey = size + '$' + shape + '$' + angle + '$' + x + '$' + y;
	    rs.arrowPathCacheKey = rs.arrowPathCacheKey || {};
	    rs.arrowPathCache = rs.arrowPathCache || {};

	    var alreadyCached = rs.arrowPathCacheKey[ arrowType ] === pathCacheKey;
	    if( alreadyCached ){
	      path = context = rs.arrowPathCache[ arrowType ];
	      pathCacheHit = true;
	    } else {
	      path = context = new Path2D();
	      rs.arrowPathCacheKey[ arrowType ] = pathCacheKey;
	      rs.arrowPathCache[ arrowType ] = path;
	    }
	  }

	  if( context.beginPath ){ context.beginPath(); }

	  if( !pathCacheHit ){
	    shapeImpl.draw( context, size, angle, translation );
	  }

	  if( !shapeImpl.leavePathOpen && context.closePath ){
	    context.closePath();
	  }

	  context = canvasContext;

	  if( fill === 'filled' || fill === 'both' ){
	    if( usePaths ){
	      context.fill( path );
	    } else {
	      context.fill();
	    }
	  }

	  if( fill === 'hollow' || fill === 'both' ){
	    context.lineWidth = ( shapeImpl.matchEdgeWidth ? edgeWidth : 1 );
	    context.lineJoin = 'miter';

	    if( usePaths ){
	      context.stroke( path );
	    } else {
	      context.stroke();
	    }

	  }
	};

	module.exports = CRp;


/***/ },
/* 168 */
/***/ function(module, exports) {

	'use strict';

	var CRp = {};

	CRp.safeDrawImage = function( context, img, ix, iy, iw, ih, x, y, w, h ){
	  var r = this;

	  try {
	    context.drawImage( img, ix, iy, iw, ih, x, y, w, h );
	  } catch( e ){
	    r.redrawHint( 'eles', true );
	    r.redrawHint( 'drag', true );

	    r.drawingImage = true;

	    r.redraw();
	  }
	};

	CRp.drawInscribedImage = function( context, img, node ){
	  var r = this;
	  var nodeX = node._private.position.x;
	  var nodeY = node._private.position.y;
	  var fit = node.pstyle( 'background-fit' ).value;
	  var xPos = node.pstyle( 'background-position-x' );
	  var yPos = node.pstyle( 'background-position-y' );
	  var repeat = node.pstyle( 'background-repeat' ).value;
	  var nodeW = node.width();
	  var nodeH = node.height();
	  var rs = node._private.rscratch;
	  var clip = node.pstyle( 'background-clip' ).value;
	  var shouldClip = clip === 'node';
	  var imgOpacity = node.pstyle( 'background-image-opacity' ).value;

	  var imgW = img.width || img.cachedW;
	  var imgH = img.height || img.cachedH;

	  // workaround for broken browsers like ie
	  if( null == imgW || null == imgH ){
	    document.body.appendChild( img );

	    imgW = img.cachedW = img.width || img.offsetWidth;
	    imgH = img.cachedH = img.height || img.offsetHeight;

	    document.body.removeChild( img );
	  }

	  var w = imgW;
	  var h = imgH;

	  var bgW = node.pstyle( 'background-width' );
	  if( bgW.value !== 'auto' ){
	    if( bgW.units === '%' ){
	      w = bgW.value / 100 * nodeW;
	    } else {
	      w = bgW.pfValue;
	    }
	  }

	  var bgH = node.pstyle( 'background-height' );
	  if( bgH.value !== 'auto' ){
	    if( bgH.units === '%' ){
	      h = bgH.value / 100 * nodeH;
	    } else {
	      h = bgH.pfValue;
	    }
	  }

	  if( w === 0 || h === 0 ){
	    return; // no point in drawing empty image (and chrome is broken in this case)
	  }

	  if( fit === 'contain' ){
	    var scale = Math.min( nodeW / w, nodeH / h );

	    w *= scale;
	    h *= scale;

	  } else if( fit === 'cover' ){
	    var scale = Math.max( nodeW / w, nodeH / h );

	    w *= scale;
	    h *= scale;
	  }

	  var x = (nodeX - nodeW / 2); // left
	  if( xPos.units === '%' ){
	    x += (nodeW - w) * xPos.value / 100;
	  } else {
	    x += xPos.pfValue;
	  }

	  var y = (nodeY - nodeH / 2); // top
	  if( yPos.units === '%' ){
	    y += (nodeH - h) * yPos.value / 100;
	  } else {
	    y += yPos.pfValue;
	  }

	  if( rs.pathCache ){
	    x -= nodeX;
	    y -= nodeY;

	    nodeX = 0;
	    nodeY = 0;
	  }

	  var gAlpha = context.globalAlpha;

	  context.globalAlpha = imgOpacity;

	  if( repeat === 'no-repeat' ){

	    if( shouldClip ){
	      context.save();

	      if( rs.pathCache ){
	        context.clip( rs.pathCache );
	      } else {
	        r.nodeShapes[ r.getNodeShape( node ) ].draw(
	          context,
	          nodeX, nodeY,
	          nodeW, nodeH );

	        context.clip();
	      }
	    }

	    r.safeDrawImage( context, img, 0, 0, imgW, imgH, x, y, w, h );

	    if( shouldClip ){
	      context.restore();
	    }
	  } else {
	    var pattern = context.createPattern( img, repeat );
	    context.fillStyle = pattern;

	    r.nodeShapes[ r.getNodeShape( node ) ].draw(
	        context,
	        nodeX, nodeY,
	        nodeW, nodeH );

	    context.translate( x, y );
	    context.fill();
	    context.translate( -x, -y );
	  }

	  context.globalAlpha = gAlpha;

	};

	module.exports = CRp;


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__( 75 );
	var math = __webpack_require__( 76 );

	var CRp = {};

	CRp.eleTextBiggerThanMin = function( ele, scale ){
	  if( !scale ){
	    var zoom = ele.cy().zoom();
	    var pxRatio = this.getPixelRatio();
	    var lvl = Math.ceil( math.log2( zoom * pxRatio ) ); // the effective texture level

	    scale = Math.pow( 2, lvl );
	  }

	  var computedSize = ele.pstyle( 'font-size' ).pfValue * scale;
	  var minSize = ele.pstyle( 'min-zoomed-font-size' ).pfValue;

	  if( computedSize < minSize ){
	    return false;
	  }

	  return true;
	};

	CRp.drawElementText = function( context, ele, force ){
	  var r = this;

	  if( force === undefined ){
	    if( !r.eleTextBiggerThanMin( ele ) ){ return; }
	  } else {
	    if( !force ){ return; }
	  }

	  if( ele.isNode() ){
	    var label = ele.pstyle( 'label' );

	    if( !label || !label.value ){ return; }

	    var textHalign = ele.pstyle( 'text-halign' ).strValue;
	    var textValign = ele.pstyle( 'text-valign' ).strValue;

	    switch( textHalign ){
	      case 'left':
	        context.textAlign = 'right';
	        break;

	      case 'right':
	        context.textAlign = 'left';
	        break;

	      default: // e.g. center
	        context.textAlign = 'center';
	    }

	    switch( textValign ){
	      case 'top':
	        context.textBaseline = 'bottom';
	        break;

	      case 'bottom':
	        context.textBaseline = 'top';
	        break;

	      default: // e.g. center
	        context.textBaseline = 'middle';
	    }
	  } else {
	    var label = ele.pstyle( 'label' );
	    var srcLabel = ele.pstyle( 'source-label' );
	    var tgtLabel = ele.pstyle( 'target-label' );

	    if(
	      ( !label || !label.value )
	      && ( !srcLabel || !srcLabel.value )
	      && ( !tgtLabel || !tgtLabel.value )
	    ){
	      return;
	    }

	    context.textAlign = 'center';
	    context.textBaseline = 'middle';
	  }


	  r.drawText( context, ele );

	  if( ele.isEdge() ){
	    r.drawText( context, ele, 'source' );

	    r.drawText( context, ele, 'target' );
	  }
	};

	CRp.drawNodeText = CRp.drawEdgeText = CRp.drawElementText;

	CRp.getFontCache = function( context ){
	  var cache;

	  this.fontCaches = this.fontCaches || [];

	  for( var i = 0; i < this.fontCaches.length; i++ ){
	    cache = this.fontCaches[ i ];

	    if( cache.context === context ){
	      return cache;
	    }
	  }

	  cache = {
	    context: context
	  };
	  this.fontCaches.push( cache );

	  return cache;
	};

	// set up canvas context with font
	// returns transformed text string
	CRp.setupTextStyle = function( context, ele ){
	  // Font style
	  var parentOpacity = ele.effectiveOpacity();
	  var labelStyle = ele.pstyle( 'font-style' ).strValue;
	  var labelSize = ele.pstyle( 'font-size' ).pfValue + 'px';
	  var labelFamily = ele.pstyle( 'font-family' ).strValue;
	  var labelWeight = ele.pstyle( 'font-weight' ).strValue;
	  var opacity = ele.pstyle( 'text-opacity' ).value * ele.pstyle( 'opacity' ).value * parentOpacity;
	  var outlineOpacity = ele.pstyle( 'text-outline-opacity' ).value * opacity;
	  var color = ele.pstyle( 'color' ).value;
	  var outlineColor = ele.pstyle( 'text-outline-color' ).value;
	  var shadowBlur = ele.pstyle( 'text-shadow-blur' ).pfValue;
	  var shadowOpacity = ele.pstyle( 'text-shadow-opacity' ).value;
	  var shadowColor = ele.pstyle( 'text-shadow-color' ).value;
	  var shadowOffsetX = ele.pstyle( 'text-shadow-offset-x' ).pfValue;
	  var shadowOffsetY = ele.pstyle( 'text-shadow-offset-y' ).pfValue;

	  var fontCacheKey = ele._private.fontKey;
	  var cache = this.getFontCache( context );

	  if( cache.key !== fontCacheKey ){
	    context.font = labelStyle + ' ' + labelWeight + ' ' + labelSize + ' ' + labelFamily;

	    cache.key = fontCacheKey;
	  }

	  // Calculate text draw position based on text alignment

	  // so text outlines aren't jagged
	  context.lineJoin = 'round';

	  this.fillStyle( context, color[ 0 ], color[ 1 ], color[ 2 ], opacity );

	  this.strokeStyle( context, outlineColor[ 0 ], outlineColor[ 1 ], outlineColor[ 2 ], outlineOpacity );

	  this.shadowStyle( context, shadowColor, shadowOpacity, shadowBlur, shadowOffsetX, shadowOffsetY );
	};

	function roundRect( ctx, x, y, width, height, radius ){
	  var radius = radius || 5;
	  ctx.beginPath();
	  ctx.moveTo( x + radius, y );
	  ctx.lineTo( x + width - radius, y );
	  ctx.quadraticCurveTo( x + width, y, x + width, y + radius );
	  ctx.lineTo( x + width, y + height - radius );
	  ctx.quadraticCurveTo( x + width, y + height, x + width - radius, y + height );
	  ctx.lineTo( x + radius, y + height );
	  ctx.quadraticCurveTo( x, y + height, x, y + height - radius );
	  ctx.lineTo( x, y + radius );
	  ctx.quadraticCurveTo( x, y, x + radius, y );
	  ctx.closePath();
	  ctx.fill();
	}

	// Draw text
	CRp.drawText = function( context, ele, prefix ){
	  var _p = ele._private;
	  var rscratch = _p.rscratch;
	  var parentOpacity = ele.effectiveOpacity();
	  if( parentOpacity === 0 || ele.pstyle( 'text-opacity' ).value === 0 ){
	    return;
	  }

	  var textX = util.getPrefixedProperty( rscratch, 'labelX', prefix );
	  var textY = util.getPrefixedProperty( rscratch, 'labelY', prefix );
	  var text = this.getLabelText( ele, prefix );

	  if( text != null && text !== '' && !isNaN( textX ) && !isNaN( textY ) ){
	    this.setupTextStyle( context, ele );

	    var pdash = prefix ? prefix + '-' : '';
	    var textW = util.getPrefixedProperty( rscratch, 'labelWidth', prefix );
	    var textH = util.getPrefixedProperty( rscratch, 'labelHeight', prefix );
	    var textAngle = util.getPrefixedProperty( rscratch, 'labelAngle', prefix );
	    var marginX = ele.pstyle( pdash + 'text-margin-x' ).pfValue;
	    var marginY = ele.pstyle( pdash + 'text-margin-y' ).pfValue;

	    var isEdge = ele.isEdge();
	    var isNode = ele.isNode();

	    var halign = ele.pstyle( 'text-halign' ).value;
	    var valign = ele.pstyle( 'text-valign' ).value;

	    if( isEdge ){
	      halign = 'center';
	      valign = 'center';
	    }

	    textX += marginX;
	    textY += marginY;

	    var rotation = ele.pstyle( 'text-rotation' );
	    var theta;

	    if( rotation.strValue === 'autorotate' ){
	      theta = isEdge ? textAngle : 0;
	    } else if( rotation.strValue === 'none' ){
	      theta = 0;
	    } else {
	      theta = rotation.pfValue;
	    }

	    if( theta !== 0 ){
	      var orgTextX = textX;
	      var orgTextY = textY;

	      context.translate( orgTextX, orgTextY );
	      context.rotate( theta );

	      textX = 0;
	      textY = 0;
	    }

	    if( isNode ){
	      var pLeft = ele.pstyle( 'padding-left' ).pfValue;
	      var pRight = ele.pstyle( 'padding-right' ).pfValue;
	      var pTop = ele.pstyle( 'padding-top' ).pfValue;
	      var pBottom = ele.pstyle( 'padding-bottom' ).pfValue;

	      textX += pLeft / 2;
	      textX -= pRight / 2;

	      textY += pTop / 2;
	      textY -= pBottom / 2;
	    }

	    var backgroundOpacity = ele.pstyle( 'text-background-opacity' ).value;
	    var borderOpacity = ele.pstyle( 'text-border-opacity' ).value;
	    var textBorderWidth = ele.pstyle( 'text-border-width' ).pfValue;

	    if( backgroundOpacity > 0 || ( textBorderWidth > 0 && borderOpacity > 0 ) ){
	      var bgWidth = textW;
	      var bgHeight = textH;
	      var bgX = textX;

	      if( halign ){
	        if( halign == 'center' ){
	          bgX = bgX - bgWidth / 2;
	        } else if( halign == 'left' ){
	          bgX = bgX - bgWidth;
	        }
	      }

	      var bgY = textY;

	      if( isNode ){
	        if( valign == 'top' ){
	          bgY = bgY - bgHeight;
	        } else if( valign == 'center' ){
	          bgY = bgY - bgHeight / 2;
	        }
	      } else {
	        bgY = bgY - bgHeight / 2;
	      }

	      if( backgroundOpacity > 0 ){
	        var textFill = context.fillStyle;
	        var textBackgroundColor = ele.pstyle( 'text-background-color' ).value;

	        context.fillStyle = 'rgba(' + textBackgroundColor[ 0 ] + ',' + textBackgroundColor[ 1 ] + ',' + textBackgroundColor[ 2 ] + ',' + backgroundOpacity * parentOpacity + ')';
	        var styleShape = ele.pstyle( 'text-background-shape' ).strValue;
	        if( styleShape == 'roundrectangle' ){
	          roundRect( context, bgX, bgY, bgWidth, bgHeight, 2 );
	        } else {
	          context.fillRect( bgX, bgY, bgWidth, bgHeight );
	        }
	        context.fillStyle = textFill;
	      }

	      if( textBorderWidth > 0 && borderOpacity > 0 ){
	        var textStroke = context.strokeStyle;
	        var textLineWidth = context.lineWidth;
	        var textBorderColor = ele.pstyle( 'text-border-color' ).value;
	        var textBorderStyle = ele.pstyle( 'text-border-style' ).value;

	        context.strokeStyle = 'rgba(' + textBorderColor[ 0 ] + ',' + textBorderColor[ 1 ] + ',' + textBorderColor[ 2 ] + ',' + borderOpacity * parentOpacity + ')';
	        context.lineWidth = textBorderWidth;

	        if( context.setLineDash ){ // for very outofdate browsers
	          switch( textBorderStyle ){
	            case 'dotted':
	              context.setLineDash( [ 1, 1 ] );
	              break;
	            case 'dashed':
	              context.setLineDash( [ 4, 2 ] );
	              break;
	            case 'double':
	              context.lineWidth = textBorderWidth / 4; // 50% reserved for white between the two borders
	              context.setLineDash( [] );
	              break;
	            case 'solid':
	              context.setLineDash( [] );
	              break;
	          }
	        }

	        context.strokeRect( bgX, bgY, bgWidth, bgHeight );

	        if( textBorderStyle === 'double' ){
	          var whiteWidth = textBorderWidth / 2;

	          context.strokeRect( bgX + whiteWidth, bgY + whiteWidth, bgWidth - whiteWidth * 2, bgHeight - whiteWidth * 2 );
	        }

	        if( context.setLineDash ){ // for very outofdate browsers
	          context.setLineDash( [] );
	        }
	        context.lineWidth = textLineWidth;
	        context.strokeStyle = textStroke;
	      }

	    }

	    var lineWidth = 2 * ele.pstyle( 'text-outline-width' ).pfValue; // *2 b/c the stroke is drawn centred on the middle

	    if( lineWidth > 0 ){
	      context.lineWidth = lineWidth;
	    }

	    if( ele.pstyle( 'text-wrap' ).value === 'wrap' ){
	      var lines = rscratch.labelWrapCachedLines;
	      var lineHeight = textH / lines.length;

	      switch( valign ){
	        case 'top':
	          textY -= ( lines.length - 1 ) * lineHeight;
	          break;

	        case 'bottom':
	          // nothing required
	          break;

	        default:
	        case 'center':
	          textY -= ( lines.length - 1 ) * lineHeight / 2;
	      }

	      for( var l = 0; l < lines.length; l++ ){
	        if( lineWidth > 0 ){
	          context.strokeText( lines[ l ], textX, textY );
	        }

	        context.fillText( lines[ l ], textX, textY );

	        textY += lineHeight;
	      }

	    } else {
	      if( lineWidth > 0 ){
	        context.strokeText( text, textX, textY );
	      }

	      context.fillText( text, textX, textY );
	    }

	    if( theta !== 0 ){
	      context.rotate( -theta );
	      context.translate( -orgTextX, -orgTextY );
	    }

	    this.shadowStyle( context, 'transparent', 0 ); // reset for next guy
	  }
	};

	module.exports = CRp;


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );

	var CRp = {};

	CRp.drawNode = function( context, node, shiftToOriginWithBb, drawLabel ){
	  var r = this;
	  var nodeWidth, nodeHeight;
	  var rs = node._private.rscratch;
	  var _p = node._private;
	  var pos = pos || _p.position;

	  if( !is.number( pos.x ) || !is.number( pos.y ) ){
	    return; // can't draw node with undefined position
	  }

	  var usePaths = this.usePaths();
	  var path;
	  var pathCacheHit = false;

	  var parentOpacity = node.effectiveOpacity();
	  if( parentOpacity === 0 ){ return; }

	  nodeWidth = node.width() + node.pstyle( 'padding-left' ).pfValue + node.pstyle( 'padding-right' ).pfValue;
	  nodeHeight = node.height() + node.pstyle( 'padding-top' ).pfValue + node.pstyle( 'padding-bottom' ).pfValue;

	  context.lineWidth = node.pstyle( 'border-width' ).pfValue;

	  //
	  // setup shift

	  var bb;
	  if( shiftToOriginWithBb ){
	    bb = shiftToOriginWithBb;

	    context.translate( -bb.x1, -bb.y1 );
	  }

	  //
	  // load bg image

	  var bgImgProp = node.pstyle( 'background-image' );
	  var url = bgImgProp.value[2] || bgImgProp.value[1];
	  var image;

	  if( url !== undefined ){

	    // get image, and if not loaded then ask to redraw when later loaded
	    image = this.getCachedImage( url, function(){
	      node.trigger('background');

	      r.redrawHint( 'eles', true );
	      r.redrawHint( 'drag', true );

	      r.drawingImage = true;

	      r.redraw();
	    } );

	    var prevBging = _p.backgrounding;
	    _p.backgrounding = !image.complete;

	    if( prevBging !== _p.backgrounding ){ // update style b/c :backgrounding state changed
	      node.updateStyle( false );
	    }
	  }

	  //
	  // setup styles

	  var bgColor = node.pstyle( 'background-color' ).value;
	  var borderColor = node.pstyle( 'border-color' ).value;
	  var borderStyle = node.pstyle( 'border-style' ).value;

	  this.fillStyle( context, bgColor[0], bgColor[1], bgColor[2], node.pstyle( 'background-opacity' ).value * parentOpacity );

	  this.strokeStyle( context, borderColor[0], borderColor[1], borderColor[2], node.pstyle( 'border-opacity' ).value * parentOpacity );

	  var shadowBlur = node.pstyle( 'shadow-blur' ).pfValue;
	  var shadowOpacity = node.pstyle( 'shadow-opacity' ).value;
	  var shadowColor = node.pstyle( 'shadow-color' ).value;
	  var shadowOffsetX = node.pstyle( 'shadow-offset-x' ).pfValue;
	  var shadowOffsetY = node.pstyle( 'shadow-offset-y' ).pfValue;

	  this.shadowStyle( context, shadowColor, shadowOpacity, shadowBlur, shadowOffsetX, shadowOffsetY );

	  context.lineJoin = 'miter'; // so borders are square with the node shape

	  if( context.setLineDash ){ // for very outofdate browsers
	    switch( borderStyle ){
	      case 'dotted':
	        context.setLineDash( [ 1, 1 ] );
	        break;

	      case 'dashed':
	        context.setLineDash( [ 4, 2 ] );
	        break;

	      case 'solid':
	      case 'double':
	        context.setLineDash( [ ] );
	        break;
	    }
	  }


	  //
	  // draw shape

	  var styleShape = node.pstyle( 'shape' ).strValue;

	  if( usePaths ){
	    var pathCacheKey = styleShape + '$' + nodeWidth + '$' + nodeHeight;

	    context.translate( pos.x, pos.y );

	    if( rs.pathCacheKey === pathCacheKey ){
	      path = rs.pathCache;
	      pathCacheHit = true;
	    } else {
	      path = new Path2D();
	      rs.pathCacheKey = pathCacheKey;
	      rs.pathCache = path;
	    }
	  }

	  if( !pathCacheHit ){

	    var npos = pos;

	    if( usePaths ){
	      npos = {
	        x: 0,
	        y: 0
	      };
	    }

	    r.nodeShapes[ this.getNodeShape( node ) ].draw(
	          ( path || context ),
	          npos.x,
	          npos.y,
	          nodeWidth,
	          nodeHeight );
	  }

	  if( usePaths ){
	    context.fill( path );
	  } else {
	    context.fill();
	  }

	  this.shadowStyle( context, 'transparent', 0 ); // reset for next guy

	  //
	  // bg image

	  if( url !== undefined ){
	    if( image.complete ){
	      this.drawInscribedImage( context, image, node );
	    }
	  }

	  //
	  // pie

	  var darkness = node.pstyle( 'background-blacken' ).value;
	  var borderWidth = node.pstyle( 'border-width' ).pfValue;

	  if( this.hasPie( node ) ){
	    this.drawPie( context, node, parentOpacity );

	    // redraw path for blacken and border
	    if( darkness !== 0 || borderWidth !== 0 ){

	      if( !usePaths ){
	        r.nodeShapes[ this.getNodeShape( node ) ].draw(
	            context,
	            pos.x,
	            pos.y,
	            nodeWidth,
	            nodeHeight );
	      }
	    }
	  }

	  //
	  // darken/lighten

	  if( darkness > 0 ){
	    this.fillStyle( context, 0, 0, 0, darkness );

	    if( usePaths ){
	      context.fill( path );
	    } else {
	      context.fill();
	    }

	  } else if( darkness < 0 ){
	    this.fillStyle( context, 255, 255, 255, -darkness );

	    if( usePaths ){
	      context.fill( path );
	    } else {
	      context.fill();
	    }
	  }

	  //
	  // border

	  if( borderWidth > 0 ){

	    if( usePaths ){
	      context.stroke( path );
	    } else {
	      context.stroke();
	    }

	    if( borderStyle === 'double' ){
	      context.lineWidth = node.pstyle( 'border-width' ).pfValue / 3;

	      var gco = context.globalCompositeOperation;
	      context.globalCompositeOperation = 'destination-out';

	      if( usePaths ){
	        context.stroke( path );
	      } else {
	        context.stroke();
	      }

	      context.globalCompositeOperation = gco;
	    }

	  }

	  if( usePaths ){
	    context.translate( -pos.x, -pos.y );
	  }

	  // reset in case we changed the border style
	  if( context.setLineDash ){ // for very outofdate browsers
	    context.setLineDash( [ ] );
	  }

	  //
	  // label

	  r.drawElementText( context, node, drawLabel );

	  //
	  // overlay

	  var overlayPadding = node.pstyle( 'overlay-padding' ).pfValue;
	  var overlayOpacity = node.pstyle( 'overlay-opacity' ).value;
	  var overlayColor = node.pstyle( 'overlay-color' ).value;

	  if( overlayOpacity > 0 ){
	    this.fillStyle( context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity );

	    r.nodeShapes[ 'roundrectangle' ].draw(
	      context,
	      node._private.position.x,
	      node._private.position.y,
	      nodeWidth + overlayPadding * 2,
	      nodeHeight + overlayPadding * 2
	    );

	    context.fill();
	  }

	  //
	  // clean up shift

	  if( shiftToOriginWithBb ){
	    context.translate( bb.x1, bb.y1 );
	  }

	};

	// does the node have at least one pie piece?
	CRp.hasPie = function( node ){
	  node = node[0]; // ensure ele ref

	  return node._private.hasPie;
	};

	CRp.drawPie = function( context, node, nodeOpacity, pos ){
	  node = node[0]; // ensure ele ref

	  var _p = node._private;
	  var cyStyle = node.cy().style();
	  var pieSize = node.pstyle( 'pie-size' );
	  var nodeW = node.width();
	  var nodeH = node.height();
	  var pos = pos || _p.position;
	  var x = pos.x;
	  var y = pos.y;
	  var radius = Math.min( nodeW, nodeH ) / 2; // must fit in node
	  var lastPercent = 0; // what % to continue drawing pie slices from on [0, 1]
	  var usePaths = this.usePaths();

	  if( usePaths ){
	    x = 0;
	    y = 0;
	  }

	  if( pieSize.units === '%' ){
	    radius = radius * pieSize.value / 100;
	  } else if( pieSize.pfValue !== undefined ){
	    radius = pieSize.pfValue / 2;
	  }

	  for( var i = 1; i <= cyStyle.pieBackgroundN; i++ ){ // 1..N
	    var size = node.pstyle( 'pie-' + i + '-background-size' ).value;
	    var color = node.pstyle( 'pie-' + i + '-background-color' ).value;
	    var opacity = node.pstyle( 'pie-' + i + '-background-opacity' ).value * nodeOpacity;
	    var percent = size / 100; // map integer range [0, 100] to [0, 1]

	    // percent can't push beyond 1
	    if( percent + lastPercent > 1 ){
	      percent = 1 - lastPercent;
	    }

	    var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent; // start at 12 o'clock and go clockwise
	    var angleDelta = 2 * Math.PI * percent;
	    var angleEnd = angleStart + angleDelta;

	    // ignore if
	    // - zero size
	    // - we're already beyond the full circle
	    // - adding the current slice would go beyond the full circle
	    if( size === 0 || lastPercent >= 1 || lastPercent + percent > 1 ){
	      continue;
	    }

	    context.beginPath();
	    context.moveTo( x, y );
	    context.arc( x, y, radius, angleStart, angleEnd );
	    context.closePath();

	    this.fillStyle( context, color[0], color[1], color[2], opacity );

	    context.fill();

	    lastPercent += percent;
	  }

	};


	module.exports = CRp;


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var CRp = {};

	var util = __webpack_require__( 75 );

	var motionBlurDelay = 100;

	// var isFirefox = typeof InstallTrigger !== 'undefined';

	CRp.getPixelRatio = function(){
	  var context = this.data.contexts[0];

	  if( this.forcedPixelRatio != null ){
	    return this.forcedPixelRatio;
	  }

	  var backingStore = context.backingStorePixelRatio ||
	    context.webkitBackingStorePixelRatio ||
	    context.mozBackingStorePixelRatio ||
	    context.msBackingStorePixelRatio ||
	    context.oBackingStorePixelRatio ||
	    context.backingStorePixelRatio || 1;

	  return (window.devicePixelRatio || 1) / backingStore;
	};

	CRp.paintCache = function( context ){
	  var caches = this.paintCaches = this.paintCaches || [];
	  var needToCreateCache = true;
	  var cache;

	  for( var i = 0; i < caches.length; i++ ){
	    cache = caches[ i ];

	    if( cache.context === context ){
	      needToCreateCache = false;
	      break;
	    }
	  }

	  if( needToCreateCache ){
	    cache = {
	      context: context
	    };
	    caches.push( cache );
	  }

	  return cache;
	};

	CRp.fillStyle = function( context, r, g, b, a ){
	  context.fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // turn off for now, seems context does its own caching

	  // var cache = this.paintCache(context);

	  // var fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // if( cache.fillStyle !== fillStyle ){
	  //   context.fillStyle = cache.fillStyle = fillStyle;
	  // }
	};

	CRp.strokeStyle = function( context, r, g, b, a ){
	  context.strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // turn off for now, seems context does its own caching

	  // var cache = this.paintCache(context);

	  // var strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // if( cache.strokeStyle !== strokeStyle ){
	  //   context.strokeStyle = cache.strokeStyle = strokeStyle;
	  // }
	};

	CRp.shadowStyle = function( context, color, opacity, blur, offsetX, offsetY ){
	  var zoom = this.cy.zoom();

	  // var cache = this.paintCache( context );
	  //
	  // // don't make expensive changes to the shadow style if it's not used
	  // if( cache.shadowOpacity === 0 && opacity === 0 ){
	  //   return;
	  // }
	  //
	  // cache.shadowOpacity = opacity;

	  if( opacity > 0 ){
	    context.shadowBlur = blur * zoom;
	    context.shadowColor = 'rgba(' + color[0] + ',' + color[1] + ',' + color[2] + ',' + opacity + ')';
	    context.shadowOffsetX = offsetX * zoom;
	    context.shadowOffsetY = offsetY * zoom;
	  } else {
	    context.shadowBlur = 0;
	    context.shadowColor = 'transparent';
	    context.shadowOffsetX = 0;
	    context.shadowOffsetY = 0;
	  }
	};

	// Resize canvas
	CRp.matchCanvasSize = function( container ){
	  var r = this;
	  var data = r.data;
	  var width = container.clientWidth;
	  var height = container.clientHeight;
	  var pixelRatio = r.getPixelRatio();
	  var mbPxRatio = r.motionBlurPxRatio;

	  if(
	    container === r.data.bufferCanvases[ r.MOTIONBLUR_BUFFER_NODE ] ||
	    container === r.data.bufferCanvases[ r.MOTIONBLUR_BUFFER_DRAG ]
	  ){
	    pixelRatio = mbPxRatio;
	  }

	  var canvasWidth = width * pixelRatio;
	  var canvasHeight = height * pixelRatio;
	  var canvas;

	  if( canvasWidth === r.canvasWidth && canvasHeight === r.canvasHeight ){
	    return; // save cycles if same
	  }

	  r.fontCaches = null; // resizing resets the style

	  var canvasContainer = data.canvasContainer;
	  canvasContainer.style.width = width + 'px';
	  canvasContainer.style.height = height + 'px';

	  for( var i = 0; i < r.CANVAS_LAYERS; i++ ){

	    canvas = data.canvases[ i ];

	    if( canvas.width !== canvasWidth || canvas.height !== canvasHeight ){

	      canvas.width = canvasWidth;
	      canvas.height = canvasHeight;

	      canvas.style.width = width + 'px';
	      canvas.style.height = height + 'px';
	    }
	  }

	  for( var i = 0; i < r.BUFFER_COUNT; i++ ){

	    canvas = data.bufferCanvases[ i ];

	    if( canvas.width !== canvasWidth || canvas.height !== canvasHeight ){

	      canvas.width = canvasWidth;
	      canvas.height = canvasHeight;

	      canvas.style.width = width + 'px';
	      canvas.style.height = height + 'px';
	    }
	  }

	  r.textureMult = 1;
	  if( pixelRatio <= 1 ){
	    canvas = data.bufferCanvases[ r.TEXTURE_BUFFER ];

	    r.textureMult = 2;
	    canvas.width = canvasWidth * r.textureMult;
	    canvas.height = canvasHeight * r.textureMult;
	  }

	  r.canvasWidth = canvasWidth;
	  r.canvasHeight = canvasHeight;

	};

	CRp.renderTo = function( cxt, zoom, pan, pxRatio ){
	  this.render( {
	    forcedContext: cxt,
	    forcedZoom: zoom,
	    forcedPan: pan,
	    drawAllLayers: true,
	    forcedPxRatio: pxRatio
	  } );
	};

	CRp.render = function( options ){
	  options = options || util.staticEmptyObject();

	  var forcedContext = options.forcedContext;
	  var drawAllLayers = options.drawAllLayers;
	  var drawOnlyNodeLayer = options.drawOnlyNodeLayer;
	  var forcedZoom = options.forcedZoom;
	  var forcedPan = options.forcedPan;
	  var r = this;
	  var pixelRatio = options.forcedPxRatio === undefined ? this.getPixelRatio() : options.forcedPxRatio;
	  var cy = r.cy; var data = r.data;
	  var needDraw = data.canvasNeedsRedraw;
	  var textureDraw = r.textureOnViewport && !forcedContext && (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming);
	  var motionBlur = options.motionBlur !== undefined ? options.motionBlur : r.motionBlur;
	  var mbPxRatio = r.motionBlurPxRatio;
	  var hasCompoundNodes = cy.hasCompoundNodes();
	  var inNodeDragGesture = r.hoverData.draggingEles;
	  var inBoxSelection = r.hoverData.selecting || r.touchData.selecting ? true : false;
	  motionBlur = motionBlur && !forcedContext && r.motionBlurEnabled && !inBoxSelection;
	  var motionBlurFadeEffect = motionBlur;

	  if( !forcedContext ){
	    if( r.prevPxRatio !== pixelRatio ){
	      r.invalidateContainerClientCoordsCache();
	      r.matchCanvasSize( r.container );

	      r.redrawHint('eles', true);
	      r.redrawHint('drag', true);
	    }

	    r.prevPxRatio = pixelRatio;
	  }

	  if( !forcedContext && r.motionBlurTimeout ){
	    clearTimeout( r.motionBlurTimeout );
	  }

	  if( motionBlur ){
	    if( r.mbFrames == null ){
	      r.mbFrames = 0;
	    }

	    if( !r.drawingImage ){ // image loading frames don't count towards motion blur blurry frames
	      r.mbFrames++;
	    }

	    if( r.mbFrames < 3 ){ // need several frames before even high quality motionblur
	      motionBlurFadeEffect = false;
	    }

	    // go to lower quality blurry frames when several m/b frames have been rendered (avoids flashing)
	    if( r.mbFrames > r.minMbLowQualFrames ){
	      //r.fullQualityMb = false;
	      r.motionBlurPxRatio = r.mbPxRBlurry;
	    }
	  }

	  if( r.clearingMotionBlur ){
	    r.motionBlurPxRatio = 1;
	  }

	  // b/c drawToContext() may be async w.r.t. redraw(), keep track of last texture frame
	  // because a rogue async texture frame would clear needDraw
	  if( r.textureDrawLastFrame && !textureDraw ){
	    needDraw[ r.NODE ] = true;
	    needDraw[ r.SELECT_BOX ] = true;
	  }

	  var coreStyle = cy.style()._private.coreStyle;

	  var zoom = cy.zoom();
	  var effectiveZoom = forcedZoom !== undefined ? forcedZoom : zoom;
	  var pan = cy.pan();
	  var effectivePan = {
	    x: pan.x,
	    y: pan.y
	  };

	  var vp = {
	    zoom: zoom,
	    pan: {
	      x: pan.x,
	      y: pan.y
	    }
	  };
	  var prevVp = r.prevViewport;
	  var viewportIsDiff = prevVp === undefined || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y;

	  // we want the low quality motionblur only when the viewport is being manipulated etc (where it's not noticed)
	  if( !viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes) ){
	    r.motionBlurPxRatio = 1;
	  }

	  if( forcedPan ){
	    effectivePan = forcedPan;
	  }

	  // apply pixel ratio

	  effectiveZoom *= pixelRatio;
	  effectivePan.x *= pixelRatio;
	  effectivePan.y *= pixelRatio;

	  var eles = r.getCachedZSortedEles();

	  function mbclear( context, x, y, w, h ){
	    var gco = context.globalCompositeOperation;

	    context.globalCompositeOperation = 'destination-out';
	    r.fillStyle( context, 255, 255, 255, r.motionBlurTransparency );
	    context.fillRect( x, y, w, h );

	    context.globalCompositeOperation = gco;
	  }

	  function setContextTransform( context, clear ){
	    var ePan, eZoom, w, h;

	    if( !r.clearingMotionBlur && (context === data.bufferContexts[ r.MOTIONBLUR_BUFFER_NODE ] || context === data.bufferContexts[ r.MOTIONBLUR_BUFFER_DRAG ]) ){
	      ePan = {
	        x: pan.x * mbPxRatio,
	        y: pan.y * mbPxRatio
	      };

	      eZoom = zoom * mbPxRatio;

	      w = r.canvasWidth * mbPxRatio;
	      h = r.canvasHeight * mbPxRatio;
	    } else {
	      ePan = effectivePan;
	      eZoom = effectiveZoom;

	      w = r.canvasWidth;
	      h = r.canvasHeight;
	    }

	    context.setTransform( 1, 0, 0, 1, 0, 0 );

	    if( clear === 'motionBlur' ){
	      mbclear( context, 0, 0, w, h );
	    } else if( !forcedContext && (clear === undefined || clear) ){
	      context.clearRect( 0, 0, w, h );
	    }

	    if( !drawAllLayers ){
	      context.translate( ePan.x, ePan.y );
	      context.scale( eZoom, eZoom );
	    }
	    if( forcedPan ){
	      context.translate( forcedPan.x, forcedPan.y );
	    }
	    if( forcedZoom ){
	      context.scale( forcedZoom, forcedZoom );
	    }
	  }

	  if( !textureDraw ){
	    r.textureDrawLastFrame = false;
	  }

	  if( textureDraw ){
	    r.textureDrawLastFrame = true;

	    var bb;

	    if( !r.textureCache ){
	      r.textureCache = {};

	      bb = r.textureCache.bb = cy.mutableElements().boundingBox();

	      r.textureCache.texture = r.data.bufferCanvases[ r.TEXTURE_BUFFER ];

	      var cxt = r.data.bufferContexts[ r.TEXTURE_BUFFER ];

	      cxt.setTransform( 1, 0, 0, 1, 0, 0 );
	      cxt.clearRect( 0, 0, r.canvasWidth * r.textureMult, r.canvasHeight * r.textureMult );

	      r.render( {
	        forcedContext: cxt,
	        drawOnlyNodeLayer: true,
	        forcedPxRatio: pixelRatio * r.textureMult
	      } );

	      var vp = r.textureCache.viewport = {
	        zoom: cy.zoom(),
	        pan: cy.pan(),
	        width: r.canvasWidth,
	        height: r.canvasHeight
	      };

	      vp.mpan = {
	        x: (0 - vp.pan.x) / vp.zoom,
	        y: (0 - vp.pan.y) / vp.zoom
	      };
	    }

	    needDraw[ r.DRAG ] = false;
	    needDraw[ r.NODE ] = false;

	    var context = data.contexts[ r.NODE ];

	    var texture = r.textureCache.texture;
	    var vp = r.textureCache.viewport;
	    bb = r.textureCache.bb;

	    context.setTransform( 1, 0, 0, 1, 0, 0 );

	    if( motionBlur ){
	      mbclear( context, 0, 0, vp.width, vp.height );
	    } else {
	      context.clearRect( 0, 0, vp.width, vp.height );
	    }

	    var outsideBgColor = coreStyle[ 'outside-texture-bg-color' ].value;
	    var outsideBgOpacity = coreStyle[ 'outside-texture-bg-opacity' ].value;
	    r.fillStyle( context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity );
	    context.fillRect( 0, 0, vp.width, vp.height );

	    var zoom = cy.zoom();

	    setContextTransform( context, false );

	    context.clearRect( vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio );
	    context.drawImage( texture, vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio );

	  } else if( r.textureOnViewport && !forcedContext ){ // clear the cache since we don't need it
	    r.textureCache = null;
	  }

	  var extent = cy.extent();
	  var vpManip = (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming || r.hoverData.draggingEles);
	  var hideEdges = r.hideEdgesOnViewport && vpManip;

	  var needMbClear = [];

	  needMbClear[ r.NODE ] = !needDraw[ r.NODE ] && motionBlur && !r.clearedForMotionBlur[ r.NODE ] || r.clearingMotionBlur;
	  if( needMbClear[ r.NODE ] ){ r.clearedForMotionBlur[ r.NODE ] = true; }

	  needMbClear[ r.DRAG ] = !needDraw[ r.DRAG ] && motionBlur && !r.clearedForMotionBlur[ r.DRAG ] || r.clearingMotionBlur;
	  if( needMbClear[ r.DRAG ] ){ r.clearedForMotionBlur[ r.DRAG ] = true; }

	  if( needDraw[ r.NODE ] || drawAllLayers || drawOnlyNodeLayer || needMbClear[ r.NODE ] ){
	    var useBuffer = motionBlur && !needMbClear[ r.NODE ] && mbPxRatio !== 1;
	    var context = forcedContext || ( useBuffer ? r.data.bufferContexts[ r.MOTIONBLUR_BUFFER_NODE ] : data.contexts[ r.NODE ] );
	    var clear = motionBlur && !useBuffer ? 'motionBlur' : undefined;

	    setContextTransform( context, clear );

	    if( hideEdges ){
	      r.drawCachedNodes( context, eles.nondrag, pixelRatio, extent );
	    } else {
	      r.drawLayeredElements( context, eles.nondrag, pixelRatio, extent );
	    }

	    if( !drawAllLayers && !motionBlur ){
	      needDraw[ r.NODE ] = false;
	    }
	  }

	  if( !drawOnlyNodeLayer && (needDraw[ r.DRAG ] || drawAllLayers || needMbClear[ r.DRAG ]) ){
	    var useBuffer = motionBlur && !needMbClear[ r.DRAG ] && mbPxRatio !== 1;
	    var context = forcedContext || ( useBuffer ? r.data.bufferContexts[ r.MOTIONBLUR_BUFFER_DRAG ] : data.contexts[ r.DRAG ] );

	    setContextTransform( context, motionBlur && !useBuffer ? 'motionBlur' : undefined );

	    if( hideEdges ){
	      r.drawCachedNodes( context, eles.drag, pixelRatio, extent );
	    } else {
	      r.drawCachedElements( context, eles.drag, pixelRatio, extent );
	    }

	    if( !drawAllLayers && !motionBlur ){
	      needDraw[ r.DRAG ] = false;
	    }
	  }

	  if( r.showFps || (!drawOnlyNodeLayer && (needDraw[ r.SELECT_BOX ] && !drawAllLayers)) ){
	    var context = forcedContext || data.contexts[ r.SELECT_BOX ];

	    setContextTransform( context );

	    if( r.selection[4] == 1 && ( r.hoverData.selecting || r.touchData.selecting ) ){
	      var zoom = r.cy.zoom();
	      var borderWidth = coreStyle[ 'selection-box-border-width' ].value / zoom;

	      context.lineWidth = borderWidth;
	      context.fillStyle = 'rgba('
	        + coreStyle[ 'selection-box-color' ].value[0] + ','
	        + coreStyle[ 'selection-box-color' ].value[1] + ','
	        + coreStyle[ 'selection-box-color' ].value[2] + ','
	        + coreStyle[ 'selection-box-opacity' ].value + ')';

	      context.fillRect(
	        r.selection[0],
	        r.selection[1],
	        r.selection[2] - r.selection[0],
	        r.selection[3] - r.selection[1] );

	      if( borderWidth > 0 ){
	        context.strokeStyle = 'rgba('
	          + coreStyle[ 'selection-box-border-color' ].value[0] + ','
	          + coreStyle[ 'selection-box-border-color' ].value[1] + ','
	          + coreStyle[ 'selection-box-border-color' ].value[2] + ','
	          + coreStyle[ 'selection-box-opacity' ].value + ')';

	        context.strokeRect(
	          r.selection[0],
	          r.selection[1],
	          r.selection[2] - r.selection[0],
	          r.selection[3] - r.selection[1] );
	      }
	    }

	    if( data.bgActivePosistion && !r.hoverData.selecting ){
	      var zoom = r.cy.zoom();
	      var pos = data.bgActivePosistion;

	      context.fillStyle = 'rgba('
	        + coreStyle[ 'active-bg-color' ].value[0] + ','
	        + coreStyle[ 'active-bg-color' ].value[1] + ','
	        + coreStyle[ 'active-bg-color' ].value[2] + ','
	        + coreStyle[ 'active-bg-opacity' ].value + ')';

	      context.beginPath();
	      context.arc( pos.x, pos.y, coreStyle[ 'active-bg-size' ].pfValue / zoom, 0, 2 * Math.PI );
	      context.fill();
	    }

	    var timeToRender = r.lastRedrawTime;
	    if( r.showFps && timeToRender ){
	      timeToRender = Math.round( timeToRender );
	      var fps = Math.round( 1000 / timeToRender );

	      context.setTransform( 1, 0, 0, 1, 0, 0 );

	      context.fillStyle = 'rgba(255, 0, 0, 0.75)';
	      context.strokeStyle = 'rgba(255, 0, 0, 0.75)';
	      context.lineWidth = 1;
	      context.fillText( '1 frame = ' + timeToRender + ' ms = ' + fps + ' fps', 0, 20 );

	      var maxFps = 60;
	      context.strokeRect( 0, 30, 250, 20 );
	      context.fillRect( 0, 30, 250 * Math.min( fps / maxFps, 1 ), 20 );
	    }

	    if( !drawAllLayers ){
	      needDraw[ r.SELECT_BOX ] = false;
	    }
	  }

	  // motionblur: blit rendered blurry frames
	  if( motionBlur && mbPxRatio !== 1 ){
	    var cxtNode = data.contexts[ r.NODE ];
	    var txtNode = r.data.bufferCanvases[ r.MOTIONBLUR_BUFFER_NODE ];

	    var cxtDrag = data.contexts[ r.DRAG ];
	    var txtDrag = r.data.bufferCanvases[ r.MOTIONBLUR_BUFFER_DRAG ];

	    var drawMotionBlur = function( cxt, txt, needClear ){
	      cxt.setTransform( 1, 0, 0, 1, 0, 0 );

	      if( needClear || !motionBlurFadeEffect ){
	        cxt.clearRect( 0, 0, r.canvasWidth, r.canvasHeight );
	      } else {
	        mbclear( cxt, 0, 0, r.canvasWidth, r.canvasHeight );
	      }

	      var pxr = mbPxRatio;

	      cxt.drawImage(
	        txt, // img
	        0, 0, // sx, sy
	        r.canvasWidth * pxr, r.canvasHeight * pxr, // sw, sh
	        0, 0, // x, y
	        r.canvasWidth, r.canvasHeight // w, h
	      );
	    };

	    if( needDraw[ r.NODE ] || needMbClear[ r.NODE ] ){
	      drawMotionBlur( cxtNode, txtNode, needMbClear[ r.NODE ] );
	      needDraw[ r.NODE ] = false;
	    }

	    if( needDraw[ r.DRAG ] || needMbClear[ r.DRAG ] ){
	      drawMotionBlur( cxtDrag, txtDrag, needMbClear[ r.DRAG ] );
	      needDraw[ r.DRAG ] = false;
	    }
	  }

	  r.prevViewport = vp;

	  if( r.clearingMotionBlur ){
	    r.clearingMotionBlur = false;
	    r.motionBlurCleared = true;
	    r.motionBlur = true;
	  }

	  if( motionBlur ){
	    r.motionBlurTimeout = setTimeout( function(){
	      r.motionBlurTimeout = null;

	      r.clearedForMotionBlur[ r.NODE ] = false;
	      r.clearedForMotionBlur[ r.DRAG ] = false;
	      r.motionBlur = false;
	      r.clearingMotionBlur = !textureDraw;
	      r.mbFrames = 0;

	      needDraw[ r.NODE ] = true;
	      needDraw[ r.DRAG ] = true;

	      r.redraw();
	    }, motionBlurDelay );
	  }

	  r.drawingImage = false;


	  if( !forcedContext && !r.initrender ){
	    r.initrender = true;
	    cy.trigger( 'initrender' );
	  }

	  if( !forcedContext ){
	    cy.trigger('render');
	  }

	};

	module.exports = CRp;


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var math = __webpack_require__( 76 );

	var CRp = {};

	// @O Polygon drawing
	CRp.drawPolygonPath = function(
	  context, x, y, width, height, points ){

	  var halfW = width / 2;
	  var halfH = height / 2;

	  if( context.beginPath ){ context.beginPath(); }

	  context.moveTo( x + halfW * points[0], y + halfH * points[1] );

	  for( var i = 1; i < points.length / 2; i++ ){
	    context.lineTo( x + halfW * points[ i * 2], y + halfH * points[ i * 2 + 1] );
	  }

	  context.closePath();
	};

	// Round rectangle drawing
	CRp.drawRoundRectanglePath = function(
	  context, x, y, width, height, radius ){

	  var halfWidth = width / 2;
	  var halfHeight = height / 2;
	  var cornerRadius = math.getRoundRectangleRadius( width, height );

	  if( context.beginPath ){ context.beginPath(); }

	  // Start at top middle
	  context.moveTo( x, y - halfHeight );
	  // Arc from middle top to right side
	  context.arcTo( x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius );
	  // Arc from right side to bottom
	  context.arcTo( x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius );
	  // Arc from bottom to left side
	  context.arcTo( x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius );
	  // Arc from left side to topBorder
	  context.arcTo( x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius );
	  // Join line
	  context.lineTo( x, y - halfHeight );


	  context.closePath();
	};

	var sin0 = Math.sin( 0 );
	var cos0 = Math.cos( 0 );

	var sin = {};
	var cos = {};

	var ellipseStepSize = Math.PI / 40;

	for( var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize ){
	  sin[ i ] = Math.sin( i );
	  cos[ i ] = Math.cos( i );
	}

	CRp.drawEllipsePath = function( context, centerX, centerY, width, height ){
	    if( context.beginPath ){ context.beginPath(); }

	    if( context.ellipse ){
	      context.ellipse( centerX, centerY, width / 2, height / 2, 0, 0, 2 * Math.PI );
	    } else {
	      var xPos, yPos;
	      var rw = width / 2;
	      var rh = height / 2;
	      for( var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize ){
	        xPos = centerX - (rw * sin[ i ]) * sin0 + (rw * cos[ i ]) * cos0;
	        yPos = centerY + (rh * cos[ i ]) * sin0 + (rh * sin[ i ]) * cos0;

	        if( i === 0 ){
	          context.moveTo( xPos, yPos );
	        } else {
	          context.lineTo( xPos, yPos );
	        }
	      }
	    }

	    context.closePath();
	  };

	module.exports = CRp;


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );

	var CRp = {};

	CRp.createBuffer = function( w, h ){
	  var buffer = document.createElement( 'canvas' );
	  buffer.width = w;
	  buffer.height = h;

	  return [ buffer, buffer.getContext( '2d' ) ];
	};

	CRp.bufferCanvasImage = function( options ){
	  var cy = this.cy;
	  var eles = cy.mutableElements();
	  var bb = eles.boundingBox();
	  var width = options.full ? Math.ceil( bb.w ) : this.container.clientWidth;
	  var height = options.full ? Math.ceil( bb.h ) : this.container.clientHeight;
	  var specdMaxDims = is.number( options.maxWidth ) || is.number( options.maxHeight );
	  var pxRatio = this.getPixelRatio();
	  var scale = 1;

	  if( options.scale !== undefined ){
	    width *= options.scale;
	    height *= options.scale;

	    scale = options.scale;
	  } else if( specdMaxDims ){
	    var maxScaleW = Infinity;
	    var maxScaleH = Infinity;

	    if( is.number( options.maxWidth ) ){
	      maxScaleW = scale * options.maxWidth / width;
	    }

	    if( is.number( options.maxHeight ) ){
	      maxScaleH = scale * options.maxHeight / height;
	    }

	    scale = Math.min( maxScaleW, maxScaleH );

	    width *= scale;
	    height *= scale;
	  }

	  if( !specdMaxDims ){
	    width *= pxRatio;
	    height *= pxRatio;
	    scale *= pxRatio;
	  }

	  var buffCanvas = document.createElement( 'canvas' );

	  buffCanvas.width = width;
	  buffCanvas.height = height;

	  buffCanvas.style.width = width + 'px';
	  buffCanvas.style.height = height + 'px';

	  var buffCxt = buffCanvas.getContext( '2d' );

	  // Rasterize the layers, but only if container has nonzero size
	  if( width > 0 && height > 0 ){

	    buffCxt.clearRect( 0, 0, width, height );

	    if( options.bg ){
	      buffCxt.fillStyle = options.bg;
	      buffCxt.rect( 0, 0, width, height );
	      buffCxt.fill();
	    }

	    buffCxt.globalCompositeOperation = 'source-over';

	    var zsortedEles = this.getCachedZSortedEles();

	    if( options.full ){ // draw the full bounds of the graph
	      buffCxt.translate( -bb.x1 * scale, -bb.y1 * scale );
	      buffCxt.scale( scale, scale );

	      this.drawElements( buffCxt, zsortedEles );
	    } else { // draw the current view
	      var pan = cy.pan();

	      var translation = {
	        x: pan.x * scale,
	        y: pan.y * scale
	      };

	      scale *= cy.zoom();

	      buffCxt.translate( translation.x, translation.y );
	      buffCxt.scale( scale, scale );

	      this.drawElements( buffCxt, zsortedEles );
	    }
	  }

	  return buffCanvas;
	};

	CRp.png = function( options ){
	  return this.bufferCanvasImage( options ).toDataURL( 'image/png' );
	};

	CRp.jpg = function( options ){
	  return this.bufferCanvasImage( options ).toDataURL( 'image/jpeg' );
	};

	module.exports = CRp;


/***/ },
/* 174 */
/***/ function(module, exports) {

	'use strict';

	var CRp = {};

	var impl;

	CRp.nodeShapeImpl = function( name ){
	  var self = this;

	  return ( impl || (impl = {
	    'ellipse': function( context, centerX, centerY, width, height ){
	      self.drawEllipsePath( context, centerX, centerY, width, height );
	    },

	    'polygon': function( context, centerX, centerY, width, height, points ){
	      self.drawPolygonPath( context, centerX, centerY, width, height, points );
	    },

	    'roundrectangle': function( context, centerX, centerY, width, height ){
	      self.drawRoundRectanglePath( context, centerX, centerY, width, height, 10 );
	    }
	  }) )[ name ];
	};

	module.exports = CRp;


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );

	var cyReg = function( $ele ){
	  var d = $ele[0]._cyreg = $ele[0]._cyreg || {};

	  return d;
	};

	var registerJquery = function( $, cytoscape ){
	  if( !$ ){ return; } // no jquery => don't need this

	  if( $.fn.cytoscape ){ return; } // already registered

	  // allow calls on a jQuery selector by proxying calls to $.cytoscape
	  // e.g. $("#foo").cytoscape(options) => $.cytoscape(options) on #foo
	  $.fn.cytoscape = function( opts ){
	    var $this = $( this );

	    // get object
	    if( opts === 'get' ){
	      return cyReg( $this ).cy;
	    }

	    // bind to ready
	    else if( is.fn( opts ) ){

	      var ready = opts;
	      var cy = cyReg( $this ).cy;

	      if( cy && cy.isReady() ){ // already ready so just trigger now
	        cy.trigger( 'ready', [], ready );

	      } else { // not yet ready, so add to readies list
	        var data = cyReg( $this );
	        var readies = data.readies = data.readies || [];

	        readies.push( ready );
	      }

	    }

	    // proxy to create instance
	    else if( is.plainObject( opts ) ){
	      return $this.each( function(){
	        var options = $.extend( {}, opts, {
	          container: $( this )[0]
	        } );

	        cytoscape( options );
	      } );
	    }
	  };

	  // allow access to the global cytoscape object under jquery for legacy reasons
	  $.cytoscape = cytoscape;

	  // use short alias (cy) if not already defined
	  if( $.fn.cy == null && $.cy == null ){
	    $.fn.cy = $.fn.cytoscape;
	    $.cy = $.cytoscape;
	  }
	};

	module.exports = registerJquery;


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var is = __webpack_require__( 73 );
	var util = __webpack_require__( 75 );
	var Style = __webpack_require__( 128 );

	// a dummy stylesheet object that doesn't need a reference to the core
	// (useful for init)
	var Stylesheet = function(){
	  if( !(this instanceof Stylesheet) ){
	    return new Stylesheet();
	  }

	  this.length = 0;
	};

	var sheetfn = Stylesheet.prototype;

	sheetfn.instanceString = function(){
	  return 'stylesheet';
	};

	// just store the selector to be parsed later
	sheetfn.selector = function( selector ){
	  var i = this.length++;

	  this[ i ] = {
	    selector: selector,
	    properties: []
	  };

	  return this; // chaining
	};

	// just store the property to be parsed later
	sheetfn.css = function( name, value ){
	  var i = this.length - 1;

	  if( is.string( name ) ){
	    this[ i ].properties.push( {
	      name: name,
	      value: value
	    } );
	  } else if( is.plainObject( name ) ){
	    var map = name;

	    for( var j = 0; j < Style.properties.length; j++ ){
	      var prop = Style.properties[ j ];
	      var mapVal = map[ prop.name ];

	      if( mapVal === undefined ){ // also try camel case name
	        mapVal = map[ util.dash2camel( prop.name ) ];
	      }

	      if( mapVal !== undefined ){
	        var name = prop.name;
	        var value = mapVal;

	        this[ i ].properties.push( {
	          name: name,
	          value: value
	        } );
	      }
	    }
	  }

	  return this; // chaining
	};

	sheetfn.style = sheetfn.css;

	// generate a real style object from the dummy stylesheet
	sheetfn.generateStyle = function( cy ){
	  var style = new Style( cy );

	  for( var i = 0; i < this.length; i++ ){
	    var context = this[ i ];
	    var selector = context.selector;
	    var props = context.properties;

	    style.selector( selector ); // apply selector

	    for( var j = 0; j < props.length; j++ ){
	      var prop = props[ j ];

	      style.css( prop.name, prop.value ); // apply property
	    }
	  }

	  return style;
	};

	module.exports = Stylesheet;


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/*! Weaver licensed under MIT (https://tldrlegal.com/license/mit-license), copyright Max Franz */

	'use strict';

	var is = __webpack_require__(73);
	var util = __webpack_require__(75);
	var Thread = __webpack_require__(145);
	var Promise = __webpack_require__(101);
	var define = __webpack_require__(99);

	var Fabric = function( N ){
	  if( !(this instanceof Fabric) ){
	    return new Fabric( N );
	  }

	  this._private = {
	    pass: []
	  };

	  var defN = 4;

	  if( is.number(N) ){
	    // then use the specified number of threads
	  } if( typeof navigator !== 'undefined' && navigator.hardwareConcurrency != null ){
	    N = navigator.hardwareConcurrency;
	  } else {
	    try{
	      N = __webpack_require__(178).cpus().length;
	    } catch( err ){
	      N = defN;
	    }
	  } // TODO could use an estimation here but would the additional expense be worth it?

	  for( var i = 0; i < N; i++ ){
	    this[i] = new Thread();
	  }

	  this.length = N;
	};

	var fabfn = Fabric.prototype; // short alias

	util.extend(fabfn, {

	  instanceString: function(){ return 'fabric'; },

	  // require fn in all threads
	  require: function( fn, as ){
	    for( var i = 0; i < this.length; i++ ){
	      var thread = this[i];

	      thread.require( fn, as );
	    }

	    return this;
	  },

	  // get a random thread
	  random: function(){
	    var i = Math.round( (this.length - 1) * Math.random() );
	    var thread = this[i];

	    return thread;
	  },

	  // run on random thread
	  run: function( fn ){
	    var pass = this._private.pass.shift();

	    return this.random().pass( pass ).run( fn );
	  },

	  // sends a random thread a message
	  message: function( m ){
	    return this.random().message( m );
	  },

	  // send all threads a message
	  broadcast: function( m ){
	    for( var i = 0; i < this.length; i++ ){
	      var thread = this[i];

	      thread.message( m );
	    }

	    return this; // chaining
	  },

	  // stop all threads
	  stop: function(){
	    for( var i = 0; i < this.length; i++ ){
	      var thread = this[i];

	      thread.stop();
	    }

	    return this; // chaining
	  },

	  // pass data to be used with .spread() etc.
	  pass: function( data ){
	    var pass = this._private.pass;

	    if( is.array(data) ){
	      pass.push( data );
	    } else {
	      throw 'Only arrays may be used with fabric.pass()';
	    }

	    return this; // chaining
	  },

	  spreadSize: function(){
	    var subsize =  Math.ceil( this._private.pass[0].length / this.length );

	    subsize = Math.max( 1, subsize ); // don't pass less than one ele to each thread

	    return subsize;
	  },

	  // split the data into slices to spread the data equally among threads
	  spread: function( fn ){
	    var self = this;
	    var _p = self._private;
	    var subsize = self.spreadSize(); // number of pass eles to handle in each thread
	    var pass = _p.pass.shift().concat([]); // keep a copy
	    var runPs = [];

	    for( var i = 0; i < this.length; i++ ){
	      var thread = this[i];
	      var slice = pass.splice( 0, subsize );

	      var runP = thread.pass( slice ).run( fn );

	      runPs.push( runP );

	      var doneEarly = pass.length === 0;
	      if( doneEarly ){ break; }
	    }

	    return Promise.all( runPs ).then(function( thens ){
	      var postpass = [];
	      var p = 0;

	      // fill postpass with the total result joined from all threads
	      for( var i = 0; i < thens.length; i++ ){
	        var then = thens[i]; // array result from thread i

	        for( var j = 0; j < then.length; j++ ){
	          var t = then[j]; // array element

	          postpass[ p++ ] = t;
	        }
	      }

	      return postpass;
	    });
	  },

	  // parallel version of array.map()
	  map: function( fn ){
	    var self = this;

	    self.require( fn, '_$_$_fabmap' );

	    return self.spread(function( split ){
	      var mapped = [];
	      var origResolve = resolve; // jshint ignore:line

	      resolve = function( val ){ // jshint ignore:line
	        mapped.push( val );
	      };

	      for( var i = 0; i < split.length; i++ ){
	        var oldLen = mapped.length;
	        var ret = _$_$_fabmap( split[i] ); // jshint ignore:line
	        var nothingInsdByResolve = oldLen === mapped.length;

	        if( nothingInsdByResolve ){
	          mapped.push( ret );
	        }
	      }

	      resolve = origResolve; // jshint ignore:line

	      return mapped;
	    });

	  },

	  // parallel version of array.filter()
	  filter: function( fn ){
	    var _p = this._private;
	    var pass = _p.pass[0];

	    return this.map( fn ).then(function( include ){
	      var ret = [];

	      for( var i = 0; i < pass.length; i++ ){
	        var datum = pass[i];
	        var incDatum = include[i];

	        if( incDatum ){
	          ret.push( datum );
	        }
	      }

	      return ret;
	    });
	  },

	  // sorts the passed array using a divide and conquer strategy
	  sort: function( cmp ){
	    var self = this;
	    var P = this._private.pass[0].length;
	    var subsize = this.spreadSize();

	    cmp = cmp || function( a, b ){ // default comparison function
	      if( a < b ){
	        return -1;
	      } else if( a > b ){
	        return 1;
	      }

	      return 0;
	    };

	    self.require( cmp, '_$_$_cmp' );

	    return self.spread(function( split ){ // sort each split normally
	      var sortedSplit = split.sort( _$_$_cmp ); // jshint ignore:line
	      resolve( sortedSplit ); // jshint ignore:line

	    }).then(function( joined ){
	      // do all the merging in the main thread to minimise data transfer

	      // TODO could do merging in separate threads but would incur add'l cost of data transfer
	      // for each level of the merge

	      var merge = function( i, j, max ){
	        // don't overflow array
	        j = Math.min( j, P );
	        max = Math.min( max, P );

	        // left and right sides of merge
	        var l = i;
	        var r = j;

	        var sorted = [];

	        for( var k = l; k < max; k++ ){

	          var eleI = joined[i];
	          var eleJ = joined[j];

	          if( i < r && ( j >= max || cmp(eleI, eleJ) <= 0 ) ){
	            sorted.push( eleI );
	            i++;
	          } else {
	            sorted.push( eleJ );
	            j++;
	          }

	        }

	        // in the array proper, put the sorted values
	        for( var k = 0; k < sorted.length; k++ ){ // kth sorted item
	          var index = l + k;

	          joined[ index ] = sorted[k];
	        }
	      };

	      for( var splitL = subsize; splitL < P; splitL *= 2 ){ // merge until array is "split" as 1

	        for( var i = 0; i < P; i += 2*splitL ){
	          merge( i, i + splitL, i + 2*splitL );
	        }

	      }

	      return joined;
	    });
	  }


	});

	var defineRandomPasser = function( opts ){
	  opts = opts || {};

	  return function( fn, arg1 ){
	    var pass = this._private.pass.shift();

	    return this.random().pass( pass )[ opts.threadFn ]( fn, arg1 );
	  };
	};

	util.extend(fabfn, {
	  randomMap: defineRandomPasser({ threadFn: 'map' }),

	  reduce: defineRandomPasser({ threadFn: 'reduce' }),

	  reduceRight: defineRandomPasser({ threadFn: 'reduceRight' })
	});

	// aliases
	var fn = fabfn;
	fn.promise = fn.run;
	fn.terminate = fn.halt = fn.stop;
	fn.include = fn.require;

	// pull in event apis
	util.extend(fabfn, {
	  on: define.on(),
	  one: define.on({ unbindSelfOnTrigger: true }),
	  off: define.off(),
	  trigger: define.trigger()
	});

	define.eventAliasesOn( fabfn );

	module.exports = Fabric;


/***/ },
/* 178 */
/***/ function(module, exports) {

	exports.endianness = function () { return 'LE' };

	exports.hostname = function () {
	    if (typeof location !== 'undefined') {
	        return location.hostname
	    }
	    else return '';
	};

	exports.loadavg = function () { return [] };

	exports.uptime = function () { return 0 };

	exports.freemem = function () {
	    return Number.MAX_VALUE;
	};

	exports.totalmem = function () {
	    return Number.MAX_VALUE;
	};

	exports.cpus = function () { return [] };

	exports.type = function () { return 'Browser' };

	exports.release = function () {
	    if (typeof navigator !== 'undefined') {
	        return navigator.appVersion;
	    }
	    return '';
	};

	exports.networkInterfaces
	= exports.getNetworkInterfaces
	= function () { return {} };

	exports.arch = function () { return 'javascript' };

	exports.platform = function () { return 'browser' };

	exports.tmpdir = exports.tmpDir = function () {
	    return '/tmp';
	};

	exports.EOL = '\n';


/***/ },
/* 179 */
/***/ function(module, exports) {

	"2.7.6"

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2016, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var pw = __webpack_require__(20);
	var ph_m = __webpack_require__(181);
	var gr = __webpack_require__(69);

	var cd_app = {};
	var node_list = [];

	exports.headerExtension = {
	    id: 'cadets.topbar.header',
	    activate: activateHeader,
	    diffAdd: addToDiffList,
	    diffClear: clearDiff
	};
	function createCommandItem(id, message) {
	    return { id: id, handler: function () { console.log("COMMAND: " + message); } };
	}

	var logHandler = function(item) {
	  console.log(item.text);
	}

	var diff_handler = function(item) {
	  if(node_list.length<2) return;
	  var r1 = node_list[0];
	  var r2 = node_list[1];
	  node_list = [];

	  var style= [ // the stylesheet for the graph
	      {
	          selector: 'node',
	          style: {
	              'background-color': '#666666',
	              'label': 'data(name)',
	              'background-opacity': '0.3'
	          }
	      },
	      {
	          selector: 'node[name *= "crt1.o"]',
	          style: {
	              'overlay-color': '#f00',
	              'overlay-padding': 10,
	              'overlay-opacity': 0.3,
	          }
	      },
	      {
	          selector: 'node[chg = "del"]',
	          style: {
	              'background-color': '#ff0000',
	              'background-opacity': '1.0'
	          }
	      },
	      {
	          selector: 'node[chg = "add"]',
	          style: {
	              'background-color': '#00ff00',
	              'background-opacity': '1.0'
	          }
	      },
	      {
	          selector: 'edge',
	          style: {
	              'width': 5,
	              'curve-style': 'bezier',
	              'line-color': '#e6e6e6',
	              'target-arrow-color': '#e6e6e6',
	              'target-arrow-shape': 'triangle'
	          }
	      },
	      {
	          selector: 'edge[chg = "add"]',
	          style: {
	              'line-color': '#00ff00',
	              'target-arrow-color': '#0f0',
	          }
	      },
	      {
	          selector: 'edge[chg = "del"]',
	          style: {
	              'line-color': '#ff0000',
	              'target-arrow-color': '#f00',
	          }
	      }
	  ];
	  $.ajax({url: "../diffgraph?gnode_id1="+r1+"&gnode_id2="+r2,
	          type: "GET",
	          async: true,
	          success: function(data){
	              data = $.parseJSON(data)
	              var options = {
	                  name: 'breadthfirst',

	                  fit: true, // whether to fit the viewport to the graph
	                  directed: false, // whether the tree is directed downwards (or edges can point in any direction if false)
	                  padding: 30, // padding on fit
	                  circle: false, // put depths in concentric circles if true, put depths top down if false
	                  spacingFactor: 1, // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
	                  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	                  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
	                  roots: [data.root], // the roots of the trees
	                  maximalAdjustments: 0, // how many times to try to position the nodes in a maximal way (i.e. no backtracking)
	                  animate: true, // whether to transition the node positions
	                  animationDuration: 500, // duration of animation in ms if enabled
	                  animationEasing: undefined, // easing of animation if enabled
	                  ready: undefined, // callback on layoutready
	                  stop: undefined // callback on layoutstop
	              };
	              var id = 'gdiff-'+r1+'-'+r2;
	              var graph = new gr.GraphWidget(data, options, id, style);
	              graph.id = id;
	              graph.title.text = "diff";
	              graph.title.closable = true;
	              cd_app.shell.addToMainArea(graph)
	          }});
	}

	function addToDiffList(gnode_id){
	  node_list.push(gnode_id);
	}

	function clearDiff() {
	  node_list = [];
	}

	function createFileMenu() {
	  var root = new ph_m.Menu([
	      new ph_m.MenuItem({
	        text: 'About',
	        shortcut: 'Ctrl+A',
	        icon: 'fa fa-info-circle',
	        handler: logHandler,
	      }),
	      new ph_m.MenuItem({
	        type: ph_m.MenuItem.Separator
	      }),
	      new ph_m.MenuItem({
	        text: 'Graph Diff',
	        shortcut: 'Ctrl+D',
	        handler: diff_handler,
	      }),
	  ]);
	  return root;
	}

	function activateHeader(app) {
	    cd_app = app;

	    var f_menu = createFileMenu();

	    var bar = new ph_m.MenuBar([
	      new ph_m.MenuItem({
	        text: 'File',
	        submenu: f_menu
	      })
	    ]);
	    bar.id = 'opus-menu';


	    app.shell.addToTopArea(bar, { rank: 10 });
	    return Promise.resolve();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(67)))

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(182));
	__export(__webpack_require__(183));
	__export(__webpack_require__(185));
	__export(__webpack_require__(184));
	__webpack_require__(186);


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var arrays = __webpack_require__(3);
	var phosphor_widget_1 = __webpack_require__(20);
	/**
	 * An abstract base class for implementing menu widgets.
	 *
	 * #### Notes
	 * This class must be subclassed to create a useful menu.
	 */
	var AbstractMenu = (function (_super) {
	    __extends(AbstractMenu, _super);
	    function AbstractMenu() {
	        _super.apply(this, arguments);
	        this._activeIndex = -1;
	        this._items = Object.freeze([]);
	    }
	    Object.defineProperty(AbstractMenu.prototype, "items", {
	        /**
	         * Get the array of menu items for the menu.
	         *
	         * #### Notes
	         * The items array is frozen and cannot be modified in-place.
	         */
	        get: function () {
	            return this._items;
	        },
	        /**
	         * Set the array of menu items for the menu.
	         *
	         * #### Notes
	         * This creates a shallow copy of the assigned menu items.
	         */
	        set: function (value) {
	            if (this._items === value) {
	                return;
	            }
	            this._activeIndex = -1;
	            var oldItems = this._items;
	            this._items = Object.freeze(value.slice());
	            this.onItemsChanged(oldItems, this._items);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractMenu.prototype, "activeIndex", {
	        /**
	         * Get the index of the currently active menu item.
	         *
	         * #### Notes
	         * This will be `-1` if there is no active item.
	         */
	        get: function () {
	            return this._activeIndex;
	        },
	        /**
	         * Set the index of the currently active menu item.
	         *
	         * #### Notes
	         * If the index is out of range, or points to a menu item which is
	         * not selectable, the index will be set to `-1`.
	         *
	         * Setting the active index has O(1) complexity.
	         */
	        set: function (value) {
	            var newIndex = value | 0;
	            var item = this._items[newIndex];
	            if (!item || !this.isSelectable(item)) {
	                newIndex = -1;
	            }
	            var oldIndex = this._activeIndex;
	            if (oldIndex === newIndex) {
	                return;
	            }
	            this._activeIndex = newIndex;
	            this.onActiveIndexChanged(oldIndex, newIndex);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractMenu.prototype, "activeItem", {
	        /**
	         * Get the currently active menu item.
	         *
	         * #### Notes
	         * This will be `null` if there is no active item.
	         */
	        get: function () {
	            return this._items[this._activeIndex] || null;
	        },
	        /**
	         * Set the currently active menu item.
	         *
	         * #### Notes
	         * If the item is not contained in the menu, or is not a selectable
	         * item, the active item will be set to `null`.
	         *
	         * Setting the active item has O(n) complexity.
	         */
	        set: function (value) {
	            this.activeIndex = this._items.indexOf(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Activate the next selectable menu item.
	     *
	     * #### Notes
	     * The search starts with the currently active item, and progresses
	     * forward until the next selectable item is found. The search will
	     * wrap around at the end of the menu.
	     */
	    AbstractMenu.prototype.activateNextItem = function () {
	        var _this = this;
	        var k = this.activeIndex + 1;
	        var i = k >= this.items.length ? 0 : k;
	        var pred = function (item) { return _this.isSelectable(item); };
	        this.activeIndex = arrays.findIndex(this.items, pred, i, true);
	    };
	    /**
	     * Activate the previous selectable menu item.
	     *
	     * #### Notes
	     * The search starts with the currently active item, and progresses
	     * backward until the next selectable item is found. The search will
	     * wrap around at the front of the menu.
	     */
	    AbstractMenu.prototype.activatePreviousItem = function () {
	        var _this = this;
	        var k = this.activeIndex;
	        var i = k <= 0 ? this.items.length - 1 : k - 1;
	        var pred = function (item) { return _this.isSelectable(item); };
	        this.activeIndex = arrays.rfindIndex(this.items, pred, i, true);
	    };
	    /**
	     * Activate the next selectable menu item with the given mnemonic.
	     *
	     * #### Notes
	     * The search starts with the currently active item, and progresses
	     * forward until the next selectable item with the given mnemonic is
	     * found. The search will wrap around at the end of the menu, and the
	     * mnemonic matching is case-insensitive.
	     */
	    AbstractMenu.prototype.activateMnemonicItem = function (char) {
	        var _this = this;
	        var c = char.toUpperCase();
	        var k = this.activeIndex + 1;
	        var i = k >= this.items.length ? 0 : k;
	        this.activeIndex = arrays.findIndex(this.items, function (item) {
	            if (!_this.isSelectable(item)) {
	                return false;
	            }
	            var match = item.text.match(/&\w/);
	            if (!match) {
	                return false;
	            }
	            return match[0][1].toUpperCase() === c;
	        }, i, true);
	    };
	    return AbstractMenu;
	})(phosphor_widget_1.Widget);
	exports.AbstractMenu = AbstractMenu;


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var arrays = __webpack_require__(3);
	var phosphor_domutil_1 = __webpack_require__(7);
	var phosphor_messaging_1 = __webpack_require__(13);
	var phosphor_signaling_1 = __webpack_require__(22);
	var phosphor_widget_1 = __webpack_require__(20);
	var base_1 = __webpack_require__(182);
	var menuitem_1 = __webpack_require__(184);
	/**
	 * The class name added to Menu instances.
	 */
	var MENU_CLASS = 'p-Menu';
	/**
	 * The class name added to a menu content node.
	 */
	var CONTENT_CLASS = 'p-Menu-content';
	/**
	 * The class name added to a menu item node.
	 */
	var ITEM_CLASS = 'p-Menu-item';
	/**
	 * The class name added to a menu item icon cell.
	 */
	var ICON_CLASS = 'p-Menu-itemIcon';
	/**
	 * The class name added to a menu item text cell.
	 */
	var TEXT_CLASS = 'p-Menu-itemText';
	/**
	 * The class name added to a menu item shortcut cell.
	 */
	var SHORTCUT_CLASS = 'p-Menu-itemShortcut';
	/**
	 * The class name added to a menu item submenu icon cell.
	 */
	var SUBMENU_CLASS = 'p-Menu-itemSubmenuIcon';
	/**
	 * The class name added to a check type menu item.
	 */
	var CHECK_TYPE_CLASS = 'p-type-check';
	/**
	 * The class name added to a separator type menu item.
	 */
	var SEPARATOR_TYPE_CLASS = 'p-type-separator';
	/**
	 * The class name added to a submenu type menu item.
	 */
	var SUBMENU_TYPE_CLASS = 'p-type-submenu';
	/**
	 * The class name added to active menu items.
	 */
	var ACTIVE_CLASS = 'p-mod-active';
	/**
	 * The class name added to a disabled menu item.
	 */
	var DISABLED_CLASS = 'p-mod-disabled';
	/**
	 * The class name added to a checked menu item.
	 */
	var CHECKED_CLASS = 'p-mod-checked';
	/**
	 * The class name added to a hidden menu item.
	 */
	var HIDDEN_CLASS = 'p-mod-hidden';
	/**
	 * The ms delay for opening a submenu.
	 */
	var OPEN_DELAY = 300;
	/**
	 * The ms delay for closing a submenu.
	 */
	var CLOSE_DELAY = 300;
	/**
	 * The horizontal px overlap for open submenus.
	 */
	var SUBMENU_OVERLAP = 3;
	/**
	 * A widget which displays menu items as a popup menu.
	 */
	var Menu = (function (_super) {
	    __extends(Menu, _super);
	    /**
	     * Construct a new menu.
	     *
	     * @param items - Optional menu items to initialize the menu.
	     *
	     * #### Notes
	     * Subclasses should not pass menu items to `super`. The subclass
	     * should set its own items after it has been fully initialized.
	     */
	    function Menu(items) {
	        _super.call(this);
	        this._openTimerId = 0;
	        this._closeTimerId = 0;
	        this._parentMenu = null;
	        this._childMenu = null;
	        this._childItem = null;
	        this._nodes = [];
	        this.addClass(MENU_CLASS);
	        if (items)
	            this.items = items;
	    }
	    /**
	     * Create the DOM node for a menu.
	     */
	    Menu.createNode = function () {
	        var node = document.createElement('div');
	        var content = document.createElement('ul');
	        content.className = CONTENT_CLASS;
	        node.appendChild(content);
	        return node;
	    };
	    /**
	     * Create a new item node for a menu.
	     *
	     * @returns A new DOM node to use as an item in a menu.
	     *
	     * #### Notes
	     * This method may be reimplemented to create custom items.
	     */
	    Menu.createItemNode = function () {
	        var node = document.createElement('li');
	        var icon = document.createElement('span');
	        var text = document.createElement('span');
	        var shortcut = document.createElement('span');
	        var submenu = document.createElement('span');
	        node.className = ITEM_CLASS;
	        text.className = TEXT_CLASS;
	        shortcut.className = SHORTCUT_CLASS;
	        submenu.className = SUBMENU_CLASS;
	        node.appendChild(icon);
	        node.appendChild(text);
	        node.appendChild(shortcut);
	        node.appendChild(submenu);
	        return node;
	    };
	    /**
	     * Update an item node to reflect the current state of a menu item.
	     *
	     * @param node - A node created by a call to [[createItemNode]].
	     *
	     * @param item - The menu item to use for the item state.
	     *
	     * #### Notes
	     * This is called automatically when the item should be updated.
	     *
	     * If the [[createItemNode]] method is reimplemented, this method
	     * should also be reimplemented so that the item state is properly
	     * updated.
	     */
	    Menu.updateItemNode = function (node, item) {
	        var sep = item.type === menuitem_1.MenuItem.Separator;
	        var sub = item.type === menuitem_1.MenuItem.Submenu;
	        var icon = node.firstChild;
	        var text = icon.nextSibling;
	        var shortcut = text.nextSibling;
	        node.className = MenuPrivate.createItemClass(item);
	        icon.className = ICON_CLASS + (item.icon ? ' ' + item.icon : '');
	        text.textContent = sep ? '' : item.text.replace(/&/g, '');
	        shortcut.textContent = (sep || sub) ? '' : item.shortcut;
	    };
	    /**
	     * Dispose of the resources held by the menu.
	     */
	    Menu.prototype.dispose = function () {
	        this.close();
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(Menu.prototype, "closed", {
	        /**
	         * A signal emitted when the menu item is closed.
	         */
	        get: function () {
	            return MenuPrivate.closedSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Menu.prototype, "parentMenu", {
	        /**
	         * Get the parent menu of the menu.
	         *
	         * #### Notes
	         * This will be `null` if the menu is not an open submenu.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._parentMenu;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Menu.prototype, "childMenu", {
	        /**
	         * Get the child menu of the menu.
	         *
	         * #### Notes
	         * This will be `null` if the menu does not have an open submenu.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._childMenu;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Menu.prototype, "rootMenu", {
	        /**
	         * Find the root menu of this menu hierarchy.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            var menu = this;
	            while (menu._parentMenu) {
	                menu = menu._parentMenu;
	            }
	            return menu;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Menu.prototype, "leafMenu", {
	        /**
	         * Find the leaf menu of this menu hierarchy.
	         *
	         * #### Notes
	         * This is a read-only property.
	         */
	        get: function () {
	            var menu = this;
	            while (menu._childMenu) {
	                menu = menu._childMenu;
	            }
	            return menu;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Menu.prototype, "contentNode", {
	        /**
	         * Get the menu content node.
	         *
	         * #### Notes
	         * This is the node which holds the menu item nodes.
	         *
	         * Modifying this node directly can lead to undefined behavior.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this.node.getElementsByClassName(CONTENT_CLASS)[0];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Open the submenu of the active item, if possible.
	     *
	     * #### Notes
	     * This is a no-op if the menu is not visible, if there is no active
	     * item, or if the active item is disabled or has a null submenu.
	     */
	    Menu.prototype.openActiveItem = function () {
	        if (!this.isVisible) {
	            return;
	        }
	        var index = this.activeIndex;
	        if (index === -1) {
	            return;
	        }
	        var item = this.items[index];
	        if (item.disabled || !item.submenu) {
	            return;
	        }
	        this._openChildMenu(item, this._nodes[index], false);
	        this._childMenu.activateNextItem();
	    };
	    /**
	     * Trigger the handler of the active item, if possible.
	     *
	     * #### Notes
	     * This is a no-op if the menu is not visible, if there is no
	     * active item, or if the active item is disabled.
	     */
	    Menu.prototype.triggerActiveItem = function () {
	        if (!this.isVisible) {
	            return;
	        }
	        var index = this.activeIndex;
	        if (index === -1) {
	            return;
	        }
	        var item = this.items[index];
	        if (item.disabled) {
	            return;
	        }
	        if (item.submenu) {
	            this._openChildMenu(item, this._nodes[index], false);
	            this._childMenu.activateNextItem();
	            return;
	        }
	        var handler = item.handler;
	        if (!handler) {
	            return;
	        }
	        this.rootMenu.close();
	        handler(item);
	    };
	    /**
	     * Popup the menu at the specified location.
	     *
	     * The menu will be opened at the given location unless it will not
	     * fully fit on the screen. If it will not fit, it will be adjusted
	     * to fit naturally on the screen. The last two optional parameters
	     * control whether the provided coordinate value must be obeyed.
	     *
	     * When the menu is opened as a popup menu, it will handle all key
	     * events related to menu navigation as well as closing the menu
	     * when the mouse is pressed outside of the menu hierarchy. To
	     * prevent these actions, use the [[open]] method instead.
	     *
	     * @param x - The client X coordinate of the popup location.
	     *
	     * @param y - The client Y coordinate of the popup location.
	     *
	     * @param forceX - Whether the X coordinate must be obeyed.
	     *
	     * @param forceY - Whether the Y coordinate must be obeyed.
	     *
	     * #### Notes
	     * This is a no-op if the menu is already attached to the DOM.
	     *
	     * **See also:** [[open]]
	     */
	    Menu.prototype.popup = function (x, y, forceX, forceY) {
	        if (forceX === void 0) { forceX = false; }
	        if (forceY === void 0) { forceY = false; }
	        if (!this.isAttached) {
	            document.addEventListener('keydown', this, true);
	            document.addEventListener('keypress', this, true);
	            document.addEventListener('mousedown', this, true);
	            MenuPrivate.openRootMenu(this, x, y, forceX, forceY);
	        }
	    };
	    /**
	     * Open the menu at the specified location.
	     *
	     * The menu will be opened at the given location unless it will not
	     * fully fit on the screen. If it will not fit, it will be adjusted
	     * to fit naturally on the screen. The last two optional parameters
	     * control whether the provided coordinate value must be obeyed.
	     *
	     * When the menu is opened with this method, it will not handle key
	     * events for navigation, nor will it close itself when the mouse is
	     * pressed outside the menu hierarchy. This is useful when using the
	     * menu from a menubar, where the menubar should handle these tasks.
	     * Use the [[popup]] method for the alternative behavior.
	     *
	     * @param x - The client X coordinate of the popup location.
	     *
	     * @param y - The client Y coordinate of the popup location.
	     *
	     * @param forceX - Whether the X coordinate must be obeyed.
	     *
	     * @param forceY - Whether the Y coordinate must be obeyed.
	     *
	     * #### Notes
	     * This is a no-op if the menu is already attached to the DOM.
	     *
	     * **See also:** [[popup]]
	     */
	    Menu.prototype.open = function (x, y, forceX, forceY) {
	        if (forceX === void 0) { forceX = false; }
	        if (forceY === void 0) { forceY = false; }
	        if (!this.isAttached) {
	            MenuPrivate.openRootMenu(this, x, y, forceX, forceY);
	        }
	    };
	    /**
	     * Handle the DOM events for the menu.
	     *
	     * @param event - The DOM event sent to the menu.
	     *
	     * #### Notes
	     * This method implements the DOM `EventListener` interface and is
	     * called in response to events on the menu's DOM nodes. It should
	     * not be called directly by user code.
	     */
	    Menu.prototype.handleEvent = function (event) {
	        switch (event.type) {
	            case 'mousemove':
	                this._evtMouseMove(event);
	                break;
	            case 'mouseleave':
	                this._evtMouseLeave(event);
	                break;
	            case 'mousedown':
	                this._evtMouseDown(event);
	                break;
	            case 'mouseup':
	                this._evtMouseUp(event);
	                break;
	            case 'keydown':
	                this._evtKeyDown(event);
	                break;
	            case 'keypress':
	                this._evtKeyPress(event);
	                break;
	            case 'contextmenu':
	                event.preventDefault();
	                event.stopPropagation();
	                break;
	        }
	    };
	    /**
	     * A method invoked to test whether an item is selectable.
	     *
	     * @param item - The menu item of interest.
	     *
	     * @returns `true` if the item is selectable, `false` otherwise.
	     */
	    Menu.prototype.isSelectable = function (item) {
	        if (item.disabled || item.type === menuitem_1.MenuItem.Separator) {
	            return false;
	        }
	        if (item.type === menuitem_1.MenuItem.Submenu) {
	            return !!item.submenu;
	        }
	        return !!item.handler;
	    };
	    /**
	     * A method invoked when the menu items change.
	     *
	     * @param oldItems - The old menu items.
	     *
	     * @param newItems - The new menu items.
	     */
	    Menu.prototype.onItemsChanged = function (oldItems, newItems) {
	        // Reset the menu before changing the items.
	        this.close();
	        // Fetch common variables.
	        var nodes = this._nodes;
	        var content = this.contentNode;
	        var constructor = this.constructor;
	        // Remove any excess item nodes.
	        while (nodes.length > newItems.length) {
	            var node = nodes.pop();
	            content.removeChild(node);
	        }
	        // Add any missing item nodes.
	        while (nodes.length < newItems.length) {
	            var node = constructor.createItemNode();
	            content.appendChild(node);
	            nodes.push(node);
	        }
	        // An update is performed just before opening the menu, which
	        // removes the need to connect the menu item `changed` signal.
	    };
	    /**
	     * A method invoked when the active index changes.
	     *
	     * @param oldIndex - The old active index.
	     *
	     * @param newIndex - The new active index.
	     */
	    Menu.prototype.onActiveIndexChanged = function (oldIndex, newIndex) {
	        var oldNode = this._nodes[oldIndex];
	        var newNode = this._nodes[newIndex];
	        if (oldNode)
	            oldNode.classList.remove(ACTIVE_CLASS);
	        if (newNode)
	            newNode.classList.add(ACTIVE_CLASS);
	    };
	    /**
	     * A message handler invoked on a `'close-request'` message.
	     */
	    Menu.prototype.onCloseRequest = function (msg) {
	        // Reset the menu state.
	        this._cancelPendingOpen();
	        this._cancelPendingClose();
	        this.activeIndex = -1;
	        // Close any open child menu.
	        var childMenu = this._childMenu;
	        if (childMenu) {
	            this._childMenu = null;
	            this._childItem = null;
	            childMenu._parentMenu = null;
	            childMenu.close();
	        }
	        // Remove this menu from any parent.
	        var parentMenu = this._parentMenu;
	        if (parentMenu) {
	            this._parentMenu = null;
	            parentMenu._cancelPendingOpen();
	            parentMenu._cancelPendingClose();
	            parentMenu._childMenu = null;
	            parentMenu._childItem = null;
	        }
	        // Ensure this menu is detached.
	        if (this.parent) {
	            this.parent = null;
	            this.closed.emit(void 0);
	        }
	        else if (this.isAttached) {
	            this.detach();
	            this.closed.emit(void 0);
	        }
	    };
	    /**
	     * A handler invoked on an `'update-request'` message.
	     */
	    Menu.prototype.onUpdateRequest = function (msg) {
	        // Fetch common variables.
	        var items = this.items;
	        var nodes = this._nodes;
	        var constructor = this.constructor;
	        // Update the state of the item nodes.
	        for (var i = 0, n = items.length; i < n; ++i) {
	            constructor.updateItemNode(nodes[i], items[i]);
	        }
	        // Restore the active node class.
	        var active = nodes[this.activeIndex];
	        if (active)
	            active.classList.add(ACTIVE_CLASS);
	        // Hide the redundant and useless menu item nodes.
	        MenuPrivate.hideUselessItems(nodes, items);
	    };
	    /**
	     * A message handler invoked on an `'after-attach'` message.
	     */
	    Menu.prototype.onAfterAttach = function (msg) {
	        this.node.addEventListener('mouseup', this);
	        this.node.addEventListener('mousemove', this);
	        this.node.addEventListener('mouseleave', this);
	        this.node.addEventListener('contextmenu', this);
	    };
	    /**
	     * A message handler invoked on a `'before-detach'` message.
	     */
	    Menu.prototype.onBeforeDetach = function (msg) {
	        this.node.removeEventListener('mouseup', this);
	        this.node.removeEventListener('mousemove', this);
	        this.node.removeEventListener('mouseleave', this);
	        this.node.removeEventListener('contextmenu', this);
	        document.removeEventListener('keydown', this, true);
	        document.removeEventListener('keypress', this, true);
	        document.removeEventListener('mousedown', this, true);
	    };
	    /**
	     * Handle the `'mousemove'` event for the menu.
	     */
	    Menu.prototype._evtMouseMove = function (event) {
	        var x = event.clientX;
	        var y = event.clientY;
	        var i = arrays.findIndex(this._nodes, function (node) { return phosphor_domutil_1.hitTest(node, x, y); });
	        if (i === this.activeIndex) {
	            return;
	        }
	        this.activeIndex = i;
	        this._syncAncestors();
	        this._closeChildMenu();
	        this._cancelPendingOpen();
	        var item = this.activeItem;
	        if (item && item.submenu) {
	            if (item === this._childItem) {
	                this._cancelPendingClose();
	            }
	            else {
	                this._openChildMenu(item, this._nodes[i], true);
	            }
	        }
	    };
	    /**
	     * Handle the `'mouseleave'` event for the menu.
	     */
	    Menu.prototype._evtMouseLeave = function (event) {
	        this._cancelPendingOpen();
	        var x = event.clientX;
	        var y = event.clientY;
	        var child = this._childMenu;
	        if (!child || !phosphor_domutil_1.hitTest(child.node, x, y)) {
	            this.activeIndex = -1;
	            this._closeChildMenu();
	        }
	    };
	    /**
	     * Handle the `'mousedown'` event for the menu.
	     *
	     * This event listener is attached to the document for a popup menu.
	     *
	     * This allows the event to propagate so the element under the mouse
	     * can be focused without requiring a second click.
	     */
	    Menu.prototype._evtMouseDown = function (event) {
	        var menu = this;
	        var hit = false;
	        var x = event.clientX;
	        var y = event.clientY;
	        while (!hit && menu) {
	            hit = phosphor_domutil_1.hitTest(menu.node, x, y);
	            menu = menu._childMenu;
	        }
	        if (!hit)
	            this.close();
	    };
	    /**
	     * Handle the `'mouseup'` event for the menu.
	     */
	    Menu.prototype._evtMouseUp = function (event) {
	        if (event.button !== 0) {
	            return;
	        }
	        event.preventDefault();
	        event.stopPropagation();
	        var node = this._nodes[this.activeIndex];
	        if (node && node.contains(event.target)) {
	            this.triggerActiveItem();
	        }
	    };
	    /**
	     * Handle the `'keydown'` event for the menu.
	     *
	     * This event listener is attached to the document for a popup menu.
	     */
	    Menu.prototype._evtKeyDown = function (event) {
	        event.stopPropagation();
	        var leaf = this.leafMenu;
	        switch (event.keyCode) {
	            case 13:
	                event.preventDefault();
	                leaf.triggerActiveItem();
	                break;
	            case 27:
	                event.preventDefault();
	                leaf.close();
	                break;
	            case 37:
	                event.preventDefault();
	                if (leaf !== this)
	                    leaf.close();
	                break;
	            case 38:
	                event.preventDefault();
	                leaf.activatePreviousItem();
	                break;
	            case 39:
	                event.preventDefault();
	                leaf.openActiveItem();
	                break;
	            case 40:
	                event.preventDefault();
	                leaf.activateNextItem();
	                break;
	        }
	    };
	    /**
	     * Handle the `'keypress'` event for the menu.
	     *
	     * This event listener is attached to the document for a popup menu.
	     */
	    Menu.prototype._evtKeyPress = function (event) {
	        event.preventDefault();
	        event.stopPropagation();
	        var key = String.fromCharCode(event.charCode);
	        this.leafMenu.activateMnemonicItem(key);
	    };
	    /**
	     * Synchronize the active item hierarchy starting with the parent.
	     *
	     * This ensures that the proper child items are activated for the
	     * ancestor menu hierarchy and that any pending open or close tasks
	     * are canceled.
	     */
	    Menu.prototype._syncAncestors = function () {
	        var menu = this._parentMenu;
	        while (menu) {
	            menu._syncChildItem();
	            menu = menu._parentMenu;
	        }
	    };
	    /**
	     * Synchronize the active index with the current child item.
	     */
	    Menu.prototype._syncChildItem = function () {
	        this._cancelPendingOpen();
	        this._cancelPendingClose();
	        this.activeIndex = this.items.indexOf(this._childItem);
	    };
	    /**
	     * Open the menu item's submenu using the node for location.
	     *
	     * If the given item is already open, this is a no-op.
	     *
	     * Any pending open operation will be canceled before opening the
	     * menu or queuing the delayed task to open the menu.
	     */
	    Menu.prototype._openChildMenu = function (item, node, delayed) {
	        var _this = this;
	        if (item === this._childItem) {
	            return;
	        }
	        this._cancelPendingOpen();
	        if (delayed) {
	            this._openTimerId = setTimeout(function () {
	                var menu = item.submenu;
	                _this._openTimerId = 0;
	                _this._childItem = item;
	                _this._childMenu = menu;
	                menu._parentMenu = _this;
	                MenuPrivate.openSubmenu(menu, node);
	            }, OPEN_DELAY);
	        }
	        else {
	            var menu = item.submenu;
	            this._childItem = item;
	            this._childMenu = menu;
	            menu._parentMenu = this;
	            MenuPrivate.openSubmenu(menu, node);
	        }
	    };
	    /**
	     * Close the currently open child menu using a delayed task.
	     *
	     * If a task is pending or if there is no child menu, this is a no-op.
	     */
	    Menu.prototype._closeChildMenu = function () {
	        var _this = this;
	        if (this._closeTimerId || !this._childMenu) {
	            return;
	        }
	        this._closeTimerId = setTimeout(function () {
	            _this._closeTimerId = 0;
	            var childMenu = _this._childMenu;
	            if (childMenu) {
	                _this._childMenu = null;
	                _this._childItem = null;
	                childMenu._parentMenu = null;
	                childMenu.close();
	            }
	        }, CLOSE_DELAY);
	    };
	    /**
	     * Cancel any pending child menu open task.
	     */
	    Menu.prototype._cancelPendingOpen = function () {
	        if (this._openTimerId) {
	            clearTimeout(this._openTimerId);
	            this._openTimerId = 0;
	        }
	    };
	    /**
	     * Cancel any pending child menu close task.
	     */
	    Menu.prototype._cancelPendingClose = function () {
	        if (this._closeTimerId) {
	            clearTimeout(this._closeTimerId);
	            this._closeTimerId = 0;
	        }
	    };
	    return Menu;
	})(base_1.AbstractMenu);
	exports.Menu = Menu;
	/**
	 * The namespace for the menu private data.
	 */
	var MenuPrivate;
	(function (MenuPrivate) {
	    /**
	     * A signal emitted when the menu is closed.
	     */
	    MenuPrivate.closedSignal = new phosphor_signaling_1.Signal();
	    /**
	     * Create the class name for a menu item.
	     */
	    function createItemClass(item) {
	        var name = ITEM_CLASS;
	        if (item.className) {
	            name += ' ' + item.className;
	        }
	        if (item.type === menuitem_1.MenuItem.Separator) {
	            return name + ' ' + SEPARATOR_TYPE_CLASS;
	        }
	        if (item.type === menuitem_1.MenuItem.Submenu) {
	            name += ' ' + SUBMENU_TYPE_CLASS;
	            if (item.disabled || !item.submenu) {
	                name += ' ' + DISABLED_CLASS;
	            }
	            return name;
	        }
	        if (item.type === menuitem_1.MenuItem.Check) {
	            name += ' ' + CHECK_TYPE_CLASS;
	            if (item.checked) {
	                name += ' ' + CHECKED_CLASS;
	            }
	        }
	        if (item.disabled || !item.handler) {
	            name += ' ' + DISABLED_CLASS;
	        }
	        return name;
	    }
	    MenuPrivate.createItemClass = createItemClass;
	    /**
	     * Hide the irrelevant item nodes for a menu bar.
	     */
	    function hideUselessItems(nodes, items) {
	        // Hide the leading separators.
	        var k1;
	        for (k1 = 0; k1 < items.length; ++k1) {
	            if (items[k1].type !== menuitem_1.MenuItem.Separator) {
	                break;
	            }
	            nodes[k1].classList.add(HIDDEN_CLASS);
	        }
	        // Hide the trailing separators.
	        var k2;
	        for (k2 = items.length - 1; k2 >= 0; --k2) {
	            if (items[k2].type !== menuitem_1.MenuItem.Separator) {
	                break;
	            }
	            nodes[k2].classList.add(HIDDEN_CLASS);
	        }
	        // Hide the remaining consecutive separators.
	        var hide = false;
	        while (++k1 < k2) {
	            if (items[k1].type !== menuitem_1.MenuItem.Separator) {
	                hide = false;
	            }
	            else if (hide) {
	                nodes[k1].classList.add(HIDDEN_CLASS);
	            }
	            else {
	                hide = true;
	            }
	        }
	    }
	    MenuPrivate.hideUselessItems = hideUselessItems;
	    /**
	     * Open the menu as a root menu at the target location.
	     */
	    function openRootMenu(menu, x, y, forceX, forceY) {
	        phosphor_messaging_1.sendMessage(menu, phosphor_widget_1.Widget.MsgUpdateRequest);
	        var rect = clientViewportRect();
	        var size = mountAndMeasure(menu, rect.height - (forceY ? y : 0));
	        if (!forceX && (x + size.width > rect.x + rect.width)) {
	            x = rect.x + rect.width - size.width;
	        }
	        if (!forceY && (y + size.height > rect.y + rect.height)) {
	            if (y > rect.y + rect.height) {
	                y = rect.y + rect.height - size.height;
	            }
	            else {
	                y = y - size.height;
	            }
	        }
	        showMenu(menu, x, y);
	    }
	    MenuPrivate.openRootMenu = openRootMenu;
	    /**
	     * Open a the menu as a submenu using the item node for positioning.
	     */
	    function openSubmenu(menu, item) {
	        phosphor_messaging_1.sendMessage(menu, phosphor_widget_1.Widget.MsgUpdateRequest);
	        var rect = clientViewportRect();
	        var size = mountAndMeasure(menu, rect.height);
	        var box = phosphor_domutil_1.boxSizing(menu.node);
	        var itemRect = item.getBoundingClientRect();
	        var x = itemRect.right - SUBMENU_OVERLAP;
	        var y = itemRect.top - box.borderTop - box.paddingTop;
	        if (x + size.width > rect.x + rect.width) {
	            x = itemRect.left + SUBMENU_OVERLAP - size.width;
	        }
	        if (y + size.height > rect.y + rect.height) {
	            y = itemRect.bottom + box.borderBottom + box.paddingBottom - size.height;
	        }
	        showMenu(menu, x, y);
	    }
	    MenuPrivate.openSubmenu = openSubmenu;
	    /**
	     * Get the currently visible viewport rect in page coordinates.
	     */
	    function clientViewportRect() {
	        var elem = document.documentElement;
	        var x = window.pageXOffset;
	        var y = window.pageYOffset;
	        var width = elem.clientWidth;
	        var height = elem.clientHeight;
	        return { x: x, y: y, width: width, height: height };
	    }
	    /**
	     * Mount the menu as hidden and compute its optimal size.
	     *
	     * If the vertical scrollbar becomes visible, the menu will be expanded
	     * by the scrollbar width to prevent clipping the contents of the menu.
	     */
	    function mountAndMeasure(menu, maxHeight) {
	        var node = menu.node;
	        var style = node.style;
	        style.top = '';
	        style.left = '';
	        style.width = '';
	        style.height = '';
	        style.visibility = 'hidden';
	        style.maxHeight = maxHeight + "px";
	        menu.attach(document.body);
	        if (node.scrollHeight > maxHeight) {
	            style.width = (2 * node.offsetWidth - node.clientWidth) + "px";
	        }
	        var rect = node.getBoundingClientRect();
	        return { width: rect.width, height: rect.height };
	    }
	    /**
	     * Show the menu at the specified position.
	     */
	    function showMenu(menu, x, y) {
	        var style = menu.node.style;
	        style.top = Math.max(0, y) + "px";
	        style.left = Math.max(0, x) + "px";
	        style.visibility = '';
	    }
	})(MenuPrivate || (MenuPrivate = {}));


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var phosphor_properties_1 = __webpack_require__(17);
	var phosphor_signaling_1 = __webpack_require__(22);
	/**
	 * An enum of the supported menu item types.
	 */
	(function (MenuItemType) {
	    /**
	     * A normal non-checkable menu item.
	     */
	    MenuItemType[MenuItemType["Normal"] = 0] = "Normal";
	    /**
	     * A checkable menu item.
	     */
	    MenuItemType[MenuItemType["Check"] = 1] = "Check";
	    /**
	     * A separator menu item.
	     */
	    MenuItemType[MenuItemType["Separator"] = 2] = "Separator";
	    /**
	     * A submenu menu item.
	     */
	    MenuItemType[MenuItemType["Submenu"] = 3] = "Submenu";
	})(exports.MenuItemType || (exports.MenuItemType = {}));
	var MenuItemType = exports.MenuItemType;
	/**
	 * An item which can be added to a menu widget.
	 */
	var MenuItem = (function () {
	    /**
	     * Construct a new menu item.
	     *
	     * @param options - The initialization options for the menu item.
	     */
	    function MenuItem(options) {
	        if (options)
	            MenuItemPrivate.initFrom(this, options);
	    }
	    Object.defineProperty(MenuItem.prototype, "changed", {
	        /**
	         * A signal emitted when the menu item state changes.
	         */
	        get: function () {
	            return MenuItemPrivate.changedSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MenuItem.prototype, "type", {
	        /**
	         * Get the type of the menu item.
	         *
	         * #### Notes
	         * The default value is `MenuItemType.Normal`.
	         */
	        get: function () {
	            return MenuItemPrivate.typeProperty.get(this);
	        },
	        /**
	         * Set the type of the menu item.
	         *
	         * #### Notes
	         * Items with submenus are forced to `MenuItemType.Submenu`.
	         */
	        set: function (value) {
	            MenuItemPrivate.typeProperty.set(this, value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MenuItem.prototype, "text", {
	        /**
	         * Get the text for the menu item.
	         *
	         * #### Notes
	         * The default value is an empty string.
	         *
	         * An ampersand (`&`) before a character denotes the item mnemonic.
	         */
	        get: function () {
	            return MenuItemPrivate.textProperty.get(this);
	        },
	        /**
	         * Set the text for the menu item.
	         *
	         * #### Notes
	         * An ampersand (`&`) before a character denotes the item mnemonic.
	         */
	        set: function (value) {
	            MenuItemPrivate.textProperty.set(this, value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MenuItem.prototype, "icon", {
	        /**
	         * Get the icon class for the menu item.
	         *
	         * #### Notes
	         * The default value is an empty string.
	         *
	         * This is the class name(s) added to a menu item icon node.
	         */
	        get: function () {
	            return MenuItemPrivate.iconProperty.get(this);
	        },
	        /**
	         * Set the icon class for the menu item.
	         *
	         * #### Notes
	         * Multiple class names can be separated with whitespace.
	         */
	        set: function (value) {
	            MenuItemPrivate.iconProperty.set(this, value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MenuItem.prototype, "shortcut", {
	        /**
	         * Get the shortcut key for the menu item.
	         *
	         * #### Notes
	         * The default value is an empty string.
	         *
	         * The shortcut string is for decoration only.
	         */
	        get: function () {
	            return MenuItemPrivate.shortcutProperty.get(this);
	        },
	        /**
	         * Set the shortcut key for the menu item.
	         *
	         * #### Notes
	         * The shortcut string is for decoration only.
	         */
	        set: function (value) {
	            MenuItemPrivate.shortcutProperty.set(this, value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MenuItem.prototype, "checked", {
	        /**
	         * Get the checked state for the menu item.
	         *
	         * #### Notes
	         * The default value is `false`.
	         */
	        get: function () {
	            return MenuItemPrivate.checkedProperty.get(this);
	        },
	        /**
	         * Set the checked state for the menu item.
	         *
	         * #### Notes
	         * Only a `Check` type menu item can be checked.
	         */
	        set: function (value) {
	            MenuItemPrivate.checkedProperty.set(this, value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MenuItem.prototype, "disabled", {
	        /**
	         * Get the disabled state for the menu item.
	         *
	         * #### Notes
	         * The default value is `false`.
	         */
	        get: function () {
	            return MenuItemPrivate.disabledProperty.get(this);
	        },
	        /**
	         * Set the disabled state for the menu item.
	         *
	         * #### Notes
	         * The handler of a disabled menu item will not be invoked.
	         */
	        set: function (value) {
	            MenuItemPrivate.disabledProperty.set(this, value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MenuItem.prototype, "className", {
	        /**
	         * Get the extra class name for the menu item.
	         *
	         * #### Notes
	         * The default value is an empty string.
	         *
	         * This is the class name(s) added to a menu item node.
	         */
	        get: function () {
	            return MenuItemPrivate.classNameProperty.get(this);
	        },
	        /**
	         * Set the extra class name for the menu item.
	         *
	         * #### Notes
	         * Multiple class names can be separated with whitespace.
	         */
	        set: function (value) {
	            MenuItemPrivate.classNameProperty.set(this, value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MenuItem.prototype, "handler", {
	        /**
	         * Get the handler function for the menu item.
	         *
	         * #### Notes
	         * The default value is `null`.
	         *
	         * The handler will be invoked when the menu item is clicked.
	         */
	        get: function () {
	            return MenuItemPrivate.handlerProperty.get(this);
	        },
	        /**
	         * Set the handler function for the menu item.
	         *
	         * #### Notes
	         * The handler will be invoked when the menu item is clicked.
	         */
	        set: function (value) {
	            MenuItemPrivate.handlerProperty.set(this, value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MenuItem.prototype, "submenu", {
	        /**
	         * Get the submenu for the menu item.
	         *
	         * #### Notes
	         * The default value is null.
	         *
	         * An item with a submenu will have type `MenuItemType.Submenu`.
	         */
	        get: function () {
	            return MenuItemPrivate.submenuProperty.get(this);
	        },
	        /**
	         * Set the submenu for the menu item.
	         *
	         * #### Notes
	         * The `type` will be automatically set to `MenuItemType.Submenu`.
	         */
	        set: function (value) {
	            MenuItemPrivate.submenuProperty.set(this, value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return MenuItem;
	})();
	exports.MenuItem = MenuItem;
	/**
	 * The namespace for the `MenuItem` class statics.
	 */
	var MenuItem;
	(function (MenuItem) {
	    /**
	     * A convenience alias of the `Normal` [[MenuItemType]].
	     */
	    MenuItem.Normal = MenuItemType.Normal;
	    /**
	     * A convenience alias of the `Check` [[MenuItemType]].
	     */
	    MenuItem.Check = MenuItemType.Check;
	    /**
	     * A convenience alias of the `Separator` [[MenuItemType]].
	     */
	    MenuItem.Separator = MenuItemType.Separator;
	    /**
	     * A convenience alias of the `Submenu` [[MenuItemType]].
	     */
	    MenuItem.Submenu = MenuItemType.Submenu;
	})(MenuItem = exports.MenuItem || (exports.MenuItem = {}));
	/**
	 * The namespace for the menu item private data.
	 */
	var MenuItemPrivate;
	(function (MenuItemPrivate) {
	    /**
	     * A signal emitted when the menu item state changes.
	     */
	    MenuItemPrivate.changedSignal = new phosphor_signaling_1.Signal();
	    /**
	     * The property descriptor for the menu item type.
	     */
	    MenuItemPrivate.typeProperty = new phosphor_properties_1.Property({
	        name: 'type',
	        value: MenuItemType.Normal,
	        coerce: function (owner, value) { return owner.submenu ? MenuItemType.Submenu : value; },
	        changed: function (owner) { MenuItemPrivate.checkedProperty.coerce(owner); },
	        notify: MenuItemPrivate.changedSignal,
	    });
	    /**
	     * The property descriptor for the menu item text.
	     */
	    MenuItemPrivate.textProperty = new phosphor_properties_1.Property({
	        name: 'text',
	        value: '',
	        notify: MenuItemPrivate.changedSignal,
	    });
	    /**
	     * The property descriptor for the menu item icon class.
	     */
	    MenuItemPrivate.iconProperty = new phosphor_properties_1.Property({
	        name: 'icon',
	        value: '',
	        notify: MenuItemPrivate.changedSignal,
	    });
	    /**
	     * The property descriptor for the menu item shortcut.
	     */
	    MenuItemPrivate.shortcutProperty = new phosphor_properties_1.Property({
	        name: 'shortcut',
	        value: '',
	        notify: MenuItemPrivate.changedSignal,
	    });
	    /**
	     * The property descriptor for the menu item checked state.
	     */
	    MenuItemPrivate.checkedProperty = new phosphor_properties_1.Property({
	        name: 'checked',
	        value: false,
	        coerce: function (owner, value) { return owner.type === MenuItemType.Check ? value : false; },
	        notify: MenuItemPrivate.changedSignal,
	    });
	    /**
	     * The property descriptor for the menu item disabled state.
	     */
	    MenuItemPrivate.disabledProperty = new phosphor_properties_1.Property({
	        name: 'disabled',
	        value: false,
	        notify: MenuItemPrivate.changedSignal,
	    });
	    /**
	     * The property descriptor for the menu item class name.
	     */
	    MenuItemPrivate.classNameProperty = new phosphor_properties_1.Property({
	        name: 'className',
	        value: '',
	        notify: MenuItemPrivate.changedSignal,
	    });
	    /**
	     * The property descriptor for the menu item handler.
	     */
	    MenuItemPrivate.handlerProperty = new phosphor_properties_1.Property({
	        name: 'handler',
	        value: null,
	        coerce: function (owner, value) { return value || null; },
	        notify: MenuItemPrivate.changedSignal,
	    });
	    /**
	     * The property descriptor for the menu item submenu.
	     */
	    MenuItemPrivate.submenuProperty = new phosphor_properties_1.Property({
	        name: 'submenu',
	        value: null,
	        coerce: function (owner, value) { return value || null; },
	        changed: function (owner) { MenuItemPrivate.typeProperty.coerce(owner); },
	        notify: MenuItemPrivate.changedSignal,
	    });
	    /**
	     * Initialize a menu item from an options object.
	     */
	    function initFrom(item, options) {
	        if (options.type !== void 0) {
	            item.type = options.type;
	        }
	        if (options.text !== void 0) {
	            item.text = options.text;
	        }
	        if (options.icon !== void 0) {
	            item.icon = options.icon;
	        }
	        if (options.shortcut !== void 0) {
	            item.shortcut = options.shortcut;
	        }
	        if (options.checked !== void 0) {
	            item.checked = options.checked;
	        }
	        if (options.disabled !== void 0) {
	            item.disabled = options.disabled;
	        }
	        if (options.className !== void 0) {
	            item.className = options.className;
	        }
	        if (options.handler !== void 0) {
	            item.handler = options.handler;
	        }
	        if (options.submenu !== void 0) {
	            item.submenu = options.submenu;
	        }
	    }
	    MenuItemPrivate.initFrom = initFrom;
	})(MenuItemPrivate || (MenuItemPrivate = {}));


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2015, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var arrays = __webpack_require__(3);
	var phosphor_domutil_1 = __webpack_require__(7);
	var base_1 = __webpack_require__(182);
	var menuitem_1 = __webpack_require__(184);
	/**
	 * The class name added to a menu bar widget.
	 */
	var MENU_BAR_CLASS = 'p-MenuBar';
	/**
	 * The class name added to a menu bar content node.
	 */
	var CONTENT_CLASS = 'p-MenuBar-content';
	/**
	 * The class name added to an open menu bar menu.
	 */
	var MENU_CLASS = 'p-MenuBar-menu';
	/**
	 * The class name added to a menu bar item node.
	 */
	var ITEM_CLASS = 'p-MenuBar-item';
	/**
	 * The class name added to a menu bar item icon cell.
	 */
	var ICON_CLASS = 'p-MenuBar-itemIcon';
	/**
	 * The class name added to a menu bar item text cell.
	 */
	var TEXT_CLASS = 'p-MenuBar-itemText';
	/**
	 * The class name added to a separator menu bar item.
	 */
	var SEPARATOR_TYPE_CLASS = 'p-type-separator';
	/**
	 * The class name added to an active menu bar and item.
	 */
	var ACTIVE_CLASS = 'p-mod-active';
	/**
	 * The class name added to a disabled menu bar item.
	 */
	var DISABLED_CLASS = 'p-mod-disabled';
	/**
	 * The class name added to a hidden menu bar item.
	 */
	var HIDDEN_CLASS = 'p-mod-hidden';
	/**
	 * A widget which displays menu items as a menu bar.
	 */
	var MenuBar = (function (_super) {
	    __extends(MenuBar, _super);
	    /**
	     * Construct a new menu bar.
	     *
	     * @param items - The menu items to initialize the menu bar.
	     *
	     * #### Notes
	     * Subclasses should not pass menu items to `super`. The subclass
	     * should set its own items after it has been fully initialized.
	     */
	    function MenuBar(items) {
	        _super.call(this);
	        this._active = false;
	        this._childMenu = null;
	        this._nodes = [];
	        this.addClass(MENU_BAR_CLASS);
	        if (items)
	            this.items = items;
	    }
	    /**
	     * Create the DOM node for a menu bar.
	     */
	    MenuBar.createNode = function () {
	        var node = document.createElement('div');
	        var content = document.createElement('ul');
	        content.className = CONTENT_CLASS;
	        node.appendChild(content);
	        return node;
	    };
	    /**
	     * Create a new item node for a menu bar.
	     *
	     * @returns A new DOM node to use as an item in a menu bar.
	     *
	     * #### Notes
	     * This method may be reimplemented to create custom items.
	     */
	    MenuBar.createItemNode = function () {
	        var node = document.createElement('li');
	        var icon = document.createElement('span');
	        var text = document.createElement('span');
	        node.className = ITEM_CLASS;
	        icon.className = ICON_CLASS;
	        text.className = TEXT_CLASS;
	        node.appendChild(icon);
	        node.appendChild(text);
	        return node;
	    };
	    /**
	     * Update an item node to reflect the current state of a menu item.
	     *
	     * @param node - A node created by a call to [[createItemNode]].
	     *
	     * @param item - The menu item to use for the item state.
	     *
	     * #### Notes
	     * This is called automatically when the item should be updated.
	     *
	     * If the [[createItemNode]] method is reimplemented, this method
	     * should also be reimplemented so that the item state is properly
	     * updated.
	     */
	    MenuBar.updateItemNode = function (node, item) {
	        var sep = item.type === menuitem_1.MenuItem.Separator;
	        var icon = node.firstChild;
	        var text = node.lastChild;
	        node.className = MenuBarPrivate.createItemClass(item);
	        icon.className = ICON_CLASS + (item.icon ? ' ' + item.icon : '');
	        text.textContent = sep ? '' : item.text.replace(/&/g, '');
	    };
	    /**
	     * Dispose of the resources held by the menu bar.
	     */
	    MenuBar.prototype.dispose = function () {
	        this._reset();
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(MenuBar.prototype, "childMenu", {
	        /**
	         * Get the child menu of the menu bar.
	         *
	         * #### Notes
	         * This will be `null` if the menu bar does not have an open menu.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this._childMenu;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MenuBar.prototype, "contentNode", {
	        /**
	         * Get the menu bar content node.
	         *
	         * #### Notes
	         * This is the node which holds the menu item nodes.
	         *
	         * Modifying this node directly can lead to undefined behavior.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this.node.getElementsByClassName(CONTENT_CLASS)[0];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Open the submenu of the active item, if possible.
	     *
	     * #### Notes
	     * This is a no-op if the menu bar is not visible, if there is no
	     * active item, or if the active item is disabled or has no submenu.
	     */
	    MenuBar.prototype.openActiveItem = function () {
	        if (!this.isVisible) {
	            return;
	        }
	        var index = this.activeIndex;
	        if (index === -1) {
	            return;
	        }
	        var item = this.items[index];
	        if (item.disabled || !item.submenu) {
	            return;
	        }
	        this._activate();
	        this._closeChildMenu();
	        this._openChildMenu(item.submenu, this._nodes[index]);
	    };
	    /**
	     * Handle the DOM events for the menu bar.
	     *
	     * @param event - The DOM event sent to the menu bar.
	     *
	     * #### Notes
	     * This method implements the DOM `EventListener` interface and is
	     * called in response to events on the menu bar's DOM nodes. It
	     * should not be called directly by user code.
	     */
	    MenuBar.prototype.handleEvent = function (event) {
	        switch (event.type) {
	            case 'mousedown':
	                this._evtMouseDown(event);
	                break;
	            case 'mousemove':
	                this._evtMouseMove(event);
	                break;
	            case 'mouseleave':
	                this._evtMouseLeave(event);
	                break;
	            case 'keydown':
	                this._evtKeyDown(event);
	                break;
	            case 'keypress':
	                this._evtKeyPress(event);
	                break;
	            case 'contextmenu':
	                event.preventDefault();
	                event.stopPropagation();
	                break;
	        }
	    };
	    /**
	     * A method invoked to test whether an item is selectable.
	     *
	     * @param item - The menu item of interest.
	     *
	     * @returns `true` if the item is selectable, `false` otherwise.
	     */
	    MenuBar.prototype.isSelectable = function (item) {
	        return !item.disabled && !!item.submenu;
	    };
	    /**
	     * A method invoked when the menu items change.
	     *
	     * @param oldItems - The old menu items.
	     *
	     * @param newItems - The new menu items.
	     */
	    MenuBar.prototype.onItemsChanged = function (oldItems, newItems) {
	        // Reset the menu bar before updating the items.
	        this._reset();
	        // Disconnect the old item signals.
	        for (var _i = 0; _i < oldItems.length; _i++) {
	            var item = oldItems[_i];
	            if (newItems.indexOf(item) === -1) {
	                item.changed.disconnect(this._onItemChanged, this);
	            }
	        }
	        // Connect the new item signals.
	        for (var _a = 0; _a < newItems.length; _a++) {
	            var item = newItems[_a];
	            if (oldItems.indexOf(item) === -1) {
	                item.changed.connect(this._onItemChanged, this);
	            }
	        }
	        // Fetch common variables.
	        var nodes = this._nodes;
	        var content = this.contentNode;
	        var constructor = this.constructor;
	        // Remove any excess item nodes.
	        while (nodes.length > newItems.length) {
	            var node = nodes.pop();
	            content.removeChild(node);
	        }
	        // Add any missing item nodes.
	        while (nodes.length < newItems.length) {
	            var node = constructor.createItemNode();
	            content.appendChild(node);
	            nodes.push(node);
	        }
	        // Schedule an update of the item nodes.
	        this.update();
	    };
	    /**
	     * A method invoked when the active index changes.
	     *
	     * @param oldIndex - The old active index.
	     *
	     * @param newIndex - The new active index.
	     */
	    MenuBar.prototype.onActiveIndexChanged = function (oldIndex, newIndex) {
	        var oldNode = this._nodes[oldIndex];
	        var newNode = this._nodes[newIndex];
	        if (oldNode)
	            oldNode.classList.remove(ACTIVE_CLASS);
	        if (newNode)
	            newNode.classList.add(ACTIVE_CLASS);
	    };
	    /**
	     * A handler invoked on an `'update-request'` message.
	     */
	    MenuBar.prototype.onUpdateRequest = function (msg) {
	        // Fetch common variables.
	        var items = this.items;
	        var nodes = this._nodes;
	        var constructor = this.constructor;
	        // Update the state of the item nodes.
	        for (var i = 0, n = items.length; i < n; ++i) {
	            constructor.updateItemNode(nodes[i], items[i]);
	        }
	        // Restore the active node class.
	        var active = nodes[this.activeIndex];
	        if (active)
	            active.classList.add(ACTIVE_CLASS);
	        // Hide the redundant and useless menu item nodes.
	        MenuBarPrivate.hideUselessItems(nodes, items);
	    };
	    /**
	     * A message handler invoked on an `'after-attach'` message.
	     */
	    MenuBar.prototype.onAfterAttach = function (msg) {
	        this.node.addEventListener('mousedown', this);
	        this.node.addEventListener('mousemove', this);
	        this.node.addEventListener('mouseleave', this);
	        this.node.addEventListener('contextmenu', this);
	    };
	    /**
	     * A message handler invoked on a `'before-detach'` message.
	     */
	    MenuBar.prototype.onBeforeDetach = function (msg) {
	        this.node.removeEventListener('mousedown', this);
	        this.node.removeEventListener('mousemove', this);
	        this.node.removeEventListener('mouseleave', this);
	        this.node.removeEventListener('contextmenu', this);
	        this._reset();
	    };
	    /**
	     * Handle the `'mousedown'` event for the menu bar.
	     */
	    MenuBar.prototype._evtMouseDown = function (event) {
	        // If the bar is active and the mouse press is on an open menu,
	        // let that menu handle the press. The bar will reset when the
	        // menu emits its `closed` signal.
	        var x = event.clientX;
	        var y = event.clientY;
	        if (this._active && MenuBarPrivate.hitTestMenus(this._childMenu, x, y)) {
	            return;
	        }
	        // Stop the propagation if the click was on the menu bar. This
	        // prevents duplicate notification when the document mousedown
	        // listener is also installed.
	        if (phosphor_domutil_1.hitTest(this.node, x, y)) {
	            event.preventDefault();
	            event.stopPropagation();
	        }
	        // Check if the mouse was pressed on one of the menu items.
	        var i = arrays.findIndex(this._nodes, function (node) { return phosphor_domutil_1.hitTest(node, x, y); });
	        // If the press was not on an item, reset the menu bar.
	        if (i === -1) {
	            this._deactivate();
	            this._closeChildMenu();
	            this.activeIndex = -1;
	            return;
	        }
	        // If the press was not the left mouse button, do nothing further.
	        if (event.button !== 0) {
	            return;
	        }
	        // If the bar is active, deactivate it and close the child menu.
	        if (this._active) {
	            this._deactivate();
	            this._closeChildMenu();
	            this.activeIndex = i;
	            return;
	        }
	        // Otherwise, activate the bar and open the item if possible.
	        this._activate();
	        this.activeIndex = i;
	        this.openActiveItem();
	    };
	    /**
	     * Handle the `'mousemove'` event for the menu bar.
	     */
	    MenuBar.prototype._evtMouseMove = function (event) {
	        // Check if the mouse is over one of the menu items.
	        var x = event.clientX;
	        var y = event.clientY;
	        var i = arrays.findIndex(this._nodes, function (node) { return phosphor_domutil_1.hitTest(node, x, y); });
	        // Bail early if the active index will not change.
	        if (i === this.activeIndex) {
	            return;
	        }
	        // Bail early if the bar is active and the mouse is not over an
	        // item. This allows the leading and trailing menus to be kept
	        // open when the mouse is over the empty part of the menu bar.
	        if (i === -1 && this._active) {
	            return;
	        }
	        // Update the active index to the hovered item.
	        this.activeIndex = i;
	        // If the bar is not active, there's nothing more to do.
	        if (!this._active) {
	            return;
	        }
	        // Otherwise, close the current child menu and open the new one.
	        this._closeChildMenu();
	        this.openActiveItem();
	    };
	    /**
	     * Handle the `'mouseleave'` event for the menu bar.
	     */
	    MenuBar.prototype._evtMouseLeave = function (event) {
	        if (!this._active)
	            this.activeIndex = -1;
	    };
	    /**
	     * Handle the `'keydown'` event for the menu bar.
	     */
	    MenuBar.prototype._evtKeyDown = function (event) {
	        event.stopPropagation();
	        var menu = this._childMenu;
	        var leaf = menu && menu.leafMenu;
	        switch (event.keyCode) {
	            case 13:
	                event.preventDefault();
	                if (leaf)
	                    leaf.triggerActiveItem();
	                break;
	            case 27:
	                event.preventDefault();
	                if (leaf)
	                    leaf.close();
	                break;
	            case 37:
	                event.preventDefault();
	                if (leaf && leaf !== menu) {
	                    leaf.close();
	                }
	                else {
	                    this._closeChildMenu();
	                    this.activatePreviousItem();
	                    this.openActiveItem();
	                }
	                break;
	            case 38:
	                event.preventDefault();
	                if (leaf)
	                    leaf.activatePreviousItem();
	                break;
	            case 39:
	                event.preventDefault();
	                if (leaf && leaf.activeItem && leaf.activeItem.submenu) {
	                    leaf.openActiveItem();
	                }
	                else {
	                    this._closeChildMenu();
	                    this.activateNextItem();
	                    this.openActiveItem();
	                }
	                break;
	            case 40:
	                event.preventDefault();
	                if (leaf)
	                    leaf.activateNextItem();
	                break;
	        }
	    };
	    /**
	     * Handle the `'keypress'` event for the menu bar.
	     */
	    MenuBar.prototype._evtKeyPress = function (event) {
	        event.preventDefault();
	        event.stopPropagation();
	        var menu = this._childMenu;
	        var leaf = menu && menu.leafMenu;
	        var key = String.fromCharCode(event.charCode);
	        (leaf || this).activateMnemonicItem(key);
	    };
	    /**
	     * Activate the menu bar and install the document listeners.
	     */
	    MenuBar.prototype._activate = function () {
	        if (this._active) {
	            return;
	        }
	        this._active = true;
	        this.addClass(ACTIVE_CLASS);
	        document.addEventListener('mousedown', this, true);
	        document.addEventListener('keydown', this, true);
	        document.addEventListener('keypress', this, true);
	    };
	    /**
	     * Deactivate the menu bar and remove the document listeners.
	     */
	    MenuBar.prototype._deactivate = function () {
	        if (!this._active) {
	            return;
	        }
	        this._active = false;
	        this.removeClass(ACTIVE_CLASS);
	        document.removeEventListener('mousedown', this, true);
	        document.removeEventListener('keydown', this, true);
	        document.removeEventListener('keypress', this, true);
	    };
	    /**
	     * Open the child menu using the given item node for location.
	     */
	    MenuBar.prototype._openChildMenu = function (menu, node) {
	        var rect = node.getBoundingClientRect();
	        this._childMenu = menu;
	        menu.addClass(MENU_CLASS);
	        menu.open(rect.left, rect.bottom, false, true);
	        menu.closed.connect(this._onMenuClosed, this);
	    };
	    /**
	     * Close the current child menu, if one exists.
	     */
	    MenuBar.prototype._closeChildMenu = function () {
	        var menu = this._childMenu;
	        if (!menu) {
	            return;
	        }
	        this._childMenu = null;
	        menu.closed.disconnect(this._onMenuClosed, this);
	        menu.removeClass(MENU_CLASS);
	        menu.close();
	    };
	    /**
	     * Reset the menu bar to its default state.
	     */
	    MenuBar.prototype._reset = function () {
	        this._deactivate();
	        this._closeChildMenu();
	        this.activeIndex = -1;
	    };
	    /**
	     * Handle the `changed` signal from a menu item.
	     */
	    MenuBar.prototype._onItemChanged = function () {
	        this._reset();
	        this.update();
	    };
	    /**
	     * Handle the `closed` signal from the child menu.
	     */
	    MenuBar.prototype._onMenuClosed = function (sender) {
	        sender.closed.disconnect(this._onMenuClosed, this);
	        sender.removeClass(MENU_CLASS);
	        this._deactivate();
	        this._childMenu = null;
	        this.activeIndex = -1;
	    };
	    return MenuBar;
	})(base_1.AbstractMenu);
	exports.MenuBar = MenuBar;
	/**
	 * The namespace for the menu bar private data.
	 */
	var MenuBarPrivate;
	(function (MenuBarPrivate) {
	    /**
	     * Create the class name for a menu bar item.
	     */
	    function createItemClass(item) {
	        var name = ITEM_CLASS;
	        if (item.className) {
	            name += ' ' + item.className;
	        }
	        if (item.type === menuitem_1.MenuItem.Separator) {
	            return name + ' ' + SEPARATOR_TYPE_CLASS;
	        }
	        if (item.disabled || (item.type === menuitem_1.MenuItem.Submenu && !item.submenu)) {
	            return name + ' ' + DISABLED_CLASS;
	        }
	        return name;
	    }
	    MenuBarPrivate.createItemClass = createItemClass;
	    /**
	     * Hit test the chain of menus for the given client position.
	     */
	    function hitTestMenus(menu, x, y) {
	        while (menu) {
	            if (phosphor_domutil_1.hitTest(menu.node, x, y)) {
	                return true;
	            }
	            menu = menu.childMenu;
	        }
	        return false;
	    }
	    MenuBarPrivate.hitTestMenus = hitTestMenus;
	    /**
	     * Hide the irrelevant item nodes for a menu bar.
	     */
	    function hideUselessItems(nodes, items) {
	        // Hide the leading non-submenu items.
	        var k1;
	        for (k1 = 0; k1 < items.length; ++k1) {
	            if (items[k1].type === menuitem_1.MenuItem.Submenu) {
	                break;
	            }
	            nodes[k1].classList.add(HIDDEN_CLASS);
	        }
	        // Hide the trailing separator items.
	        var k2;
	        for (k2 = items.length - 1; k2 >= 0; --k2) {
	            if (items[k2].type === menuitem_1.MenuItem.Submenu) {
	                break;
	            }
	            nodes[k2].classList.add(HIDDEN_CLASS);
	        }
	        // Hide the consecutive separators and other non-submenu items.
	        var hide = false;
	        while (++k1 < k2) {
	            if (items[k1].type === menuitem_1.MenuItem.Submenu) {
	                hide = false;
	            }
	            else if (items[k1].type !== menuitem_1.MenuItem.Separator) {
	                nodes[k1].classList.add(HIDDEN_CLASS);
	            }
	            else if (hide) {
	                nodes[k1].classList.add(HIDDEN_CLASS);
	            }
	            else {
	                hide = true;
	            }
	        }
	    }
	    MenuBarPrivate.hideUselessItems = hideUselessItems;
	})(MenuBarPrivate || (MenuBarPrivate = {}));


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(187);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(12)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js!./index.css", function() {
				var newContent = require("!!./../../css-loader/index.js!./index.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(11)();
	// imports


	// module
	exports.push([module.id, "/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2015, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\n.p-MenuBar-content {\r\n  margin: 0;\r\n  padding: 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  list-style-type: none;\r\n}\r\n\r\n\r\n.p-MenuBar-item {\r\n  box-sizing: border-box;\r\n}\r\n\r\n\r\n.p-MenuBar-item.p-mod-hidden {\r\n  display: none;\r\n}\r\n\r\n\r\n.p-Menu {\r\n  position: absolute;\r\n  white-space: nowrap;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n}\r\n\r\n\r\n.p-Menu-content {\r\n  margin: 0;\r\n  padding: 0;\r\n  display: table;\r\n  list-style-type: none;\r\n}\r\n\r\n\r\n.p-Menu-item {\r\n  display: table-row;\r\n}\r\n\r\n\r\n.p-Menu-item.p-mod-hidden {\r\n  display: none;\r\n}\r\n\r\n\r\n.p-Menu-itemIcon,\r\n.p-Menu-itemSubmenuIcon {\r\n  display: table-cell;\r\n  text-align: center;\r\n}\r\n\r\n\r\n.p-Menu-itemText {\r\n  display: table-cell;\r\n  text-align: left;\r\n}\r\n\r\n\r\n.p-Menu-itemShortcut {\r\n  display: table-cell;\r\n  text-align: right;\r\n}\r\n", ""]);

	// exports


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/*-----------------------------------------------------------------------------
	| Copyright (c) 2014-2016, PhosphorJS Contributors
	|
	| Distributed under the terms of the BSD 3-Clause License.
	|
	| The full license is in the file LICENSE, distributed with this software.
	|----------------------------------------------------------------------------*/
	var arrays = __webpack_require__(3);
	var phosphor_domutil_1 = __webpack_require__(7);
	var phosphor_properties_1 = __webpack_require__(17);
	var phosphor_signaling_1 = __webpack_require__(22);
	var phosphor_widget_1 = __webpack_require__(20);
	__webpack_require__(189);
	/**
	 * The class name added to SideBar instances.
	 */
	var SIDE_BAR_CLASS = 'p-SideBar';
	/**
	 * The class name added to the side bar content node.
	 */
	var CONTENT_CLASS = 'p-SideBar-content';
	/**
	 * The class name added to side bar button nodes.
	 */
	var BUTTON_CLASS = 'p-SideBar-button';
	/**
	 * The class name added to a side bar button text node.
	 */
	var TEXT_CLASS = 'p-SideBar-button-text';
	/**
	 * The class name added to a side bar button icon node.
	 */
	var ICON_CLASS = 'p-SideBar-button-icon';
	/**
	 * The class name added to the current side bar button.
	 */
	var CURRENT_CLASS = 'p-mod-current';
	/**
	 * A widget which displays titles as a row of exclusive buttons.
	 */
	var SideBar = (function (_super) {
	    __extends(SideBar, _super);
	    /**
	     * Construct a new side bar.
	     */
	    function SideBar() {
	        _super.call(this);
	        this._dirty = false;
	        this._titles = [];
	        this.addClass(SIDE_BAR_CLASS);
	    }
	    /**
	     * Create the DOM node for a side bar.
	     */
	    SideBar.createNode = function () {
	        var node = document.createElement('div');
	        var content = document.createElement('ul');
	        content.className = CONTENT_CLASS;
	        node.appendChild(content);
	        return node;
	    };
	    /**
	     * Dispose of the resources held by the widget.
	     */
	    SideBar.prototype.dispose = function () {
	        this._titles.length = 0;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(SideBar.prototype, "currentChanged", {
	        /**
	         * A signal emitted when the current side bar title is changed.
	         */
	        get: function () {
	            return SideBarPrivate.currentChangedSignal.bind(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SideBar.prototype, "currentTitle", {
	        /**
	         * Get the currently selected side bar title.
	         */
	        get: function () {
	            return SideBarPrivate.currentTitleProperty.get(this);
	        },
	        /**
	         * Set the currently selected side bar title.
	         */
	        set: function (value) {
	            SideBarPrivate.currentTitleProperty.set(this, value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SideBar.prototype, "contentNode", {
	        /**
	         * Get the content node which holds the side bar buttons.
	         *
	         * #### Notes
	         * Modifying this node can lead to undefined behavior.
	         *
	         * This is a read-only property.
	         */
	        get: function () {
	            return this.node.getElementsByClassName(CONTENT_CLASS)[0];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Get the number of title objects in the side bar.
	     *
	     * @returns The number of title objects in the side bar.
	     */
	    SideBar.prototype.titleCount = function () {
	        return this._titles.length;
	    };
	    /**
	     * Get the title object at the specified index.
	     *
	     * @param index - The index of the title object of interest.
	     *
	     * @returns The title at the specified index, or `undefined`.
	     */
	    SideBar.prototype.titleAt = function (index) {
	        return this._titles[index];
	    };
	    /**
	     * Get the index of the specified title object.
	     *
	     * @param title - The title object of interest.
	     *
	     * @returns The index of the specified title, or `-1`.
	     */
	    SideBar.prototype.titleIndex = function (title) {
	        return this._titles.indexOf(title);
	    };
	    /**
	     * Add a title object to the end of the side bar.
	     *
	     * @param title - The title object to add to the side bar.
	     *
	     * #### Notes
	     * If the title is already added to the side bar, it will be moved.
	     */
	    SideBar.prototype.addTitle = function (title) {
	        this.insertTitle(this.titleCount(), title);
	    };
	    /**
	     * Insert a title object at the specified index.
	     *
	     * @param index - The index at which to insert the title.
	     *
	     * @param title - The title object to insert into to the side bar.
	     *
	     * #### Notes
	     * If the title is already added to the side bar, it will be moved.
	     */
	    SideBar.prototype.insertTitle = function (index, title) {
	        var n = this.titleCount();
	        var i = this.titleIndex(title);
	        var j = Math.max(0, Math.min(index | 0, n));
	        if (i !== -1) {
	            if (j === n)
	                j--;
	            if (i === j)
	                return;
	            arrays.move(this._titles, i, j);
	        }
	        else {
	            arrays.insert(this._titles, j, title);
	            title.changed.connect(this._onTitleChanged, this);
	        }
	        this._dirty = true;
	        this.update();
	    };
	    /**
	     * Remove a title object from the side bar.
	     *
	     * @param title - The title object to remove from the side bar.
	     *
	     * #### Notes
	     * If the title is not in the side bar, this is a no-op.
	     */
	    SideBar.prototype.removeTitle = function (title) {
	        var i = arrays.remove(this._titles, title);
	        if (i === -1) {
	            return;
	        }
	        title.changed.disconnect(this._onTitleChanged, this);
	        if (this.currentTitle === title)
	            this.currentTitle = null;
	        this._dirty = true;
	        this.update();
	    };
	    /**
	     * Handle the DOM events for the side bar.
	     *
	     * @param event - The DOM event sent to the side bar.
	     *
	     * #### Notes
	     * This method implements the DOM `EventListener` interface and is
	     * called in response to events on the side bar's DOM node. It should
	     * not be called directly by user code.
	     */
	    SideBar.prototype.handleEvent = function (event) {
	        if (event.type === 'mousedown') {
	            this._evtMouseDown(event);
	        }
	    };
	    /**
	     * A message handler invoked on an `'after-attach'` message.
	     */
	    SideBar.prototype.onAfterAttach = function (msg) {
	        this.node.addEventListener('mousedown', this);
	    };
	    /**
	     * A message handler invoked on a `'before-detach'` message.
	     */
	    SideBar.prototype.onBeforeDetach = function (msg) {
	        this.node.removeEventListener('mousedown', this);
	    };
	    /**
	     * A message handler invoked on an `'update-request'` message.
	     */
	    SideBar.prototype.onUpdateRequest = function (msg) {
	        if (this._dirty) {
	            this._dirty = false;
	            SideBarPrivate.updateButtons(this);
	        }
	        else {
	            SideBarPrivate.updateCurrent(this);
	        }
	    };
	    /**
	     * Handle the `'mousedown'` event for the side bar.
	     */
	    SideBar.prototype._evtMouseDown = function (event) {
	        // Do nothing if it's not a left mouse press.
	        if (event.button !== 0) {
	            return;
	        }
	        // Do nothing if the press is not on a button.
	        var i = SideBarPrivate.hitTestButtons(this, event.clientX, event.clientY);
	        if (i < 0) {
	            return;
	        }
	        // Pressing on a button stops the event propagation.
	        event.preventDefault();
	        event.stopPropagation();
	        // Update the current title.
	        var title = this._titles[i];
	        if (title !== this.currentTitle) {
	            this.currentTitle = title;
	        }
	        else {
	            this.currentTitle = null;
	        }
	    };
	    /**
	     * Handle the `changed` signal of a title object.
	     */
	    SideBar.prototype._onTitleChanged = function () {
	        this._dirty = true;
	        this.update();
	    };
	    return SideBar;
	}(phosphor_widget_1.Widget));
	exports.SideBar = SideBar;
	/**
	 * The namespace for the `SideBar` class private data.
	 */
	var SideBarPrivate;
	(function (SideBarPrivate) {
	    /**
	     * A signal emitted when the current title is changed.
	     */
	    SideBarPrivate.currentChangedSignal = new phosphor_signaling_1.Signal();
	    /**
	     * The property descriptor for the current side bar title.
	     */
	    SideBarPrivate.currentTitleProperty = new phosphor_properties_1.Property({
	        name: 'currentTitle',
	        value: null,
	        coerce: coerceCurrentTitle,
	        changed: onCurrentTitleChanged,
	        notify: SideBarPrivate.currentChangedSignal,
	    });
	    /**
	     * Update the side bar buttons to match the current titles.
	     *
	     * This is a full update which also updates the currrent state.
	     */
	    function updateButtons(owner) {
	        var count = owner.titleCount();
	        var content = owner.contentNode;
	        var children = content.children;
	        while (children.length > count) {
	            content.removeChild(content.lastChild);
	        }
	        while (children.length < count) {
	            content.appendChild(createButtonNode());
	        }
	        for (var i = 0; i < count; ++i) {
	            var node = children[i];
	            updateButtonNode(node, owner.titleAt(i));
	        }
	        updateCurrent(owner);
	    }
	    SideBarPrivate.updateButtons = updateButtons;
	    /**
	     * Update the current state of the buttons to match the side bar.
	     *
	     * This is a partial update which only updates the current button
	     * class. It assumes the button count is the same as the title count.
	     */
	    function updateCurrent(owner) {
	        var count = owner.titleCount();
	        var content = owner.contentNode;
	        var children = content.children;
	        var current = owner.currentTitle;
	        for (var i = 0; i < count; ++i) {
	            var node = children[i];
	            if (owner.titleAt(i) === current) {
	                node.classList.add(CURRENT_CLASS);
	            }
	            else {
	                node.classList.remove(CURRENT_CLASS);
	            }
	        }
	    }
	    SideBarPrivate.updateCurrent = updateCurrent;
	    /**
	     * Get the index of the button node at a client position, or `-1`.
	     */
	    function hitTestButtons(owner, x, y) {
	        var nodes = owner.contentNode.children;
	        for (var i = 0, n = nodes.length; i < n; ++i) {
	            if (phosphor_domutil_1.hitTest(nodes[i], x, y))
	                return i;
	        }
	        return -1;
	    }
	    SideBarPrivate.hitTestButtons = hitTestButtons;
	    /**
	     * The coerce handler for the `currentTitle` property.
	     */
	    function coerceCurrentTitle(owner, value) {
	        return (value && owner.titleIndex(value) !== -1) ? value : null;
	    }
	    /**
	     * The change handler for the `currentTitle` property.
	     */
	    function onCurrentTitleChanged(owner) {
	        owner.update();
	    }
	    /**
	     * Create an uninitialized DOM node for a side bar button.
	     */
	    function createButtonNode() {
	        var node = document.createElement('li');
	        var icon = document.createElement('span');
	        var text = document.createElement('span');
	        text.className = TEXT_CLASS;
	        node.appendChild(icon);
	        node.appendChild(text);
	        return node;
	    }
	    /**
	     * Update a button node to reflect the state of a title.
	     */
	    function updateButtonNode(node, title) {
	        var icon = node.firstChild;
	        var text = node.lastChild;
	        if (title.className) {
	            node.className = BUTTON_CLASS + ' ' + title.className;
	        }
	        else {
	            node.className = BUTTON_CLASS;
	        }
	        if (title.icon) {
	            icon.className = ICON_CLASS + ' ' + title.icon;
	        }
	        else {
	            icon.className = ICON_CLASS;
	        }
	        text.textContent = title.text;
	    }
	})(SideBarPrivate || (SideBarPrivate = {}));


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(190);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(12)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./sidebar.css", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./sidebar.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(11)();
	// imports


	// module
	exports.push([module.id, "/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2016, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n.p-SideBar-content {\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: stretch;\n  list-style-type: none;\n}\n", ""]);

	// exports


/***/ }
/******/ ]);