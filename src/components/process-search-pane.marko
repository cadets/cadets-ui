class {
  onMount() {
    this.db = this.input.database
    this.input.registerSearcher(this)
  }

  /*
   * One of our search inputs has changed: start a new node search
   */
  search() {
    var nodelist = this.getComponent('nodelist')
    nodelist.state.nodes = []

    var pid = parseInt(this.getEl('pid').value)
    if (isNaN(pid))
    {
      pid = -1
    }

    var filters = {
      cmdline: this.getEl('cmdline').value,
      pid: pid,
      uuid: this.getEl('uuid').value,
    }

    var callback = function (node) {
      nodelist.state.nodes.push(node)
      nodelist.setStateDirty('nodes')
    }

    var query = this.input.database.processQuery(filters)
    query.execute(this.searchStarted, callback, this.searchComplete)
  }

  /*
   * The user has selected a node for inspection
   */
  inspect(node) {
    this.input.inspect(node)
  }

  searchComplete() {
  }

  searchStarted(count) {
  }
}

div.container.scrollable-y
  form.form
    div.row
      label for:scoped="cmdline" -- Command line
      input.form-control id:scoped="cmdline" key="cmdline" name="cmdline" type="text" on-input('search')

    div.row
      label for:scoped="pid" -- PID
      input.form-control id:scoped="pid" key="pid" name="pid" type="number" on-input('search')

    div.row
      label for:scoped="uuid" -- UUID
      input.form-control id:scoped="uuid" key="uuid" name="uuid" type="text" on-input('search')

  node-list key="nodelist" on-inspect('inspect')
