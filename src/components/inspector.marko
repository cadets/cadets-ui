/*
*
* Copyright 2018 Jonathan Anderson
* Copyright 2019 Nadia Shalaby
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

class {
  onMount() {
    this.graph = this.getComponent('graph')
    this.input.registerInspector(this)
  }
  inspect(node, db) {
    var counter = this.getEl('counter')
    var graph = this.graph
    var limit = 50
    var self = this
    counter.innerHTML = ''
    graph.clear()
    graph.addNode(node)
    var neighbourCount = function(count) {
      limit = (count < limit) ? count : limit
      counter.innerHTML = limit + '/' + count
    }
    var nextNeighbour = function(neighbour, edge) {
      if (neighbour) {
        graph.addNode(neighbour)
        graph.addEdge(edge)
      }
    }
    db.neighbours(node).execute(
      neighbourCount,
      nextNeighbour,
      self.layout.bind(self),    // run layout on query completion
      limit
    )
  }
  inspector(node) {
    this.input.inspect(node)
  }
  layout(animate = false) {
    this.graph.layout('dagre', animate)
  }
}

div.topright key="counter"
graph key="graph" on-inspect('inspector')


